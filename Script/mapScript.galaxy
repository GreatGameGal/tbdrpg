include "TriggerLibs/NativeLib"
// \[([a-zA-Z0-9_\(\) \-\+]+)\]
const int lib1_ge_ColorScheme_Blue = 0;
const int lib1_ge_ColorScheme_Green = 1;
const int lib1_ge_ColorScheme_Red = 2;
const int lib1_ge_PointsPerTier__5 = 0;
const int lib1_ge_PointsPerTier__10 = 1;
const int lib1_ge_TalentPrerequisite_None = 0;
const int lib1_ge_TalentPrerequisite_Left = 1;
const int lib1_ge_TalentPrerequisite_Up = 2;
const int lib1_ge_TalentPrerequisite_Right = 3;
const int lib1_ge_TalentType_Passive = 0;
const int lib1_ge_TalentType_Ability = 1;
const int lib1_ge_SaveLoad_Save = 0;
const int lib1_ge_SaveLoad_Load = 1;
const int adminCount = 9;
bool statueSpawned = true;
bool firstTimeInRelamyCave = true;
string[adminCount] gv_adminHandles;
unit[5] gv_manaQuest0Armor;
unit gv_robus;
unit gv_illisus;
unit gv_shadowSeryn;
int gv_waypointDialog;
int gv_wastelandDialogButton;
int gv_relamyDialogButton;
int gv_verbotenDialogButton;
int gv_cretonDialogButton;
int gv_ballanDialogButton;
int gv_closeWaypointDialogButton;
int gv_timeofDayDialog;
int gv_timeofDayDialogLabel;
text gv_timeofDayDialogLabelText;
int gv_rebornDialogRebornPointLabel;
// My manual Definitions
struct arenaData {
    int wins;
    int losses;
};
struct dialogObj {
    // Standard dialogs
    int state;
    int textBox;
    int reward;
    int recommendedLevel;
    int accept;
    int decline;
    string textVal;
    // Reborn dialog
    int[11] pointLabel;
    int[11] pointButton;
    // Talent Dialog
    int button;
};
struct rebornData {
    int count;
    int maxHP;
    int maxMP;
    int defense;
    int movementSpeed;
    int attackSpeed;
    int dodge;
    int miss;
    int goldDrop;
    int itemDrop;
    int regen;
    int points;
    dialogObj dialog;
    dialogObj buttonDialog;
};
struct questObj {
    int state;
    int objective;
    int kills;
    int progress;
    int textTag;
    int ping;
};
struct questData {
    bool talking;
    dialogObj questDialog;
    dialogObj talkDialog;
    dialogObj rewardDialog;
    
    questObj[10] storyQuests;
    questObj[6] manaQuests;
    questObj[2] baseQuests;
    questObj[1] detsefniQuests;
    questObj[1] sergeantListerQuests;
    questObj[1] greedQuests;
    questObj[1] madelineQuests;
    questObj[1] malinQuests;
    questObj[1] ampQuests;
    questObj[1] altossQuests;
    questObj[1] oleumQuests;
    questObj[1] serynQuests;
};
struct statData {
    int level;
    int agility;
    int dexterity;
    int intelligence;
    int strength;
    int vitality;
    fixed attributePoints;
    arenaData arena;
    rebornData reborn;
    dialogObj attributeDialog;
};
struct skillData {
    int frostSpike;
    int blizzard;
    int subzero;
    int frozenArmour;
    int fireball;
    int fireClaw;
    int flameEgg;
    int inferno;
    int nova;
    bool fireSkin;
    bool allSeeingEye;
    bool warningOcculus;
    bool revengeFacet;
    bool rebithCrystal;
    bool returnJewel;
    bool protectionStone;
    bool quickeningRing;
};
struct talentData {
    bool locked;
    bool adding;
    dialogObj talentDialog;
};
struct bankData {
    bank stashBank;
    bank rebornBank;
    bank currencyBank;
    bank talentBank;
    bank dragonBank;
    bool accessing;
};
struct verificationData {
    bool hrc;
    bool hpc;
    bool dragon;
};
struct playerData {
    questData quests;
    statData stats;
    skillData skills;
    bankData banks;
    talentData talents;
    verificationData verification;
    unit dragon;
    bool beatGame;
    bool seenIntro;
    dialogObj locationDialog;
};
playerData[5] gv_players;
//--------------------------------------------------------------------------------------------------
// Library: Talent Library
//--------------------------------------------------------------------------------------------------
// Variable Declarations
int[17] lib1_gv_buttonIndex;
int[101][17] lib1_gv_talentTreeButton;
int[4][5][9][17] lib1_gv_talentTreeButtonIndexTreeColumnRow;
int[101][17] lib1_gv_talentButtonGlow;
int[101][17] lib1_gv_talentButtonLabelBackground;
int[101][17] lib1_gv_talentButtonLabel;
text[101][17] lib1_gv_tooltipDescriptionRaw;
int[4][17] lib1_gv_pointsSpentinTree;
int[101][17] lib1_gv_currentRank;
int[101][17] lib1_gv_maxRank;
string[101][17] lib1_gv_talentUpgrade;
int[101][17] lib1_gv_tree;
int[101][17] lib1_gv_column;
int[101][17] lib1_gv_row;
int[101][17] lib1_gv_talentType;
text[101][17] lib1_gv_talentName;
fixed[3][101][17] lib1_gv_multiplier;
string[101][17] lib1_gv_abilityLink;
string[101][17] lib1_gv_buttonLink;
bool[101][17] lib1_gv_prerequisiteComplete;
int[101][17] lib1_gv_hasPrerequisite;
int[101][17] lib1_gv_isPrerequisite;
int[17] lib1_gv_mainTalentDialog;
int[4][17] lib1_gv_subTalentDialog;
string[17] lib1_gv_colorScheme;
int[17] lib1_gv_ofTrees;
int[17] lib1_gv_ofColumns;
int[17] lib1_gv_ofRows;
int[17] lib1_gv_pointsPerTier;
text[4][17] lib1_gv_talentTreeNames;
int[17] lib1_gv_spentTalentPoints;
int[17] lib1_gv_availableTalentPoints;
int[17] lib1_gv_availablePointsLabel;
int[17] lib1_gv_availablePointsDialog;
int[17] lib1_gv_closeTalentTreeButton;
string[11][17] lib1_gv_talentBuildString;
unit[5] lib1_gv_heros;
int[5] lib1_gv_strengthoftheDragonCount;
int[5] lib1_gv_mindoftheDragonCount;
int[5] lib1_gv_powerOverwhelmingCount;
int[5] lib1_gv_rageCount;
int[5] lib1_gv_vampiricTendenciesCount;
int[5] lib1_gv_zealCount;
int[5] lib1_gv_criticalCrepitusCount;
int[5] lib1_gv_darkDissultoCount;
int[5] lib1_gv_spikedScalesCount;
int[5] lib1_gv_retaliationCount;
int[5] lib1_gv_headshotCount;
int[5] lib1_gv_stickyShotCount;
int[5] lib1_gv_dualWieldCount;
int[5] lib1_gv_greedisGoodCount;
int[5] lib1_gv_quickLearnerCount;
int[5] lib1_gv_absorbManaCount;
int[5] lib1_gv_realmSwitchCount;
// Function Declarations
bool lib1_gf_IsTalentButton (int lp_player, int lp_dialogItem);
bool lib1_gf_TalentTreeisOpen (int lp_player);
void lib1_gf_UpdateAbilityButtonTooltip (int lp_player, int lp_button, int lp_buttonIndex, int lp_requiredPoints, int lp_tree, string lp_abilityLink, string lp_buttonLink);
void lib1_gf_UpdatePassiveButtonTooltip (int lp_player, int lp_button, int lp_buttonIndex, int lp_requiredPoints, int lp_tree, text lp_name, text lp_descriptionRaw, int lp_currentRank, fixed lp_multiplier1, fixed lp_multiplier2);
void lib1_gf_UnlockTalentButton (int lp_player, int lp_tree, int lp_column, int lp_row);
void lib1_gf_UnlockTalentTier (int lp_player, int lp_tree, int lp_tier);
void lib1_gf_CreateTalentTree (int lp_player, text lp_title, int lp_colorScheme, int lp_trees, string lp_treeNames, int lp_columns, int lp_rows, int lp_pointsPerTier);
void lib1_gf_CreateTalentButton (int lp_player, int lp_tree, int lp_column, int lp_row, int lp_talentPrerequisite, string lp_upgradeLink, int lp_talentType, text lp_namePassive, int lp_maxRankPassive, string lp_imagePassive, text lp_tooltipTextPassive, fixed lp_multiplier1Passive, fixed lp_multiplier2Passive, string lp_abilityLinkAbility, string lp_buttonLinkAbility);
void lib1_gf_ShowHideTalentTree (int lp_player);
void lib1_gf_GrantTalentPoints (int lp_talentPoints, int lp_player);
void lib1_gf_DestroyTalentTree (int lp_player);
void lib1_gf_SaveLoadTalentBuild (int lp_saveLoad, int lp_buildIndex, string lp_bankName, int lp_player);
void lib1_gf_ResetTalentBuild (int lp_player, int lp_resetto);
void lib1_gf_SetHeros (int lp_player, unit lp_hero);
// Trigger Declarations
trigger lib1_gt_PickTalent;
trigger lib1_gt_CloseTalent;
trigger lib1_gt_LoadTalentBank;
// Library Initialization
void lib1_InitVariables ();
//--------------------------------------------------------------------------------------------------
// Library: Talent Library
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}
// Variable Initialization
bool lib1_InitVariables_completed = false;
void lib1_InitVariables () {
    int init_i;
    int init_j;
    if (lib1_InitVariables_completed) {
        return;
    }
    lib1_InitVariables_completed = true;
    for (init_i = 0; init_i <= 100; init_i += 1) {
        for (init_j = 0; init_j <= 16; init_j += 1) {
            lib1_gv_talentTreeButton[init_i][init_j] = c_invalidDialogControlId;
            lib1_gv_talentButtonGlow[init_i][init_j] = c_invalidDialogControlId;
            lib1_gv_talentButtonLabelBackground[init_i][init_j] = c_invalidDialogControlId;
            lib1_gv_talentButtonLabel[init_i][init_j] = c_invalidDialogControlId;
            lib1_gv_maxRank[init_i][init_j] = 1;
            lib1_gv_tree[init_i][init_j] = 1;
            lib1_gv_column[init_i][init_j] = 1;
            lib1_gv_row[init_i][init_j] = 1;
            lib1_gv_talentType[init_i][init_j] = lib1_ge_TalentType_Passive;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 16; init_j += 1) {
            lib1_gv_talentBuildString[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lib1_gv_mainTalentDialog[init_i] = c_invalidDialogId;
        lib1_gv_colorScheme[init_i] = "";
        lib1_gv_pointsPerTier[init_i] = lib1_ge_PointsPerTier__5;
        lib1_gv_availablePointsLabel[init_i] = c_invalidDialogControlId;
        lib1_gv_availablePointsDialog[init_i] = c_invalidDialogId;
        lib1_gv_closeTalentTreeButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 16; init_j += 1) {
            lib1_gv_subTalentDialog[init_i][init_j] = c_invalidDialogId;
        }
    }
}
// Presets
// Functions
bool lib1_gf_IsTalentButton (int lp_player, int lp_dialogItem) {
    int i;

    for ( i = 1; i<=100; i += 1 ) {
        if ((lp_dialogItem == lib1_gv_talentTreeButton[i][lp_player])) {
            return true;
            break;
        }
    }
    return false;
}

bool lib1_gf_TalentTreeisOpen (int lp_player) {
    return DialogIsVisible(lib1_gv_mainTalentDialog[lp_player], lp_player);
}

void lib1_gf_UpdateAbilityButtonTooltip (int lp_player, int lp_button, int lp_buttonIndex, int lp_requiredPoints, int lp_tree, string lp_abilityLink, string lp_buttonLink) {
    // Variable Declarations
    text lv_tooltipName;
    text lv_tooltipRequirement;
    text lv_tooltipRequirementSpacer;
    int lv_prerequisiteIndex;
    text lv_pointsText;
    text lv_tooltipPrerequisite;
    text lv_tooltipDescription;
    bool lv_hasCost;
    text lv_tooltipCost;
    text lv_tooltipCostMinerals;
    text lv_tooltipCostGas;
    text lv_tooltipCostLife;
    text lv_tooltipCostEnergy;
    text lv_tooltipCostCooldown;
    // Variable Initialization
    // Implementation
    lv_tooltipName = (StringExternal("Param/Value/lib_1_09FBC8F4") + StringExternal(("Button/Name/" + (lp_buttonLink))) + StringExternal("Param/Value/lib_1_A533532A"));
    if ((lp_requiredPoints > 0)) {
        if ((lib1_gv_hasPrerequisite[lp_buttonIndex][lp_player] != 0) && !lib1_gv_prerequisiteComplete[lp_buttonIndex][lp_player]) {
            lv_tooltipRequirementSpacer = StringExternal("Param/Value/lib_1_3D5D601C");
        }
        else {
            lv_tooltipRequirementSpacer = StringExternal("Param/Value/lib_1_A045BCC2");
        }
        lv_tooltipRequirement = (StringExternal("Param/Value/lib_1_31AEA4D1") + IntToText(lp_requiredPoints) + StringExternal("Param/Value/lib_1_ADD45111") + lib1_gv_talentTreeNames[lp_tree][lp_player] + StringExternal("Param/Value/lib_1_DBF60C3F") + lv_tooltipRequirementSpacer);
    }
    else {
        lv_tooltipRequirement = StringToText("");
    }

    if ((lib1_gv_hasPrerequisite[lp_buttonIndex][lp_player] != 0) && !lib1_gv_prerequisiteComplete[lp_buttonIndex][lp_player]) {
        lv_prerequisiteIndex = lib1_gv_hasPrerequisite[lp_buttonIndex][lp_player];
        if ((lib1_gv_maxRank[lv_prerequisiteIndex][lp_player] == 1)) {
            lv_pointsText = StringExternal("Param/Value/lib_1_02BBAD52");
        }
        else {
            lv_pointsText = StringExternal("Param/Value/lib_1_E5D41D76");
        }
        lv_tooltipPrerequisite = (StringExternal("Param/Value/lib_1_95225FD9") + IntToText(lib1_gv_maxRank[lv_prerequisiteIndex][lp_player]) + StringExternal("Param/Value/lib_1_0F2A744B") + lv_pointsText + StringExternal("Param/Value/lib_1_C566D5F1") + lib1_gv_talentName[lv_prerequisiteIndex][lp_player] + StringExternal("Param/Value/lib_1_3680DFC1"));
    }
    else {
        lv_tooltipPrerequisite = StringToText("");
    }

    if ((StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Resource[Vespene]", lp_player)) > 0)) {
        lv_tooltipCostGas = (StringExternal("Param/Value/lib_1_6E372436") + StringToText(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Resource[Vespene]", lp_player)) + StringExternal("Param/Value/lib_1_2F05AF2C"));
        lv_hasCost = true;
    }

    if ((StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Vital[Life]", lp_player)) > 0)) {
        lv_tooltipCostLife = (StringExternal("Param/Value/lib_1_64005C61") + StringToText(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Vital[Life]", lp_player)) + StringExternal("Param/Value/lib_1_96EE75DB"));
        lv_hasCost = true;
    }

    if ((StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Vital[Energy]", lp_player)) > 0)) {
        lv_tooltipCostEnergy = (StringExternal("Param/Value/lib_1_36A22419") + StringToText(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Vital[Energy]", lp_player)) + StringExternal("Param/Value/lib_1_BDAA03F9"));
        lv_hasCost = true;
    }

    if ((StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Cooldown.TimeUse", lp_player)) > 0)) {
        lv_tooltipCostCooldown = (StringExternal("Param/Value/lib_1_28B4F42A") + StringToText(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Cooldown.TimeUse", lp_player)) + StringExternal("Param/Value/lib_1_DB16B10F"));
        lv_hasCost = true;
    }

    if (lv_hasCost) {
        lv_tooltipCost = (StringExternal("Param/Value/lib_1_9F0F1568") + lv_tooltipCostMinerals + lv_tooltipCostGas + lv_tooltipCostLife + lv_tooltipCostEnergy + lv_tooltipCostCooldown + StringExternal("Param/Value/lib_1_9C21FB6F"));
    }
    else {
        lv_tooltipCost = StringToText("");
    }
    lv_tooltipDescription = (StringExternal("Param/Value/lib_1_04F5E258") + lv_tooltipCost + StringExternal(("Button/Tooltip/" + (lp_buttonLink))) + StringExternal("Param/Value/lib_1_3E98BEAA"));
    libNtve_gf_SetDialogItemTooltip(lp_button, (lv_tooltipName + lv_tooltipRequirement + lv_tooltipPrerequisite + lv_tooltipDescription), PlayerGroupAll());
}
void lib1_gf_UpdatePassiveButtonTooltip (int lp_player, int lp_button, int lp_buttonIndex, int lp_requiredPoints, int lp_tree, text lp_name, text lp_descriptionRaw, int lp_currentRank, fixed lp_multiplier1, fixed lp_multiplier2) {
    // Variable Declarations
    text lv_tooltipName;
    text lv_tooltipRequirement;
    text lv_tooltipRequirementSpacer;
    int lv_prerequisiteIndex;
    text lv_pointsText;
    text lv_tooltipPrerequisite;
    text lv_tooltipDescription;
    int lv_rankMultiplier;
    // Variable Initialization
    // Implementation
    lv_tooltipName = (StringExternal("Param/Value/lib_1_20CC4B21") + lp_name + StringExternal("Param/Value/lib_1_269556FE"));
    if ((lp_requiredPoints > 0)) {
        if ((lib1_gv_hasPrerequisite[lp_buttonIndex][lp_player] != 0) && !lib1_gv_prerequisiteComplete[lp_buttonIndex][lp_player]) {
            lv_tooltipRequirementSpacer = StringExternal("Param/Value/lib_1_A01F23F2");
        }
        else {
            lv_tooltipRequirementSpacer = StringExternal("Param/Value/lib_1_9A874965");
        }
        lv_tooltipRequirement = (StringExternal("Param/Value/lib_1_7CB7BFBB") + IntToText(lp_requiredPoints) + StringExternal("Param/Value/lib_1_61D82CE4") + lib1_gv_talentTreeNames[lp_tree][lp_player] + StringExternal("Param/Value/lib_1_6BED7575") + lv_tooltipRequirementSpacer);
    }
    else {
        lv_tooltipRequirement = StringToText("");
    }
    if ((lib1_gv_hasPrerequisite[lp_buttonIndex][lp_player] != 0) && !lib1_gv_prerequisiteComplete[lp_buttonIndex][lp_player]) {
        lv_prerequisiteIndex = lib1_gv_hasPrerequisite[lp_buttonIndex][lp_player];
        if ((lib1_gv_maxRank[lv_prerequisiteIndex][lp_player] == 1)) {
            lv_pointsText = StringExternal("Param/Value/lib_1_B9826448");
        }
        else {
            lv_pointsText = StringExternal("Param/Value/lib_1_E3F15863");
        }
        lv_tooltipPrerequisite = (StringExternal("Param/Value/lib_1_B9887A7A") + IntToText(5) + StringExternal("Param/Value/lib_1_650F531F") + lv_pointsText + StringExternal("Param/Value/lib_1_583A97DF") + lib1_gv_talentName[lv_prerequisiteIndex][lp_player] + StringExternal("Param/Value/lib_1_4A56FEC3"));
    }
    else {
        lv_tooltipPrerequisite = StringToText("");
    }
    if ((lp_currentRank > 0)) {
        lv_rankMultiplier = lp_currentRank;
    }
    else {
        lv_rankMultiplier = 1;
    }
    lv_tooltipDescription = TextReplaceWord(lp_descriptionRaw, StringExternal("Param/Value/lib_1_6D51BF3D"), FixedToText((lp_multiplier1 * IntToFixed(lv_rankMultiplier)), 1), c_stringReplaceAll, c_stringNoCase);
    lv_tooltipDescription = TextReplaceWord(lv_tooltipDescription, StringExternal("Param/Value/lib_1_2F659930"), FixedToText((lp_multiplier2 * IntToFixed(lv_rankMultiplier)), 1), c_stringReplaceAll, c_stringNoCase);
    lv_tooltipDescription = (StringExternal("Param/Value/lib_1_3AE2BD72") + lv_tooltipDescription + StringExternal("Param/Value/lib_1_1ECE9A68"));
    libNtve_gf_SetDialogItemTooltip(lp_button, (lv_tooltipName + lv_tooltipRequirement + lv_tooltipPrerequisite + lv_tooltipDescription), PlayerGroupAll());
}
void lib1_gf_UnlockTalentButton (int lp_player, int lp_tree, int lp_column, int lp_row) {
    int autoC6E66CC3_val;
    // Variable Declarations
    int lv_buttonIndex;
    // Variable Initialization
    // Implementation
    lv_buttonIndex = lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][lp_column][lp_row][lp_player];
    if ((lib1_gv_talentTreeButton[lv_buttonIndex][lp_player] != c_invalidDialogControlId) && (lib1_gv_currentRank[lv_buttonIndex][lp_player] < lib1_gv_maxRank[lv_buttonIndex][lp_player])) {
        if (((lib1_gv_hasPrerequisite[lv_buttonIndex][lp_player] == 0) || lib1_gv_prerequisiteComplete[lv_buttonIndex][lp_player] )) {
            DialogControlSetEnabled(lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], PlayerGroupAll(), true);
            DialogControlSetVisible(lib1_gv_talentButtonGlow[lv_buttonIndex][lp_player], PlayerGroupAll(), true);
            DialogControlSetVisible(lib1_gv_talentButtonLabelBackground[lv_buttonIndex][lp_player], PlayerGroupAll(), true);
            DialogControlSetVisible(lib1_gv_talentButtonLabel[lv_buttonIndex][lp_player], PlayerGroupAll(), true);
        }
        autoC6E66CC3_val = lib1_gv_talentType[lv_buttonIndex][lp_player];
        if (autoC6E66CC3_val == lib1_ge_TalentType_Ability) {
            lib1_gf_UpdateAbilityButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], lv_buttonIndex, 0, lp_tree, lib1_gv_abilityLink[lv_buttonIndex][lp_player], lib1_gv_buttonLink[lv_buttonIndex][lp_player]);
        }
        else if (autoC6E66CC3_val == lib1_ge_TalentType_Passive) {
            lib1_gf_UpdatePassiveButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], lv_buttonIndex, 0, lp_tree, lib1_gv_talentName[lv_buttonIndex][lp_player], lib1_gv_tooltipDescriptionRaw[lv_buttonIndex][lp_player], lib1_gv_currentRank[lv_buttonIndex][lp_player], lib1_gv_multiplier[1][lv_buttonIndex][lp_player], lib1_gv_multiplier[2][lv_buttonIndex][lp_player]);
        }
        else {
        }
    }
}
void lib1_gf_UnlockTalentTier (int lp_player, int lp_tree, int lp_tier) {
    int i;

    for ( i = 1; i <= lib1_gv_ofColumns[lp_player] ; i += 1 ) {
        lib1_gf_UnlockTalentButton(lp_player, lp_tree, i, lp_tier);
    }
}
void lib1_gf_CreateTalentTree (int lp_player, text lp_title, int lp_colorScheme, int lp_trees, string lp_treeNames, int lp_columns, int lp_rows, int lp_pointsPerTier) {
    int auto3120DF8A_val;
    int auto899F399B_val;
    // Variable Declarations
    int lv_mainDialogHeight;
    int lv_mainDialogWidth;
    string lv_mainDialogIMG;
    string lv_titleFrameIMG;
    string lv_dividerFrameIMG;
    string lv_buttonNormalIMG;
    string lv_buttonHoverIMG;
    string lv_treeNameString;
    text lv_treeName1;
    text lv_treeName2;
    text lv_treeName3;
    // Variable Initialization
    lv_treeNameString = "";
    // Implementation
    lib1_gv_ofTrees[lp_player] = lp_trees;
    lib1_gv_ofColumns[lp_player] = lp_columns;
    lib1_gv_ofRows[lp_player] = lp_rows;
    lib1_gv_buttonIndex[lp_player] = 0;
    lib1_gv_pointsPerTier[lp_player] = lp_pointsPerTier;
    auto3120DF8A_val = lp_colorScheme;
    if (auto3120DF8A_val == lib1_ge_ColorScheme_Blue) {
        lib1_gv_colorScheme[lp_player] = "Blue";
        lv_mainDialogIMG = "Assets\\Textures\\ui_glue_dropdownmenuframe_protoss.dds";
        lv_titleFrameIMG = "Assets\\Textures\\ui_help_frame_tips_new_protoss.dds";
        lv_dividerFrameIMG = "Assets\\Textures\\ui_tooltip_frame_protoss.dds";
        lv_buttonNormalIMG = "Assets\\Textures\\ui_ingame_resourcesharing_button_x_normalpressed_protoss.dds";
        lv_buttonHoverIMG = "Assets\\Textures\\ui_ingame_resourcesharing_button_x_normaloverpressedover_protoss.dds";
    }
    else if (auto3120DF8A_val == lib1_ge_ColorScheme_Green) {
        lib1_gv_colorScheme[lp_player] = "Green";
        lv_mainDialogIMG = "Assets\\Textures\\ui_glue_dropdownmenuframe_terran.dds";
        lv_titleFrameIMG = "Assets\\Textures\\ui_help_frame_tips_new_terran.dds";
        lv_dividerFrameIMG = "Assets\\Textures\\ui_tooltip_frame_terran.dds";
        lv_buttonNormalIMG = "Assets\\Textures\\ui_ingame_resourcesharing_button_x_normalpressed.dds";
        lv_buttonHoverIMG = "Assets\\Textures\\ui_ingame_resourcesharing_button_x_normaloverpressedover.dds";
    }
    else if (auto3120DF8A_val == lib1_ge_ColorScheme_Red) {
        lib1_gv_colorScheme[lp_player] = "Red";
        lv_mainDialogIMG = "Assets\\Textures\\ui_glue_dropdownmenuframe_zerg.dds";
        lv_titleFrameIMG = "Assets\\Textures\\ui_help_frame_tips_new_zerg.dds";
        lv_dividerFrameIMG = "Assets\\Textures\\ui_tooltip_frame_zerg.dds";
        lv_buttonNormalIMG = "Assets\\Textures\\ui_button_generic_normalpressed_zerg.dds";
        lv_buttonHoverIMG = "Assets\\Textures\\ui_button_generic_normaloverpressedover_zerg.dds";
        lv_buttonNormalIMG = "Assets\\Textures\\ui_ingame_resourcesharing_button_x_normalpressed_zerg.dds";
        lv_buttonHoverIMG = "Assets\\Textures\\ui_ingame_resourcesharing_button_x_normaloverpressedover_zerg.dds";
    }
    else {
    }
    lv_mainDialogHeight = (335 + (100 * (lp_rows - 1)));
    lv_mainDialogWidth = (450 * lp_trees);
    DialogCreate(lv_mainDialogWidth, lv_mainDialogHeight, c_anchorCenter, 0, 0, true);
    lib1_gv_mainTalentDialog[lp_player] = DialogLastCreated();
    DialogSetImageVisible(lib1_gv_mainTalentDialog[lp_player], false);
    libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 0, 0, c_anchorCenter, 0, 0, StringToText(""), lv_mainDialogIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 325, 100, c_anchorTop, 0, 12, StringToText(""), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(lib1_gv_mainTalentDialog[lp_player], 325, 100, c_anchorTop, 0, 15, lp_title, Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpMenuDialogTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(lib1_gv_mainTalentDialog[lp_player], 35, 35, c_anchorTopRight, 22, 5, StringToText(""), StringToText(""), "");
    lib1_gv_closeTalentTreeButton[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(lib1_gv_closeTalentTreeButton[lp_player], lv_buttonNormalIMG, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(lib1_gv_closeTalentTreeButton[lp_player], c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(lib1_gv_closeTalentTreeButton[lp_player], lv_buttonHoverIMG, PlayerGroupAll());
    DialogCreate(110, 110, c_anchorCenter, 0, 0, true);
    lib1_gv_availablePointsDialog[lp_player] = DialogLastCreated();
    DialogSetPositionRelative(lib1_gv_availablePointsDialog[lp_player], c_anchorBottomRight, lib1_gv_mainTalentDialog[lp_player], c_anchorTopLeft, 70, 60);
    DialogSetImageVisible(lib1_gv_availablePointsDialog[lp_player], false);
    libNtve_gf_CreateDialogItemImage(lib1_gv_availablePointsDialog[lp_player], 1, 1, c_anchorCenter, 0, 0, StringToText(""), lv_dividerFrameIMG, c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(lib1_gv_availablePointsDialog[lp_player], 100, 100, c_anchorTop, 0, -12, IntToText(lib1_gv_availableTalentPoints[lp_player]), Color(100,100,100), false, 2.0);
    lib1_gv_availablePointsLabel[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(lib1_gv_availablePointsLabel[lp_player], "HelpMenuDialogTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(lib1_gv_availablePointsDialog[lp_player], 100, 100, c_anchorTop, 0, 55, StringExternal("Param/Value/lib_1_35BCD81C"), Color(100,100,100), false, 2.0);
    lv_treeNameString = lp_treeNames;
    lv_treeNameString = StringReplaceWord(lv_treeNameString, " ", "_", c_stringReplaceAll, c_stringNoCase);
    lv_treeNameString = StringReplaceWord(lv_treeNameString, ",", " ", c_stringReplaceAll, c_stringNoCase);
    lv_treeName1 = StringToText(StringReplaceWord(StringWord(lv_treeNameString, 1), "_", " ", c_stringReplaceAll, c_stringNoCase));
    lv_treeName2 = StringToText(StringReplaceWord(StringWord(lv_treeNameString, 2), "_", " ", c_stringReplaceAll, c_stringNoCase));
    lv_treeName3 = StringToText(StringReplaceWord(StringWord(lv_treeNameString, 3), "_", " ", c_stringReplaceAll, c_stringNoCase));
    lib1_gv_talentTreeNames[1][lp_player] = lv_treeName1;
    lib1_gv_talentTreeNames[2][lp_player] = lv_treeName2;
    lib1_gv_talentTreeNames[3][lp_player] = lv_treeName3;
    auto899F399B_val = lp_trees;
    if (auto899F399B_val == 1) {
        libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 0, 110, StringToText(""), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 0, 113, lv_treeName1, Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpMenuDialogTitle", PlayerGroupAll());
        DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
        lib1_gv_subTalentDialog[1][lp_player] = DialogLastCreated();
        DialogSetPositionRelative(lib1_gv_subTalentDialog[1][lp_player], c_anchorTop, lib1_gv_mainTalentDialog[lp_player], c_anchorTop, 0, 200);
        DialogSetImageVisible(lib1_gv_subTalentDialog[1][lp_player], false);
    }
    else if (auto899F399B_val == 2) {
        libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, -225, 110, StringToText(""), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, -225, 113, lv_treeName1, Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpMenuDialogTitle", PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 225, 110, StringToText(""), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 225, 113, lv_treeName2, Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpMenuDialogTitle", PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 17, (100 * lp_rows), c_anchorTop, 0, 200, StringToText(""), lv_dividerFrameIMG, c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
        lib1_gv_subTalentDialog[1][lp_player] = DialogLastCreated();
        DialogSetPositionRelative(lib1_gv_subTalentDialog[1][lp_player], c_anchorTop, lib1_gv_mainTalentDialog[lp_player], c_anchorTop, -225, 200);
        DialogSetImageVisible(lib1_gv_subTalentDialog[1][lp_player], false);
        DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
        lib1_gv_subTalentDialog[2][lp_player] = DialogLastCreated();
        DialogSetPositionRelative(lib1_gv_subTalentDialog[2][lp_player], c_anchorTop, lib1_gv_mainTalentDialog[lp_player], c_anchorTop, 225, 200);
        DialogSetImageVisible(lib1_gv_subTalentDialog[2][lp_player], false);
    }
    else if (auto899F399B_val == 3) {
        libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, -450, 110, StringToText(""), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, -450, 113, lv_treeName1, Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpMenuDialogTitle", PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 0, 110, StringToText(""), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 0, 113, lv_treeName2, Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpMenuDialogTitle", PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 450, 110, StringToText(""), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 450, 113, lv_treeName3, Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpMenuDialogTitle", PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 17, (100 * lp_rows), c_anchorTop, -225, 200, StringToText(""), lv_dividerFrameIMG, c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 17, (100 * lp_rows), c_anchorTop, 225, 200, StringToText(""), lv_dividerFrameIMG, c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
        lib1_gv_subTalentDialog[1][lp_player] = DialogLastCreated();
        DialogSetPositionRelative(lib1_gv_subTalentDialog[1][lp_player], c_anchorTop, lib1_gv_mainTalentDialog[lp_player], c_anchorTop, -450, 200);
        DialogSetImageVisible(lib1_gv_subTalentDialog[1][lp_player], false);
        DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
        lib1_gv_subTalentDialog[2][lp_player] = DialogLastCreated();
        DialogSetPositionRelative(lib1_gv_subTalentDialog[2][lp_player], c_anchorTop, lib1_gv_mainTalentDialog[lp_player], c_anchorTop, 0, 200);
        DialogSetImageVisible(lib1_gv_subTalentDialog[2][lp_player], false);
        DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
        lib1_gv_subTalentDialog[3][lp_player] = DialogLastCreated();
        DialogSetPositionRelative(lib1_gv_subTalentDialog[3][lp_player], c_anchorTop, lib1_gv_mainTalentDialog[lp_player], c_anchorTop, 450, 200);
        DialogSetImageVisible(lib1_gv_subTalentDialog[3][lp_player], false);
    }
}
void lib1_gf_CreateTalentButton (int lp_player, int lp_tree, int lp_column, int lp_row, int lp_talentPrerequisite, string lp_upgradeLink, int lp_talentType, text lp_namePassive, int lp_maxRankPassive, string lp_imagePassive, text lp_tooltipTextPassive, fixed lp_multiplier1Passive, fixed lp_multiplier2Passive, string lp_abilityLinkAbility, string lp_buttonLinkAbility) {
    string auto03D269F5_val;
    int autoD4433183_val;
    int auto4FDECC6C_val;
    int auto6D8F3512_val;
    int auto9A455375_val;
    // Variable Declarations
    string lv_buttonGlowIMG;
    string lv_buttonNormalIMG;
    string lv_buttonHoverIMG;
    string lv_buttonLabelIMG;
    int lv_xOffset;
    int lv_yOffset;
    string lv_talentIMG;
    string lv_talentIMGString;
    int lv_requiredPoints;
    // Variable Initialization
    lv_talentIMGString = "";
    // Implementation
    lib1_gv_buttonIndex[lp_player] += 1;
    lib1_gv_tree[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_tree;
    lib1_gv_column[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_column;
    lib1_gv_row[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_row;
    lib1_gv_talentUpgrade[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_upgradeLink;
    lib1_gv_talentType[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_talentType;
    auto03D269F5_val = lib1_gv_colorScheme[lp_player];
    if (auto03D269F5_val == "Blue") {
        lv_buttonGlowIMG = "Assets\\Textures\\ui_research_button_protoss_researched.dds";
        lv_buttonNormalIMG = "Assets\\Textures\\ui_button_generic_normalpressed_protoss.dds";
        lv_buttonHoverIMG = "Assets\\Textures\\ui_button_generic_normaloverpressedover_protoss.dds";
        lv_buttonLabelIMG = "Assets\\Textures\\ui_tooltip_frame_protoss.dds";
    }
    else if (auto03D269F5_val == "Green") {
        lv_buttonGlowIMG = "Assets\\Textures\\ui_ingame_tipsbutton_glow.dds";
        lv_buttonNormalIMG = "Assets\\Textures\\ui_button_generic_normalpressed_terran.dds";
        lv_buttonHoverIMG = "Assets\\Textures\\ui_button_generic_normaloverpressedover_terran.dds";
        lv_buttonLabelIMG = "Assets\\Textures\\ui_tooltip_frame_terran.dds";
    }
    else if (auto03D269F5_val == "Red") {
        lv_buttonGlowIMG = "Assets\\Textures\\ui_research_button_zerg_researched.dds";
        lv_buttonNormalIMG = "Assets\\Textures\\ui_button_generic_normalpressed_zerg.dds";
        lv_buttonHoverIMG = "Assets\\Textures\\ui_button_generic_normaloverpressedover_zerg.dds";
        lv_buttonLabelIMG = "Assets\\Textures\\ui_tooltip_frame_zerg.dds";
    }
    else {
    }
    if ((lib1_gv_talentTreeButton[lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][lp_column][lp_row][lp_player]][lp_player] != c_invalidDialogControlId)) {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal("Param/Value/lib_1_F0C5D28C"), SoundLink("Alert_TerranBuildError", -1));
    }
    autoD4433183_val = lib1_gv_ofColumns[lp_player];
    if (autoD4433183_val == 1) {
        lv_xOffset = 0;
    }
    else if (autoD4433183_val == 2) {
        lv_xOffset = -50;
    }
    else if (autoD4433183_val == 3) {
        lv_xOffset = -100;
    }
    else if (autoD4433183_val == 4) {
        lv_xOffset = -150;
    }
    else {
    }
    lv_xOffset = (lv_xOffset + (100 * (lp_column - 1)));
    lv_yOffset = (25 + (100 * (lp_row - 1)));
    libNtve_gf_CreateDialogItemButton(lib1_gv_subTalentDialog[lp_tree][lp_player], 75, 75, c_anchorTop, lv_xOffset, lv_yOffset, StringToText(""), StringToText(""), "");
    lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player] = DialogControlLastCreated();
    lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][lp_column][lp_row][lp_player] = lib1_gv_buttonIndex[lp_player];
    libNtve_gf_SetDialogItemImage(lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], lv_buttonNormalIMG, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_triggerImageTypeBorder, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], lv_buttonHoverIMG, PlayerGroupAll());
    auto4FDECC6C_val = lp_talentPrerequisite;
    if (auto4FDECC6C_val == lib1_ge_TalentPrerequisite_Up) {
        lib1_gv_hasPrerequisite[lib1_gv_buttonIndex[lp_player]][lp_player] = lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][lp_column][(lp_row - 1)][lp_player];
        lib1_gv_isPrerequisite[lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][lp_column][(lp_row - 1)][lp_player]][lp_player] = lib1_gv_buttonIndex[lp_player];
        lib1_gv_prerequisiteComplete[lib1_gv_buttonIndex[lp_player]][lp_player] = false;
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 20, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_tail.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -20, -55);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_head2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -20, -43);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 20, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_tail.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 0, -55);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_head2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 0, -43);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 20, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_tail.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 20, -55);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_head2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 20, -43);
    }
    else if (auto4FDECC6C_val == lib1_ge_TalentPrerequisite_Left) {
        lib1_gv_hasPrerequisite[lib1_gv_buttonIndex[lp_player]][lp_player] = lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][(lp_column - 1)][lp_row][lp_player];
        lib1_gv_isPrerequisite[lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][(lp_column - 1)][lp_row][lp_player]][lp_player] = lib1_gv_buttonIndex[lp_player];
        lib1_gv_prerequisiteComplete[lib1_gv_buttonIndex[lp_player]][lp_player] = false;
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 20, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_tail90cw.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -54, -20);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_head2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 270, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -41, -20);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 20, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_tail90cw.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -54, 0);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_head2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 270, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -41, 0);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 20, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_tail90cw.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -54, 20);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_head2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 270, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -41, 20);
    }
    else if (auto4FDECC6C_val == lib1_ge_TalentPrerequisite_Right) {
        lib1_gv_hasPrerequisite[lib1_gv_buttonIndex[lp_player]][lp_player] = lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][(lp_column + 1)][lp_row][lp_player];
        lib1_gv_isPrerequisite[lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][(lp_column + 1)][lp_row][lp_player]][lp_player] = lib1_gv_buttonIndex[lp_player];
        lib1_gv_prerequisiteComplete[lib1_gv_buttonIndex[lp_player]][lp_player] = false;
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 20, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_tail90cw.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 54, -20);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_head2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 90, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 41, -20);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 20, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_tail90cw.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 54, 0);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_head2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 90, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 41, 0);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 20, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_tail90cw.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 54, 20);
        libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_arrow_head2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 90, PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 41, 20);
    }
    else {
    }
    auto6D8F3512_val = lib1_gv_pointsPerTier[lp_player];
    if (auto6D8F3512_val == lib1_ge_PointsPerTier__5) {
        lv_requiredPoints = (5 * (lp_row - 1));
    }
    else if (auto6D8F3512_val == lib1_ge_PointsPerTier__10) {
        lv_requiredPoints = (10 * (lp_row - 1));
    }
    else {
    }
    auto9A455375_val = lp_talentType;
    if (auto9A455375_val == lib1_ge_TalentType_Ability) {
        lib1_gf_UpdateAbilityButtonTooltip(lp_player, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], lib1_gv_buttonIndex[lp_player], lv_requiredPoints, lp_tree, lp_abilityLinkAbility, lp_buttonLinkAbility);
        lv_talentIMGString = CatalogFieldValueGet(c_gameCatalogButton, (lp_buttonLinkAbility), "Icon", lp_player);
        lv_talentIMG = lv_talentIMGString;
        lib1_gv_maxRank[lib1_gv_buttonIndex[lp_player]][lp_player] = 1;
        lib1_gv_talentName[lib1_gv_buttonIndex[lp_player]][lp_player] = StringExternal(("Button/Name/" + (lp_buttonLinkAbility)));
        lib1_gv_abilityLink[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_abilityLinkAbility;
        lib1_gv_buttonLink[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_buttonLinkAbility;
    }
    else if (auto9A455375_val == lib1_ge_TalentType_Passive) {
        lib1_gf_UpdatePassiveButtonTooltip(lp_player, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], lib1_gv_buttonIndex[lp_player], lv_requiredPoints, lp_tree, lp_namePassive, lp_tooltipTextPassive, 0, lp_multiplier1Passive, lp_multiplier2Passive);
        lv_talentIMG = lp_imagePassive;
        lib1_gv_maxRank[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_maxRankPassive;
        lib1_gv_talentName[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_namePassive;
        lib1_gv_tooltipDescriptionRaw[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_tooltipTextPassive;
        lib1_gv_multiplier[1][lib1_gv_buttonIndex[lp_player]][lp_player] = lp_multiplier1Passive;
        lib1_gv_multiplier[2][lib1_gv_buttonIndex[lp_player]][lp_player] = lp_multiplier2Passive;
    }
    else {
    }
    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 67, 67, c_anchorCenter, 0, 0, StringToText(""), lv_talentIMG, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 0, 0);
    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 130, 130, c_anchorCenter, 0, 0, StringToText(""), lv_buttonGlowIMG, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gv_talentButtonGlow[lib1_gv_buttonIndex[lp_player]][lp_player] = DialogControlLastCreated();
    DialogControlSetPositionRelative(lib1_gv_talentButtonGlow[lib1_gv_buttonIndex[lp_player]][lp_player], PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 0, -2);
    libNtve_gf_SetDialogItemRenderPriority(lib1_gv_talentButtonGlow[lib1_gv_buttonIndex[lp_player]][lp_player], 500, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 60, 35, c_anchorCenter, 0, 0, StringToText(""), lv_buttonLabelIMG, c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    lib1_gv_talentButtonLabelBackground[lib1_gv_buttonIndex[lp_player]][lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lib1_gv_talentButtonLabelBackground[lib1_gv_buttonIndex[lp_player]][lp_player], 520, PlayerGroupAll());
    DialogControlSetPositionRelative(lib1_gv_talentButtonLabelBackground[lib1_gv_buttonIndex[lp_player]][lp_player], PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 25, 32);
    libNtve_gf_CreateDialogItemLabel(lib1_gv_subTalentDialog[lp_tree][lp_player], 55, 20, c_anchorCenter, 0, 0, (StringExternal("Param/Value/lib_1_6FE57CC2") + StringExternal("Param/Value/lib_1_D30A5C78") + IntToText(lib1_gv_maxRank[lib1_gv_buttonIndex[lp_player]][lp_player])), Color(100,100,100), false, 2.0);
    lib1_gv_talentButtonLabel[lib1_gv_buttonIndex[lp_player]][lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lib1_gv_talentButtonLabel[lib1_gv_buttonIndex[lp_player]][lp_player], 521, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(lib1_gv_talentButtonLabel[lib1_gv_buttonIndex[lp_player]][lp_player], "IdleButtonCharge", PlayerGroupAll());
    DialogControlSetPositionRelative(lib1_gv_talentButtonLabel[lib1_gv_buttonIndex[lp_player]][lp_player], PlayerGroupAll(), c_anchorCenter, lib1_gv_talentButtonLabelBackground[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 0, 0);
    if (((lp_row != 1) || (lp_talentPrerequisite != lib1_ge_TalentPrerequisite_None))) {
        DialogControlSetEnabled(lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], PlayerGroupAll(), false);
        DialogControlSetVisible(lib1_gv_talentButtonGlow[lib1_gv_buttonIndex[lp_player]][lp_player], PlayerGroupAll(), false);
        DialogControlSetVisible(lib1_gv_talentButtonLabelBackground[lib1_gv_buttonIndex[lp_player]][lp_player], PlayerGroupAll(), false);
        DialogControlSetVisible(lib1_gv_talentButtonLabel[lib1_gv_buttonIndex[lp_player]][lp_player], PlayerGroupAll(), false);
    }
}
void lib1_gf_ShowHideTalentTree (int lp_player) {
    bool auto65715FE0_val;
    // Implementation
    auto65715FE0_val = DialogIsVisible(lib1_gv_mainTalentDialog[lp_player], lp_player);
    if (auto65715FE0_val) {
        DialogSetVisible(lib1_gv_mainTalentDialog[lp_player], PlayerGroupSingle(lp_player), false);
        DialogSetVisible(lib1_gv_subTalentDialog[1][lp_player], PlayerGroupSingle(lp_player), false);
        DialogSetVisible(lib1_gv_subTalentDialog[2][lp_player], PlayerGroupSingle(lp_player), false);
        DialogSetVisible(lib1_gv_subTalentDialog[3][lp_player], PlayerGroupSingle(lp_player), false);
        DialogSetVisible(lib1_gv_availablePointsDialog[lp_player], PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogSetVisible(lib1_gv_mainTalentDialog[lp_player], PlayerGroupSingle(lp_player), true);
        DialogSetVisible(lib1_gv_subTalentDialog[1][lp_player], PlayerGroupSingle(lp_player), true);
        DialogSetVisible(lib1_gv_subTalentDialog[2][lp_player], PlayerGroupSingle(lp_player), true);
        DialogSetVisible(lib1_gv_subTalentDialog[3][lp_player], PlayerGroupSingle(lp_player), true);
        DialogSetVisible(lib1_gv_availablePointsDialog[lp_player], PlayerGroupSingle(lp_player), true);
    }
}
void lib1_gf_GrantTalentPoints (int lp_talentPoints, int lp_player) {
    // Implementation
    lib1_gv_availableTalentPoints[lp_player] += lp_talentPoints;
    libNtve_gf_SetDialogItemText(lib1_gv_availablePointsLabel[lp_player], IntToText(lib1_gv_availableTalentPoints[lp_player]), PlayerGroupAll());
}
void lib1_gf_DestroyTalentTree (int lp_player) {
    int i;
    int j;
    int k;

    lib1_gv_buttonIndex[lp_player] = 0;
    lib1_gv_availableTalentPoints[lp_player] = 0;
    lib1_gv_spentTalentPoints[lp_player] = 0;
    lib1_gv_pointsSpentinTree[1][lp_player] = 0;
    lib1_gv_pointsSpentinTree[2][lp_player] = 0;
    lib1_gv_pointsSpentinTree[3][lp_player] = 0;
    DialogDestroy(lib1_gv_mainTalentDialog[lp_player]);
    DialogDestroy(lib1_gv_subTalentDialog[1][lp_player]);
    DialogDestroy(lib1_gv_subTalentDialog[2][lp_player]);
    DialogDestroy(lib1_gv_subTalentDialog[3][lp_player]);
    DialogDestroy(lib1_gv_availablePointsDialog[lp_player]);
    for ( i=1; i <= 100; i += 1 ) {
        lib1_gv_talentTreeButton[i][lp_player] = c_invalidDialogControlId;
        lib1_gv_currentRank[i][lp_player] = 0;
        lib1_gv_maxRank[i][lp_player] = 0;
        lib1_gv_hasPrerequisite[i][lp_player] = 0;
        lib1_gv_isPrerequisite[i][lp_player] = 0;
        lib1_gv_prerequisiteComplete[i][lp_player] = false;
    }
    // i is tree.
    for (i = 0; i < lib1_gv_ofTrees[lp_player]; i += 1) {
        // j is row.
        for (j = 0; j < lib1_gv_ofRows[lp_player]; j += 1) {
            // k is column.
            for (k = 0; k < lib1_gv_ofColumns[lp_player]; k += 1) {
                lib1_gv_talentTreeButtonIndexTreeColumnRow[i][k][j][lp_player] = 0;
            }
        }
    }
}
void lib1_gf_SaveLoadTalentBuild (int lp_saveLoad, int lp_buildIndex, string lp_bankName, int lp_player) {
    int auto39B7DD06_val;
    int auto4B6F81CD_n;
    int auto4B6F81CD_i;
    int autoD0201FAF_n;
    int autoD0201FAF_i;
    int autoD142A2C6_n;
    int autoD142A2C6_i;
    int auto801731C0_n;
    int auto801731C0_i;
    int auto056FDEC7_n;
    int auto056FDEC7_i;
    int auto2944E9AE_n;
    int auto2944E9AE_i;
    int auto883FD3A8_val;
    int autoEF30D3F4_val;
    int autoB7C929C5_val;
    int autoBB553F6A_val;
    int autoEE828A01_val;
    int autoAA9AD66B_n;
    int autoAA9AD66B_i;
    int auto982C0BD7_n;
    int auto982C0BD7_i;
    // Variable Declarations
    int lv_playerIndex;
    bank lv_talentBank;
    int lv_buttonTree;
    int lv_buttonColumn;
    int lv_buttonRow;
    int lv_buttonIndex;
    int lv_talentStringIndex;
    int lv_buttonCurrentRank;
    int lv_unlockedPrereqTalentIndex;
    int lv_unlockedPrereqTalentRequiredPoints;
    int lv_pointsRequired;
    int lv_pointsPerTier;
    // Variable Initialization
    lv_talentStringIndex = 1;
    // Implementation
    BankLoad("DQRPGTalentLibraryBank", lp_player);
    lv_talentBank = BankLastCreated();
    lib1_gv_talentBuildString[lp_buildIndex][lp_player] = "";
    lv_playerIndex = (lp_player - 1);
    auto39B7DD06_val = lp_saveLoad;
    if (auto39B7DD06_val == lib1_ge_SaveLoad_Save) {
        auto4B6F81CD_n = lib1_gv_ofTrees[lp_player];
        for (auto4B6F81CD_i = 1; auto4B6F81CD_i <= auto4B6F81CD_n; auto4B6F81CD_i += 1) {
            lv_buttonTree += 1;
            lv_buttonRow = 0;
            autoD0201FAF_n = lib1_gv_ofRows[lp_player];
            for (autoD0201FAF_i = 1; autoD0201FAF_i <= autoD0201FAF_n; autoD0201FAF_i += 1) {
                lv_buttonRow += 1;
                lv_buttonColumn = 0;
                autoD142A2C6_n = lib1_gv_ofColumns[lp_player];
                for (autoD142A2C6_i = 1; autoD142A2C6_i <= autoD142A2C6_n; autoD142A2C6_i += 1) {
                    lv_buttonColumn += 1;
                    lv_buttonIndex = lib1_gv_talentTreeButtonIndexTreeColumnRow[lv_buttonTree][lv_buttonColumn][lv_buttonRow][lp_player];
                    if ((lv_buttonIndex != 0)) {
                        if ((lib1_gv_currentRank[lv_buttonIndex][lp_player] < 10)) {
                            lib1_gv_talentBuildString[lp_buildIndex][lp_player] = StringReplace(lib1_gv_talentBuildString[lp_buildIndex][lp_player], "0", lv_talentStringIndex, (lv_talentStringIndex + 0));
                            lib1_gv_talentBuildString[lp_buildIndex][lp_player] = StringReplace(lib1_gv_talentBuildString[lp_buildIndex][lp_player], IntToString(lib1_gv_currentRank[lv_buttonIndex][lp_player]), (lv_talentStringIndex + 1), (lv_talentStringIndex + 1));
                        }
                        else {
                            lib1_gv_talentBuildString[lp_buildIndex][lp_player] = StringReplace(lib1_gv_talentBuildString[lp_buildIndex][lp_player], IntToString(lib1_gv_currentRank[lv_buttonIndex][lp_player]), lv_talentStringIndex, (lv_talentStringIndex + 1));
                        }
                        lv_talentStringIndex += 2;
                    }
                }
            }
        }
        BankValueSetFromString(lv_talentBank, lp_bankName, IntToString(lp_buildIndex), lib1_gv_talentBuildString[lp_buildIndex][lp_player]);
        BankValueSetFromInt(lv_talentBank, (lp_bankName + "Points"), IntToString(lp_buildIndex), lib1_gv_availableTalentPoints[lp_player]);
        BankSave(lv_talentBank);
    }
    else if (auto39B7DD06_val == lib1_ge_SaveLoad_Load) {
        lib1_gv_talentBuildString[lp_buildIndex][lp_player] = BankValueGetAsString(lv_talentBank, lp_bankName, IntToString(lp_buildIndex));
        if ((lib1_gv_talentBuildString[lp_buildIndex][lp_player] != "")) {
            lib1_gf_ResetTalentBuild(lp_player, 101);
            lib1_gv_availableTalentPoints[lp_player] = BankValueGetAsInt(lv_talentBank, (lp_bankName + "Points"), IntToString(lp_buildIndex));
            libNtve_gf_SetDialogItemText(lib1_gv_availablePointsLabel[lp_player], IntToText(lib1_gv_availableTalentPoints[lp_player]), PlayerGroupAll());
            auto801731C0_n = lib1_gv_ofTrees[lp_player];
            for (auto801731C0_i = 1; auto801731C0_i <= auto801731C0_n; auto801731C0_i += 1) {
                lv_buttonTree += 1;
                lv_buttonRow = 0;
                auto056FDEC7_n = lib1_gv_ofRows[lp_player];
                for (auto056FDEC7_i = 1; auto056FDEC7_i <= auto056FDEC7_n; auto056FDEC7_i += 1) {
                    lv_buttonRow += 1;
                    lv_buttonColumn = 0;
                    auto2944E9AE_n = lib1_gv_ofColumns[lp_player];
                    for (auto2944E9AE_i = 1; auto2944E9AE_i <= auto2944E9AE_n; auto2944E9AE_i += 1) {
                        lv_buttonColumn += 1;
                        lv_buttonIndex = lib1_gv_talentTreeButtonIndexTreeColumnRow[lv_buttonTree][lv_buttonColumn][lv_buttonRow][lp_player];
                        if ((lv_buttonIndex != 0)) {
                            lv_buttonCurrentRank = StringToInt(StringSub(lib1_gv_talentBuildString[lp_buildIndex][lp_player], lv_talentStringIndex, (lv_talentStringIndex + 1)));
                            lv_talentStringIndex += 2;
                            auto883FD3A8_val = lib1_gv_pointsPerTier[lp_player];
                            if (auto883FD3A8_val == lib1_ge_PointsPerTier__5) {
                                lv_pointsRequired = (5 * (lib1_gv_row[lv_buttonIndex][lp_player] - 1));
                                lv_pointsPerTier = 5;
                            }
                            else if (auto883FD3A8_val == lib1_ge_PointsPerTier__10) {
                                lv_pointsRequired = (10 * (lib1_gv_row[lv_buttonIndex][lp_player] - 1));
                                lv_pointsPerTier = 10;
                            }
                            else {
                            }
                            if ((lv_buttonCurrentRank >= lib1_gv_maxRank[lv_buttonIndex][lp_player])) {
                                lv_buttonCurrentRank = lib1_gv_maxRank[lv_buttonIndex][lp_player];
                                lib1_gv_currentRank[lv_buttonIndex][lp_player] = lv_buttonCurrentRank;
                                lib1_gv_pointsSpentinTree[lib1_gv_tree[lv_buttonIndex][lp_player]][lp_player] += lv_buttonCurrentRank;
                                lib1_gv_spentTalentPoints[lp_player] += lv_buttonCurrentRank;
                                DialogControlSetEnabled(lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], PlayerGroupAll(), false);
                                DialogControlSetVisible(lib1_gv_talentButtonGlow[lv_buttonIndex][lp_player], PlayerGroupAll(), false);
                                DialogControlSetVisible(lib1_gv_talentButtonLabelBackground[lv_buttonIndex][lp_player], PlayerGroupAll(), true);
                                DialogControlSetVisible(lib1_gv_talentButtonLabel[lv_buttonIndex][lp_player], PlayerGroupAll(), true);
                                autoBB553F6A_val = lib1_gv_talentType[lv_buttonIndex][lp_player];
                                if (autoBB553F6A_val == lib1_ge_TalentType_Ability) {
                                    lib1_gf_UpdateAbilityButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], lv_buttonIndex, 0, lib1_gv_tree[lv_buttonIndex][lp_player], lib1_gv_abilityLink[lv_buttonIndex][lp_player], lib1_gv_buttonLink[lv_buttonIndex][lp_player]);
                                }
                                else if (autoBB553F6A_val == lib1_ge_TalentType_Passive) {
                                    lib1_gf_UpdatePassiveButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], lv_buttonIndex, 0, lib1_gv_tree[lv_buttonIndex][lp_player], lib1_gv_talentName[lv_buttonIndex][lp_player], lib1_gv_tooltipDescriptionRaw[lv_buttonIndex][lp_player], lib1_gv_currentRank[lv_buttonIndex][lp_player], lib1_gv_multiplier[1][lv_buttonIndex][lp_player], lib1_gv_multiplier[2][lv_buttonIndex][lp_player]);
                                }
                                else {
                                }
                                if ((lib1_gv_isPrerequisite[lv_buttonIndex][lp_player] != 0)) {
                                    lv_unlockedPrereqTalentIndex = lib1_gv_isPrerequisite[lv_buttonIndex][lp_player];
                                    lib1_gv_prerequisiteComplete[lv_unlockedPrereqTalentIndex][lp_player] = true;
                                    lv_unlockedPrereqTalentRequiredPoints = (lv_pointsPerTier * (lib1_gv_row[lv_unlockedPrereqTalentIndex][lp_player] - 1));
                                    autoEE828A01_val = lib1_gv_talentType[lv_unlockedPrereqTalentIndex][lp_player];
                                    if (autoEE828A01_val == lib1_ge_TalentType_Ability) {
                                        lib1_gf_UpdateAbilityButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_unlockedPrereqTalentIndex][lp_player], lv_unlockedPrereqTalentIndex, lv_unlockedPrereqTalentRequiredPoints, lib1_gv_tree[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_abilityLink[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_buttonLink[lv_unlockedPrereqTalentIndex][lp_player]);
                                    }
                                    else if (autoEE828A01_val == lib1_ge_TalentType_Passive) {
                                        lib1_gf_UpdatePassiveButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_unlockedPrereqTalentIndex][lp_player], lv_unlockedPrereqTalentIndex, lv_unlockedPrereqTalentRequiredPoints, lib1_gv_tree[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_talentName[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_tooltipDescriptionRaw[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_currentRank[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_multiplier[1][lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_multiplier[2][lv_unlockedPrereqTalentIndex][lp_player]);
                                    }
                                    else {
                                    }
                                }
                            }
                            else {
                                lib1_gv_currentRank[lv_buttonIndex][lp_player] = lv_buttonCurrentRank;
                                lib1_gv_pointsSpentinTree[lib1_gv_tree[lv_buttonIndex][lp_player]][lp_player] += lv_buttonCurrentRank;
                                lib1_gv_spentTalentPoints[lp_player] += lv_buttonCurrentRank;
                                if ((lv_buttonCurrentRank > 0)) {
                                    lib1_gf_UnlockTalentButton(lp_player, lv_buttonTree, lv_buttonColumn, lv_buttonRow);
                                    if ((lv_buttonCurrentRank >= 5)) {
                                        if ((lib1_gv_isPrerequisite[lv_buttonIndex][lp_player] != 0)) {
                                            lv_unlockedPrereqTalentIndex = lib1_gv_isPrerequisite[lv_buttonIndex][lp_player];
                                            lib1_gv_prerequisiteComplete[lv_unlockedPrereqTalentIndex][lp_player] = true;
                                            lv_unlockedPrereqTalentRequiredPoints = (lv_pointsPerTier * (lib1_gv_row[lv_unlockedPrereqTalentIndex][lp_player] - 1));
                                            autoB7C929C5_val = lib1_gv_talentType[lv_unlockedPrereqTalentIndex][lp_player];
                                            if (autoB7C929C5_val == lib1_ge_TalentType_Ability) {
                                                lib1_gf_UpdateAbilityButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_unlockedPrereqTalentIndex][lp_player], lv_unlockedPrereqTalentIndex, lv_unlockedPrereqTalentRequiredPoints, lib1_gv_tree[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_abilityLink[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_buttonLink[lv_unlockedPrereqTalentIndex][lp_player]);
                                            }
                                            else if (autoB7C929C5_val == lib1_ge_TalentType_Passive) {
                                                lib1_gf_UpdatePassiveButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_unlockedPrereqTalentIndex][lp_player], lv_unlockedPrereqTalentIndex, lv_unlockedPrereqTalentRequiredPoints, lib1_gv_tree[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_talentName[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_tooltipDescriptionRaw[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_currentRank[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_multiplier[1][lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_multiplier[2][lv_unlockedPrereqTalentIndex][lp_player]);
                                            }
                                            else {
                                            }
                                        }
                                    }
                                }
                                else {
                                    DialogControlSetEnabled(lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], PlayerGroupAll(), false);
                                    DialogControlSetVisible(lib1_gv_talentButtonGlow[lv_buttonIndex][lp_player], PlayerGroupAll(), false);
                                    DialogControlSetVisible(lib1_gv_talentButtonLabelBackground[lv_buttonIndex][lp_player], PlayerGroupAll(), false);
                                    DialogControlSetVisible(lib1_gv_talentButtonLabel[lv_buttonIndex][lp_player], PlayerGroupAll(), false);
                                    autoEF30D3F4_val = lib1_gv_talentType[lv_buttonIndex][lp_player];
                                    if (autoEF30D3F4_val == lib1_ge_TalentType_Ability) {
                                        lib1_gf_UpdateAbilityButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], lv_buttonIndex, lv_pointsRequired, lib1_gv_tree[lv_buttonIndex][lp_player], lib1_gv_abilityLink[lv_buttonIndex][lp_player], lib1_gv_buttonLink[lv_buttonIndex][lp_player]);
                                    }
                                    else if (autoEF30D3F4_val == lib1_ge_TalentType_Passive) {
                                        lib1_gf_UpdatePassiveButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], lv_buttonIndex, lv_pointsRequired, lib1_gv_tree[lv_buttonIndex][lp_player], lib1_gv_talentName[lv_buttonIndex][lp_player], lib1_gv_tooltipDescriptionRaw[lv_buttonIndex][lp_player], lib1_gv_currentRank[lv_buttonIndex][lp_player], lib1_gv_multiplier[1][lv_buttonIndex][lp_player], lib1_gv_multiplier[2][lv_buttonIndex][lp_player]);
                                    }
                                    else {
                                    }
                                }
                            }
                            if ((lib1_gv_currentRank[lv_buttonIndex][lp_player] < lib1_gv_maxRank[lv_buttonIndex][lp_player])) {
                                libNtve_gf_SetDialogItemText(lib1_gv_talentButtonLabel[lv_buttonIndex][lp_player], (IntToText(lib1_gv_currentRank[lv_buttonIndex][lp_player]) + StringExternal("Param/Value/lib_1_D81739DA") + IntToText(lib1_gv_maxRank[lv_buttonIndex][lp_player])), PlayerGroupAll());
                            }
                            else {
                                libNtve_gf_SetDialogItemText(lib1_gv_talentButtonLabel[lv_buttonIndex][lp_player], (IntToText(lib1_gv_maxRank[lv_buttonIndex][lp_player]) + StringExternal("Param/Value/lib_1_DBD8440E") + IntToText(lib1_gv_maxRank[lv_buttonIndex][lp_player])), PlayerGroupAll());
                            }
                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] != null)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lib1_gv_talentUpgrade[lv_buttonIndex][lp_player], lv_buttonCurrentRank);
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "StrengthoftheDragon")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "StrengthoftheDragon", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_strengthoftheDragonCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "MindoftheDragon")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "MindoftheDragon", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_mindoftheDragonCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "PowerOverwhelming")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "PowerOverwhelming", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_powerOverwhelmingCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "Rage")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "Rage", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_rageCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "VampiricTendencies")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "VampiricTendencies", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_vampiricTendenciesCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "CriticalCrepitus")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "CriticalCrepitus", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_criticalCrepitusCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "Zeal")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "Zeal", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_zealCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "DarkDissulto")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "DarkDissulto", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_darkDissultoCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "SpikedScales")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "SpikedScales", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_spikedScalesCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "Retaliation")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "Retaliation", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_retaliationCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "Headshot")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "Headshot", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_headshotCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "StickyShot")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "StickyShot", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_stickyShotCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "DuelWield")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "DualWield", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_dualWieldCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "GreedisGood")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "GreedIsGood", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_greedisGoodCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "QuickLearner")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "QuickLearner", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_quickLearnerCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "AbsorbMana")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "AbsorbMana", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_absorbManaCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == "RealmSwitch")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "RealmSwitch", lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                    lib1_gv_realmSwitchCount[lv_playerIndex] += lv_buttonCurrentRank;
                                }
                            }
                        }
                    }
                }
            }
            lv_buttonTree = 0;
            autoAA9AD66B_n = lib1_gv_ofTrees[lp_player];
            for (autoAA9AD66B_i = 1; autoAA9AD66B_i <= autoAA9AD66B_n; autoAA9AD66B_i += 1) {
                lv_buttonTree += 1;
                if ((lib1_gv_pointsSpentinTree[lv_buttonTree][lp_player] >= (lv_pointsPerTier * 1))) {
                    lib1_gf_UnlockTalentTier(lp_player, lv_buttonTree, 2);
                }
                if ((lib1_gv_pointsSpentinTree[lv_buttonTree][lp_player] >= (lv_pointsPerTier * 2))) {
                    lib1_gf_UnlockTalentTier(lp_player, lv_buttonTree, 3);
                }
                if ((lib1_gv_pointsSpentinTree[lv_buttonTree][lp_player] >= (lv_pointsPerTier * 3))) {
                    lib1_gf_UnlockTalentTier(lp_player, lv_buttonTree, 4);
                }
                if ((lib1_gv_pointsSpentinTree[lv_buttonTree][lp_player] >= (lv_pointsPerTier * 4))) {
                    lib1_gf_UnlockTalentTier(lp_player, lv_buttonTree, 5);
                }
                if ((lib1_gv_pointsSpentinTree[lv_buttonTree][lp_player] >= (lv_pointsPerTier * 5))) {
                    lib1_gf_UnlockTalentTier(lp_player, lv_buttonTree, 6);
                }
                if ((lib1_gv_pointsSpentinTree[lv_buttonTree][lp_player] >= (lv_pointsPerTier * 6))) {
                    lib1_gf_UnlockTalentTier(lp_player, lv_buttonTree, 7);
                }
                if ((lib1_gv_pointsSpentinTree[lv_buttonTree][lp_player] >= (lv_pointsPerTier * 7))) {
                    lib1_gf_UnlockTalentTier(lp_player, lv_buttonTree, 8);
                }
                lv_buttonColumn = 0;
                auto982C0BD7_n = lib1_gv_ofColumns[lp_player];
                for (auto982C0BD7_i = 1; auto982C0BD7_i <= auto982C0BD7_n; auto982C0BD7_i += 1) {
                    lv_buttonColumn += 1;
                    if (((lib1_gv_hasPrerequisite[lib1_gv_talentTreeButtonIndexTreeColumnRow[lv_buttonTree][lv_buttonColumn][1][lp_player]][lp_player] == 0) || lib1_gv_prerequisiteComplete[lib1_gv_talentTreeButtonIndexTreeColumnRow[lv_buttonTree][lv_buttonColumn][1][lp_player]][lp_player])) {
                        lib1_gf_UnlockTalentButton(lp_player, lv_buttonTree, lv_buttonColumn, 1);
                    }
                }
            }
        }
    }
    else {
    }
}
void lib1_gf_ResetTalentBuild (int lp_player, int lp_resetto) {
    int auto70440042_val;
    int auto717EC17A_val;
    // Variable Declarations
    int lv_requiredPoints;
    int i;
    // Variable Initialization
    // Implementation
    if ((lp_resetto == 101)) {
        lib1_gv_availableTalentPoints[lp_player] = 1;
    }
    else {
        lib1_gv_availableTalentPoints[lp_player] = lp_resetto;
    }
    lib1_gv_spentTalentPoints[lp_player] = 0;
    libNtve_gf_SetDialogItemText(lib1_gv_availablePointsLabel[lp_player], IntToText(lib1_gv_availableTalentPoints[lp_player]), PlayerGroupAll());
    lib1_gv_pointsSpentinTree[1][lp_player] = 0;
    lib1_gv_pointsSpentinTree[2][lp_player] = 0;
    lib1_gv_pointsSpentinTree[3][lp_player] = 0;
    for ( i = 1; i <= lib1_gv_buttonIndex[lp_player] ; i += 1 ) {
        if ((lib1_gv_talentUpgrade[i][lp_player] != null)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lib1_gv_talentUpgrade[i][lp_player], 0);
        }
        lib1_gv_currentRank[i][lp_player] = 0;
        libNtve_gf_SetDialogItemText(lib1_gv_talentButtonLabel[i][lp_player], (IntToText(lib1_gv_currentRank[i][lp_player]) + StringExternal("Param/Value/lib_1_52455AE2") + IntToText(lib1_gv_maxRank[i][lp_player])), PlayerGroupAll());
        lib1_gv_prerequisiteComplete[i][lp_player] = false;
        auto70440042_val = lib1_gv_pointsPerTier[lp_player];
        if (auto70440042_val == lib1_ge_PointsPerTier__5) {
            lv_requiredPoints = 5;
        }
        else if (auto70440042_val == lib1_ge_PointsPerTier__10) {
            lv_requiredPoints = 10;
        }
        lv_requiredPoints = (lv_requiredPoints * (lib1_gv_row[i][lp_player] - 1));
        auto717EC17A_val = lib1_gv_talentType[i][lp_player];
        if (auto717EC17A_val == lib1_ge_TalentType_Ability) {
            lib1_gf_UpdateAbilityButtonTooltip(lp_player, lib1_gv_talentTreeButton[i][lp_player], i, lv_requiredPoints, lib1_gv_tree[i][lp_player], lib1_gv_abilityLink[i][lp_player], lib1_gv_buttonLink[i][lp_player]);
        }
        else if (auto717EC17A_val == lib1_ge_TalentType_Passive) {
            lib1_gf_UpdatePassiveButtonTooltip(lp_player, lib1_gv_talentTreeButton[i][lp_player], i, lv_requiredPoints, lib1_gv_tree[i][lp_player], lib1_gv_talentName[i][lp_player], lib1_gv_tooltipDescriptionRaw[i][lp_player], lib1_gv_currentRank[i][lp_player], lib1_gv_multiplier[1][i][lp_player], lib1_gv_multiplier[2][i][lp_player]);
        }
        if (((lib1_gv_row[i][lp_player] != 1) || (lib1_gv_hasPrerequisite[i][lp_player] != 0))) {
            DialogControlSetEnabled(lib1_gv_talentTreeButton[i][lp_player], PlayerGroupAll(), false);
            DialogControlSetVisible(lib1_gv_talentButtonGlow[i][lp_player], PlayerGroupAll(), false);
            DialogControlSetVisible(lib1_gv_talentButtonLabelBackground[i][lp_player], PlayerGroupAll(), false);
            DialogControlSetVisible(lib1_gv_talentButtonLabel[i][lp_player], PlayerGroupAll(), false);
        }
        else {
            DialogControlSetEnabled(lib1_gv_talentTreeButton[i][lp_player], PlayerGroupAll(), true);
            DialogControlSetVisible(lib1_gv_talentButtonGlow[i][lp_player], PlayerGroupAll(), true);
            DialogControlSetVisible(lib1_gv_talentButtonLabelBackground[i][lp_player], PlayerGroupAll(), true);
            DialogControlSetVisible(lib1_gv_talentButtonLabel[i][lp_player], PlayerGroupAll(), true);
        }
    }
}
void lib1_gf_SetHeros (int lp_player, unit lp_hero) {
    // Implementation
    lib1_gv_heros[(lp_player - 1)] = lp_hero;
}
// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Pick Talent
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PickTalent_Func (bool testConds, bool runActions) {
    int auto6174C529_val;
    int autoD8089CA4_val;
    fixed auto98A8ED9E_val;
    // Variable Declarations
    int lv_playerIndex;
    bool lv_holdUp;
    int lv_player;
    int lv_buttonIndex;
    int lv_unlockedPrereqTalentIndex;
    int lv_unlockedPrereqTalentRequiredPoints;
    int lv_pointsRequired;
    int lv_pointsPerTier;
    const int lv_prereqPointReq = 5;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((lib1_gf_IsTalentButton(EventPlayer(), EventDialogControl())) && (lib1_gv_availableTalentPoints[EventPlayer()] > 0) && (!gv_players[(EventPlayer() - 1)].talents.adding)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((!gv_players[(EventPlayer() - 1)].talents.adding)) {
        lv_player = EventPlayer();
        lv_playerIndex = (EventPlayer() - 1);
        gv_players[lv_playerIndex].talents.adding = true;
        while (gv_players[(EventPlayer() - 1)].talents.locked) {
            Wait(1.0, c_timeGame);
        }
        gv_players[(EventPlayer() - 1)].talents.locked = true;
        IntLoopBegin(1, 30);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((EventDialogControl() == lib1_gv_talentTreeButton[IntLoopCurrent()][lv_player])) {
                lv_buttonIndex = IntLoopCurrent();
                break;
            }
        }
        IntLoopEnd();
        lib1_gv_currentRank[lv_buttonIndex][lv_player] += 1;
        lib1_gv_pointsSpentinTree[lib1_gv_tree[lv_buttonIndex][lv_player]][lv_player] += 1;
        lib1_gv_availableTalentPoints[lv_player] -= 1;
        lib1_gv_spentTalentPoints[lv_player] += 1;
        if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] != null)) {
            TechTreeUpgradeAddLevel(lv_player, lib1_gv_talentUpgrade[lv_buttonIndex][lv_player], 1);
            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "StrengthoftheDragon")) {
                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "StrengthoftheDragon", lib1_gv_heros[lv_playerIndex], 1);
                lib1_gv_strengthoftheDragonCount[lv_playerIndex] += 1;
            }
            else {
                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "MindoftheDragon")) {
                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "MindoftheDragon", lib1_gv_heros[lv_playerIndex], 1);
                    lib1_gv_mindoftheDragonCount[lv_playerIndex] += 1;
                }
                else {
                    if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "PowerOverwhelming")) {
                        UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "PowerOverwhelming", lib1_gv_heros[lv_playerIndex], 1);
                        lib1_gv_powerOverwhelmingCount[lv_playerIndex] += 1;
                    }
                    else {
                        if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "Rage")) {
                            UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "Rage", lib1_gv_heros[lv_playerIndex], 1);
                            lib1_gv_rageCount[lv_playerIndex] += 1;
                        }
                        else {
                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "VampiricTendencies")) {
                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "VampiricTendencies", lib1_gv_heros[lv_playerIndex], 1);
                                lib1_gv_vampiricTendenciesCount[lv_playerIndex] += 1;
                            }
                            else {
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "Zeal")) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "Zeal", lib1_gv_heros[lv_playerIndex], 1);
                                    lib1_gv_zealCount[lv_playerIndex] += 1;
                                }
                                else {
                                    if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "CriticalCrepitus")) {
                                        UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "CriticalCrepitus", lib1_gv_heros[lv_playerIndex], 1);
                                        lib1_gv_criticalCrepitusCount[lv_playerIndex] += 1;
                                    }
                                    else {
                                        if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "DarkDissulto")) {
                                            UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "DarkDissulto", lib1_gv_heros[lv_playerIndex], 1);
                                            lib1_gv_darkDissultoCount[lv_playerIndex] += 1;
                                        }
                                        else {
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "SpikedScales")) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "SpikedScales", lib1_gv_heros[lv_playerIndex], 1);
                                                lib1_gv_spikedScalesCount[lv_playerIndex] += 1;
                                            }
                                            else {
                                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "Retaliation")) {
                                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "Retaliation", lib1_gv_heros[lv_playerIndex], 1);
                                                    lib1_gv_retaliationCount[lv_playerIndex] += 1;
                                                }
                                                else {
                                                    if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "Headshot")) {
                                                        UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "Headshot", lib1_gv_heros[lv_playerIndex], 1);
                                                        lib1_gv_headshotCount[lv_playerIndex] += 1;
                                                    }
                                                    else {
                                                        if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "StickyShot")) {
                                                            UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "StickyShot", lib1_gv_heros[lv_playerIndex], 1);
                                                            lib1_gv_stickyShotCount[lv_playerIndex] += 1;
                                                        }
                                                        else {
                                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "DuelWield")) {
                                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "DualWield", lib1_gv_heros[lv_playerIndex], 1);
                                                                lib1_gv_dualWieldCount[lv_playerIndex] += 1;
                                                            }
                                                            else {
                                                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "GreedisGood")) {
                                                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "GreedIsGood", lib1_gv_heros[lv_playerIndex], 1);
                                                                    lib1_gv_greedisGoodCount[lv_playerIndex] += 1;
                                                                }
                                                                else {
                                                                    if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "QuickLearner")) {
                                                                        UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "QuickLearner", lib1_gv_heros[lv_playerIndex], 1);
                                                                        lib1_gv_quickLearnerCount[lv_playerIndex] += 1;
                                                                    }
                                                                    else {
                                                                        if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "AbsorbMana")) {
                                                                            UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "AbsorbMana", lib1_gv_heros[lv_playerIndex], 1);
                                                                            lib1_gv_absorbManaCount[lv_playerIndex] += 1;
                                                                        }
                                                                        else {
                                                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == "RealmSwitch")) {
                                                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], "RealmSwitch", lib1_gv_heros[lv_playerIndex], 1);
                                                                                lib1_gv_realmSwitchCount[lv_playerIndex] += 1;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if ((lib1_gv_currentRank[lv_buttonIndex][lv_player] < lib1_gv_maxRank[lv_buttonIndex][lv_player])) {
            libNtve_gf_SetDialogItemText(lib1_gv_talentButtonLabel[lv_buttonIndex][lv_player], (IntToText(lib1_gv_currentRank[lv_buttonIndex][lv_player]) + StringExternal("Param/Value/lib_1_75883A25") + IntToText(lib1_gv_maxRank[lv_buttonIndex][lv_player])), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(lib1_gv_talentButtonLabel[lv_buttonIndex][lv_player], (IntToText(lib1_gv_maxRank[lv_buttonIndex][lv_player]) + StringExternal("Param/Value/lib_1_BC8BEA49") + IntToText(lib1_gv_maxRank[lv_buttonIndex][lv_player])), PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemText(lib1_gv_availablePointsLabel[lv_player], IntToText(lib1_gv_availableTalentPoints[lv_player]), PlayerGroupAll());
        auto6174C529_val = lib1_gv_pointsPerTier[lv_player];
        if (auto6174C529_val == lib1_ge_PointsPerTier__5) {
            lv_pointsRequired = (5 * (lib1_gv_row[lv_buttonIndex][lv_player] - 1));
            lv_pointsPerTier = 5;
        }
        else if (auto6174C529_val == lib1_ge_PointsPerTier__10) {
            lv_pointsRequired = (10 * (lib1_gv_row[lv_buttonIndex][lv_player] - 1));
            lv_pointsPerTier = 10;
        }
        else {
        }
        if ((lib1_gv_currentRank[lv_buttonIndex][lv_player] == lib1_gv_maxRank[lv_buttonIndex][lv_player])) {
            DialogControlSetEnabled(lib1_gv_talentTreeButton[lv_buttonIndex][lv_player], PlayerGroupAll(), false);
            DialogControlSetVisible(lib1_gv_talentButtonGlow[lv_buttonIndex][lv_player], PlayerGroupAll(), false);
        }
        else if ((lib1_gv_currentRank[lv_buttonIndex][lv_player] == lv_prereqPointReq)) {
            if ((lib1_gv_isPrerequisite[lv_buttonIndex][lv_player] != 0)) {
                lv_unlockedPrereqTalentIndex = lib1_gv_isPrerequisite[lv_buttonIndex][lv_player];
                lib1_gv_prerequisiteComplete[lv_unlockedPrereqTalentIndex][lv_player] = true;
                lv_unlockedPrereqTalentRequiredPoints = (lv_pointsPerTier * (lib1_gv_row[lv_unlockedPrereqTalentIndex][lv_player] - 1));
                if ((lib1_gv_pointsSpentinTree[lib1_gv_tree[lv_unlockedPrereqTalentIndex][lv_player]][lv_player] >= lv_unlockedPrereqTalentRequiredPoints)) {
                    lv_unlockedPrereqTalentRequiredPoints = 0;
                    SoundPlay(SoundLink("UI_TechConsole_Purchase", -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
                    lib1_gf_UnlockTalentButton(lv_player, lib1_gv_tree[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_column[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_row[lv_unlockedPrereqTalentIndex][lv_player]);
                }
                autoD8089CA4_val = lib1_gv_talentType[lv_unlockedPrereqTalentIndex][lv_player];
                if (autoD8089CA4_val == lib1_ge_TalentType_Ability) {
                    lib1_gf_UpdateAbilityButtonTooltip(lv_player, lib1_gv_talentTreeButton[lv_unlockedPrereqTalentIndex][lv_player], lv_unlockedPrereqTalentIndex, lv_unlockedPrereqTalentRequiredPoints, lib1_gv_tree[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_abilityLink[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_buttonLink[lv_unlockedPrereqTalentIndex][lv_player]);
                }
                else if (autoD8089CA4_val == lib1_ge_TalentType_Passive) {
                    lib1_gf_UpdatePassiveButtonTooltip(lv_player, lib1_gv_talentTreeButton[lv_unlockedPrereqTalentIndex][lv_player], lv_unlockedPrereqTalentIndex, lv_unlockedPrereqTalentRequiredPoints, lib1_gv_tree[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_talentName[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_tooltipDescriptionRaw[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_currentRank[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_multiplier[1][lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_multiplier[2][lv_unlockedPrereqTalentIndex][lv_player]);
                }
                else {
                }
            }
        }
        else if ((lib1_gv_currentRank[lv_buttonIndex][lv_player] > lib1_gv_maxRank[lv_buttonIndex][lv_player])) {
            lib1_gv_currentRank[lv_buttonIndex][lv_player] = lib1_gv_maxRank[lv_buttonIndex][lv_player];
            lib1_gv_pointsSpentinTree[lib1_gv_tree[lv_buttonIndex][lv_player]][lv_player] -= 1;
            lib1_gv_availableTalentPoints[lv_player] += 1;
            lib1_gv_spentTalentPoints[lv_player] -= 1;
        }
        if ((lib1_gv_talentType[lv_buttonIndex][lv_player] == lib1_ge_TalentType_Passive)) {
            lib1_gf_UpdatePassiveButtonTooltip(lv_player, lib1_gv_talentTreeButton[lv_buttonIndex][lv_player], lv_buttonIndex, 0, lib1_gv_tree[lv_buttonIndex][lv_player], lib1_gv_talentName[lv_buttonIndex][lv_player], lib1_gv_tooltipDescriptionRaw[lv_buttonIndex][lv_player], lib1_gv_currentRank[lv_buttonIndex][lv_player], lib1_gv_multiplier[1][lv_buttonIndex][lv_player], lib1_gv_multiplier[2][lv_buttonIndex][lv_player]);
        }
        auto98A8ED9E_val = (IntToFixed(lib1_gv_pointsSpentinTree[lib1_gv_tree[lv_buttonIndex][lv_player]][lv_player]) / IntToFixed(lv_pointsPerTier));
        if (auto98A8ED9E_val == 1.0) {
            if ((lib1_gv_ofRows[lv_player] >= 2)) {
                lib1_gf_UnlockTalentTier(lv_player, lib1_gv_tree[lv_buttonIndex][lv_player], 2);
                SoundPlay(SoundLink("UI_TechConsole_Purchase", -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
            }
        }
        else if (auto98A8ED9E_val == 2.0) {
            if ((lib1_gv_ofRows[lv_player] >= 3)) {
                lib1_gf_UnlockTalentTier(lv_player, lib1_gv_tree[lv_buttonIndex][lv_player], 3);
                SoundPlay(SoundLink("UI_TechConsole_Purchase", -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
            }
        }
        else if (auto98A8ED9E_val == 3.0) {
            if ((lib1_gv_ofRows[lv_player] >= 4)) {
                lib1_gf_UnlockTalentTier(lv_player, lib1_gv_tree[lv_buttonIndex][lv_player], 4);
                SoundPlay(SoundLink("UI_TechConsole_Purchase", -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
            }
        }
        else if (auto98A8ED9E_val == 4.0) {
            if ((lib1_gv_ofRows[lv_player] >= 5)) {
                lib1_gf_UnlockTalentTier(lv_player, lib1_gv_tree[lv_buttonIndex][lv_player], 5);
                SoundPlay(SoundLink("UI_TechConsole_Purchase", -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
            }
        }
        else if (auto98A8ED9E_val == 5.0) {
            if ((lib1_gv_ofRows[lv_player] >= 6)) {
                lib1_gf_UnlockTalentTier(lv_player, lib1_gv_tree[lv_buttonIndex][lv_player], 6);
                SoundPlay(SoundLink("UI_TechConsole_Purchase", -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
            }
        }
        else if (auto98A8ED9E_val == 6.0) {
            if ((lib1_gv_ofRows[lv_player] >= 7)) {
                lib1_gf_UnlockTalentTier(lv_player, lib1_gv_tree[lv_buttonIndex][lv_player], 7);
                SoundPlay(SoundLink("UI_TechConsole_Purchase", -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
            }
        }
        else if (auto98A8ED9E_val == 7.0) {
            if ((lib1_gv_ofRows[lv_player] >= 8)) {
                lib1_gf_UnlockTalentTier(lv_player, lib1_gv_tree[lv_buttonIndex][lv_player], 8);
                SoundPlay(SoundLink("UI_TechConsole_Purchase", -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
            }
        }
        else {
        }
        gv_players[(EventPlayer() - 1)].talents.locked = false;
        if ((lib1_gv_currentRank[lv_buttonIndex][lv_player] > lib1_gv_maxRank[lv_buttonIndex][lv_player])) {
            libNtve_gf_SetDialogItemText(lib1_gv_talentButtonLabel[lv_buttonIndex][lv_player], (IntToText(lib1_gv_maxRank[lv_buttonIndex][lv_player]) + StringExternal("Param/Value/lib_1_180A9D53") + IntToText(lib1_gv_maxRank[lv_buttonIndex][lv_player])), PlayerGroupAll());
            lib1_gv_currentRank[lv_buttonIndex][lv_player] = lib1_gv_maxRank[lv_buttonIndex][lv_player];
            lib1_gv_pointsSpentinTree[lib1_gv_tree[lv_buttonIndex][lv_player]][lv_player] -= 1;
            lib1_gv_availableTalentPoints[lv_player] += 1;
            lib1_gv_spentTalentPoints[lv_player] -= 1;
        }
        Wait(0.1, c_timeReal);
        gv_players[lv_playerIndex].talents.adding = false;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_PickTalent_Init () {
    lib1_gt_PickTalent = TriggerCreate("lib1_gt_PickTalent_Func");
    TriggerAddEventDialogControl(lib1_gt_PickTalent, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Close Talent
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CloseTalent_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_closeTalentTreeButton[EventPlayer()]))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lib1_gf_ShowHideTalentTree(EventPlayer());
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_CloseTalent_Init () {
    lib1_gt_CloseTalent = TriggerCreate("lib1_gt_CloseTalent_Func");
    TriggerAddEventDialogControl(lib1_gt_CloseTalent, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Load Talent Bank
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LoadTalentBank_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void lib1_gt_LoadTalentBank_Init () {
    lib1_gt_LoadTalentBank = TriggerCreate("lib1_gt_LoadTalentBank_Func");
    TriggerAddEventMapInit(lib1_gt_LoadTalentBank);
}
void lib1_InitTriggers () {
    lib1_gt_PickTalent_Init();
    lib1_gt_CloseTalent_Init();
    lib1_gt_LoadTalentBank_Init();
}
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;
void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }
    lib1_InitLib_completed = true;
    lib1_InitLibraries();
    lib1_InitVariables();
    lib1_InitTriggers();
}
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void FakeInitLibs () {
    libNtve_InitLib();
    lib1_InitLib();
}
//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const fixed gv_mAXEXPERIENCE = 500000.0;
//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_endofDays;
bool gv_syritalsHatchActive;
bool gv_guardiansHatchActive;
bool gv_sremagsisHatchActive;
bool gv_machinaDePlagamsHatchActive;
bool gv_zauberersHatchActive;
unit gv_contestant1;
unit gv_contestant2;
unitgroup gv_contestant1Group;
unitgroup gv_contestant2Group;
bool gv_matchGoingOn;
int gv_arenaWaitingTextTag;
playergroup gv_playersintheArena;
int[5] gv_potionHotkeyTextTag;
string gv_potionCooldownName;
string gv_aSPCooldownName;
int[5] gv_grandOrbofAngerCount;
bool[5] gv_occulusofWarning;
bool[5] gv_facetofRevenge;
bool[5] gv_crystalofRebirth;
bool[5] gv_jewelofReturn;
bool[5] gv_stoneofProtection;
bool[5] gv_ringofQuickening;
fixed[5][101] gv_stackCounts;
string[10] gv_stackChargeNames;
int gv_invenorySlot;
int gv_untitledVariable001;
playergroup gv_playersinUndergroundForest;
playergroup gv_playersinRelamyGorge;
playergroup gv_playersinRelamyCave;
trigger[5] gv_infestationSpawnTrigger;
playergroup gv_playersinInfestation;
unit[5][7][26] gv_inventory;
bool[5] gv_evolving;
bool[5] gv_allSeeingEye;
bool[5] gv_fireSkin;
bool[5] gv_dragonDying;
timer[5] gv_dyingTimer;
int[5] gv_dyingTimerWindow;
string[5] gv_attributeText;
int gv_screenButton;
bool[5] gv_reapplyingBuffs;
bool[5] gv_isIdle;
int gv_nosferatusDeathCount;
unit gv_nosferatu;
int[50] gv_enemyDeathCounts;
int[50] gv_unitKills;
unitgroup gv_zauberersMinions;
string[11] gv_zauberersMinionsUnitTypes;
region[10] gv_zauberersRegions;
unit gv_zauberersCrystal;
point gv_zauberersCrystalLocation;
unit gv_TimeWarpBot;
unit gv_MagicalDemonicSheep;
point gv_TimeWarpBotLocation;
bool[5] gv_zaubererFirstFormAlreadyDead;
revealer[6] gv_zauberer1stFormRevealer;
unitgroup gv_dragonInBattleWithZauberer1stForm;
playergroup gv_playersInBattleWithZauberer1stForm;
int gv_livingDragonsFightingZauberer1stForm;
unit gv_zauberer1stForm;
unitgroup gv_dragonInBattleWithZauberer2ndForm;
playergroup gv_playersInBattleWithZauberer2ndForm;
playergroup gv_playersWhoHaveDefeatedZauberer;
bool gv_zaubererDead;
int gv_livingDragonsFightingZauberer2ndForm;
unit gv_zauberer2ndForm;
timer gv_zaubererTimer;
int gv_zaubererTimerWindow;
int[5] gv_machinaDePlagamWarning;
unitgroup gv_unitsthatdidDamagetoMachinaDePlagam;
bool gv_machinaDePlagamisDead;
sound[5] gv_machinaDePlagamsTheme;
bool[5] gv_inFightwithMachinaDePlagam;
bool gv_respawningMachinaDePlagam;
unit gv_machinaDePlagam;
unitgroup gv_machinaDePlagamsBackup;
int gv_sremagsiWarning;
bool gv_sremagsiDead;
sound[5] gv_sremagsisTheme;
bool[5] gv_inFightWithSremagsi;
unitgroup gv_unitsthatdidDamagetoSremagsi;
bool gv_respawningSremagsi;
unit gv_sremagsi;
unit gv_tolic;
unit gv_korlic;
unit gv_madawc;
sound gv_guardiansTheme;
bool gv_guardiansDead;
unit[9] gv_mineralBlocks;
unitgroup gv_dragonsInBattleWithGuardians;
playergroup gv_playersinBattlewithGuardians;
bool[5] gv_inFightWithGaurdians;
unit gv_zauberersStatue;
unitgroup gv_guardians;
int gv_numGaurdiansDead;
revealer[5] gv_guardianRevealers;
int gv_numPlayersHigherThan25;
int gv_livingDragonsinGaurdian;
int gv_syritalWarning;
bool gv_syritalDead;
sound[5] gv_syritalsTheme;
bool[5] gv_inFightwithSyrital;
unitgroup gv_unitsthatdidDamagetoSyrital;
bool gv_respawningSyrital;
unit gv_syrital;
region[8] gv_bioDomeWastelandRegions;
unitgroup[8] gv_bioDomeWastelandUnits;
region[11] gv_cretonTrenchRegions;
unitgroup[11] gv_cretonTrenchUnits;
region[39] gv_cretonRegions;
unitgroup[39] gv_cretonUnits;
bool gv_cretonSpawned;
unitgroup[11] gv_verbotenInfestationUnits;
region[11] gv_verbotenInfestationsRegions;
bool[5] gv_verbotenInfestationSpawned;
region[8] gv_verbotenForestRegions;
unitgroup[8] gv_verbotenForestUnits;
unitgroup[6] gv_wastelandUnitGroups;
region[6] gv_wastelandRegions;
unitgroup[5] gv_relamyPassUnits;
region[5] gv_relamyPassRegions;
unitgroup[9] gv_relamyGorgeUnits;
region[9] gv_relamyGorgeRegions;
string[4] gv_relamyGorgeUnitTypes;
unitgroup[5] gv_relamyCanyonUnits;
region[5] gv_relamyCanyonRegions;
region[6] gv_relamyHillsRegions;
unitgroup[6] gv_relamyHillsUnits;
region[9] gv_undergroundForestRegions;
unitgroup[9] gv_undergroundForestUnits;
string[3] gv_undergroundForestUnitTypes;
bool[5][6] gv_unlockedWaypoints;
playergroup gv_playersInBioDome;
unitgroup gv_dragonsInBioDome;
unitgroup gv_bDZombieUnits;
unitgroup gv_bDCretonUnits;
unitgroup gv_bDVerbotenUnits;
unitgroup gv_bDRelamyUnits;
unitgroup gv_bDWastelandUnits;
point[5] gv_respawnPoint;
region[5] gv_dragonLocation;
string[5] gv_locationText;
string[5] gv_locationString;
bool[5] gv_epicModeOn;
int gv_mortuusKillCount;
int gv_mortuusKillCountStacks;
bool gv_playersSetUp;
bank[5] gv_stashBank;
bank[5] gv_playerBank;
int gv_ofHumanPlayers;
playergroup gv_humanPlayers;
string[101] gv_enemyUnitTypes;
bool[5] gv_unitispatrolling;
bool[5] gv_unitisattackmoving;
bool[5] gv_aPFixed;
int[5] gv_gold;
int[5] gv_pvPPoints;
int[5] gv_shards;
bool[5] gv_accesingBank;
fixed[5] gv_currentexp;
unitgroup gv_dragons;
int gv_leadboard;
bool[5] gv_gameBeat;
int gv_showTalentsButton;
bool[5] gv_inCinematic;
unit[5] gv_stash;
point[5] gv_stashLocation;
bool[5] gv_hRCChecked;
bool[5] gv_hPCChecked;
int gv_days;
int gv_hours;
int gv_minutes;
playergroup gv_playerswatchingintrocinematic;
unit gv_introCinematicZauberer;
bool[5] gv_playerhasseenIntro;
playergroup gv_playerswatchingendingcinematic;
int[5] gv_infernoCount;
bool[5] gv_isSavingExiting;
bool[5] gv_autosavePrevention;
int gv_hPCConstant;
int gv_hRCConstant;

void FakeInitGlobals () {
    int init_i;
    int init_j;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.questDialog.state = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.questDialog.textBox = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.questDialog.reward = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.questDialog.recommendedLevel = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.questDialog.accept = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.questDialog.decline = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.talkDialog.state = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.talkDialog.textBox = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.talkDialog.accept = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.rewardDialog.state = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.rewardDialog.textBox = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.rewardDialog.accept = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[0].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[0].ping = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[1].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[1].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[1].ping = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[2].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[2].ping = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[3].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[3].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[3].ping = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[4].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[4].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[4].ping = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[5].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[5].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[5].ping = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[6].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[6].ping = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[7].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[7].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[7].ping = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[8].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[8].ping = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[9].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.storyQuests[9].ping = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.manaQuests[0].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.manaQuests[0].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.manaQuests[1].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.manaQuests[1].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.manaQuests[2].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.manaQuests[2].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.manaQuests[3].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.manaQuests[3].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.manaQuests[4].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.manaQuests[4].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.manaQuests[5].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.manaQuests[5].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.baseQuests[0].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.baseQuests[0].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.baseQuests[1].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.baseQuests[1].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.detsefniQuests[0].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.detsefniQuests[0].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.sergeantListerQuests[0].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.sergeantListerQuests[0].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.greedQuests[0].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.greedQuests[0].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.madelineQuests[0].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.madelineQuests[0].objective = c_invalidObjectiveId;
    }
    gv_robus = UnitFromId(4066);
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.malinQuests[0].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.malinQuests[0].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.ampQuests[0].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.ampQuests[0].objective = c_invalidObjectiveId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.altossQuests[0].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.altossQuests[0].objective = c_invalidObjectiveId;
    }
    gv_illisus = UnitFromId(4393);
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.oleumQuests[0].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.oleumQuests[0].objective = c_invalidObjectiveId;
    }
    gv_shadowSeryn = UnitFromId(632);
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.serynQuests[0].textTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].quests.serynQuests[0].objective = c_invalidObjectiveId;
    }
    gv_contestant1 = UnitFromId(630);
    gv_contestant2 = UnitFromId(632);
    gv_contestant1Group = UnitGroupEmpty();
    gv_contestant2Group = UnitGroupEmpty();
    gv_arenaWaitingTextTag = c_textTagNone;
    gv_playersintheArena = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_potionHotkeyTextTag[init_i] = c_textTagNone;
    }
    gv_potionCooldownName = "Potions";
    gv_aSPCooldownName = "Attack Speed Potions";
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_stackChargeNames[init_i] = "";
    }
    gv_playersinUndergroundForest = PlayerGroupEmpty();
    gv_playersinRelamyGorge = PlayerGroupEmpty();
    gv_playersinRelamyCave = PlayerGroupEmpty();
    gv_playersinInfestation = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].skills.frostSpike = -1;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].skills.blizzard = -1;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].skills.fireball = -1;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].skills.fireClaw = -1;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].skills.flameEgg = -1;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].skills.inferno = -1;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].skills.nova = -1;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].skills.subzero = -1;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].skills.frozenArmour = -1;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_dyingTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_dyingTimerWindow[init_i] = c_timerWindowNone;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].stats.attributeDialog.state = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].stats.attributeDialog.textBox = c_invalidDialogControlId;
    }
    gv_screenButton = c_invalidDialogControlId;
    gv_nosferatu = UnitFromId(632);
    gv_zauberersMinions = UnitGroupEmpty();
    gv_zauberersCrystal = UnitFromId(2501);
    gv_zauberersCrystalLocation = UnitGetPosition(gv_zauberersCrystal);
    gv_TimeWarpBot = UnitFromId(571981628);
    gv_TimeWarpBotLocation =  UnitGetPosition(gv_TimeWarpBot);
    gv_dragonInBattleWithZauberer1stForm = UnitGroupEmpty();
    gv_playersInBattleWithZauberer1stForm = PlayerGroupEmpty();
    gv_dragonInBattleWithZauberer2ndForm = UnitGroupEmpty();
    gv_playersInBattleWithZauberer2ndForm = PlayerGroupEmpty();
    gv_zaubererTimer = TimerCreate();
    gv_zaubererTimerWindow = c_timerWindowNone;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_machinaDePlagamWarning[init_i] = c_textTagNone;
    }
    gv_unitsthatdidDamagetoMachinaDePlagam = UnitGroupEmpty();
    gv_machinaDePlagam = UnitFromId(1711);
    gv_machinaDePlagamsBackup = UnitGroupEmpty();
    gv_sremagsiWarning = c_textTagNone;
    gv_unitsthatdidDamagetoSremagsi = UnitGroupEmpty();
    gv_sremagsi = UnitFromId(1151);
    gv_tolic = UnitFromId(631);
    gv_korlic = UnitFromId(632);
    gv_madawc = UnitFromId(630);
    gv_dragonsInBattleWithGuardians = UnitGroupEmpty();
    gv_playersinBattlewithGuardians = PlayerGroupEmpty();
    gv_zauberersStatue = UnitFromId(628);
    gv_guardians = UnitGroupEmpty();
    gv_syritalWarning = c_textTagNone;
    gv_unitsthatdidDamagetoSyrital = UnitGroupEmpty();
    gv_syrital = UnitFromId(158);
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_bioDomeWastelandUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_cretonTrenchUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 38; init_i += 1) {
        gv_cretonUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_verbotenInfestationUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_verbotenForestUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_wastelandUnitGroups[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_relamyPassUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_relamyGorgeUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_relamyCanyonUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_relamyHillsUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_undergroundForestUnits[init_i] = UnitGroupEmpty();
    }
    gv_waypointDialog = c_invalidDialogId;
    gv_wastelandDialogButton = c_invalidDialogControlId;
    gv_relamyDialogButton = c_invalidDialogControlId;
    gv_verbotenDialogButton = c_invalidDialogControlId;
    gv_cretonDialogButton = c_invalidDialogControlId;
    gv_ballanDialogButton = c_invalidDialogControlId;
    gv_closeWaypointDialogButton = c_invalidDialogControlId;
    gv_playersInBioDome = PlayerGroupEmpty();
    gv_dragonsInBioDome = UnitGroupEmpty();
    gv_bDZombieUnits = UnitGroupEmpty();
    gv_bDCretonUnits = UnitGroupEmpty();
    gv_bDVerbotenUnits = UnitGroupEmpty();
    gv_bDRelamyUnits = UnitGroupEmpty();
    gv_bDWastelandUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_respawnPoint[init_i] = PointFromId(1);
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].locationDialog.state = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].locationDialog.textBox = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_locationText[init_i] = "Dragon's Nest";
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_locationString[init_i] = "Dragon's Nest";
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].dragon = UnitFromId(632);
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].stats.level = 1;
    }
    gv_humanPlayers = PlayerGroupEmpty();
    gv_dragons = UnitGroupEmpty();
    gv_leadboard = c_boardNone;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].talents.talentDialog.state = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].talents.talentDialog.button = c_invalidDialogControlId;
    }
    gv_showTalentsButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_stash[init_i] = UnitFromId(631);
    }
    gv_days = 1;
    gv_hours = 6;
    gv_timeofDayDialog = c_invalidDialogId;
    gv_timeofDayDialogLabel = c_invalidDialogControlId;
    gv_timeofDayDialogLabelText = StringExternal("Param/Value/C521DE8F");
    gv_playerswatchingintrocinematic = PlayerGroupEmpty();
    gv_playerswatchingendingcinematic = PlayerGroupEmpty();
    gv_hPCConstant = 3954;
    gv_hRCConstant = 7919;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].stats.reborn.dialog.state = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].stats.reborn.buttonDialog.state = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_players[init_i].stats.reborn.dialog.button = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            gv_players[init_i].stats.reborn.dialog.pointLabel[init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            gv_players[init_i].stats.reborn.dialog.pointButton[init_j] = c_invalidDialogControlId;
        }
    }
    gv_rebornDialogRebornPointLabel = c_invalidDialogControlId;
    gv_adminHandles[0] = "";
    gv_adminHandles[1] = "1-S2-1-4553710";
    gv_adminHandles[2] = "1-S2-1-3427636";
    gv_adminHandles[3] = "1-S2-1-4099844";
    gv_adminHandles[4] = "1-S2-1-3554203";
    gv_adminHandles[5] = "1-S2-1-2453495";
    gv_adminHandles[6] = "1-S2-1-5695184";
    gv_adminHandles[7] = "2-S2-1-2355723";
}
//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_AddExperience (unit lp_hero, fixed lp_experienceAmmount);
void gf_OpenQuestDialog (int lp_questingPlayer, text lp_questText, text lp_questName, text lp_reward, text lp_recommendedLevel);
void gf_CloseQuestDialog (int lp_questingPlayer);
void gf_OpenTalkDialog (int lp_questingPlayer, text lp_nPCName, text lp_dialog);
void gf_CloseTalkDialog (int lp_questingPlayer);
void gf_OpenRewardDialog (int lp_questingPlayer, text lp_questName, text lp_dialog);
void gf_CloseRewardDialog (int lp_questingPlayer);
void gf_SQ0Setup (int lp_player);
void gf_SQ1Setup (int lp_player);
void gf_SQ2Setup (int lp_player);
void gf_SQ3Setup (int lp_player);
void gf_SQ4Setup (int lp_player);
void gf_SQ5Setup (int lp_player);
void gf_SQ6Setup (int lp_player);
void gf_SQ7Setup (int lp_player);
void gf_SQ8Setup (int lp_player);
void gf_SQ9Setup (int lp_player);
fixed gf_CalculateHealthMissing (unit lp_unit);
void gf_SaveStackCounts (int lp_player);
void gf_RemoveWeapons (unit lp_hero);
void gf_SaveSkills (int lp_player);
void gf_FillInventory (int lp_player);
void gf_PutInventoryinInventory (int lp_player);
void gf_EvolvetoTeen (int lp_player);
void gf_EvolvetoAdult (int lp_player);
void gf_EvolvetoMaster (int lp_player);
void gf_EvolvetoLegendary (int lp_player);
void gf_ReapplyBuffs (int lp_player);
void gf_LevelUp (int lp_player);
void gf_ShowStats (unit lp_hero);
void gf_HideStats (unit lp_hero);
void gf_RandomEffectonAttack (fixed lp_percentChance, int lp_ammountof, string lp_debuff, unit lp_recievingUnit, unit lp_sendingUnit);
void gf_RandomlySpawnAllies (fixed lp_percentChance, int lp_ammountof, string lp_enemytospawn, unit lp_spawningUnit, unit lp_spawnee);
bool gf_RandomChance (fixed lp_percentChance);
void gf_NosferatusRelic (int lp_player, unit lp_hero, fixed lp_attackAmmount);
void gf_StickyShot (unit lp_hero, unit lp_target);
void gf_RealmSwitch (unit lp_hero, unit lp_target);
void gf_DualWield (unit lp_hero, unit lp_target, string lp_herosEffect, fixed lp_herosEffectDamage);
void gf_Rage (unit lp_hero, fixed lp_damagingAmount);
void gf_WaypointTeleport (int lp_player, region lp_waypoint);
void gf_ShowWaypointDialog (int lp_player);
void gf_HideWaypointDialog (int lp_player);
void gf_ResetTalentBuildandVariables (int lp_importantPlayer);
void gf_LoadStackCounts (int lp_player);
void gf_LoadSkills (int lp_player);
void gf_LoadHPC (int lp_player);
void gf_LoadHRC (int lp_player);
void gf_LoadDragonCheck (int lp_player);
void gf_LoadStash (int lp_player);
void gf_InitializeOne ();
void gf_InitializeTwo ();
void gf_InitializeThree ();
void gf_ChangeItemsOwner (int lp_player);
void gf_StatCheck (int lp_player);
void gf_Save (int lp_savingPlayer);
void gf_SaveHero (int lp_player);
void gf_SaveStash (int lp_player);
void gf_SaveHPC (int lp_player);
void gf_SaveHRC (int lp_player);
void gf_ApplyRebornStats (int lp_player);
bool gf_IsAdmin(int p);
void gf_InitializePlayers();
void gf_SetupPlayer(int p);
void gf_OcculusPingPlayer(int p);
//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_CreateQuestDialog;
trigger gt_CreateTalkDialog;
trigger gt_CreateRewardDialog;
trigger gt_QuestDecline;
trigger gt_TalkDialogClosed;
trigger gt_RunStoryQuestSetups;
trigger gt_SQ0PlayerEntersSQ0Region1;
trigger gt_SQ1PlayerTalkstoFelix;
trigger gt_SQ2PlayerEntersSQ2Region1;
trigger gt_SQ3PlayerTalkstoPetrose;
trigger gt_SQ3PlayerEntersVerbotenForest;
trigger gt_SQ4PlayerTalkstoRisdak;
trigger gt_SQ5PlayerEntersInfestation;
trigger gt_SQ5PlayerTalkstoPetrose;
trigger gt_SQ6PlayerEntersTeleporttoBiodome;
trigger gt_SQ7PlayerTalkstoLanae;
trigger gt_SQ8BiodomeEntered;
trigger gt_SQ8Crystal1Destroyed;
trigger gt_SQ8Crystal2Destroyed;
trigger gt_SQ8Crystal3Destroyed;
trigger gt_SQ8Crystal4Destroyed;
trigger gt_SQ8Crystal5Destroyed;
trigger gt_SQ8Crystal6Destroyed;
trigger gt_LoadSideQuests;
trigger gt_ManaQuest0TalktoMana;
trigger gt_ManaQuest0QuestAccept;
trigger gt_ManaQuest0EquipArmorP1;
trigger gt_ManaQuest0RewardAccept;
trigger gt_ManaQuest1TalktoMana;
trigger gt_ManaQuest1QuestAccept;
trigger gt_ManaQuest1KillSheep;
trigger gt_ManaQuest1RewardAccept;
trigger gt_ManaQuest2TalktoMana;
trigger gt_ManaQuest2QuestAccept;
trigger gt_ManaQuest2EnterWastelandWater;
trigger gt_ManaQuest2RewardAccept;
trigger gt_ManaQuest3TalktoMana;
trigger gt_ManaQuest3QuestAccept;
trigger gt_ManaQuest3KillSrepti;
trigger gt_ManaQuest3RewardAccept;
trigger gt_ManaQuest4TalktoMana;
trigger gt_ManaQuest4QuestAccept;
trigger gt_ManaQuest4RewardAccept;
trigger gt_ManaQuest4PurchasePotion;
trigger gt_ManaQuest5TalktoMana;
trigger gt_ManaQuest5QuestAccept;
trigger gt_ManaQuest5KillAlphaSrepti;
trigger gt_ManaQuest5RewardAccept;
trigger gt_BaseQuest0TalktoBase;
trigger gt_BaseQuest0QuestAccept;
trigger gt_BaseQuest0SetRespawnPointatWasteland;
trigger gt_BaseQuest0RewardAccept;
trigger gt_BaseQuest1TalktoBase;
trigger gt_BaseQuest1QuestAccept;
trigger gt_BaseQuest1ActivateBallanWaypoint;
trigger gt_BaseQuest2UseBallanWaypointtoWasteland;
trigger gt_BaseQuest1RewardAccept;
trigger gt_DetsefniQuest0TalktoDetsefni;
trigger gt_DetsefniQuest0QuestAccept;
trigger gt_DetsefniQuest0Kill25Sreptis;
trigger gt_DetsefniQuest0RewardAccept;
trigger gt_SergeantListerQuest0TalktoSergeantLister;
trigger gt_SergeantListeriQuest0QuestAccept;
trigger gt_SergeantListerQuest0Kill10CretonWarriors;
trigger gt_SergeantListerQuest0RewardAccept;
trigger gt_GreedQuest0TalktoGreed;
trigger gt_GreedQuest0QuestAccept;
trigger gt_GreedQuest0FindMisterScruffers;
trigger gt_GreedQuest0RewardAccept;
trigger gt_MadeleineQuest0TalktoMadeleine;
trigger gt_MadeleineQuest0QuestAccept;
trigger gt_MadeleineQuest0Kill30Karramarros;
trigger gt_MadeleineQuest0RewardAccept;
trigger gt_MalinQuest0TalktoMalin;
trigger gt_MalinQuest0QuestAccept;
trigger gt_MalinQuest0KillRobus;
trigger gt_MalinQuest0RewardAccept;
trigger gt_AmpQuest0TalktoAmp;
trigger gt_AmpQuest0QuestAccept;
trigger gt_AmpQuest0KillanEliteCretonWarrior;
trigger gt_AmpQuest0RewardAccept;
trigger gt_AltossQuest0TalktoAltoss;
trigger gt_AltossQuest0QuestAccept;
trigger gt_AltossQuest0Kill15Odvratans;
trigger gt_AltossQuest0RewardAccept;
trigger gt_IllisusLocustSpawn;
trigger gt_OleumQuest0TalktoOleum;
trigger gt_OleumQuest0QuestAccept;
trigger gt_OleumQuest0FindCrew137;
trigger gt_OleumQuest0KillIllisus;
trigger gt_OleumQuest0RewardAccept;
trigger gt_SerynQuest0TalktoSeryn;
trigger gt_SerynQuest0QuestAccept;
trigger gt_SerynQuest0KillSerynsShadow;
trigger gt_SerynQuest0RewardAccept;
trigger gt_ChaosUnitTypes;
trigger gt_SyritalsHatch;
trigger gt_GuardiansHatch;
trigger gt_SremagsisHatch;
trigger gt_MachinaDePlagamsHatch;
trigger gt_ZauberersHatch;
trigger gt_SpawnArenaText1;
trigger gt_SpawnArenaText2;
trigger gt_HeroLeavesArena1;
trigger gt_HeroLeavesArena2;
trigger gt_HeroEntersArena1;
trigger gt_HeroEntersArena2;
trigger gt_Contestant1Dies;
trigger gt_Contestant2Dies;
trigger gt_OpenInventorywhenclickonstash;
trigger gt_Dropstuffnotunlockedyet;
trigger gt_PotionHotkeyP1;
trigger gt_PotionHotkeyP2;
trigger gt_PotionHotkeyP3;
trigger gt_PotionHotkeyP4;
trigger gt_GrandOrbofAngerCounter;
trigger gt_GrandOrbofAngerEffectP1;
trigger gt_GrandOrbofAngerEffectP2;
trigger gt_GrandOrbofAngerEffectP3;
trigger gt_GrandOrbofAngerEffectP4;
trigger gt_Player1BuysOcculusofWarning;
trigger gt_Player2BuysOcculusofWarning;
trigger gt_Player3BuysOcculusofWarning;
trigger gt_Player4BuysOcculusofWarning;
trigger gt_OcculusPingPlayer1;
trigger gt_OcculusPingPlayer2;
trigger gt_OcculusPingPlayer3;
trigger gt_OcculusPingPlayer4;
trigger gt_PlayerBuysFacetofRevenge;
trigger gt_PlayerBuysCrystalofRebirth;
trigger gt_PlayerBuysJewelofReturn;
trigger gt_PlayerBuysStoneofProtection;
trigger gt_PlayerBuysRingofQuickening;
trigger gt_TolicsFireOrbDamageResponse;
trigger gt_SetStackChargeNames;
trigger gt_SaveStackCountsOnInventoryEdit;
trigger gt_SaveStackCountsPeriodically;
trigger gt_TownPortal;
trigger gt_Unitdropsitem;
trigger gt_Unitgainsitem;
trigger gt_ShieldCheck;
trigger gt_WeaponCheck;
trigger gt_SellingSystemRedux;
trigger gt_DisplayArmorShopTextTag;
trigger gt_DisplayWeaponShopTextTag;
trigger gt_DisplayOrbShopTextTag;
trigger gt_DisplayShardShopTextTag;
trigger gt_DisplayStashTextTagP1;
trigger gt_DisplayStashTextTagP2;
trigger gt_DisplayStashTextTagP3;
trigger gt_DisplayStashTextTagP4;
trigger gt_UndergroundForestEnter;
trigger gt_UndergroundForestExit;
trigger gt_RelamyGorgeEnter;
trigger gt_RelamyGorgeExit;
trigger gt_RelamyCaveEnter;
trigger gt_RelamyCaveExit;
trigger gt_SetInfestationSpawnTrigger;
trigger gt_VerbotenInfestationEnter;
trigger gt_VerbotenInfestationExit;
trigger gt_BlizzardFreezeChance;
trigger gt_LearnFireball;
trigger gt_LearnFireclaws;
trigger gt_LearnFlameegg;
trigger gt_LearnInferno;
trigger gt_LearnNova;
trigger gt_LearnFrostspike;
trigger gt_LearnBlizzard;
trigger gt_LearnSubzero;
trigger gt_LearnFrozenarmor;
trigger gt_CheckPlayerisnoteveolved;
trigger gt_DummyDies;
trigger gt_ReviveDragonNormal;
trigger gt_ReviveDragonPvP;
trigger gt_SetUpAttributeDialog;
trigger gt_Level0Check;
trigger gt_LevelUp;
trigger gt_EvolutionCheck;
trigger gt_Agility1;
trigger gt_Dexterity1;
trigger gt_Intelligence1;
trigger gt_Strength1;
trigger gt_Vitality1;
trigger gt_UpdateBuffs;
trigger gt_ShowTalents;
trigger gt_SetisIdleOn;
trigger gt_SetisIdleOff;
trigger gt_DefendYourself;
trigger gt_FrostSpike;
trigger gt_SyritalTalonsBurning;
trigger gt_RobusSpawnAllies;
trigger gt_RobusCarrionNeedlesPoison;
trigger gt_SremagsiTentacleDisorientation;
trigger gt_HeroCarrionNeedlesPoison;
trigger gt_HeroSremagsisTentaclesDisorientated;
trigger gt_NosferatusLogic;
trigger gt_NosferatuDies;
trigger gt_Nosferatudeathcount;
trigger gt_GreedisGood;
trigger gt_QuickLearner;
trigger gt_Herotakesmeleedamage;
trigger gt_Herotakesrangeddamage;
trigger gt_Herotakesspelldamage;
trigger gt_Herotakessplashdamage;
trigger gt_HeroMissranged;
trigger gt_HeroMissmelee;
trigger gt_HeroMissmelee1Shot;
trigger gt_Herogivesrangeddamage;
trigger gt_DarkDissulto;
trigger gt_EnemyAIAttacked;
trigger gt_EnemyAILava1;
trigger gt_EnemyAILava2;
trigger gt_EnemyAILava3;
trigger gt_EnemyAINest;
trigger gt_EnemySkillResponse;
trigger gt_ZauberersFavor;
trigger gt_CountUnitDeaths;
trigger gt_EliteCretonWarrior;
trigger gt_EliteCretonWatcher;
trigger gt_LargeSheep;
trigger gt_AlphaSrepti;
trigger gt_GivenMeleeDamageTextTag;
trigger gt_RecievedMeleeDamageTextTag;
trigger gt_SetZauberersMinionsUnitTypes;
trigger gt_SetZauberersRegions;
trigger gt_SpawnZauberersMinions;
trigger gt_DragonDiesinZauberer1;
trigger gt_DragonDiesinZauberer2;
trigger gt_WarpOutFromBossArena;
trigger gt_SpawnZauberer1stForm;
trigger gt_Zauberer1stFormDeath;
trigger gt_Zauberer1stFormAI;
trigger gt_SpawnZauberer2ndFormNormalWay;
trigger gt_SpawnZauberer2ndFormSpecial;
trigger gt_Zauberer2ndFormDeath;
trigger gt_Zauberer2ndFormAI;
trigger gt_MachinaDePlagamSethealth;
trigger gt_CreateMachinaDePlagamWarning;
trigger gt_DestroyMachinaDePlagamWarning;
trigger gt_HeroattacksMachinaDePlagam;
trigger gt_MachinaDePlagamEnter;
trigger gt_MachinaDePlagamLeave;
trigger gt_MachinaDePlagamDragonDies;
trigger gt_MachinaDePlagamDies;
trigger gt_MachinaDePlagamRespawn;
trigger gt_MachinaDePlagamBackup;
trigger gt_UnitattacksSremagsi;
trigger gt_Sremagsisethealth;
trigger gt_SremagsiLairEnter;
trigger gt_SremagsiLairExit;
trigger gt_SremagsiDragonDies;
trigger gt_SremagsiDies;
trigger gt_SremagsiRespawn;
trigger gt_CountPlayersGreaterthan25;
trigger gt_GuardianSpawn;
trigger gt_KorlicDies;
trigger gt_TolicDies;
trigger gt_MadawcDies;
trigger gt_NoDragonsinGaurdian;
trigger gt_GuardianRespawn;
trigger gt_UnitattacksSyrital;
trigger gt_SetSyritalHealth;
trigger gt_CreateSyritalWarning;
trigger gt_SyritalEnter;
trigger gt_SyritalLeave;
trigger gt_SyritalDragonDies;
trigger gt_SyritalDies;
trigger gt_SyritalRespawn;
trigger gt_SpawnEnemies;
trigger gt_SetupBioDomeWastelandRegions;
trigger gt_SpawnEnemiesBioDomeWasteland;
trigger gt_RespawnBioDomeWasteland;
trigger gt_SetupCretonTranchRegions;
trigger gt_SpawnEnemiesCretonTrench;
trigger gt_RespawnCretonTrench;
trigger gt_SetupCretonRegions;
trigger gt_SpawnEnemiesCreton;
trigger gt_RespawnCreton;
trigger gt_SetVerbotenInfestationRegions;
trigger gt_SpawnEnemiesVerbotenInfestationPlayer1;
trigger gt_SpawnEnemiesVerbotenInfestationPlayer2;
trigger gt_SpawnEnemiesVerbotenInfestationPlayer3;
trigger gt_SpawnEnemiesVerbotenInfestationPlayer4;
trigger gt_RespawnVerbotenInfestation;
trigger gt_SetVerbotenForestRegions;
trigger gt_RespawnVerbotenForest;
trigger gt_SetWastelandRegions;
trigger gt_RespawnWasteland;
trigger gt_SetRelamyPassRegions;
trigger gt_RespawnRelamyPass;
trigger gt_SetRelamyGorgeRegions;
trigger gt_RespawnRelamyGorge;
trigger gt_SetRelamyCanyonRegions;
trigger gt_RespawnRelamyCanyon;
trigger gt_SetRelamyHillsRegions;
trigger gt_RespawnRelamyHills;
trigger gt_SetUndergroundForestRegions;
trigger gt_RespawnUndergroundForest;
trigger gt_WastelandWanderControl;
trigger gt_RelamyPassWanderControl;
trigger gt_RelamyGorgeWanderControl;
trigger gt_RelamyCanyonWanderControl;
trigger gt_RelamyHillsWanderControl;
trigger gt_CreateWaypointDialog;
trigger gt_LoadWaypoints;
trigger gt_PlayerSelectsWaypoint;
trigger gt_PlayerLeavesWaypoint;
trigger gt_WaypointDialogButtonClicked;
trigger gt_DragonEntersWaypoint;
trigger gt_DragonLeavesWaypoint;
trigger gt_BDZombieUnitSpawn;
trigger gt_BDZombieUnitDeath;
trigger gt_BDCretonUnitSpawn;
trigger gt_BDCretonUnitDeath;
trigger gt_BDVerbotenUnitSpawn;
trigger gt_BDVerbotenUnitDeath;
trigger gt_BDRelamyUnitSpawn;
trigger gt_BDRelamyUnitDeath;
trigger gt_BDWastelandUnitSpawn;
trigger gt_BDWastelandUnitDeath;
trigger gt_TeleporttoBioDome;
trigger gt_TeleporttoCreton;
trigger gt_SetRPtoWastelands;
trigger gt_SetRPtoBallan;
trigger gt_SetRPtoRelamy;
trigger gt_SetRPtoVerbotenForestWaypoint;
trigger gt_SetRPtoCreton;
trigger gt_CreateDragonsNestWarning;
trigger gt_CreateRelamyPassWarning;
trigger gt_CreateRelamyCanyonWarning;
trigger gt_CreateRelamyHillsWarning;
trigger gt_CreateRelamyGorgeWarning;
trigger gt_CreateLavaPassWarning;
trigger gt_CreateVerbotenForestWarning;
trigger gt_CreateVerbotenInfestationWarning;
trigger gt_CreateRoadToBallanWarning;
trigger gt_CreateCretonWarning;
trigger gt_CreateSragmasiWarning;
trigger gt_SetUpLocationDialog;
trigger gt_LocationWasteland;
trigger gt_LocationDragonsNest;
trigger gt_LocationSyritalsLair;
trigger gt_LocationRelamyPass;
trigger gt_LocationRelamyCanyon;
trigger gt_LocationRelamyHills;
trigger gt_LocationVerbotenForest;
trigger gt_LocationCreton;
trigger gt_LocationCretonTrench;
trigger gt_LocationRoadtoBallan;
trigger gt_LocationBallan;
trigger gt_WastelandHealingWaterEnter;
trigger gt_WastelandHealingWaterLeave;
trigger gt_RelamyPassHealingWaterEnter;
trigger gt_RelamyPassHealingWaterLeave;
trigger gt_RelamyCanyonHealingWaterEnter;
trigger gt_RelamyCanyonHealingWaterLeave;
trigger gt_VerbotenForestHealingWaterEnter;
trigger gt_VerbotenForestHealingWaterLeave;
trigger gt_LavaEnter;
trigger gt_LavaExit;
trigger gt_Chaos;
trigger gt_ChaosHack;
trigger gt_RevealMap;
trigger gt_DevilsFlamethrower;
trigger gt_WingClaws;
trigger gt_TeleportInfestation;
trigger gt_IslandofWoecheat;
trigger gt_VTCount;
trigger gt_Location;
trigger gt_ResetQuest;
trigger gt_TeleportBioDome;
trigger gt_TeleporttoSpawn;
trigger gt_DebugTeleZauberer;
trigger gt_Invincibility;
trigger gt_SuitUp;
trigger gt_LevelDebug;
trigger gt_GetHandle;
trigger gt_NumberofUnitDeaths;
trigger gt_Weapons;
trigger gt_GetMoney;
trigger gt_ViewEnding;
trigger gt__50ShadesofGray;
trigger gt_GetMoney2;
trigger gt_GetMoney3;
trigger gt_Fastest;
trigger gt_MaxStats;
trigger gt_DropAll;
trigger gt_SpawnUnit;
trigger gt_SpawnEnemyUnit;
trigger gt_SpawnMassEnemyUnit;
trigger gt_SpawnItem;
trigger gt_MeleeBuffStacks;
trigger gt_NumBuffs;
trigger gt__999Talents;
trigger gt_PlayerLeaves;
trigger gt_OpenTalentMenu;
trigger gt_ResetTalentBuild;
trigger gt_InventoryTip;
trigger gt_WeaponTip;
trigger gt_DragonsNestTip;
trigger gt_ResetStatsTip;
trigger gt_ResetTalentsTip;
trigger gt_ResetQuestsTip;
trigger gt_HealingWaterTip;
trigger gt_VespeneGasTip;
trigger gt_EvolutionsTip;
trigger gt_ArmorTip;
trigger gt_SavingLoadingTip;
trigger gt_MusicCreditsTip;
trigger gt_AwesomePeopleTip;
trigger gt_StashLocationSetup;
trigger gt_LoadShards;
trigger gt_CreateTimeofdayDialog;
trigger gt_TimeofDayTick;
trigger gt_SetUpPlayers;
trigger gt_SetupRegions;
trigger gt_SetupTips;
trigger gt_SetUpTalentTree;
trigger gt_MakePlayer14anAlly;
trigger gt_SetUpUnitTypes;
trigger gt_HideUselessUI;
trigger gt_EnterDragonsNest;
trigger gt_LeaveDragonsNest;
trigger gt_CheckStats;
trigger gt_ResetStats;
trigger gt_BasicClaws;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicReturntoNormal;
trigger gt_PlayIntroTheme;
trigger gt_EndingCinematic;
trigger gt_EndingCinematicSaveExitNormal;
trigger gt_EndingCinematicSaveExitSpecialP1;
trigger gt_EndingCinematicSaveExitSpecialP2;
trigger gt_EndingCinematicSaveExitSpecialP3;
trigger gt_EndingCinematicSaveExitSpecialP4;
trigger gt_PeriodicallySave;
trigger gt_IceReborn;
trigger gt_FireReborn;
trigger gt_CreateRebornDialog;
trigger gt_ToggleRebornDialogVisibility;
trigger gt_RebornStats;
trigger gt_MakeEndingPlay;
//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;
//--------------------------------------------------------------------------------------------------
void FakeInitCustomAI () {
    int init_i;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}
//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;
    if (cai_playerAI[p] == "aiDF9A5388") { aiDF9A5388_start(p); }
    if (cai_playerAI[p] == "ai665651A4") { ai665651A4_start(p); }
}
//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiDF9A5388") { aiDF9A5388_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai665651A4") { ai665651A4_setDefGather(p, val); }
}
//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiDF9A5388") { return aiDF9A5388_getCustomData(p); }
    if (cai_playerAI[p] == "ai665651A4") { return ai665651A4_getCustomData(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiDF9A5388") { return aiDF9A5388_getLastWave(p); }
    if (cai_playerAI[p] == "ai665651A4") { return ai665651A4_getLastWave(p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiDF9A5388") { aiDF9A5388_waves_run(p, target); }
    if (cai_playerAI[p] == "ai665651A4") { ai665651A4_waves_run(p, target); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiDF9A5388") { aiDF9A5388_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai665651A4") { ai665651A4_waves_enable(p, val); }
}
//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiDF9A5388") { aiDF9A5388_waves_stop(); }
    if (ai == "ai665651A4") { ai665651A4_waves_stop(); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiDF9A5388") { aiDF9A5388_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai665651A4") { ai665651A4_wave_run(w, p, target, wait); }
}
//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiDF9A5388") { aiDF9A5388_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai665651A4") { ai665651A4_wave_enable(w, p, val); }
}
//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiDF9A5388") { return aiDF9A5388_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai665651A4") { return ai665651A4_wave_isEnabled(w, p); }
    return false;
}
//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiDF9A5388") { return aiDF9A5388_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai665651A4") { return ai665651A4_wave_createdUnits(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiDF9A5388") { return aiDF9A5388_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai665651A4") { return ai665651A4_wave_createdWave(w, p); }
    return null;
}
//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiDF9A5388", 14);
    cai_start("ai665651A4", 13);
}
//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}
//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_AddExperience (unit lp_hero, fixed lp_experienceAmmount) {
    // Implementation
    if (((UnitGetPropertyFixed(lp_hero, c_unitPropXP, c_unitPropCurrent) + lp_experienceAmmount) <= gv_mAXEXPERIENCE)) {
        UnitSetPropertyFixed(lp_hero, c_unitPropXP, (UnitGetPropertyFixed(lp_hero, c_unitPropXP, c_unitPropCurrent) + lp_experienceAmmount));
    }
    else {
        UnitSetPropertyFixed(lp_hero, c_unitPropXP, gv_mAXEXPERIENCE);
    }
}
void gf_OpenQuestDialog (int lp_questingPlayer, text lp_questText, text lp_questName, text lp_reward, text lp_recommendedLevel) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (lp_questingPlayer - 1);
    // Implementation
    gv_players[lv_qPI].quests.talking = true;
    libNtve_gf_PauseUnit(gv_players[lv_qPI].dragon, true);
    libNtve_gf_MakeUnitInvulnerable(gv_players[lv_qPI].dragon, true);
    DialogSetTitle(gv_players[lv_qPI].quests.questDialog.state, lp_questName);
    libNtve_gf_SetDialogItemText(gv_players[lv_qPI].quests.questDialog.textBox, lp_questText, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_players[lv_qPI].quests.questDialog.reward, lp_reward, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_players[lv_qPI].quests.questDialog.recommendedLevel, lp_recommendedLevel, PlayerGroupAll());
    DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.textBox, PlayerGroupSingle(lp_questingPlayer), true);
    DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.recommendedLevel, PlayerGroupSingle(lp_questingPlayer), true);
    DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.reward, PlayerGroupSingle(lp_questingPlayer), true);
    DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.decline, PlayerGroupSingle(lp_questingPlayer), true);
    DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.accept, PlayerGroupSingle(lp_questingPlayer), true);
    DialogSetVisible(gv_players[lv_qPI].quests.questDialog.state, PlayerGroupSingle(lp_questingPlayer), true);
}
void gf_CloseQuestDialog (int lp_questingPlayer) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (lp_questingPlayer - 1);
    // Implementation
    DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.textBox, PlayerGroupSingle(lp_questingPlayer), false);
    DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.decline, PlayerGroupSingle(lp_questingPlayer), false);
    DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.accept, PlayerGroupSingle(lp_questingPlayer), false);
    DialogSetVisible(gv_players[lv_qPI].quests.questDialog.state, PlayerGroupSingle(lp_questingPlayer), false);
    libNtve_gf_PauseUnit(gv_players[lv_qPI].dragon, false);
    libNtve_gf_MakeUnitInvulnerable(gv_players[lv_qPI].dragon, false);
    gv_players[lv_qPI].quests.talking = false;
    UnitClearSelection(lp_questingPlayer);
    UnitSelect(gv_players[lv_qPI].dragon, lp_questingPlayer, true);
}
void gf_OpenTalkDialog (int lp_questingPlayer, text lp_nPCName, text lp_dialog) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (lp_questingPlayer - 1);
    // Implementation
    gv_players[lv_qPI].quests.talking = true;
    libNtve_gf_PauseUnit(gv_players[lv_qPI].dragon, true);
    libNtve_gf_MakeUnitInvulnerable(gv_players[lv_qPI].dragon, true);
    DialogSetTitle(gv_players[lv_qPI].quests.talkDialog.state, lp_nPCName);
    libNtve_gf_SetDialogItemText(gv_players[lv_qPI].quests.talkDialog.textBox, lp_dialog, PlayerGroupSingle(lp_questingPlayer));
    DialogControlSetVisible(gv_players[lv_qPI].quests.talkDialog.textBox, PlayerGroupSingle(lp_questingPlayer), true);
    DialogControlSetVisible(gv_players[lv_qPI].quests.talkDialog.accept, PlayerGroupSingle(lp_questingPlayer), true);
    DialogSetVisible(gv_players[lv_qPI].quests.talkDialog.state, PlayerGroupSingle(lp_questingPlayer), true);
}
void gf_CloseTalkDialog (int lp_questingPlayer) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (lp_questingPlayer - 1);
    // Implementation
    DialogControlSetVisible(gv_players[lv_qPI].quests.talkDialog.accept, PlayerGroupSingle(lp_questingPlayer), false);
    DialogControlSetVisible(gv_players[lv_qPI].quests.talkDialog.textBox, PlayerGroupSingle(lp_questingPlayer), false);
    DialogSetVisible(gv_players[lv_qPI].quests.talkDialog.state, PlayerGroupSingle(lp_questingPlayer), false);
    libNtve_gf_PauseUnit(gv_players[lv_qPI].dragon, false);
    libNtve_gf_MakeUnitInvulnerable(gv_players[lv_qPI].dragon, false);
    gv_players[lv_qPI].quests.talking = false;
    UnitClearSelection(lp_questingPlayer);
    UnitSelect(gv_players[lv_qPI].dragon, lp_questingPlayer, true);
}
void gf_OpenRewardDialog (int lp_questingPlayer, text lp_questName, text lp_dialog) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (lp_questingPlayer - 1);
    // Implementation
    gv_players[lv_qPI].quests.talking = true;
    libNtve_gf_PauseUnit(gv_players[lv_qPI].dragon, true);
    libNtve_gf_MakeUnitInvulnerable(gv_players[lv_qPI].dragon, true);
    DialogSetTitle(gv_players[lv_qPI].quests.rewardDialog.state, lp_questName);
    libNtve_gf_SetDialogItemText(gv_players[lv_qPI].quests.rewardDialog.textBox, lp_dialog, PlayerGroupSingle(lp_questingPlayer));
    DialogControlSetVisible(gv_players[lv_qPI].quests.rewardDialog.accept, PlayerGroupSingle(lp_questingPlayer), true);
    DialogControlSetVisible(gv_players[lv_qPI].quests.rewardDialog.textBox, PlayerGroupSingle(lp_questingPlayer), true);
    DialogSetVisible(gv_players[lv_qPI].quests.rewardDialog.state, PlayerGroupSingle(lp_questingPlayer), true);
}
void gf_CloseRewardDialog (int lp_questingPlayer) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (lp_questingPlayer - 1);
    // Implementation
    DialogControlSetVisible(gv_players[lv_qPI].quests.rewardDialog.accept, PlayerGroupSingle(lp_questingPlayer), false);
    DialogControlSetVisible(gv_players[lv_qPI].quests.rewardDialog.textBox, PlayerGroupSingle(lp_questingPlayer), false);
    DialogSetVisible(gv_players[lv_qPI].quests.rewardDialog.state, PlayerGroupSingle(lp_questingPlayer), false);
    libNtve_gf_PauseUnit(gv_players[lv_qPI].dragon, false);
    libNtve_gf_MakeUnitInvulnerable(gv_players[lv_qPI].dragon, false);
    gv_players[lv_qPI].quests.talking = false;
    UnitClearSelection(lp_questingPlayer);
    UnitSelect(gv_players[lv_qPI].dragon, lp_questingPlayer, true);
}
void gf_SQ0Setup (int lp_player) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ0")) {
            gv_players[lv_pPI].quests.storyQuests[0].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ0", PlayerHandle(PlayerGroupLoopCurrent()));
        }
        else {
            gv_players[lv_pPI].quests.storyQuests[0].state = 0;
        }
        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].state == 0)) {
            ObjectiveCreateForPlayers(StringExternal("Param/Value/CEBC47B7"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].objective = ObjectiveLastCreated();
            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            gv_players[lv_pPI].quests.storyQuests[0].state = 1;
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingAlert", RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
        }
        else {
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].state == 1)) {
                ObjectiveCreateForPlayers(StringExternal("Param/Value/6FC5CF17"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].objective = ObjectiveLastCreated();
                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                gv_players[lv_pPI].quests.storyQuests[0].state = 1;
                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].ping);
                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingAlert", RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].ping = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.5);
            }
        }
    }
    PlayerGroupLoopEnd();
}
void gf_SQ1Setup (int lp_player) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ1")) {
            gv_players[lv_pPI].quests.storyQuests[1].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ1", PlayerHandle(PlayerGroupLoopCurrent()));
        }
        else {
            gv_players[lv_pPI].quests.storyQuests[1].state = 0;
        }
        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].state == 0)) {
            ObjectiveCreateForPlayers(StringExternal("Param/Value/2D1D02A1"), StringExternal("Param/Value/3AF1017C"), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingObjective", RegionGetCenter(RegionFromId(216)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].objective = ObjectiveLastCreated();
            TextTagCreate(StringExternal("Param/Value/433538AD"), 72, UnitGetPosition(UnitFromId(2511)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].textTag = TextTagLastCreated();
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
            TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
            TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2511), 1.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        }
        else {
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].state == 1)) {
                ObjectiveCreateForPlayers(StringExternal("Param/Value/A20BD716"), StringExternal("Param/Value/1C0DC747"), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].ping);
                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingBoss", RegionGetCenter(RegionFromId(5)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].ping = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.5);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].objective = ObjectiveLastCreated();
                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            }
            else {
                if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].state == 2)) {
                    ObjectiveCreateForPlayers(StringExternal("Param/Value/4D4A430E"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].ping);
                    PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingObjective", RegionGetCenter(RegionFromId(216)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].ping = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.5);
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].objective = ObjectiveLastCreated();
                    TextTagCreate(StringExternal("Param/Value/0C002467"), 72, UnitGetPosition(UnitFromId(2511)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].textTag = TextTagLastCreated();
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
                    TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2511), 1.0);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                    ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
            }
        }
    }
    PlayerGroupLoopEnd();
}
void gf_SQ2Setup (int lp_player) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ2")) {
            gv_players[lv_pPI].quests.storyQuests[2].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ2", PlayerHandle(PlayerGroupLoopCurrent()));
        }
        else {
            gv_players[lv_pPI].quests.storyQuests[2].state = 0;
        }
        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].state == 0)) {
            ObjectiveCreateForPlayers(StringExternal("Param/Value/1B0DED0D"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingAlert", RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].ping = PingLastCreated();
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].objective = ObjectiveLastCreated();
            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            gv_players[lv_pPI].quests.storyQuests[2].state = 1;
        }
        else {
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].state == 1)) {
                ObjectiveCreateForPlayers(StringExternal("Param/Value/86363A30"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].ping);
                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingAlert", RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].ping = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.5);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].objective = ObjectiveLastCreated();
                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                gv_players[lv_pPI].quests.storyQuests[2].state = 1;
            }
        }
    }
    PlayerGroupLoopEnd();
}
void gf_SQ3Setup (int lp_player) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ3")) {
            gv_players[lv_pPI].quests.storyQuests[3].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ3", PlayerHandle(PlayerGroupLoopCurrent()));
        }
        else {
            gv_players[lv_pPI].quests.storyQuests[3].state = 1;
        }
        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].state == 0)) {
            gv_players[lv_pPI].quests.storyQuests[3].state = 1;
        }
        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].state == 1)) {
            ObjectiveCreateForPlayers(StringExternal("Param/Value/7A96BE90"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingObjective", RegionGetCenter(RegionFromId(224)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].objective = ObjectiveLastCreated();
            TextTagCreate(StringExternal("Param/Value/F5B34512"), 72, UnitGetPosition(UnitFromId(1597)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].textTag = TextTagLastCreated();
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
            TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
            TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1597), 1.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        }
        else {
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].state == 2)) {
                ObjectiveCreateForPlayers(StringExternal("Param/Value/5EE0564A"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].ping);
                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingBoss", RegionGetCenter(RegionFromId(229)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].ping = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.5);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].objective = ObjectiveLastCreated();
                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            }
        }
    }
    PlayerGroupLoopEnd();
}
void gf_SQ4Setup (int lp_player) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ4")) {
            gv_players[lv_pPI].quests.storyQuests[4].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ4", PlayerHandle(PlayerGroupLoopCurrent()));
        }
        else {
            gv_players[lv_pPI].quests.storyQuests[4].state = 1;
        }
        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].state == 0)) {
            gv_players[lv_pPI].quests.storyQuests[4].state = 1;
        }
        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].state == 1)) {
            ObjectiveCreateForPlayers(StringExternal("Param/Value/AADC97B0"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingObjective", RegionGetCenter(RegionFromId(225)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].objective = ObjectiveLastCreated();
            TextTagCreate(StringExternal("Param/Value/87A071E6"), 72, UnitGetPosition(UnitFromId(1976)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].textTag = TextTagLastCreated();
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
            TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
            TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1976), 1.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        }
        else {
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].state == 2)) {
                ObjectiveCreateForPlayers(StringExternal("Param/Value/8C107748"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].ping);
                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingSimple", RegionGetCenter(RegionFromId(48)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].ping = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.5);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].objective = ObjectiveLastCreated();
                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            }
            else {
                if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].state == 3)) {
                    ObjectiveCreateForPlayers(StringExternal("Param/Value/76460735"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].ping);
                    PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingObjective", RegionGetCenter(RegionFromId(225)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].ping = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.5);
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].objective = ObjectiveLastCreated();
                    TextTagCreate(StringExternal("Param/Value/1A10F0CF"), 72, UnitGetPosition(UnitFromId(1976)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].textTag = TextTagLastCreated();
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
                    TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1976), 1.0);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                    ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
            }
        }
    }
    PlayerGroupLoopEnd();
}
void gf_SQ5Setup (int lp_player) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (lp_player - 1);
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ5")) {
            gv_players[lv_pPI].quests.storyQuests[5].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ5", PlayerHandle(PlayerGroupLoopCurrent()));
        }
        else {
            gv_players[lv_pPI].quests.storyQuests[5].state = 1;
        }
        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].state == 0)) {
            gv_players[lv_pPI].quests.storyQuests[5].state = 1;
        }
        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].state == 1)) {
            ObjectiveCreateForPlayers(StringExternal("Param/Value/64D12ECA"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingAlert", RegionGetCenter(RegionFromId(61)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].objective = ObjectiveLastCreated();
            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        }
        else {
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].state == 2)) {
                ObjectiveCreateForPlayers(StringExternal("Param/Value/44E480EE"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].ping);
                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingBoss", RegionGetCenter(RegionFromId(229)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].ping = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.5);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].objective = ObjectiveLastCreated();
                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            }
            else {
                if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].state == 3)) {
                    ObjectiveCreateForPlayers(StringExternal("Param/Value/C8EE6AC6"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].ping);
                    PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingObjective", RegionGetCenter(RegionFromId(224)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].ping = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.5);
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].objective = ObjectiveLastCreated();
                    TextTagCreate(StringExternal("Param/Value/AC39DF53"), 72, UnitGetPosition(UnitFromId(1597)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].textTag = TextTagLastCreated();
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
                    TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1597), 5.0);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                    ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
            }
        }
    }
    PlayerGroupLoopEnd();
}
void gf_SQ6Setup (int lp_player) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ6")) {
            gv_players[lv_pPI].quests.storyQuests[6].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ6", PlayerHandle(PlayerGroupLoopCurrent()));
        }
        else {
            gv_players[lv_pPI].quests.storyQuests[6].state = 1;
        }
        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[6].state == 0)) {
            gv_players[lv_pPI].quests.storyQuests[6].state = 1;
        }
        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[6].state == 1)) {
            ObjectiveCreateForPlayers(StringExternal("Param/Value/6525BF43"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[6].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingAlert", RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[6].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[6].objective = ObjectiveLastCreated();
            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[6].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        }
    }
    PlayerGroupLoopEnd();
}
void gf_SQ7Setup (int lp_player) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ7")) {
            gv_players[lv_pPI].quests.storyQuests[7].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ7", PlayerHandle(PlayerGroupLoopCurrent()));
        }
        else {
            gv_players[lv_pPI].quests.storyQuests[7].state = 0;
        }
        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].state == 0)) {
            ObjectiveCreateForPlayers(StringExternal("Param/Value/FAFD0670"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingObjective", UnitGetPosition(UnitFromId(2595)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping = PingLastCreated();
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective = ObjectiveLastCreated();
            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            TextTagCreate(StringExternal("Param/Value/DDE5287F"), 72, UnitGetPosition(UnitFromId(2595)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].textTag = TextTagLastCreated();
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
            TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
            TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2595), 5.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
            gv_players[lv_pPI].quests.storyQuests[7].state = 1;
        }
        else {
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].state == 1)) {
                ObjectiveCreateForPlayers(StringExternal("Param/Value/377F54EA"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping);
                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingObjective", UnitGetPosition(UnitFromId(2595)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.5);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective = ObjectiveLastCreated();
                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                TextTagCreate(StringExternal("Param/Value/5E52AED5"), 72, UnitGetPosition(UnitFromId(2595)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].textTag = TextTagLastCreated();
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
                TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2595), 5.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
            }
            else {
                if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].state == 2)) {
                    ObjectiveCreateForPlayers(StringExternal("Param/Value/6D95D414"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping);
                    PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingBoss", UnitGetPosition(UnitFromId(1711)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.5);
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective = ObjectiveLastCreated();
                    ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
                else {
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].state == 3)) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/90310BF6"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingObjective", UnitGetPosition(UnitFromId(2595)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective = ObjectiveLastCreated();
                        ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                        TextTagCreate(StringExternal("Param/Value/F69E26DF"), 72, UnitGetPosition(UnitFromId(2595)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].textTag = TextTagLastCreated();
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
                        TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2595), 5.0);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                    }
                }
            }
        }
    }
    PlayerGroupLoopEnd();
}
void gf_SQ8Setup (int lp_player) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ8")) {
            gv_players[lv_pPI].quests.storyQuests[8].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ8", PlayerHandle(PlayerGroupLoopCurrent()));
        }
        else {
            gv_players[lv_pPI].quests.storyQuests[8].state = 0;
        }
        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 0)) {
            ObjectiveCreateForPlayers(StringExternal("Param/Value/AF3CF266"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingAlert", RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
            gv_players[lv_pPI].quests.storyQuests[8].state = 1;
        }
        else {
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 1)) {
                ObjectiveCreateForPlayers(StringExternal("Param/Value/9FE4C48D"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingAlert", RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.5);
            }
            else {
                if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 2)) {
                    ObjectiveCreateForPlayers(StringExternal("Param/Value/DBB6DB82"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                    ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                    PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingNumeric1", UnitGetPosition(UnitFromId(1880)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.5);
                }
                else {
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 3)) {
                        ObjectiveCreateForPlayers(StringExternal("Param/Value/19669321"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                        ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingNumeric2", UnitGetPosition(UnitFromId(1881)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                    }
                    else {
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 4)) {
                            ObjectiveCreateForPlayers(StringExternal("Param/Value/C6717FEF"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingNumeric3", UnitGetPosition(UnitFromId(1882)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                            PingSetScale(PingLastCreated(), 0.5);
                        }
                        else {
                            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 5)) {
                                ObjectiveCreateForPlayers(StringExternal("Param/Value/8E333976"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingNumeric4", UnitGetPosition(UnitFromId(1883)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                                PingSetScale(PingLastCreated(), 0.5);
                            }
                            else {
                                if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 6)) {
                                    ObjectiveCreateForPlayers(StringExternal("Param/Value/1B167411"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                                    ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                                    PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                                    PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingNumeric5", UnitGetPosition(UnitFromId(1884)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                                    PingSetScale(PingLastCreated(), 0.5);
                                }
                                else {
                                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 7)) {
                                        ObjectiveCreateForPlayers(StringExternal("Param/Value/64C7FA63"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                                        ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingNumeric6", UnitGetPosition(UnitFromId(2501)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
                                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                                        PingSetScale(PingLastCreated(), 0.5);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    PlayerGroupLoopEnd();
}
void gf_SQ9Setup (int lp_player) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Implementation
    PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ9")) {
            gv_players[lv_pPI].quests.storyQuests[9].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ9", PlayerHandle(PlayerGroupLoopCurrent()));
        }
        else {
            gv_players[lv_pPI].quests.storyQuests[9].state = 0;
        }
        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].state == 0)) {
            ObjectiveCreateForPlayers(StringExternal("Param/Value/4EB31843"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].objective = ObjectiveLastCreated();
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingBoss", RegionGetCenter(RegionFromId(214)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].ping = PingLastCreated();
            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            gv_players[lv_pPI].quests.storyQuests[9].state = 1;
        }
        else {
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].state == 1)) {
                ObjectiveCreateForPlayers(StringExternal("Param/Value/223ED8F2"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].objective = ObjectiveLastCreated();
                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].ping);
                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingBoss", RegionGetCenter(RegionFromId(214)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].ping = PingLastCreated();
                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            }
            else {
                if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].state == 2)) {
                    ObjectiveCreateForPlayers(StringExternal("Param/Value/176FF71B"), StringToText(""), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].objective = ObjectiveLastCreated();
                    PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].ping);
                    PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingBoss", RegionGetCenter(RegionFromId(214)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].ping = PingLastCreated();
                    ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
            }
        }
    }
    PlayerGroupLoopEnd();
}
fixed gf_CalculateHealthMissing (unit lp_unit) {
    // Variable Declarations
    fixed lv_healthMissing;
    // Variable Initialization
    // Implementation
    lv_healthMissing = (UnitGetPropertyFixed(lp_unit, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent));
    return lv_healthMissing;
}
void gf_SaveStackCounts (int lp_player) {
    // Variable Declarations
    int lv_tPI;
    // Variable Initialization
    // Implementation
    lv_tPI = (lp_player - 1);
    UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_tPI].dragon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SmallHealthPotion")) {
            gv_stackCounts[lv_tPI][0] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[0]);
            BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, "SHP", PlayerHandle(lp_player), gv_stackCounts[lv_tPI][0]);
        }
        else {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "MediumHealthPotion")) {
                gv_stackCounts[lv_tPI][1] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[1]);
                BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, "MHP", PlayerHandle(lp_player), gv_stackCounts[lv_tPI][1]);
            }
            else {
                if ((UnitGetType(UnitGroupLoopCurrent()) == "LargeHealthPotion")) {
                    gv_stackCounts[lv_tPI][2] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[2]);
                    BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, "LHP", PlayerHandle(lp_player), gv_stackCounts[lv_tPI][2]);
                }
                else {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandHealthPotion")) {
                        gv_stackCounts[lv_tPI][3] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[3]);
                        BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, "GHP", PlayerHandle(lp_player), gv_stackCounts[lv_tPI][3]);
                    }
                    else {
                        if ((UnitGetType(UnitGroupLoopCurrent()) == "SmallAttackSpeedPotion")) {
                            gv_stackCounts[lv_tPI][4] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[4]);
                            BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, "SASP", PlayerHandle(lp_player), gv_stackCounts[lv_tPI][4]);
                        }
                        else {
                            if ((UnitGetType(UnitGroupLoopCurrent()) == "MediumAttackSpeedPotion")) {
                                gv_stackCounts[lv_tPI][5] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[5]);
                                BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, "MASP", PlayerHandle(lp_player), gv_stackCounts[lv_tPI][5]);
                            }
                            else {
                                if ((UnitGetType(UnitGroupLoopCurrent()) == "LargeAttackSpeedPotion")) {
                                    gv_stackCounts[lv_tPI][6] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[6]);
                                    BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, "LASP", PlayerHandle(lp_player), gv_stackCounts[lv_tPI][6]);
                                }
                                else {
                                    if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandAttackSpeedPotion")) {
                                        gv_stackCounts[lv_tPI][7] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[7]);
                                        BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, "GASP", PlayerHandle(lp_player), gv_stackCounts[lv_tPI][7]);
                                    }
                                    else {
                                        if ((UnitGetType(UnitGroupLoopCurrent()) == "TownPortal")) {
                                            gv_stackCounts[lv_tPI][8] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[8]);
                                            BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, "TP", PlayerHandle(lp_player), gv_stackCounts[lv_tPI][8]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    UnitGroupLoopEnd();
}
void gf_RemoveWeapons (unit lp_hero) {
    // Variable Declarations
    unit lv_weapon;
    // Variable Initialization
    // Implementation
    UnitGroupLoopBegin(UnitInventoryGroup(lp_hero));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 1)) {
            lv_weapon = UnitGroupLoopCurrent();
            break;
        }
    }
    UnitGroupLoopEnd();
    UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 0));
    UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 1));
    UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 2));
    UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 3));
    UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 4));
    UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 5));
    UnitWeaponAdd(lp_hero, ((UnitGetType(lv_weapon))), null);
}
void gf_SaveSkills (int lp_player) {
    // Variable Declarations
    int lv_pi;
    // Variable Initialization
    lv_pi = (lp_player - 1);
    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
        if (UnitAbilityCheck(gv_players[lv_pi].dragon, "Fireball", true)) {
            gv_players[lv_pi].skills.fireball = UnitAbilityGetLevel(gv_players[lv_pi].dragon, "Fireball");
        }
        if (UnitAbilityCheck(gv_players[lv_pi].dragon, "FireClaws", true)) {
            gv_players[lv_pi].skills.fireClaw = UnitAbilityGetLevel(gv_players[lv_pi].dragon, "FireClaws");
        }
        if (UnitAbilityCheck(gv_players[lv_pi].dragon, "FlameEgg", true)) {
            gv_players[lv_pi].skills.flameEgg = UnitAbilityGetLevel(gv_players[lv_pi].dragon, "FlameEgg");
        }
        if (UnitAbilityCheck(gv_players[lv_pi].dragon, "Inferno", true)) {
            gv_players[lv_pi].skills.inferno = UnitAbilityGetLevel(gv_players[lv_pi].dragon, "Inferno");
        }
        if (UnitAbilityCheck(gv_players[lv_pi].dragon, "Nova", true)) {
            gv_players[lv_pi].skills.nova = UnitAbilityGetLevel(gv_players[lv_pi].dragon, "Nova");
        }
        if (UnitAbilityCheck(gv_players[lv_pi].dragon, "FrostSpike", true)) {
            gv_players[lv_pi].skills.frostSpike = UnitAbilityGetLevel(gv_players[lv_pi].dragon, "FrostSpike");
        }
        if (UnitAbilityCheck(gv_players[lv_pi].dragon, "Blizzard", true)) {
            gv_players[lv_pi].skills.blizzard = UnitAbilityGetLevel(gv_players[lv_pi].dragon, "Blizzard");
        }
        if (UnitAbilityCheck(gv_players[lv_pi].dragon, "SubZero", true)) {
            gv_players[lv_pi].skills.subzero = UnitAbilityGetLevel(gv_players[lv_pi].dragon, "SubZero");
        }
        if (UnitAbilityCheck(gv_players[lv_pi].dragon, "FrozenArmor", true)) {
            gv_players[lv_pi].skills.frozenArmour = UnitAbilityGetLevel(gv_players[lv_pi].dragon, "FrozenArmor");
        }
        BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, "FDFB", PlayerHandle(lp_player), gv_players[lv_pi].skills.fireball);
        BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, "FDFC", PlayerHandle(lp_player), gv_players[lv_pi].skills.fireClaw);
        BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, "FDFE", PlayerHandle(lp_player), gv_players[lv_pi].skills.flameEgg);
        BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, "FDI", PlayerHandle(lp_player), gv_players[lv_pi].skills.inferno);
        BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, "FDN", PlayerHandle(lp_player), gv_players[lv_pi].skills.nova);
        BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, "IDFS", PlayerHandle(lp_player), gv_players[lv_pi].skills.frostSpike);
        BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, "IDB", PlayerHandle(lp_player), gv_players[lv_pi].skills.blizzard);
        BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, "IDSZ", PlayerHandle(lp_player), gv_players[lv_pi].skills.subzero);
        BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, "IDFA", PlayerHandle(lp_player), gv_players[lv_pi].skills.frozenArmour);
    }
}
void gf_FillInventory (int lp_player) {
    int autoA1B49F80_ae;
    int autoA1B49F80_ai;
    int auto652F10A5_ae;
    int auto652F10A5_ai;
    // Variable Declarations
    int lv_pI;
    int lv_c;
    int lv_s;
    // Variable Initialization
    lv_c = 1;
    lv_s = 1;
    // Implementation
    lv_pI = (lp_player - 1);
    autoA1B49F80_ae = 6;
    autoA1B49F80_ai = 1;
    lv_c = 1;
    for ( ; ( (autoA1B49F80_ai >= 0 && lv_c <= autoA1B49F80_ae) || (autoA1B49F80_ai <= 0 && lv_c >= autoA1B49F80_ae) ) ; lv_c += autoA1B49F80_ai ) {
        auto652F10A5_ae = 25;
        auto652F10A5_ai = 1;
        lv_s = 1;
        for ( ; ( (auto652F10A5_ai >= 0 && lv_s <= auto652F10A5_ae) || (auto652F10A5_ai <= 0 && lv_s >= auto652F10A5_ae) ) ; lv_s += auto652F10A5_ai ) {
            gv_inventory[lv_pI][lv_c][lv_s] = null;
        }
    }
    UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_pI].dragon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gv_inventory[lv_pI][UnitInventoryContainer(UnitGroupLoopCurrent())][UnitInventorySlot(UnitGroupLoopCurrent())] = UnitGroupLoopCurrent();
    }
    UnitGroupLoopEnd();
}
void gf_PutInventoryinInventory (int lp_player) {
    int auto632BA966_ae;
    int auto632BA966_ai;
    int auto3293DE15_ae;
    int auto3293DE15_ai;
    // Variable Declarations
    int lv_pI;
    int lv_c;
    int lv_s;
    // Variable Initialization
    lv_c = 1;
    lv_s = 1;
    // Implementation
    lv_pI = (lp_player - 1);
    auto632BA966_ae = 6;
    auto632BA966_ai = 1;
    lv_c = 1;
    for ( ; ( (auto632BA966_ai >= 0 && lv_c <= auto632BA966_ae) || (auto632BA966_ai <= 0 && lv_c >= auto632BA966_ae) ) ; lv_c += auto632BA966_ai ) {
        auto3293DE15_ae = 25;
        auto3293DE15_ai = 1;
        lv_s = 1;
        for ( ; ( (auto3293DE15_ai >= 0 && lv_s <= auto3293DE15_ae) || (auto3293DE15_ai <= 0 && lv_s >= auto3293DE15_ae) ) ; lv_s += auto3293DE15_ai ) {
            if (((UnitGetType(gv_inventory[lv_pI][lv_c][lv_s]) != null) && (UnitGetType(gv_inventory[lv_pI][lv_c][lv_s]) != ""))) {
                UnitInventoryCreate(gv_players[lv_pI].dragon, UnitGetType(gv_inventory[lv_pI][lv_c][lv_s]));
                UnitInventoryMove(UnitInventoryLastCreated(), lv_c, lv_s);
            }
        }
    }
}
void gf_EvolvetoTeen (int lp_player) {
    // Variable Declarations
    unit lv_tempDragon;
    int lv_tempAgility;
    int lv_tempDexterity;
    int lv_tempIntelligence;
    int lv_tempStrength;
    int lv_tempVitality;
    int lv_tempReborn;
    int lv_evolvingPlayerIndex;
    int lv_evolvingPlayer;
    int lv_n;
    // Variable Initialization
    lv_evolvingPlayerIndex = (lp_player - 1);
    lv_evolvingPlayer = lp_player;
    // Implementation
    gv_evolving[lv_evolvingPlayerIndex] = true;
    TriggerEnable(gt_SaveStackCountsOnInventoryEdit, false);
    TriggerEnable(gt_SaveStackCountsPeriodically, false);
    lv_tempVitality = gv_players[lv_evolvingPlayerIndex].stats.vitality;
    lv_tempStrength = gv_players[lv_evolvingPlayerIndex].stats.strength;
    lv_tempIntelligence = gv_players[lv_evolvingPlayerIndex].stats.intelligence;
    lv_tempDexterity = gv_players[lv_evolvingPlayerIndex].stats.dexterity;
    lv_tempAgility = gv_players[lv_evolvingPlayerIndex].stats.agility;
    lv_tempReborn = gv_players[lv_evolvingPlayerIndex].stats.reborn.count;
    lv_tempDragon = gv_players[lv_evolvingPlayerIndex].dragon;
    gf_FillInventory(lv_evolvingPlayer);
    gf_SaveStackCounts(lv_evolvingPlayer);
    UIDisplayMessage(PlayerGroupSingle(lv_evolvingPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/F24E8F1E"));
    if ((GameAttributePlayerValue("1", lv_evolvingPlayer) == "0001")) {
        UnitCreate(1, "TeenDragon", c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
    }
    else {
        UnitCreate(1, "TeenIceDragon", c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
    }
    gv_players[lv_evolvingPlayerIndex].dragon = UnitLastCreated();
    gf_PutInventoryinInventory(lv_evolvingPlayer);
    UnitRemove(lv_tempDragon);
    BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, "Dragon", PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
    gf_LoadStackCounts(lv_evolvingPlayer);
    gf_LoadSkills(lv_evolvingPlayer);
    while ((lv_tempVitality > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddVitality", lv_evolvingPlayer, 1);
        lv_tempVitality = (lv_tempVitality - 1);
    }
    while ((lv_tempStrength > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddStrength", lv_evolvingPlayer, 1);
        lv_tempStrength = (lv_tempStrength - 1);
    }
    while ((lv_tempIntelligence > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddIntelligence", lv_evolvingPlayer, 1);
        lv_tempIntelligence = (lv_tempIntelligence - 1);
    }
    while ((lv_tempDexterity > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddDexterity", lv_evolvingPlayer, 1);
        lv_tempDexterity = (lv_tempDexterity - 1);
    }
    while ((lv_tempAgility > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddAgility", lv_evolvingPlayer, 1);
        lv_tempAgility = (lv_tempAgility - 1);
    }
    while ((lv_tempReborn > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "BlessingofDrache", lv_evolvingPlayer, 1);
        lv_tempReborn = (lv_tempReborn - 1);
    }
    BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, "Dragon", PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
    if (gv_fireSkin[lv_evolvingPlayerIndex]) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "FireSkin", lv_evolvingPlayerIndex, 1);
    }
    if (gv_allSeeingEye[lv_evolvingPlayerIndex]) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AllSeeingEye", lv_evolvingPlayerIndex, 1);
    }
    gv_players[lv_evolvingPlayerIndex].stats.attributePoints = 5.0;
    gv_attributeText[lv_evolvingPlayerIndex] = FixedToString(gv_players[lv_evolvingPlayerIndex].stats.attributePoints, 0);
    libNtve_gf_SetDialogItemText(gv_players[lv_evolvingPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_evolvingPlayerIndex]), PlayerGroupSingle(lv_evolvingPlayer));
    UnitSelect(gv_players[lv_evolvingPlayerIndex].dragon, lv_evolvingPlayer, true);
    gf_ReapplyBuffs(lv_evolvingPlayer);
    lib1_gf_GrantTalentPoints(1, lv_evolvingPlayer);
    Wait(5.0, c_timeGame);
    TriggerEnable(gt_SaveStackCountsOnInventoryEdit, true);
    TriggerEnable(gt_SaveStackCountsPeriodically, true);
    gv_evolving[lv_evolvingPlayerIndex] = false;
}
void gf_EvolvetoAdult (int lp_player) {
    // Variable Declarations
    unit lv_tempDragon;
    int lv_tempAgility;
    int lv_tempDexterity;
    int lv_tempIntelligence;
    int lv_tempStrength;
    int lv_tempVitality;
    int lv_tempReborn;
    int lv_evolvingPlayerIndex;
    int lv_evolvingPlayer;
    int lv_n;
    // Variable Initialization
    lv_evolvingPlayerIndex = (lp_player - 1);
    lv_evolvingPlayer = lp_player;
    // Implementation
    gv_evolving[lv_evolvingPlayerIndex] = true;
    TriggerEnable(gt_SaveStackCountsOnInventoryEdit, false);
    TriggerEnable(gt_SaveStackCountsPeriodically, false);
    lv_tempVitality = gv_players[lv_evolvingPlayerIndex].stats.vitality;
    lv_tempStrength = gv_players[lv_evolvingPlayerIndex].stats.strength;
    lv_tempIntelligence = gv_players[lv_evolvingPlayerIndex].stats.intelligence;
    lv_tempDexterity = gv_players[lv_evolvingPlayerIndex].stats.dexterity;
    lv_tempAgility = gv_players[lv_evolvingPlayerIndex].stats.agility;
    lv_tempReborn = gv_players[lv_evolvingPlayerIndex].stats.reborn.count;
    lv_tempDragon = gv_players[lv_evolvingPlayerIndex].dragon;
    gf_FillInventory(lv_evolvingPlayer);
    gf_SaveStackCounts(lv_evolvingPlayer);
    if ((GameAttributePlayerValue("1", lv_evolvingPlayer) == "0001")) {
        UnitCreate(1, "AdultDragon", c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
    }
    else {
        UnitCreate(1, "AdultIceDragon", c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
    }
    gv_players[lv_evolvingPlayerIndex].dragon = UnitLastCreated();
    gf_PutInventoryinInventory(lv_evolvingPlayer);
    UnitRemove(lv_tempDragon);
    BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, "Dragon", PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
    gf_LoadStackCounts(lv_evolvingPlayer);
    gf_LoadSkills(lv_evolvingPlayer);
    while ((lv_tempVitality > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddVitality", lv_evolvingPlayer, 1);
        lv_tempVitality = (lv_tempVitality - 1);
    }
    while ((lv_tempStrength > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddStrength", lv_evolvingPlayer, 1);
        lv_tempStrength = (lv_tempStrength - 1);
    }
    while ((lv_tempIntelligence > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddIntelligence", lv_evolvingPlayer, 1);
        lv_tempIntelligence = (lv_tempIntelligence - 1);
    }
    while ((lv_tempDexterity > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddDexterity", lv_evolvingPlayer, 1);
        lv_tempDexterity = (lv_tempDexterity - 1);
    }
    while ((lv_tempAgility > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddAgility", lv_evolvingPlayer, 1);
        lv_tempAgility = (lv_tempAgility - 1);
    }
    while ((lv_tempReborn > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "BlessingofDrache", lv_evolvingPlayer, 1);
        lv_tempReborn = (lv_tempReborn - 1);
    }
    BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, "Dragon", PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
    if (gv_fireSkin[lv_evolvingPlayerIndex]) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "FireSkin", lv_evolvingPlayerIndex, 1);
    }
    if (gv_allSeeingEye[lv_evolvingPlayerIndex]) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AllSeeingEye", lv_evolvingPlayerIndex, 1);
    }
    gv_players[lv_evolvingPlayerIndex].stats.attributePoints += 5.0;
    gv_attributeText[lv_evolvingPlayerIndex] = FixedToString(gv_players[lv_evolvingPlayerIndex].stats.attributePoints, 0);
    libNtve_gf_SetDialogItemText(gv_players[lv_evolvingPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_evolvingPlayerIndex]), PlayerGroupSingle(lv_evolvingPlayer));
    UnitSelect(gv_players[lv_evolvingPlayerIndex].dragon, lv_evolvingPlayer, true);
    gf_ReapplyBuffs(lv_evolvingPlayer);
    lib1_gf_GrantTalentPoints(1, lv_evolvingPlayer);
    Wait(5.0, c_timeGame);
    TriggerEnable(gt_SaveStackCountsOnInventoryEdit, true);
    TriggerEnable(gt_SaveStackCountsPeriodically, true);
    gv_evolving[lv_evolvingPlayerIndex] = false;
}
void gf_EvolvetoMaster (int lp_player) {
    // Variable Declarations
    unit lv_tempDragon;
    int lv_tempAgility;
    int lv_tempDexterity;
    int lv_tempIntelligence;
    int lv_tempStrength;
    int lv_tempVitality;
    int lv_tempReborn;
    int lv_evolvingPlayerIndex;
    int lv_evolvingPlayer;
    int lv_n;
    // Variable Initialization
    lv_evolvingPlayerIndex = (lp_player - 1);
    lv_evolvingPlayer = lp_player;
    // Implementation
    TriggerEnable(gt_SaveStackCountsOnInventoryEdit, false);
    TriggerEnable(gt_SaveStackCountsPeriodically, false);
    lv_tempVitality = gv_players[lv_evolvingPlayerIndex].stats.vitality;
    lv_tempStrength = gv_players[lv_evolvingPlayerIndex].stats.strength;
    lv_tempIntelligence = gv_players[lv_evolvingPlayerIndex].stats.intelligence;
    lv_tempDexterity = gv_players[lv_evolvingPlayerIndex].stats.dexterity;
    lv_tempAgility = gv_players[lv_evolvingPlayerIndex].stats.agility;
    lv_tempReborn = gv_players[lv_evolvingPlayerIndex].stats.reborn.count;
    gv_evolving[lv_evolvingPlayerIndex] = true;
    lv_tempDragon = gv_players[lv_evolvingPlayerIndex].dragon;
    gf_FillInventory(lv_evolvingPlayer);
    gf_SaveStackCounts(lv_evolvingPlayer);
    if ((GameAttributePlayerValue("1", lv_evolvingPlayer) == "0001")) {
        UnitCreate(1, "MasterDragon", c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
    }
    else {
        UnitCreate(1, "MasterIceDragon", c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
    }
    gv_players[lv_evolvingPlayerIndex].dragon = UnitLastCreated();
    gf_PutInventoryinInventory(lv_evolvingPlayer);
    UnitRemove(lv_tempDragon);
    BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, "Dragon", PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
    gf_LoadStackCounts(lv_evolvingPlayer);
    gf_LoadSkills(lv_evolvingPlayer);
    while ((lv_tempVitality > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddVitality", lv_evolvingPlayer, 1);
        lv_tempVitality = (lv_tempVitality - 1);
    }
    while ((lv_tempStrength > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddStrength", lv_evolvingPlayer, 1);
        lv_tempStrength = (lv_tempStrength - 1);
    }
    while ((lv_tempIntelligence > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddIntelligence", lv_evolvingPlayer, 1);
        lv_tempIntelligence = (lv_tempIntelligence - 1);
    }
    while ((lv_tempDexterity > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddDexterity", lv_evolvingPlayer, 1);
        lv_tempDexterity = (lv_tempDexterity - 1);
    }
    while ((lv_tempAgility > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddAgility", lv_evolvingPlayer, 1);
        lv_tempAgility = (lv_tempAgility - 1);
    }
    while ((lv_tempReborn > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "BlessingofDrache", lv_evolvingPlayer, 1);
        lv_tempReborn = (lv_tempReborn - 1);
    }
    BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, "Dragon", PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
    if (gv_fireSkin[lv_evolvingPlayerIndex]) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "FireSkin", lv_evolvingPlayerIndex, 1);
    }
    if (gv_allSeeingEye[lv_evolvingPlayerIndex]) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AllSeeingEye", lv_evolvingPlayerIndex, 1);
    }
    gv_players[lv_evolvingPlayerIndex].stats.attributePoints += 5.0;
    gv_attributeText[lv_evolvingPlayerIndex] = FixedToString(gv_players[lv_evolvingPlayerIndex].stats.attributePoints, 0);
    libNtve_gf_SetDialogItemText(gv_players[lv_evolvingPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_evolvingPlayerIndex]), PlayerGroupSingle(lv_evolvingPlayer));
    UnitSelect(gv_players[lv_evolvingPlayerIndex].dragon, lv_evolvingPlayer, true);
    gf_ReapplyBuffs(lv_evolvingPlayer);
    lib1_gf_GrantTalentPoints(1, lv_evolvingPlayer);
    Wait(5.0, c_timeGame);
    gv_evolving[lv_evolvingPlayerIndex] = false;
    TriggerEnable(gt_SaveStackCountsOnInventoryEdit, true);
    TriggerEnable(gt_SaveStackCountsPeriodically, true);
}
void gf_EvolvetoLegendary (int lp_player) {
    // Variable Declarations
    unit lv_tempDragon;
    int lv_tempAgility;
    int lv_tempDexterity;
    int lv_tempIntelligence;
    int lv_tempStrength;
    int lv_tempVitality;
    int lv_tempReborn;
    int lv_evolvingPlayerIndex;
    int lv_evolvingPlayer;
    int lv_n;
    // Variable Initialization
    lv_evolvingPlayerIndex = (lp_player - 1);
    lv_evolvingPlayer = lp_player;
    // Implementation
    TriggerEnable(gt_SaveStackCountsOnInventoryEdit, false);
    TriggerEnable(gt_SaveStackCountsPeriodically, false);
    lv_tempVitality = gv_players[lv_evolvingPlayerIndex].stats.vitality;
    lv_tempStrength = gv_players[lv_evolvingPlayerIndex].stats.strength;
    lv_tempIntelligence = gv_players[lv_evolvingPlayerIndex].stats.intelligence;
    lv_tempDexterity = gv_players[lv_evolvingPlayerIndex].stats.dexterity;
    lv_tempAgility = gv_players[lv_evolvingPlayerIndex].stats.agility;
    lv_tempReborn = gv_players[lv_evolvingPlayerIndex].stats.reborn.count;
    gv_evolving[lv_evolvingPlayerIndex] = true;
    lv_tempDragon = gv_players[lv_evolvingPlayerIndex].dragon;
    gf_FillInventory(lv_evolvingPlayer);
    gf_SaveStackCounts(lv_evolvingPlayer);
    if ((GameAttributePlayerValue("1", lv_evolvingPlayer) == "0001")) {
        UnitCreate(1, "LegendaryDragon", c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
    }
    else {
        UnitCreate(1, "LegendaryIceDragon", c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
    }
    gv_players[lv_evolvingPlayerIndex].dragon = UnitLastCreated();
    gf_PutInventoryinInventory(lv_evolvingPlayer);
    UnitRemove(lv_tempDragon);
    BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, "Dragon", PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
    gf_LoadStackCounts(lv_evolvingPlayer);
    gf_LoadSkills(lv_evolvingPlayer);
    while ((lv_tempVitality > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddVitality", lv_evolvingPlayer, 1);
        lv_tempVitality = (lv_tempVitality - 1);
    }
    while ((lv_tempStrength > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddStrength", lv_evolvingPlayer, 1);
        lv_tempStrength = (lv_tempStrength - 1);
    }
    while ((lv_tempIntelligence > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddIntelligence", lv_evolvingPlayer, 1);
        lv_tempIntelligence = (lv_tempIntelligence - 1);
    }
    while ((lv_tempDexterity > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddDexterity", lv_evolvingPlayer, 1);
        lv_tempDexterity = (lv_tempDexterity - 1);
    }
    while ((lv_tempAgility > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AddAgility", lv_evolvingPlayer, 1);
        lv_tempAgility = (lv_tempAgility - 1);
    }
    while ((lv_tempReborn > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "BlessingofDrache", lv_evolvingPlayer, 1);
        lv_tempReborn = (lv_tempReborn - 1);
    }
    BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, "Dragon", PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
    if (gv_fireSkin[lv_evolvingPlayerIndex]) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "FireSkin", lv_evolvingPlayerIndex, 1);
    }
    if (gv_allSeeingEye[lv_evolvingPlayerIndex]) {
        UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, "AllSeeingEye", lv_evolvingPlayerIndex, 1);
    }
    gv_players[lv_evolvingPlayerIndex].stats.attributePoints += 5.0;
    gv_attributeText[lv_evolvingPlayerIndex] = FixedToString(gv_players[lv_evolvingPlayerIndex].stats.attributePoints, 0);
    libNtve_gf_SetDialogItemText(gv_players[lv_evolvingPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_evolvingPlayerIndex]), PlayerGroupSingle(lv_evolvingPlayer));
    UnitSelect(gv_players[lv_evolvingPlayerIndex].dragon, lv_evolvingPlayer, true);
    gf_ReapplyBuffs(lv_evolvingPlayer);
    lib1_gf_GrantTalentPoints(1, lv_evolvingPlayer);
    Wait(5.0, c_timeGame);
    gv_evolving[lv_evolvingPlayerIndex] = false;
    TriggerEnable(gt_SaveStackCountsOnInventoryEdit, true);
    TriggerEnable(gt_SaveStackCountsPeriodically, true);
}
void gf_ReapplyBuffs (int lp_player) {
    // Variable Declarations
    int lv_strengthoftheDragon;
    int lv_mindoftheDragon;
    int lv_powerOverwhelming;
    int lv_rage;
    int lv_vampiricTendencies;
    int lv_zeal;
    int lv_criticalCrepitus;
    int lv_importantPlayerIndex;
    int lv_importantPlayer;
    // Variable Initialization
    // Implementation
    lv_importantPlayerIndex = (lp_player - 1);
    lv_importantPlayer = lp_player;
    while (gv_reapplyingBuffs[lv_importantPlayerIndex]) {
        Wait(1.0, c_timeGame);
    }
    gv_reapplyingBuffs[lv_importantPlayerIndex] = true;
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "AbsorbMana", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "CriticalCrepitus", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "DarkDissulto", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "DualWield", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "GreedIsGood", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "Headshot", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "MindoftheDragon", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "PowerOverwhelming", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "QuickLearner", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "Rage", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "RealmSwitch", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "Retaliation", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "SpikedScales", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "StickyShot", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "StrengthoftheDragon", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "VampiricTendencies", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, "Zeal", lv_importantPlayer, c_unitBehaviorCountAll);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "StrengthoftheDragon", lv_importantPlayer, lib1_gv_strengthoftheDragonCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "MindoftheDragon", lv_importantPlayer, lib1_gv_mindoftheDragonCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "PowerOverwhelming", lv_importantPlayer, lib1_gv_powerOverwhelmingCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "Rage", lv_importantPlayer, lib1_gv_rageCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "VampiricTendencies", lv_importantPlayer, lib1_gv_vampiricTendenciesCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "Zeal", lv_importantPlayer, lib1_gv_zealCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "CriticalCrepitus", lv_importantPlayer, lib1_gv_criticalCrepitusCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "SpikedScales", lv_importantPlayer, lib1_gv_spikedScalesCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "Retaliation", lv_importantPlayer, lib1_gv_retaliationCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "Headshot", lv_importantPlayer, lib1_gv_headshotCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "StickyShot", lv_importantPlayer, lib1_gv_stickyShotCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "DualWield", lv_importantPlayer, lib1_gv_dualWieldCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "GreedIsGood", lv_importantPlayer, lib1_gv_greedisGoodCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "QuickLearner", lv_importantPlayer, lib1_gv_quickLearnerCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "AbsorbMana", lv_importantPlayer, lib1_gv_absorbManaCount[lv_importantPlayerIndex]);
    UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "RealmSwitch", lv_importantPlayer, lib1_gv_realmSwitchCount[lv_importantPlayerIndex]);
    gf_ApplyRebornStats(lp_player);
    gv_reapplyingBuffs[lv_importantPlayerIndex] = false;
}
trigger auto_gf_LevelUp_Trigger = null;
int auto_gf_LevelUp_lp_player;
void gf_LevelUp (int lp_player) {
    auto_gf_LevelUp_lp_player = lp_player;
    if (auto_gf_LevelUp_Trigger == null) {
        auto_gf_LevelUp_Trigger = TriggerCreate("auto_gf_LevelUp_TriggerFunc");
    }
    TriggerExecute(auto_gf_LevelUp_Trigger, false, false);
}
bool auto_gf_LevelUp_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_LevelUp_lp_player;
    // Variable Declarations
    int lv_importantPlayerIndex;
    int lv_importantPlayer;
    // Variable Initialization
    // Implementation
    lv_importantPlayer = lp_player;
    lv_importantPlayerIndex = (lp_player - 1);
    gv_players[lv_importantPlayerIndex].stats.level = FixedToInt(UnitGetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropLevel, c_unitPropCurrent));
    if ((!gv_evolving[lv_importantPlayerIndex]) && (gv_playersSetUp)) {
        lib1_gf_GrantTalentPoints(1, lv_importantPlayer);
        ActorCreate(ActorScopeFromUnit(gv_players[lv_importantPlayerIndex].dragon), "LevelUpEffect", null, null, null);
        SoundPlayOnUnit(SoundLink("LevelUp", -1), PlayerGroupSingle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].dragon, 0.0, 100.0, 0.0);
        gv_players[lv_importantPlayerIndex].stats.level = FixedToInt(UnitGetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropLevel, c_unitPropCurrent));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lp_player) + (StringExternal("Param/Value/684E7509") + IntToText(gv_players[lv_importantPlayerIndex].stats.level))));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_players[lv_importantPlayerIndex].dragon), c_animNameDefault, "Dance", c_animFlagNonLooping, c_animTimeDefault);
        BoardItemSetText(gv_leadboard, 2, 2, FixedToText(UnitGetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropLevel, c_unitPropCurrent), 0));
        gv_players[lv_importantPlayerIndex].stats.attributePoints = (gv_players[lv_importantPlayerIndex].stats.attributePoints + 5.0);
        gf_ShowStats(gv_players[lv_importantPlayerIndex].dragon);
        gv_attributeText[lv_importantPlayerIndex] = FixedToString(gv_players[lv_importantPlayerIndex].stats.attributePoints, 0);
        libNtve_gf_SetDialogItemText(gv_players[lv_importantPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_importantPlayerIndex]), PlayerGroupSingle(lv_importantPlayer));
        while (gv_players[lv_importantPlayerIndex].banks.accessing) {
            Wait(1.0, c_timeGame);
        }
        gv_players[lv_importantPlayerIndex].banks.accessing = true;
        BankValueSetFromFixed(gv_players[lv_importantPlayerIndex].banks.dragonBank, "AP", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.attributePoints);
        gv_players[lv_importantPlayerIndex].banks.accessing = false;
    }
    UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropEnergyPercent, 100.0);
    return true;
}
trigger auto_gf_ShowStats_Trigger = null;
unit auto_gf_ShowStats_lp_hero;
void gf_ShowStats (unit lp_hero) {
    auto_gf_ShowStats_lp_hero = lp_hero;
    if (auto_gf_ShowStats_Trigger == null) {
        auto_gf_ShowStats_Trigger = TriggerCreate("auto_gf_ShowStats_TriggerFunc");
    }
    TriggerExecute(auto_gf_ShowStats_Trigger, false, false);
}
bool auto_gf_ShowStats_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hero = auto_gf_ShowStats_lp_hero;
    // Implementation
    UnitAbilityShow(lp_hero, "Strength1", true);
    UnitAbilityShow(lp_hero, "Vitality1", true);
    UnitAbilityShow(lp_hero, "Intelligence1", true);
    UnitAbilityShow(lp_hero, "Dexterity1", true);
    UnitAbilityShow(lp_hero, "Agility1", true);
    return true;
}
trigger auto_gf_HideStats_Trigger = null;
unit auto_gf_HideStats_lp_hero;
void gf_HideStats (unit lp_hero) {
    auto_gf_HideStats_lp_hero = lp_hero;
    if (auto_gf_HideStats_Trigger == null) {
        auto_gf_HideStats_Trigger = TriggerCreate("auto_gf_HideStats_TriggerFunc");
    }
    TriggerExecute(auto_gf_HideStats_Trigger, false, false);
}
bool auto_gf_HideStats_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hero = auto_gf_HideStats_lp_hero;
    // Implementation
    UnitAbilityShow(lp_hero, "Strength1", false);
    UnitAbilityShow(lp_hero, "Vitality1", false);
    UnitAbilityShow(lp_hero, "Intelligence1", false);
    UnitAbilityShow(lp_hero, "Dexterity1", false);
    UnitAbilityShow(lp_hero, "Agility1", false);
    return true;
}
void gf_RandomEffectonAttack (fixed lp_percentChance, int lp_ammountof, string lp_debuff, unit lp_recievingUnit, unit lp_sendingUnit) {
    // Implementation
    if (gf_RandomChance(lp_percentChance)) {
        UnitBehaviorAdd(lp_recievingUnit, lp_debuff, lp_sendingUnit, lp_ammountof);
    }
}
void gf_RandomlySpawnAllies (fixed lp_percentChance, int lp_ammountof, string lp_enemytospawn, unit lp_spawningUnit, unit lp_spawnee) {
    // Implementation
    if (gf_RandomChance(lp_percentChance)) {
        libNtve_gf_UnitCreateFacingPoint(lp_ammountof, lp_enemytospawn, 0, 15, UnitGetPosition(lp_spawningUnit), UnitGetPosition(lp_spawnee));
    }
}
bool gf_RandomChance (fixed lp_percentChance) {
    // Implementation
    if ((RandomFixed(0.0, 100.0) < lp_percentChance)) {
        return true;
    }
    else {
        return false;
    }
}
trigger auto_gf_NosferatusRelic_Trigger = null;
int auto_gf_NosferatusRelic_lp_player;
unit auto_gf_NosferatusRelic_lp_hero;
fixed auto_gf_NosferatusRelic_lp_attackAmmount;
void gf_NosferatusRelic (int lp_player, unit lp_hero, fixed lp_attackAmmount) {
    auto_gf_NosferatusRelic_lp_player = lp_player;
    auto_gf_NosferatusRelic_lp_hero = lp_hero;
    auto_gf_NosferatusRelic_lp_attackAmmount = lp_attackAmmount;
    if (auto_gf_NosferatusRelic_Trigger == null) {
        auto_gf_NosferatusRelic_Trigger = TriggerCreate("auto_gf_NosferatusRelic_TriggerFunc");
    }
    TriggerExecute(auto_gf_NosferatusRelic_Trigger, false, false);
}
bool auto_gf_NosferatusRelic_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_NosferatusRelic_lp_player;
    unit lp_hero = auto_gf_NosferatusRelic_lp_hero;
    fixed lp_attackAmmount = auto_gf_NosferatusRelic_lp_attackAmmount;
    // Variable Declarations
    unitgroup lv_surroundingUnits;
    int lv_tag;
    // Variable Initialization
    lv_surroundingUnits = UnitGroupEmpty();
    lv_tag = c_textTagNone;
    // Implementation
    if ((RandomFixed(0.0, 100.0) < (1.0 * UnitBehaviorCount(lp_hero, "NosferatusRelic")))) {
        UnitSetPropertyFixed(lp_hero, c_unitPropLifePercent, 100.0);
        TextTagCreate(StringExternal("Param/Value/4AEFB157"), 50, UnitGetPosition(lp_hero), 5.0, true, true, PlayerGroupSingle(lp_player));
        lv_tag = TextTagLastCreated();
        TextTagSetVelocity(lv_tag, 0.1, 90.0);
        TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
        TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
    }
    if ((RandomFixed(0.0, 100.0) < (1.0 * UnitBehaviorCount(lp_hero, "NosferatusRelic")))) {
        UnitSetPropertyFixed(lp_hero, c_unitPropShieldsPercent, 100.0);
        TextTagCreate(StringExternal("Param/Value/42EFD948"), 50, UnitGetPosition(lp_hero), 5.0, true, true, PlayerGroupSingle(lp_player));
        lv_tag = TextTagLastCreated();
        TextTagSetVelocity(lv_tag, 0.1, 90.0);
        TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
        TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
    }
    if ((RandomFixed(0.0, 100.0) < (1.0 * UnitBehaviorCount(lp_hero, "NosferatusRelic")))) {
        UnitSetPropertyFixed(lp_hero, c_unitPropEnergyPercent, 100.0);
        TextTagCreate(StringExternal("Param/Value/CD490724"), 50, UnitGetPosition(lp_hero), 5.0, true, true, PlayerGroupSingle(lp_player));
        lv_tag = TextTagLastCreated();
        TextTagSetVelocity(lv_tag, 0.1, 90.0);
        TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
        TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
    }
    if ((RandomFixed(0.0, 100.0) < (1.0 * UnitBehaviorCount(lp_hero, "NosferatusRelic")))) {
        UnitAbilityReset(lp_hero, AbilityCommand("Fireball", 0), c_spendLocationAll);
        UnitAbilityReset(lp_hero, AbilityCommand("FireClaws", 0), c_spendLocationAll);
        UnitAbilityReset(lp_hero, AbilityCommand("FlameEgg", 0), c_spendLocationAll);
        UnitAbilityReset(lp_hero, AbilityCommand("Nova", 0), c_spendLocationAll);
        UnitAbilityReset(lp_hero, AbilityCommand("Inferno", 0), c_spendLocationAll);
        TextTagCreate(StringExternal("Param/Value/D979A8A4"), 50, UnitGetPosition(lp_hero), 5.0, true, true, PlayerGroupSingle(lp_player));
        lv_tag = TextTagLastCreated();
        TextTagSetVelocity(lv_tag, 0.1, 90.0);
        TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
        TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
    }
    if ((RandomFixed(0.0, 100.0) < (1.0 * UnitBehaviorCount(lp_hero, "NosferatusRelic")))) {
        TextTagCreate(StringExternal("Param/Value/3602F42D"), 50, UnitGetPosition(lp_hero), 5.0, true, true, PlayerGroupSingle(lp_player));
        lv_tag = TextTagLastCreated();
        TextTagSetVelocity(lv_tag, 0.1, 90.0);
        TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
        TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
    }
    if ((RandomFixed(0.0, 100.0) < (1.0 * UnitBehaviorCount(lp_hero, "NosferatusRelic")))) {
        lv_surroundingUnits = UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_hero), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(lp_hero));
        UnitGroupLoopBegin(lv_surroundingUnits);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitDamage(lp_hero, "CriticalStrike", UnitGroupLoopCurrent(), lp_attackAmmount);
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(UnitGroupLoopCurrent()));
            TextTagCreate(StringExternal("Param/Value/13ABAEAA"), 50, UnitGetPosition(UnitGroupLoopCurrent()), 5.0, true, true, PlayerGroupSingle(lp_player));
            lv_tag = TextTagLastCreated();
            TextTagSetVelocity(lv_tag, 0.1, 90.0);
            TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
            TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
        }
        UnitGroupLoopEnd();
    }
    return true;
}
void gf_StickyShot (unit lp_hero, unit lp_target) {
    // Variable Declarations
    fixed lv_randomNumber;
    int lv_thisTag;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    // Implementation
    lv_randomNumber = RandomFixed(0.0, 100.0);
    if ((lv_randomNumber < (0.5 * UnitBehaviorCount(lp_hero, "Sticky")))) {
        UnitBehaviorRemove(lp_target, "Sticky", c_unitBehaviorCountAll);
        UnitBehaviorAdd(lp_target, "Sticky", lp_hero, UnitBehaviorCount(lp_hero, "StickyShot"));
        TextTagCreate(StringExternal("Param/Value/8F5EE5D4"), 24, UnitGetPosition(lp_target), 1.0, true, true, PlayerGroupAll());
        lv_thisTag = TextTagLastCreated();
        TextTagSetVelocity(lv_thisTag, 0.25, 10.0);
        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
    }
}
void gf_RealmSwitch (unit lp_hero, unit lp_target) {
    // Variable Declarations
    fixed lv_randomNumber;
    int lv_thisTag;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    // Implementation
    lv_randomNumber = RandomFixed(0.0, 100.0);
    if ((lv_randomNumber < (0.5 * UnitBehaviorCount(lp_hero, "RealmSwitch")))) {
        UnitBehaviorAdd(lp_hero, "Vanished", lp_hero, 1);
        TextTagCreate(StringExternal("Param/Value/032643A8"), 30, UnitGetPosition(lp_hero), 0.0, true, true, PlayerGroupAll());
        lv_thisTag = TextTagLastCreated();
        TextTagSetVelocity(lv_thisTag, 0.5, 0.0);
        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
        TextTagCreate(StringExternal("Param/Value/3D64B2BA"), 30, UnitGetPosition(lp_hero), 0.0, true, true, PlayerGroupAll());
        lv_thisTag = TextTagLastCreated();
        TextTagSetVelocity(lv_thisTag, 0.5, 180.0);
        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
    }
}
void gf_DualWield (unit lp_hero, unit lp_target, string lp_herosEffect, fixed lp_herosEffectDamage) {
    // Variable Declarations
    fixed lv_randomNumber;
    int lv_thisTag;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    // Implementation
    lv_randomNumber = RandomFixed(0.0, 100.0);
    if ((lv_randomNumber < (0.5 * UnitBehaviorCount(lp_hero, "DualWield")))) {
        UnitDamage(lp_hero, lp_herosEffect, lp_target, 0.0);
        TextTagCreate((StringExternal("Param/Value/242D9ECB") + (FixedToText(lp_herosEffectDamage, 0) + StringExternal("Param/Value/73896267"))), 24, UnitGetPosition(lp_target), 1.0, true, true, PlayerGroupAll());
        lv_thisTag = TextTagLastCreated();
        TextTagSetVelocity(lv_thisTag, 0.75, 70.0);
        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
    }
}
void gf_Rage (unit lp_hero, fixed lp_damagingAmount) {
    // Variable Declarations
    int lv_thisTag;
    fixed lv_rageGain;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    // Implementation
    lv_rageGain = (lp_damagingAmount * (0.01 * UnitBehaviorCount(lp_hero, "Rage")));
    UnitSetPropertyFixed(lp_hero, c_unitPropEnergy, (UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent) + lv_rageGain));
    if ((lv_rageGain > 0.0)) {
        TextTagCreate(FixedToText(lv_rageGain, 0), 24, UnitGetPosition(lp_hero), 1.0, true, true, PlayerGroupAll());
        lv_thisTag = TextTagLastCreated();
        TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 0.00, 100.00));
        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
    }
}
void gf_WaypointTeleport (int lp_player, region lp_waypoint) {
    // Variable Declarations
    int lv_tPI;
    actor lv_effectActor1;
    actor lv_effectActor2;
    // Variable Initialization
    lv_tPI = (lp_player - 1);
    // Implementation
    libNtve_gf_PauseUnit(gv_players[lv_tPI].dragon, true);
    libNtve_gf_CreateModelAtPoint("TimeWarpLaunch", UnitGetPosition(gv_players[lv_tPI].dragon));
    lv_effectActor1 = libNtve_gf_ActorLastCreated();
    SoundPlayOnUnit(SoundLink("WarpGate_TrainStart", -1), PlayerGroupAll(), gv_players[lv_tPI].dragon, 0.0, 100.0, 0.0);
    Wait(0.45, c_timeGame);
    UnitSetPosition(gv_players[lv_tPI].dragon, RegionGetCenter(lp_waypoint), false);
    gv_respawnPoint[lv_tPI] = RegionGetCenter(lp_waypoint);
    libNtve_gf_CreateModelAtPoint("TimeWarp", RegionGetCenter(lp_waypoint));
    lv_effectActor2 = libNtve_gf_ActorLastCreated();
    SoundPlayOnUnit(SoundLink("WarpGate_TrainFinish", -1), PlayerGroupAll(), gv_players[lv_tPI].dragon, 0.0, 100.0, 0.0);
    Wait(0.45, c_timeGame);
    libNtve_gf_KillModel(lv_effectActor1);
    CameraPan(lp_player, RegionGetCenter(lp_waypoint), 0.0, -1, 10.0, false);
    libNtve_gf_PauseUnit(gv_players[lv_tPI].dragon, false);
    Wait(0.45, c_timeGame);
    libNtve_gf_KillModel(lv_effectActor2);
}
void gf_ShowWaypointDialog (int lp_player) {
    // Variable Declarations
    int lv_tPI;
    // Variable Initialization
    lv_tPI = (lp_player - 1);
    // Implementation
    if (gv_unlockedWaypoints[lv_tPI][0]) {
        DialogControlSetEnabled(gv_wastelandDialogButton, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(gv_wastelandDialogButton, PlayerGroupSingle(lp_player), true);
        if (libNtve_gf_UnitInRegion(gv_players[lv_tPI].dragon, RegionCircle(UnitGetPosition(UnitFromId(1199)), 2.0))) {
            DialogControlSetEnabled(gv_wastelandDialogButton, PlayerGroupSingle(lp_player), false);
        }
    }
    if (gv_unlockedWaypoints[lv_tPI][1]) {
        DialogControlSetEnabled(gv_ballanDialogButton, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(gv_ballanDialogButton, PlayerGroupSingle(lp_player), true);
        if (libNtve_gf_UnitInRegion(gv_players[lv_tPI].dragon, RegionCircle(UnitGetPosition(UnitFromId(1201)), 2.0))) {
            DialogControlSetEnabled(gv_ballanDialogButton, PlayerGroupSingle(lp_player), false);
        }
    }
    if (gv_unlockedWaypoints[lv_tPI][2]) {
        DialogControlSetEnabled(gv_relamyDialogButton, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(gv_relamyDialogButton, PlayerGroupSingle(lp_player), true);
        if (libNtve_gf_UnitInRegion(gv_players[lv_tPI].dragon, RegionCircle(UnitGetPosition(UnitFromId(607)), 2.0))) {
            DialogControlSetEnabled(gv_relamyDialogButton, PlayerGroupSingle(lp_player), false);
        }
    }
    if (gv_unlockedWaypoints[lv_tPI][3]) {
        DialogControlSetEnabled(gv_verbotenDialogButton, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(gv_verbotenDialogButton, PlayerGroupSingle(lp_player), true);
        if (libNtve_gf_UnitInRegion(gv_players[lv_tPI].dragon, RegionCircle(UnitGetPosition(UnitFromId(798)), 2.0))) {
            DialogControlSetEnabled(gv_verbotenDialogButton, PlayerGroupSingle(lp_player), false);
        }
    }
    if (gv_unlockedWaypoints[lv_tPI][4]) {
        DialogControlSetEnabled(gv_cretonDialogButton, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(gv_cretonDialogButton, PlayerGroupSingle(lp_player), true);
        if (libNtve_gf_UnitInRegion(gv_players[lv_tPI].dragon, RegionCircle(UnitGetPosition(UnitFromId(797)), 2.0))) {
            DialogControlSetEnabled(gv_cretonDialogButton, PlayerGroupSingle(lp_player), false);
        }
    }
    DialogSetVisible(gv_waypointDialog, PlayerGroupSingle(lp_player), true);
}
void gf_HideWaypointDialog (int lp_player) {
    // Variable Declarations
    int lv_tPI;
    // Variable Initialization
    lv_tPI = (lp_player - 1);
    // Implementation
    DialogControlSetVisible(gv_wastelandDialogButton, PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(gv_ballanDialogButton, PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(gv_relamyDialogButton, PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(gv_verbotenDialogButton, PlayerGroupSingle(lp_player), false);
    DialogControlSetVisible(gv_cretonDialogButton, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_waypointDialog, PlayerGroupSingle(lp_player), false);
}
void gf_ResetTalentBuildandVariables (int lp_importantPlayer) {
    // Implementation
    lib1_gf_ResetTalentBuild(lp_importantPlayer, FixedToInt(UnitGetPropertyFixed(gv_players[lp_importantPlayer - 1].dragon, c_unitPropLevel, c_unitPropCurrent)));
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "StrengthoftheDragon", lp_importantPlayer, lib1_gv_strengthoftheDragonCount[(lp_importantPlayer - 1)]);
    lib1_gv_strengthoftheDragonCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "MindoftheDragon", lp_importantPlayer, lib1_gv_mindoftheDragonCount[(lp_importantPlayer - 1)]);
    lib1_gv_mindoftheDragonCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "PowerOverwhelming", lp_importantPlayer, lib1_gv_powerOverwhelmingCount[(lp_importantPlayer - 1)]);
    lib1_gv_powerOverwhelmingCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "Rage", lp_importantPlayer, lib1_gv_rageCount[(lp_importantPlayer - 1)]);
    lib1_gv_rageCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "VampiricTendencies", lp_importantPlayer, lib1_gv_vampiricTendenciesCount[(lp_importantPlayer - 1)]);
    lib1_gv_vampiricTendenciesCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "Zeal", lp_importantPlayer, lib1_gv_zealCount[(lp_importantPlayer - 1)]);
    lib1_gv_zealCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "CriticalCrepitus", lp_importantPlayer, lib1_gv_criticalCrepitusCount[(lp_importantPlayer - 1)]);
    lib1_gv_criticalCrepitusCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "Headshot", lp_importantPlayer, lib1_gv_headshotCount[(lp_importantPlayer - 1)]);
    lib1_gv_headshotCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "StickyShot", lp_importantPlayer, lib1_gv_stickyShotCount[(lp_importantPlayer - 1)]);
    lib1_gv_stickyShotCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "DualWield", lp_importantPlayer, lib1_gv_dualWieldCount[(lp_importantPlayer - 1)]);
    lib1_gv_dualWieldCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "GreedIsGood", lp_importantPlayer, lib1_gv_greedisGoodCount[(lp_importantPlayer - 1)]);
    lib1_gv_greedisGoodCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "QuickLearner", lp_importantPlayer, lib1_gv_quickLearnerCount[(lp_importantPlayer - 1)]);
    lib1_gv_quickLearnerCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "SpikedScales", lp_importantPlayer, lib1_gv_spikedScalesCount[(lp_importantPlayer - 1)]);
    lib1_gv_spikedScalesCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "Retaliation", lp_importantPlayer, lib1_gv_retaliationCount[(lp_importantPlayer - 1)]);
    lib1_gv_retaliationCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "AbsorbMana", lp_importantPlayer, lib1_gv_absorbManaCount[(lp_importantPlayer - 1)]);
    lib1_gv_absorbManaCount[(lp_importantPlayer - 1)] = 0;
    UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, "RealmSwitch", lp_importantPlayer, lib1_gv_realmSwitchCount[(lp_importantPlayer - 1)]);
    lib1_gv_realmSwitchCount[(lp_importantPlayer - 1)] = 0;
}
void gf_LoadStackCounts (int lp_player) {
    // Variable Declarations
    int lv_tPI;
    fixed lv_chargesUsed;
    // Variable Initialization
    // Implementation
    lv_tPI = (lp_player - 1);
    UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_tPI].dragon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SmallHealthPotion")) {
            if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "SHP")) {
                lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, "SHP", PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[0]));
                UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[0], lv_chargesUsed);
            }
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) == "MediumHealthPotion")) {
            if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "MHP")) {
                lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, "MHP", PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[1]));
                UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[1], lv_chargesUsed);
            }
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) == "LargeHealthPotion")) {
            if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "LHP")) {
                lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, "LHP", PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[2]));
                UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[2], lv_chargesUsed);
            }
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandHealthPotion")) {
            if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "GHP")) {
                lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, "GHP", PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[3]));
                UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[3], lv_chargesUsed);
            }
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SmallAttackSpeedPotion")) {
            if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "SASP")) {
                lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, "SASP", PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[4]));
                UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[4], lv_chargesUsed);
            }
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) == "MediumAttackSpeedPotion")) {
            if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "MASP")) {
                lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, "MASP", PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[5]));
                UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[5], lv_chargesUsed);
            }
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) == "LargeAttackSpeedPotion")) {
            if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "LASP")) {
                lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, "LASP", PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[6]));
                UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[6], lv_chargesUsed);
            }
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandAttackSpeedPotion")) {
            if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "GASP")) {
                lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, "GASP", PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[7]));
                UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[7], lv_chargesUsed);
            }
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) == "TownPortal")) {
            if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "TP")) {
                lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, "TP", PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[8]));
                UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[8], lv_chargesUsed);
            }
        }
    }
    UnitGroupLoopEnd();
}
trigger auto_gf_LoadSkills_Trigger = null;
int auto_gf_LoadSkills_lp_player;
void gf_LoadSkills (int lp_player) {
    auto_gf_LoadSkills_lp_player = lp_player;
    if (auto_gf_LoadSkills_Trigger == null) {
        auto_gf_LoadSkills_Trigger = TriggerCreate("auto_gf_LoadSkills_TriggerFunc");
    }
    TriggerExecute(auto_gf_LoadSkills_Trigger, false, false);
}
bool auto_gf_LoadSkills_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_LoadSkills_lp_player;
    int auto393224BF_ae;
    int auto393224BF_ai;
    int autoF6240F41_ae;
    int autoF6240F41_ai;
    int autoAC6D5B7E_ae;
    int autoAC6D5B7E_ai;
    int auto81B57A14_ae;
    int auto81B57A14_ai;
    int autoD32DC9E4_ae;
    int autoD32DC9E4_ai;
    int auto44843EEF_ae;
    int auto44843EEF_ai;
    int autoB61BED0D_ae;
    int autoB61BED0D_ai;
    int auto188752F2_ae;
    int auto188752F2_ai;
    int auto02E715EE_ae;
    int auto02E715EE_ai;
    int auto89633E99_ae;
    int auto89633E99_ai;
    int auto7CC7289B_ae;
    int auto7CC7289B_ai;
    int auto4E29FC8D_ae;
    int auto4E29FC8D_ai;
    int autoE13BBE5B_ae;
    int autoE13BBE5B_ai;
    int auto479250D5_ae;
    int auto479250D5_ai;
    int auto92BBD8B5_ae;
    int auto92BBD8B5_ai;
    int autoE237CE34_ae;
    int autoE237CE34_ai;
    int auto1AAAE099_ae;
    int auto1AAAE099_ai;
    int autoD025A1A7_ae;
    int autoD025A1A7_ai;
    // Variable Declarations
    int lv_tPI;
    int lv_i;
    // Variable Initialization
    lv_tPI = (lp_player - 1);
    // Implementation
    if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "FDFB")) {
        gv_players[lv_tPI].skills.fireball = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, "FDFB", PlayerHandle(lp_player));
        if ((gv_players[lv_tPI].skills.fireball >= 0)) {
            if (!UnitAbilityCheck(gv_players[lv_tPI].dragon, "Fireball", true)) {
                autoF6240F41_ae = gv_players[lv_tPI].skills.fireball;
                autoF6240F41_ai = 1;
                lv_i = 0;
                for ( ; ( (autoF6240F41_ai >= 0 && lv_i <= autoF6240F41_ae) || (autoF6240F41_ai <= 0 && lv_i >= autoF6240F41_ae) ) ; lv_i += autoF6240F41_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsFire", 0)), c_orderQueueAddToEnd);
                }
            }
            else {
                auto393224BF_ae = gv_players[lv_tPI].skills.fireball;
                auto393224BF_ai = 1;
                lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, "Fireball") + 1);
                for ( ; ( (auto393224BF_ai >= 0 && lv_i <= auto393224BF_ae) || (auto393224BF_ai <= 0 && lv_i >= auto393224BF_ae) ) ; lv_i += auto393224BF_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsFire", 0)), c_orderQueueAddToEnd);
                }
            }
        }
    }
    if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "FDFC")) {
        gv_players[lv_tPI].skills.fireClaw = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, "FDFC", PlayerHandle(lp_player));
        if ((gv_players[lv_tPI].skills.fireClaw >= 0)) {
            if (!UnitAbilityCheck(gv_players[lv_tPI].dragon, "FireClaws", true)) {
                auto81B57A14_ae = gv_players[lv_tPI].skills.fireClaw;
                auto81B57A14_ai = 1;
                lv_i = 0;
                for ( ; ( (auto81B57A14_ai >= 0 && lv_i <= auto81B57A14_ae) || (auto81B57A14_ai <= 0 && lv_i >= auto81B57A14_ae) ) ; lv_i += auto81B57A14_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsFire", 1)), c_orderQueueAddToEnd);
                }
            }
            else {
                autoAC6D5B7E_ae = gv_players[lv_tPI].skills.fireClaw;
                autoAC6D5B7E_ai = 1;
                lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, "FireClaws") + 1);
                for ( ; ( (autoAC6D5B7E_ai >= 0 && lv_i <= autoAC6D5B7E_ae) || (autoAC6D5B7E_ai <= 0 && lv_i >= autoAC6D5B7E_ae) ) ; lv_i += autoAC6D5B7E_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsFire", 1)), c_orderQueueAddToEnd);
                }
            }
        }
    }
    if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "FDFE")) {
        gv_players[lv_tPI].skills.flameEgg = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, "FDFE", PlayerHandle(lp_player));
        if ((gv_players[lv_tPI].skills.flameEgg >= 0)) {
            if (!UnitAbilityCheck(gv_players[lv_tPI].dragon, "FlameEgg", true)) {
                auto44843EEF_ae = gv_players[lv_tPI].skills.flameEgg;
                auto44843EEF_ai = 1;
                lv_i = 0;
                for ( ; ( (auto44843EEF_ai >= 0 && lv_i <= auto44843EEF_ae) || (auto44843EEF_ai <= 0 && lv_i >= auto44843EEF_ae) ) ; lv_i += auto44843EEF_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsFire", 2)), c_orderQueueAddToEnd);
                }
            }
            else {
                autoD32DC9E4_ae = gv_players[lv_tPI].skills.flameEgg;
                autoD32DC9E4_ai = 1;
                lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, "FlameEgg") + 1);
                for ( ; ( (autoD32DC9E4_ai >= 0 && lv_i <= autoD32DC9E4_ae) || (autoD32DC9E4_ai <= 0 && lv_i >= autoD32DC9E4_ae) ) ; lv_i += autoD32DC9E4_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsFire", 2)), c_orderQueueAddToEnd);
                }
            }
        }
    }
    if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "FDI")) {
        gv_players[lv_tPI].skills.inferno = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, "FDI", PlayerHandle(lp_player));
        if ((gv_players[lv_tPI].skills.inferno >= 0)) {
            if (!UnitAbilityCheck(gv_players[lv_tPI].dragon, "Inferno", true)) {
                auto188752F2_ae = gv_players[lv_tPI].skills.inferno;
                auto188752F2_ai = 1;
                lv_i = 0;
                for ( ; ( (auto188752F2_ai >= 0 && lv_i <= auto188752F2_ae) || (auto188752F2_ai <= 0 && lv_i >= auto188752F2_ae) ) ; lv_i += auto188752F2_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsFire", 3)), c_orderQueueAddToEnd);
                }
            }
            else {
                autoB61BED0D_ae = gv_players[lv_tPI].skills.inferno;
                autoB61BED0D_ai = 1;
                lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, "Inferno") + 1);
                for ( ; ( (autoB61BED0D_ai >= 0 && lv_i <= autoB61BED0D_ae) || (autoB61BED0D_ai <= 0 && lv_i >= autoB61BED0D_ae) ) ; lv_i += autoB61BED0D_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsFire", 3)), c_orderQueueAddToEnd);
                }
            }
        }
    }
    if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "FDN")) {
        gv_players[lv_tPI].skills.nova = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, "FDN", PlayerHandle(lp_player));
        if ((gv_players[lv_tPI].skills.nova >= 0)) {
            if (!UnitAbilityCheck(gv_players[lv_tPI].dragon, "Nova", true)) {
                auto89633E99_ae = gv_players[lv_tPI].skills.nova;
                auto89633E99_ai = 1;
                lv_i = 0;
                for ( ; ( (auto89633E99_ai >= 0 && lv_i <= auto89633E99_ae) || (auto89633E99_ai <= 0 && lv_i >= auto89633E99_ae) ) ; lv_i += auto89633E99_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsFire", 4)), c_orderQueueAddToEnd);
                }
            }
            else {
                auto02E715EE_ae = gv_players[lv_tPI].skills.nova;
                auto02E715EE_ai = 1;
                lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, "Nova") + 1);
                for ( ; ( (auto02E715EE_ai >= 0 && lv_i <= auto02E715EE_ae) || (auto02E715EE_ai <= 0 && lv_i >= auto02E715EE_ae) ) ; lv_i += auto02E715EE_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsFire", 4)), c_orderQueueAddToEnd);
                }
            }
        }
    }
    if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "IDFS")) {
        gv_players[lv_tPI].skills.frostSpike = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, "IDFS", PlayerHandle(lp_player));
        if ((gv_players[lv_tPI].skills.frostSpike >= 0)) {
            if (!UnitAbilityCheck(gv_players[lv_tPI].dragon, "FrostSpike", true)) {
                auto4E29FC8D_ae = gv_players[lv_tPI].skills.frostSpike;
                auto4E29FC8D_ai = 1;
                lv_i = 0;
                for ( ; ( (auto4E29FC8D_ai >= 0 && lv_i <= auto4E29FC8D_ae) || (auto4E29FC8D_ai <= 0 && lv_i >= auto4E29FC8D_ae) ) ; lv_i += auto4E29FC8D_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsIce", 0)), c_orderQueueAddToEnd);
                }
            }
            else {
                auto7CC7289B_ae = gv_players[lv_tPI].skills.frostSpike;
                auto7CC7289B_ai = 1;
                lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, "FrostSpike") + 1);
                for ( ; ( (auto7CC7289B_ai >= 0 && lv_i <= auto7CC7289B_ae) || (auto7CC7289B_ai <= 0 && lv_i >= auto7CC7289B_ae) ) ; lv_i += auto7CC7289B_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsIce", 0)), c_orderQueueAddToEnd);
                }
            }
        }
    }
    if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "IDB")) {
        gv_players[lv_tPI].skills.blizzard = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, "IDB", PlayerHandle(lp_player));
        if ((gv_players[lv_tPI].skills.blizzard >= 0)) {
            if (!UnitAbilityCheck(gv_players[lv_tPI].dragon, "Blizzard", true)) {
                auto479250D5_ae = gv_players[lv_tPI].skills.blizzard;
                auto479250D5_ai = 1;
                lv_i = 0;
                for ( ; ( (auto479250D5_ai >= 0 && lv_i <= auto479250D5_ae) || (auto479250D5_ai <= 0 && lv_i >= auto479250D5_ae) ) ; lv_i += auto479250D5_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsIce", 1)), c_orderQueueAddToEnd);
                }
            }
            else {
                autoE13BBE5B_ae = gv_players[lv_tPI].skills.blizzard;
                autoE13BBE5B_ai = 1;
                lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, "Blizzard") + 1);
                for ( ; ( (autoE13BBE5B_ai >= 0 && lv_i <= autoE13BBE5B_ae) || (autoE13BBE5B_ai <= 0 && lv_i >= autoE13BBE5B_ae) ) ; lv_i += autoE13BBE5B_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsIce", 1)), c_orderQueueAddToEnd);
                }
            }
        }
    }
    if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "IDSZ")) {
        gv_players[lv_tPI].skills.subzero = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, "IDSZ", PlayerHandle(lp_player));
        if ((gv_players[lv_tPI].skills.subzero >= 0)) {
            if (!UnitAbilityCheck(gv_players[lv_tPI].dragon, "SubZero", true)) {
                autoE237CE34_ae = gv_players[lv_tPI].skills.subzero;
                autoE237CE34_ai = 1;
                lv_i = 0;
                for ( ; ( (autoE237CE34_ai >= 0 && lv_i <= autoE237CE34_ae) || (autoE237CE34_ai <= 0 && lv_i >= autoE237CE34_ae) ) ; lv_i += autoE237CE34_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsIce", 2)), c_orderQueueAddToEnd);
                }
            }
            else {
                auto92BBD8B5_ae = gv_players[lv_tPI].skills.subzero;
                auto92BBD8B5_ai = 1;
                lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, "SubZero") + 1);
                for ( ; ( (auto92BBD8B5_ai >= 0 && lv_i <= auto92BBD8B5_ae) || (auto92BBD8B5_ai <= 0 && lv_i >= auto92BBD8B5_ae) ) ; lv_i += auto92BBD8B5_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsIce", 2)), c_orderQueueAddToEnd);
                }
            }
        }
    }
    if (BankSectionExists(gv_players[lv_tPI].banks.dragonBank, "IDFA")) {
        gv_players[lv_tPI].skills.frozenArmour = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, "IDFA", PlayerHandle(lp_player));
        if ((gv_players[lv_tPI].skills.frozenArmour >= 0)) {
            if (!UnitAbilityCheck(gv_players[lv_tPI].dragon, "FrozenArmor", true)) {
                autoD025A1A7_ae = gv_players[lv_tPI].skills.frozenArmour;
                autoD025A1A7_ai = 1;
                lv_i = 0;
                for ( ; ( (autoD025A1A7_ai >= 0 && lv_i <= autoD025A1A7_ae) || (autoD025A1A7_ai <= 0 && lv_i >= autoD025A1A7_ae) ) ; lv_i += autoD025A1A7_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsIce", 3)), c_orderQueueAddToEnd);
                }
            }
            else {
                auto1AAAE099_ae = gv_players[lv_tPI].skills.frozenArmour;
                auto1AAAE099_ai = 1;
                lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, "FrozenArmor") + 1);
                for ( ; ( (auto1AAAE099_ai >= 0 && lv_i <= auto1AAAE099_ae) || (auto1AAAE099_ai <= 0 && lv_i >= auto1AAAE099_ae) ) ; lv_i += auto1AAAE099_ai ) {
                    UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand("LearnSkillsIce", 3)), c_orderQueueAddToEnd);
                }
            }
        }
    }
    return true;
}
void gf_LoadHPC (int lp_player) {
    // Variable Declarations
    int lv_hPCBank;
    int lv_hPCManual;
    int lv_pi;
    // Variable Initialization
    lv_pi = (lp_player - 1);
    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
        if (BankSectionExists(gv_players[lv_pi].banks.currencyBank, "HPC")) {
            gv_shards[lv_pi] = (BankValueGetAsInt(gv_players[lv_pi].banks.currencyBank, "Shards", PlayerHandle(lp_player)) / 1);
            PlayerModifyPropertyInt(lp_player, c_playerPropCustom, c_playerPropOperSetTo, gv_shards[lv_pi]);
            gv_gold[lv_pi] = (BankValueGetAsInt(gv_players[lv_pi].banks.currencyBank, "Gold", PlayerHandle(lp_player)) / 1);
            PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, gv_gold[lv_pi]);
            gv_pvPPoints[lv_pi] = (BankValueGetAsInt(gv_players[lv_pi].banks.currencyBank, "PvP Points", PlayerHandle(lp_player)) / 1);
            PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, gv_pvPPoints[lv_pi]);
            lv_hPCManual = (gv_shards[lv_pi] + (gv_gold[lv_pi] + (gv_pvPPoints[lv_pi] + gv_hPCConstant)));
            lv_hPCBank = BankValueGetAsInt(gv_players[lv_pi].banks.currencyBank, "HPC", PlayerHandle(lp_player));
            if ((lv_hPCBank != lv_hPCManual)) {
                if ((lv_hPCBank == -10691)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/10F95778"));
                    gv_hPCChecked[lv_pi] = true;
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/7CC796A6"));
                    GameOver(lp_player, c_gameOverDefeat, true, true);
                }
            }
            else {
                gv_hPCChecked[lv_pi] = true;
            }
        }
        else {
            if (BankSectionExists(gv_players[lv_pi].banks.dragonBank, "Gold") && BankSectionExists(gv_players[lv_pi].banks.dragonBank, "PvP Points") && BankSectionExists(gv_players[lv_pi].banks.dragonBank, "Shards")) {
                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/A7264C2D"));
                GameOver(lp_player, c_gameOverDefeat, true, true);
            }
            else {
                gv_hPCChecked[lv_pi] = true;
            }
        }
    }
}
void gf_LoadHRC (int lp_player) {
    // Variable Declarations
    int lv_hRCBank;
    int lv_hRCManual;
    int lv_checkVariable;
    int lv_pi;
    // Variable Initialization
    lv_pi = (lp_player - 1);
    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
        if (BankSectionExists(gv_players[lv_pi].banks.rebornBank, "HRC")) {
            gv_players[lv_pi].stats.reborn.regen = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, "Reborn RegenerationUp", PlayerHandle(lp_player));
            gv_players[lv_pi].stats.reborn.points = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, "Reborn Points", PlayerHandle(lp_player));
            gv_players[lv_pi].stats.reborn.movementSpeed = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, "Reborn MovementSpeedUp", PlayerHandle(lp_player));
            gv_players[lv_pi].stats.reborn.miss = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, "Reborn Miss%Down", PlayerHandle(lp_player));
            gv_players[lv_pi].stats.reborn.maxMP = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, "Reborn MaxMPUp", PlayerHandle(lp_player));
            gv_players[lv_pi].stats.reborn.maxHP = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, "Reborn MaxHPUp", PlayerHandle(lp_player));
            gv_players[lv_pi].stats.reborn.itemDrop = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, "Reborn ItemDrop%Up", PlayerHandle(lp_player));
            gv_players[lv_pi].stats.reborn.goldDrop = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, "Reborn GoldDrop%Up", PlayerHandle(lp_player));
            gv_players[lv_pi].stats.reborn.dodge = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, "Reborn Dodge%Up", PlayerHandle(lp_player));
            gv_players[lv_pi].stats.reborn.defense = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, "Reborn DefenseUp", PlayerHandle(lp_player));
            gv_players[lv_pi].stats.reborn.count = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, "Reborn Count", PlayerHandle(lp_player));
            gv_players[lv_pi].stats.reborn.attackSpeed = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, "Reborn AttackSpeedUp", PlayerHandle(lp_player));
            lv_hRCManual = (gv_players[lv_pi].stats.reborn.regen + (gv_players[lv_pi].stats.reborn.points + ((gv_players[lv_pi].stats.reborn.movementSpeed + (((gv_players[lv_pi].stats.reborn.miss + gv_players[lv_pi].stats.reborn.maxMP) + gv_players[lv_pi].stats.reborn.maxHP) + (((gv_players[lv_pi].stats.reborn.itemDrop + gv_players[lv_pi].stats.reborn.goldDrop) + gv_players[lv_pi].stats.reborn.dodge) + gv_players[lv_pi].stats.reborn.defense))) + ((gv_players[lv_pi].stats.reborn.count + gv_players[lv_pi].stats.reborn.attackSpeed) + gv_hRCConstant))));
            lv_hRCBank = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, "HRC", PlayerHandle(lp_player));
            BankWait(gv_players[lv_pi].banks.rebornBank);
            if ((lv_hRCBank != lv_hRCManual)) {
                if ((lv_hRCBank == -10691)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/D79EFB21"));
                    gv_hRCChecked[lv_pi] = true;
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/4C304E5E"));
                    GameOver(lp_player, c_gameOverDefeat, true, true);
                }
            }
            else {
                lv_checkVariable = (gv_players[lv_pi].stats.reborn.regen + (gv_players[lv_pi].stats.reborn.points + ((gv_players[lv_pi].stats.reborn.movementSpeed + (((gv_players[lv_pi].stats.reborn.miss + gv_players[lv_pi].stats.reborn.maxMP) + gv_players[lv_pi].stats.reborn.maxHP) + (((gv_players[lv_pi].stats.reborn.itemDrop + gv_players[lv_pi].stats.reborn.goldDrop) + gv_players[lv_pi].stats.reborn.dodge) + gv_players[lv_pi].stats.reborn.defense))) + gv_players[lv_pi].stats.reborn.attackSpeed)));
                if (((gv_players[lv_pi].stats.reborn.count * 10) != lv_checkVariable)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/E49171F1"));
                    gv_players[lv_pi].stats.reborn.regen = 0;
                    gv_players[lv_pi].stats.reborn.movementSpeed = 0;
                    gv_players[lv_pi].stats.reborn.miss = 0;
                    gv_players[lv_pi].stats.reborn.maxMP = 0;
                    gv_players[lv_pi].stats.reborn.maxHP = 0;
                    gv_players[lv_pi].stats.reborn.itemDrop = 0;
                    gv_players[lv_pi].stats.reborn.goldDrop = 0;
                    gv_players[lv_pi].stats.reborn.dodge = 0;
                    gv_players[lv_pi].stats.reborn.defense = 0;
                    gv_players[lv_pi].stats.reborn.attackSpeed = 0;
                    gv_players[lv_pi].stats.reborn.points = (gv_players[lv_pi].stats.reborn.count * 10);
                }
                gv_hRCChecked[lv_pi] = true;
            }
        }
        else {
            gv_hRCChecked[lv_pi] = true;
        }
    }
}
void gf_LoadStash (int lp_player) {
    // Variable Declarations
    int lv_pi;
    // Variable Initialization
    lv_pi = (lp_player - 1);
    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
        if (BankSectionExists(gv_players[lv_pi].banks.stashBank, "Stash")) {
            TechTreeUpgradeAddLevel(lp_player, "Stash1", BankValueGetAsInt(gv_players[lv_pi].banks.stashBank, "One", PlayerHandle(lp_player)));
            TechTreeUpgradeAddLevel(lp_player, "Stash12", BankValueGetAsInt(gv_players[lv_pi].banks.stashBank, "Two", PlayerHandle(lp_player)));
            TechTreeUpgradeAddLevel(lp_player, "Stash13", BankValueGetAsInt(gv_players[lv_pi].banks.stashBank, "Three", PlayerHandle(lp_player)));
            TechTreeUpgradeAddLevel(lp_player, "Stash14", BankValueGetAsInt(gv_players[lv_pi].banks.stashBank, "Four", PlayerHandle(lp_player)));
            TechTreeUpgradeAddLevel(lp_player, "Stash15", BankValueGetAsInt(gv_players[lv_pi].banks.stashBank, "Five", PlayerHandle(lp_player)));
            TechTreeUpgradeAddLevel(lp_player, "Stash16", BankValueGetAsInt(gv_players[lv_pi].banks.stashBank, "Six", PlayerHandle(lp_player)));
            BankValueGetAsUnit(gv_players[lv_pi].banks.stashBank, "Stash", PlayerHandle(lp_player), lp_player, gv_stashLocation[lv_pi], 270.0);
            gv_stash[lv_pi] = BankLastRestoredUnit();
        }
        else {
            UnitCreate(1, "Stash", c_unitCreateIgnorePlacement, lp_player, gv_stashLocation[lv_pi], 270.0);
            gv_stash[lv_pi] = UnitLastCreated();
        }
    }
}
void gf_InitializeOne () {
    // Implementation
    GameCheatAllow(c_gameCheatAny, false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Zerg", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnit_Zerg", false);
    TriggerExecute(gt_HideUselessUI, true, true);
    TriggerExecute(gt_SetUpUnitTypes, true, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 0.0);
    UIStatusBarOverride(PlayerGroupAll(), c_unitStatusGroupEnemy);
    TriggerExecute(gt_SetStackChargeNames, true, true);
    TriggerExecute(gt_SetInfestationSpawnTrigger, true, true);
    TriggerExecute(gt_SetZauberersMinionsUnitTypes, true, true);
    TriggerExecute(gt_SetZauberersRegions, true, true);
    TriggerExecute(gt_SpawnEnemies, true, true);
    TriggerExecute(gt_SetupRegions, true, true);
    TriggerExecute(gt_SetUpLocationDialog, true, true);
    TriggerExecute(gt_SetupTips, true, true);
    TriggerExecute(gt_SetUpAttributeDialog, true, true);
    TriggerExecute(gt_CreateTimeofdayDialog, true, true);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowButtons, true);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowHotkeys, true);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowInfoPanel, true);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowMinimap, true);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowModifiers, true);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowPings, true);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowSmartClick, true);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "selectuncontrolable", "1");
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "simplecommandcard", "0");
    }
    PlayerGroupLoopEnd();
}
void gf_InitializeTwo () {
    // Implementation
    TriggerExecute(gt_SetSyritalHealth, false, true);
    TriggerExecute(gt_MachinaDePlagamSethealth, false, true);
    TriggerExecute(gt_Sremagsisethealth, false, true);
    TriggerExecute(gt_MakePlayer14anAlly, false, true);
    TriggerExecute(gt_RunStoryQuestSetups, true, true);
    TriggerExecute(gt_SetUpTalentTree, false, true);
    TriggerExecute(gt_CreateWaypointDialog, true, true);
    TriggerExecute(gt_LoadWaypoints, true, true);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
}
void gf_InitializeThree () {
    // Implementation
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(233)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(247)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(248)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(249)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(250)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(251)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(234)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(235)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(236)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(242)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(243)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(244)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(245)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(246)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(3)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(233)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(247)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(248)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(249)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(250)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(251)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(234)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(235)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(236)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(242)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(243)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(244)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(245)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(246)), 270.0);
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(3)), 270.0);
        gf_LoadHRC(PlayerGroupLoopCurrent());
        gf_LoadHPC(PlayerGroupLoopCurrent());
        gf_LoadDragonCheck(PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetPlayerGroupAlliance(gv_humanPlayers, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    TriggerExecute(gt_CreateQuestDialog, true, true);
    TriggerExecute(gt_CreateTalkDialog, true, true);
    TriggerExecute(gt_CreateRewardDialog, true, true);
    TriggerExecute(gt_LoadSideQuests, true, true);
    TriggerExecute(gt_CreateRebornDialog, true, true);
    gv_playersSetUp = true;
}
void gf_ChangeItemsOwner (int lp_player) {
    // Implementation
    UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lp_player - 1].dragon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), lp_player, true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitInventoryGroup(gv_stash[(lp_player - 1)]));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), lp_player, true);
    }
    UnitGroupLoopEnd();
}
void gf_StatCheck (int lp_player) {
    // Variable Declarations
    int lv_lazyPlayer;
    int lv_lazyPlayerIndex;
    // Variable Initialization
    lv_lazyPlayer = lp_player;
    lv_lazyPlayerIndex = (lp_player - 1);
    // Implementation
    if (((UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == "BabyDragon") || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == "BabyIceDragon") || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == "AdultDragon") || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == "AdultIceDragon") || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == "LegendaryDragon") || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == "LegendaryIceDragon") || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == "MasterDragon") || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == "MasterIceDragon") || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == "TeenDragon") || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == "TeenIceDragon") || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == "") || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == null))) {
    }
    else {
        UnitBehaviorAdd(gv_players[lv_lazyPlayerIndex].dragon, "DONTEDITBANKFILES", UnitFromId(2662), 1);
    }
    gv_players[lv_lazyPlayerIndex].stats.agility = UnitBehaviorCount(gv_players[lv_lazyPlayerIndex].dragon, "Agility");
    gv_players[lv_lazyPlayerIndex].stats.dexterity = UnitBehaviorCount(gv_players[lv_lazyPlayerIndex].dragon, "Dexterity");
    gv_players[lv_lazyPlayerIndex].stats.intelligence = UnitBehaviorCount(gv_players[lv_lazyPlayerIndex].dragon, "Intelligence");
    gv_players[lv_lazyPlayerIndex].stats.strength = UnitBehaviorCount(gv_players[lv_lazyPlayerIndex].dragon, "Strength");
    gv_players[lv_lazyPlayerIndex].stats.vitality = UnitBehaviorCount(gv_players[lv_lazyPlayerIndex].dragon, "Vitality");
    if (((gv_players[lv_lazyPlayerIndex].stats.agility > 100) || (gv_players[lv_lazyPlayerIndex].stats.dexterity > 500) || (gv_players[lv_lazyPlayerIndex].stats.strength > 500) || (gv_players[lv_lazyPlayerIndex].stats.vitality > 500) || (gv_players[lv_lazyPlayerIndex].stats.intelligence > 500) || ((gv_players[lv_lazyPlayerIndex].stats.strength + (gv_players[lv_lazyPlayerIndex].stats.dexterity + (gv_players[lv_lazyPlayerIndex].stats.intelligence + (gv_players[lv_lazyPlayerIndex].stats.vitality + (gv_players[lv_lazyPlayerIndex].stats.agility + FixedToInt(gv_players[lv_lazyPlayerIndex].stats.attributePoints)))))) > 500))) {
        gv_players[lv_lazyPlayerIndex].stats.attributePoints = (UnitGetPropertyFixed(gv_players[lv_lazyPlayerIndex].dragon, c_unitPropLevel, c_unitPropCurrent) * 5.0);
        gv_attributeText[lv_lazyPlayerIndex] = FixedToString(gv_players[lv_lazyPlayerIndex].stats.attributePoints, 0);
        libNtve_gf_SetDialogItemText(gv_players[lv_lazyPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_lazyPlayerIndex]), PlayerGroupSingle(lv_lazyPlayer));
        BankValueSetFromFixed(gv_players[lv_lazyPlayerIndex].banks.dragonBank, "AP", PlayerHandle(lv_lazyPlayer), gv_players[lv_lazyPlayerIndex].stats.attributePoints);
        UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayerIndex].dragon, "AddAgility", (lv_lazyPlayerIndex + 1), gv_players[lv_lazyPlayerIndex].stats.agility);
        gv_players[lv_lazyPlayerIndex].stats.agility = 0;
        BankValueSetFromInt(gv_players[lv_lazyPlayerIndex].banks.dragonBank, "Ag", PlayerHandle(lv_lazyPlayer), gv_players[lv_lazyPlayerIndex].stats.agility);
        UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayerIndex].dragon, "AddDexterity", (lv_lazyPlayerIndex + 1), gv_players[lv_lazyPlayerIndex].stats.dexterity);
        gv_players[lv_lazyPlayerIndex].stats.dexterity = 0;
        BankValueSetFromInt(gv_players[lv_lazyPlayerIndex].banks.dragonBank, "De", PlayerHandle(lv_lazyPlayer), gv_players[lv_lazyPlayerIndex].stats.dexterity);
        UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayerIndex].dragon, "AddIntelligence", (lv_lazyPlayerIndex + 1), gv_players[lv_lazyPlayerIndex].stats.intelligence);
        gv_players[lv_lazyPlayerIndex].stats.intelligence = 0;
        BankValueSetFromInt(gv_players[lv_lazyPlayerIndex].banks.dragonBank, "Int", PlayerHandle(lv_lazyPlayer), gv_players[lv_lazyPlayerIndex].stats.intelligence);
        UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayerIndex].dragon, "AddStrength", (lv_lazyPlayerIndex + 1), gv_players[lv_lazyPlayerIndex].stats.strength);
        gv_players[lv_lazyPlayerIndex].stats.strength = 0;
        BankValueSetFromInt(gv_players[lv_lazyPlayerIndex].banks.dragonBank, "Str", PlayerHandle(lv_lazyPlayer), gv_players[lv_lazyPlayerIndex].stats.strength);
        UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayerIndex].dragon, "AddVitality", (lv_lazyPlayerIndex + 1), gv_players[lv_lazyPlayerIndex].stats.vitality);
        gv_players[lv_lazyPlayerIndex].stats.vitality = 0;
        BankValueSetFromInt(gv_players[lv_lazyPlayerIndex].banks.dragonBank, "Vi", PlayerHandle(lv_lazyPlayer), gv_players[lv_lazyPlayerIndex].stats.vitality);
        UnitAbilityShow(gv_players[lv_lazyPlayerIndex].dragon, "Agility1", true);
        UnitAbilityShow(gv_players[lv_lazyPlayerIndex].dragon, "Dexterity1", true);
        UnitAbilityShow(gv_players[lv_lazyPlayerIndex].dragon, "Intelligence1", true);
        UnitAbilityShow(gv_players[lv_lazyPlayerIndex].dragon, "Strength1", true);
        UnitAbilityShow(gv_players[lv_lazyPlayerIndex].dragon, "Vitality1", true);
        UIDisplayMessage(PlayerGroupSingle(lv_lazyPlayer), c_messageAreaError, StringExternal("Param/Value/21DD33BF"));
    }
}
trigger auto_gf_Save_Trigger = null;
int auto_gf_Save_lp_savingPlayer;
void gf_Save (int lp_savingPlayer) {
    auto_gf_Save_lp_savingPlayer = lp_savingPlayer;
    if (auto_gf_Save_Trigger == null) {
        auto_gf_Save_Trigger = TriggerCreate("auto_gf_Save_TriggerFunc");
    }
    TriggerExecute(auto_gf_Save_Trigger, false, false);
}
bool auto_gf_Save_TriggerFunc (bool testConds, bool runActions) {
    int lp_savingPlayer = auto_gf_Save_lp_savingPlayer;
    // Variable Declarations
    int lv_sPI;
    // Variable Initialization
    lv_sPI = (lp_savingPlayer - 1);
    // Implementation
    if (!gv_isSavingExiting[lv_sPI] && !gv_autosavePrevention[lv_sPI] && gv_playersSetUp) {
        gv_isSavingExiting[lv_sPI] = true;
        gf_SaveStackCounts(lp_savingPlayer);
        gf_SaveHero(lp_savingPlayer);
        gf_SaveStash(lp_savingPlayer);
        gf_SaveSkills(lp_savingPlayer);
        gf_SaveHPC(lp_savingPlayer);
        gf_SaveHRC(lp_savingPlayer);
        BankValueSetFromFlag(gv_players[lv_sPI].banks.dragonBank, "GB", PlayerHandle(lp_savingPlayer), gv_gameBeat[lv_sPI]);
        BankSave(gv_players[lv_sPI].banks.dragonBank);
        if ((GameAttributePlayerValue("1", lp_savingPlayer) == "0001")) {
            lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, "Fire Dragon", lp_savingPlayer);
        }
        if ((GameAttributePlayerValue("1", lp_savingPlayer) == "0002")) {
            lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, "Ice Dragon", lp_savingPlayer);
        }
        gv_isSavingExiting[lv_sPI] = false;
    }
    return true;
}
void gf_SaveHero (int lp_player) {
    // Variable Declarations
    int lv_pi;
    // Variable Initialization
    lv_pi = (lp_player - 1);
    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive) && gv_playersSetUp && UnitIsAlive(gv_players[lv_pi].dragon) && gv_players[lv_pi].verification.dragon) {
        BankValueSetFromUnit(gv_players[lv_pi].banks.dragonBank, "Dragon", PlayerHandle(lp_player), gv_players[lv_pi].dragon);
        BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, "DSN", PlayerHandle(lp_player), ((2386 + UnitLevel(gv_players[lv_pi].dragon)) + ModI(FixedToInt(UnitGetPropertyFixed(gv_players[lv_pi].dragon, c_unitPropXP, c_unitPropCurrent)), 1000)));
    }
}
void gf_SaveStash (int lp_player) {
    // Variable Declarations
    int lv_pi;
    // Variable Initialization
    lv_pi = (lp_player - 1);
    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive) && gv_playersSetUp) {
        BankValueSetFromUnit(gv_players[lv_pi].banks.stashBank, "Stash", PlayerHandle(lp_player), gv_stash[lv_pi]);
        BankValueSetFromInt(gv_players[lv_pi].banks.stashBank, "One", PlayerHandle(lp_player), TechTreeUpgradeCount(lp_player, "Stash1", c_techCountCompleteOnly));
        BankValueSetFromInt(gv_players[lv_pi].banks.stashBank, "Two", PlayerHandle(lp_player), TechTreeUpgradeCount(lp_player, "Stash12", c_techCountCompleteOnly));
        BankValueSetFromInt(gv_players[lv_pi].banks.stashBank, "Three", PlayerHandle(lp_player), TechTreeUpgradeCount(lp_player, "Stash13", c_techCountCompleteOnly));
        BankValueSetFromInt(gv_players[lv_pi].banks.stashBank, "Four", PlayerHandle(lp_player), TechTreeUpgradeCount(lp_player, "Stash14", c_techCountCompleteOnly));
        BankValueSetFromInt(gv_players[lv_pi].banks.stashBank, "Five", PlayerHandle(lp_player), TechTreeUpgradeCount(lp_player, "Stash15", c_techCountCompleteOnly));
        BankValueSetFromInt(gv_players[lv_pi].banks.stashBank, "Six", PlayerHandle(lp_player), TechTreeUpgradeCount(lp_player, "Stash16", c_techCountCompleteOnly));
        BankSave(gv_players[lv_pi].banks.stashBank);
    }
}
void gf_SaveHPC (int lp_player) {
    // Variable Declarations
    int lv_hPC;
    int lv_pi;
    // Variable Initialization
    lv_pi = (lp_player - 1);
    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive) && gv_playersSetUp && gv_hPCChecked[lv_pi]) {
        gv_shards[lv_pi] = PlayerGetPropertyInt(lp_player, c_playerPropCustom);
        BankValueSetFromInt(gv_players[lv_pi].banks.currencyBank, "Shards", PlayerHandle(lp_player), gv_shards[lv_pi]);
        gv_pvPPoints[lv_pi] = PlayerGetPropertyInt(lp_player, c_playerPropVespene);
        BankValueSetFromInt(gv_players[lv_pi].banks.currencyBank, "PvP Points", PlayerHandle(lp_player), gv_pvPPoints[lv_pi]);
        gv_gold[lv_pi] = PlayerGetPropertyInt(lp_player, c_playerPropMinerals);
        BankValueSetFromInt(gv_players[lv_pi].banks.currencyBank, "Gold", PlayerHandle(lp_player), gv_gold[lv_pi]);
        lv_hPC = (gv_shards[lv_pi] + (gv_gold[lv_pi] + (gv_pvPPoints[lv_pi] + gv_hPCConstant)));
        BankValueSetFromInt(gv_players[lv_pi].banks.currencyBank, "HPC", PlayerHandle(lp_player), lv_hPC);
        BankSave(gv_players[lv_pi].banks.currencyBank);
    }
}
void gf_SaveHRC (int lp_player) {
    // Variable Declarations
    int lv_hRC;
    int lv_tP;
    int lv_tPI;
    // Variable Initialization
    lv_tP = lp_player;
    lv_tPI = (lp_player - 1);
    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive) && gv_playersSetUp && gv_hRCChecked[lv_tPI]) {
        lv_hRC = (gv_players[lv_tPI].stats.reborn.regen + (gv_players[lv_tPI].stats.reborn.points + ((gv_players[lv_tPI].stats.reborn.movementSpeed + (((gv_players[lv_tPI].stats.reborn.miss + gv_players[lv_tPI].stats.reborn.maxMP) + gv_players[lv_tPI].stats.reborn.maxHP) + (((gv_players[lv_tPI].stats.reborn.itemDrop + gv_players[lv_tPI].stats.reborn.goldDrop) + gv_players[lv_tPI].stats.reborn.dodge) + gv_players[lv_tPI].stats.reborn.defense))) + ((gv_players[lv_tPI].stats.reborn.count + gv_players[lv_tPI].stats.reborn.attackSpeed) + gv_hRCConstant))));
        BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, "Reborn Points", PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.points);
        BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, "Reborn MaxHPUp", PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.maxHP);
        BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, "Reborn MaxMPUp", PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.maxMP);
        BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, "Reborn DefenseUp", PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.defense);
        BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, "Reborn MovementSpeedUp", PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.movementSpeed);
        BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, "Reborn AttackSpeedUp", PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.attackSpeed);
        BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, "Reborn Dodge%Up", PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.dodge);
        BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, "Reborn Miss%Down", PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.miss);
        BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, "Reborn GoldDrop%Up", PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.goldDrop);
        BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, "Reborn ItemDrop%Up", PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.itemDrop);
        BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, "Reborn RegenerationUp", PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.regen);
        BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, "Reborn Count", PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.count);
        BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, "HRC", PlayerHandle(lv_tP), lv_hRC);
        BankSave(gv_players[lv_tPI].banks.rebornBank);
    }
}
void gf_ApplyRebornStats (int lp_player) {
    // Variable Declarations
    int lv_pI;
    // Variable Initialization
    lv_pI = (lp_player - 1);
    // Implementation
    UnitBehaviorRemove(gv_players[lv_pI].dragon, "MaxHPUp", c_unitBehaviorCountAll);
    UnitBehaviorRemove(gv_players[lv_pI].dragon, "MaxMPUp", c_unitBehaviorCountAll);
    UnitBehaviorRemove(gv_players[lv_pI].dragon, "DefenseUp", c_unitBehaviorCountAll);
    UnitBehaviorRemove(gv_players[lv_pI].dragon, "MovementSpeedUp", c_unitBehaviorCountAll);
    UnitBehaviorRemove(gv_players[lv_pI].dragon, "RegenerationUp", c_unitBehaviorCountAll);
    UnitBehaviorRemove(gv_players[lv_pI].dragon, "AttackSpeedUp", c_unitBehaviorCountAll);
    UnitBehaviorAddPlayer(gv_players[lv_pI].dragon, "MaxHPUp", lp_player, gv_players[lv_pI].stats.reborn.maxHP);
    UnitBehaviorAddPlayer(gv_players[lv_pI].dragon, "MaxMPUp", lp_player, gv_players[lv_pI].stats.reborn.maxMP);
    UnitBehaviorAddPlayer(gv_players[lv_pI].dragon, "MovementSpeedUp", lp_player, gv_players[lv_pI].stats.reborn.movementSpeed);
    UnitBehaviorAddPlayer(gv_players[lv_pI].dragon, "AttackSpeedUp", lp_player, gv_players[lv_pI].stats.reborn.attackSpeed);
    UnitBehaviorAddPlayer(gv_players[lv_pI].dragon, "DefenseUp", lp_player, gv_players[lv_pI].stats.reborn.defense);
    UnitBehaviorAddPlayer(gv_players[lv_pI].dragon, "RegenerationUp", lp_player, gv_players[lv_pI].stats.reborn.regen);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Quest Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateQuestDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        DialogCreate(500, 600, c_anchorCenter, 0, 0, true);
        gv_players[lv_pPI].quests.questDialog.state = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        DialogSetTitle(gv_players[lv_pPI].quests.questDialog.state, StringExternal("Param/Value/4C530C19"));
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].quests.questDialog.state, 450, 375, c_anchorTop, 0, 75, StringExternal("Param/Value/44A38F2B"), ColorWithAlpha(0,0,0,0), true, 0.0);
        gv_players[lv_pPI].quests.questDialog.textBox = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].quests.questDialog.state, 450, 50, c_anchorTop, 0, 450, StringExternal("Param/Value/435C7371"), ColorWithAlpha(0,0,0,0), false, 0.0);
        gv_players[lv_pPI].quests.questDialog.reward = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].quests.questDialog.state, 450, 50, c_anchorTop, 0, 500, StringExternal("Param/Value/4CF0811B"), ColorWithAlpha(0,0,0,0), false, 0.0);
        gv_players[lv_pPI].quests.questDialog.recommendedLevel = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].quests.questDialog.state, 250, 50, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/13643487"), StringExternal("Param/Value/68A2CF78"), "");
        gv_players[lv_pPI].quests.questDialog.decline = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].quests.questDialog.state, 250, 50, c_anchorBottomRight, 0, 0, StringExternal("Param/Value/948D8910"), StringExternal("Param/Value/509C3FEA"), "");
        gv_players[lv_pPI].quests.questDialog.accept = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateQuestDialog_Init () {
    gt_CreateQuestDialog = TriggerCreate("gt_CreateQuestDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Talk Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateTalkDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        DialogCreate(500, 600, c_anchorCenter, 0, 0, true);
        gv_players[lv_pPI].quests.talkDialog.state = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogSetTitle(gv_players[lv_pPI].quests.talkDialog.state, StringExternal("Param/Value/864BC008"));
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].quests.talkDialog.state, 450, 475, c_anchorTop, 0, 75, StringExternal("Param/Value/32E1D3FE"), ColorWithAlpha(0,0,0,0), true, 0.0);
        gv_players[lv_pPI].quests.talkDialog.textBox = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].quests.talkDialog.state, 500, 50, c_anchorBottom, 0, 0, StringExternal("Param/Value/74D3F4D3"), StringExternal("Param/Value/2C6A7AF3"), "");
        gv_players[lv_pPI].quests.talkDialog.accept = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateTalkDialog_Init () {
    gt_CreateTalkDialog = TriggerCreate("gt_CreateTalkDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Reward Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateRewardDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        DialogCreate(500, 600, c_anchorCenter, 0, 0, true);
        gv_players[lv_pPI].quests.rewardDialog.state = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogSetTitle(gv_players[lv_pPI].quests.rewardDialog.state, StringExternal("Param/Value/7FD5CEA6"));
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].quests.rewardDialog.state, 440, 475, c_anchorTop, 0, 75, StringExternal("Param/Value/593C6AC2"), ColorWithAlpha(0,0,0,0), true, 0.0);
        gv_players[lv_pPI].quests.rewardDialog.textBox = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].quests.rewardDialog.state, 500, 50, c_anchorBottom, 0, 0, StringExternal("Param/Value/6194C7D7"), StringExternal("Param/Value/55261293"), "");
        gv_players[lv_pPI].quests.rewardDialog.accept = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateRewardDialog_Init () {
    gt_CreateRewardDialog = TriggerCreate("gt_CreateRewardDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Quest Decline
//--------------------------------------------------------------------------------------------------
bool gt_QuestDecline_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.decline) || (EventDialogControl() == gv_players[1].quests.questDialog.decline) || (EventDialogControl() == gv_players[2].quests.questDialog.decline) || (EventDialogControl() == gv_players[3].quests.questDialog.decline)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_CloseQuestDialog(EventPlayer());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_QuestDecline_Init () {
    gt_QuestDecline = TriggerCreate("gt_QuestDecline_Func");
    TriggerAddEventDialogControl(gt_QuestDecline, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Talk Dialog Closed
//--------------------------------------------------------------------------------------------------
bool gt_TalkDialogClosed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.talkDialog.accept) || (EventDialogControl() == gv_players[1].quests.talkDialog.accept) || (EventDialogControl() == gv_players[2].quests.talkDialog.accept) || (EventDialogControl() == gv_players[3].quests.talkDialog.accept)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_CloseTalkDialog(EventPlayer());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TalkDialogClosed_Init () {
    gt_TalkDialogClosed = TriggerCreate("gt_TalkDialogClosed_Func");
    TriggerAddEventDialogControl(gt_TalkDialogClosed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Run Story Quest Setups
//--------------------------------------------------------------------------------------------------
bool gt_RunStoryQuestSetups_Func (bool testConds, bool runActions) {
    playergroup auto39B5CB63_g;
    int auto39B5CB63_p;
    // Variable Declarations
    int lv_pPI;
    int lv_forPlayer;
    // Variable Initialization
    lv_forPlayer = 1;
    // Actions
    if (!runActions) {
        return true;
    }
    auto39B5CB63_g = gv_humanPlayers; 
    auto39B5CB63_p = 1;
    for ( ; auto39B5CB63_p <= PlayerGroupCount(auto39B5CB63_g) ; auto39B5CB63_p += BoolToInt(lv_forPlayer == PlayerGroupPlayer(auto39B5CB63_g, auto39B5CB63_p)) ) {
        lv_forPlayer = PlayerGroupPlayer(auto39B5CB63_g, auto39B5CB63_p);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(lv_forPlayer));
        lv_pPI = (lv_forPlayer - 1);
        if (BankSectionExists(gv_players[lv_pPI].banks.dragonBank, "SQ0") ) {
            gv_players[lv_pPI].quests.storyQuests[0].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, "SQ0", PlayerHandle(lv_forPlayer));
        }
        if (BankSectionExists(gv_players[lv_pPI].banks.dragonBank, "SQ1")) {
            gv_players[lv_pPI].quests.storyQuests[1].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, "SQ1", PlayerHandle(lv_forPlayer));
        }
        if (BankSectionExists(gv_players[lv_pPI].banks.dragonBank, "SQ2")) {
            gv_players[lv_pPI].quests.storyQuests[2].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, "SQ2", PlayerHandle(lv_forPlayer));
        }
        if (BankSectionExists(gv_players[lv_pPI].banks.dragonBank, "SQ3")) {
            gv_players[lv_pPI].quests.storyQuests[3].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, "SQ3", PlayerHandle(lv_forPlayer));
        }
        if (BankSectionExists(gv_players[lv_pPI].banks.dragonBank, "SQ4")) {
            gv_players[lv_pPI].quests.storyQuests[4].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, "SQ4", PlayerHandle(lv_forPlayer));
        }
        if (BankSectionExists(gv_players[lv_pPI].banks.dragonBank, "SQ5")) {
            gv_players[lv_pPI].quests.storyQuests[5].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, "SQ5", PlayerHandle(lv_forPlayer));
        }
        if (BankSectionExists(gv_players[lv_pPI].banks.dragonBank, "SQ6")) {
            gv_players[lv_pPI].quests.storyQuests[6].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, "SQ6", PlayerHandle(lv_forPlayer));
        }
        if (BankSectionExists(gv_players[lv_pPI].banks.dragonBank, "SQ7")) {
            gv_players[lv_pPI].quests.storyQuests[7].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, "SQ7", PlayerHandle(lv_forPlayer));
        }
        if (BankSectionExists(gv_players[lv_pPI].banks.dragonBank, "SQ8")) {
            gv_players[lv_pPI].quests.storyQuests[8].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, "SQ8", PlayerHandle(lv_forPlayer));
        }
        if (BankSectionExists(gv_players[lv_pPI].banks.dragonBank, "SQ9")) {
            gv_players[lv_pPI].quests.storyQuests[9].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, "SQ9", PlayerHandle(lv_forPlayer));
        }
        if ((gv_players[lv_pPI].quests.storyQuests[0].state < 2)) {
            gf_SQ0Setup(lv_forPlayer);
        }
        else {
            if ((gv_players[lv_pPI].quests.storyQuests[1].state < 3)) {
                gf_SQ1Setup(lv_forPlayer);
            }
            else {
                if ((gv_players[lv_pPI].quests.storyQuests[2].state < 2)) {
                    gf_SQ2Setup(lv_forPlayer);
                }
                else {
                    if ((gv_players[lv_pPI].quests.storyQuests[3].state < 3)) {
                        gf_SQ3Setup(lv_forPlayer);
                    }
                    else {
                        if ((gv_players[lv_pPI].quests.storyQuests[4].state < 4)) {
                            gf_SQ4Setup(lv_forPlayer);
                        }
                        else {
                            if ((gv_players[lv_pPI].quests.storyQuests[5].state < 4)) {
                                gf_SQ5Setup(lv_forPlayer);
                            }
                            else {
                                if ((gv_players[lv_pPI].quests.storyQuests[6].state < 2)) {
                                    gf_SQ6Setup(lv_forPlayer);
                                }
                                else {
                                    if ((gv_players[lv_pPI].quests.storyQuests[7].state < 4)) {
                                        gf_SQ7Setup(lv_forPlayer);
                                    }
                                    else {
                                        if ((gv_players[lv_pPI].quests.storyQuests[8].state < 8)) {
                                            gf_SQ8Setup(lv_forPlayer);
                                        }
                                        else {
                                            if ((gv_players[lv_pPI].quests.storyQuests[9].state < 3)) {
                                                gf_SQ9Setup(lv_forPlayer);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RunStoryQuestSetups_Init () {
    gt_RunStoryQuestSetups = TriggerCreate("gt_RunStoryQuestSetups_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ0 - Player Enters SQ0 Region 1
//--------------------------------------------------------------------------------------------------
bool gt_SQ0PlayerEntersSQ0Region1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[0].state == 1)) {
        ObjectiveSetState(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[0].objective, c_objectiveStateFailed);
        ObjectiveDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[0].objective);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[0].state = 2;
        BankValueSetFromInt(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, "SQ0", PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[0].state);
        PingDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[0].ping);
        gf_SQ1Setup(UnitGetOwner(EventUnit()));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ0PlayerEntersSQ0Region1_Init () {
    gt_SQ0PlayerEntersSQ0Region1 = TriggerCreate("gt_SQ0PlayerEntersSQ0Region1_Func");
    TriggerAddEventUnitRegion(gt_SQ0PlayerEntersSQ0Region1, null, RegionFromId(222), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ1 - Player Talks to Felix
//--------------------------------------------------------------------------------------------------
bool gt_SQ1PlayerTalkstoFelix_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionFromId(216))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[1].state == 0)) {
        gv_players[(EventPlayer() - 1)].quests.talking = true;
        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
        TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(2511), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/B15EE073"), StringExternal("Param/Value/F09F60C9"), 10.0, c_transmissionDurationAdd, true);
        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
        gv_players[(EventPlayer() - 1)].quests.storyQuests[1].state = 1;
        ObjectiveSetDescription(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].objective, StringExternal("Param/Value/493EBBC1"));
        ObjectiveSetName(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].objective, StringExternal("Param/Value/8D9F3763"));
        PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].ping);
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingBoss", RegionGetCenter(RegionFromId(5)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
        gv_players[(EventPlayer() - 1)].quests.storyQuests[1].ping = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.5);
        SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, "SQ1", PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[1].state);
        TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].textTag);
        gv_players[(EventPlayer() - 1)].quests.talking = false;
        TriggerExecute(gt_SyritalRespawn, true, false);
    }
    else {
        if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[1].state == 1)) {
            gv_players[(EventPlayer() - 1)].quests.talking = true;
            libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
            libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
            TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(2511), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/7EC4D069"), StringExternal("Param/Value/FD03BABE"), 4.0, c_transmissionDurationAdd, true);
            libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
            libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
            gv_players[(EventPlayer() - 1)].quests.talking = false;
            TriggerExecute(gt_SyritalRespawn, true, false);
        }
        else {
            if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[1].state == 2)) {
                gv_players[(EventPlayer() - 1)].quests.talking = true;
                libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(2511), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/1E675D13"), StringExternal("Param/Value/9B7A53D6"), 4.0, c_transmissionDurationAdd, true);
                libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                gv_players[(EventPlayer() - 1)].quests.storyQuests[1].state = 3;
                ObjectiveSetState(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].objective, c_objectiveStateCompleted);
                ObjectiveDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].objective);
                BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, "SQ1", PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[1].state);
                TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].textTag);
                gv_fireSkin[(EventPlayer() - 1)] = true;
                BankValueSetFromFlag(gv_players[(EventPlayer() - 1)].banks.dragonBank, "FS", PlayerHandle(EventPlayer()), gv_fireSkin[(EventPlayer() - 1)]);
                UnitBehaviorAddPlayer(gv_players[(EventPlayer() - 1)].dragon, "FireSkin", EventPlayer(), 1);
                if ((UnitLevel(gv_players[(EventPlayer() - 1)].dragon) != 100)) {
                    gf_AddExperience(gv_players[(EventPlayer() - 1)].dragon, 1000);
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/6D44D93A"));
                gv_players[(EventPlayer() - 1)].quests.talking = false;
                PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].ping);
                gf_SQ2Setup(EventPlayer());
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ1PlayerTalkstoFelix_Init () {
    gt_SQ1PlayerTalkstoFelix = TriggerCreate("gt_SQ1PlayerTalkstoFelix_Func");
    TriggerAddEventUnitSelected(gt_SQ1PlayerTalkstoFelix, UnitRefFromUnit(UnitFromId(2511)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_SQ1PlayerTalkstoFelix, UnitRefFromUnit(UnitFromId(2511)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_SQ1PlayerTalkstoFelix, UnitRefFromUnit(UnitFromId(2511)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ2 - Player Enters SQ2 Region 1
//--------------------------------------------------------------------------------------------------
bool gt_SQ2PlayerEntersSQ2Region1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[2].state == 1)) {
        ObjectiveSetState(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[2].objective, c_objectiveStateFailed);
        ObjectiveDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[2].objective);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[2].state = 2;
        BankValueSetFromInt(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, "SQ2", PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[2].state);
        PingDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[2].ping);
        gf_SQ3Setup(UnitGetOwner(EventUnit()));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ2PlayerEntersSQ2Region1_Init () {
    gt_SQ2PlayerEntersSQ2Region1 = TriggerCreate("gt_SQ2PlayerEntersSQ2Region1_Func");
    TriggerAddEventUnitRegion(gt_SQ2PlayerEntersSQ2Region1, null, RegionFromId(223), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ3 - Player Talks to Petrose
//--------------------------------------------------------------------------------------------------
bool gt_SQ3PlayerTalkstoPetrose_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionFromId(224))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[3].state == 1)) {
        gv_players[(EventPlayer() - 1)].quests.talking = true;
        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
        TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(1597), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/52CCADF4"), StringExternal("Param/Value/361F831D"), 10.0, c_transmissionDurationAdd, true);
        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
        gv_players[(EventPlayer() - 1)].quests.storyQuests[3].state = 2;
        ObjectiveSetName(gv_players[(EventPlayer() - 1)].quests.storyQuests[3].objective, StringExternal("Param/Value/339C9E22"));
        PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[3].ping);
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingBoss", RegionGetCenter(RegionFromId(229)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
        gv_players[(EventPlayer() - 1)].quests.storyQuests[3].ping = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.5);
        SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, "SQ3", PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[3].state);
        TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[3].textTag);
        gv_players[(EventPlayer() - 1)].quests.talking = false;
    }
    else {
        if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[3].state == 2)) {
            gv_players[(EventPlayer() - 1)].quests.talking = true;
            libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
            libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
            TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(1597), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/00C05A10"), StringExternal("Param/Value/8F7EBDC2"), 4.0, c_transmissionDurationAdd, true);
            libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
            libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
            gv_players[(EventPlayer() - 1)].quests.talking = false;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ3PlayerTalkstoPetrose_Init () {
    gt_SQ3PlayerTalkstoPetrose = TriggerCreate("gt_SQ3PlayerTalkstoPetrose_Func");
    TriggerAddEventUnitSelected(gt_SQ3PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_SQ3PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_SQ3PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ3 - Player Enters Verboten Forest
//--------------------------------------------------------------------------------------------------
bool gt_SQ3PlayerEntersVerbotenForest_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[3].state == 2)) {
        ObjectiveSetState(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[3].objective, c_objectiveStateFailed);
        ObjectiveDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[3].objective);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[3].state = 3;
        BankValueSetFromInt(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, "SQ3", PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[3].state);
        PingDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[3].ping);
        gf_SQ4Setup(UnitGetOwner(EventUnit()));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ3PlayerEntersVerbotenForest_Init () {
    gt_SQ3PlayerEntersVerbotenForest = TriggerCreate("gt_SQ3PlayerEntersVerbotenForest_Func");
    TriggerAddEventUnitRegion(gt_SQ3PlayerEntersVerbotenForest, null, RegionFromId(58), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ4 - Player Talks to Risdak
//--------------------------------------------------------------------------------------------------
bool gt_SQ4PlayerTalkstoRisdak_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionFromId(225))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[4].state == 1)) {
        gv_players[(EventPlayer() - 1)].quests.talking = true;
        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
        TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(1976), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/79D72710"), StringExternal("Param/Value/AF090285"), 10.0, c_transmissionDurationAdd, true);
        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
        gv_players[(EventPlayer() - 1)].quests.storyQuests[4].state = 2;
        ObjectiveSetName(gv_players[(EventPlayer() - 1)].quests.storyQuests[4].objective, StringExternal("Param/Value/61D2B86E"));
        PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[4].ping);
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingSimple", RegionGetCenter(RegionFromId(48)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
        gv_players[(EventPlayer() - 1)].quests.storyQuests[4].ping = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.5);
        SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, "SQ4", PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[4].state);
        TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[4].textTag);
        gv_players[(EventPlayer() - 1)].quests.talking = false;
        
        if(!statueSpawned){
        TriggerExecute(gt_GuardianRespawn, true, false);
        }
    }
    else {
        if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[4].state == 2)) {
            gv_players[(EventPlayer() - 1)].quests.talking = true;
            libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
            libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
            TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(1976), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/0848ECBA"), StringExternal("Param/Value/C8E6C7E5"), 4.0, c_transmissionDurationAdd, true);
            libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
            libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
            gv_players[(EventPlayer() - 1)].quests.talking = false;
            
        }
        else {
            if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[4].state == 3)) {
                gv_players[(EventPlayer() - 1)].quests.talking = true;
                libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(1976), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/660FA807"), StringExternal("Param/Value/ED00BDE2"), 5.0, c_transmissionDurationAdd, true);
                libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                gv_players[(EventPlayer() - 1)].quests.storyQuests[4].state = 4;
                ObjectiveSetState(gv_players[(EventPlayer() - 1)].quests.storyQuests[4].objective, c_objectiveStateCompleted);
                ObjectiveDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[4].objective);
                BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, "SQ4", PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[4].state);
                TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[4].textTag);
                gv_allSeeingEye[(EventPlayer() - 1)] = true;
                BankValueSetFromFlag(gv_players[(EventPlayer() - 1)].banks.dragonBank, "ASE", PlayerHandle(EventPlayer()), gv_allSeeingEye[(EventPlayer() - 1)]);
                UnitBehaviorAddPlayer(gv_players[(EventPlayer() - 1)].dragon, "AllSeeingEye", EventPlayer(), 1);
                if ((UnitLevel(gv_players[(EventPlayer() - 1)].dragon) != 100)) {
                    gf_AddExperience(gv_players[(EventPlayer() - 1)].dragon, 3000.0);
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/26171E78"));
                gv_players[(EventPlayer() - 1)].quests.talking = false;
                PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[4].ping);
                TriggerExecute(gt_SremagsiRespawn, true, false);
                gf_SQ5Setup(EventPlayer());
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ4PlayerTalkstoRisdak_Init () {
    gt_SQ4PlayerTalkstoRisdak = TriggerCreate("gt_SQ4PlayerTalkstoRisdak_Func");
    TriggerAddEventUnitSelected(gt_SQ4PlayerTalkstoRisdak, UnitRefFromUnit(UnitFromId(1976)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_SQ4PlayerTalkstoRisdak, UnitRefFromUnit(UnitFromId(1976)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_SQ4PlayerTalkstoRisdak, UnitRefFromUnit(UnitFromId(1976)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ5 - Player Enters Infestation
//--------------------------------------------------------------------------------------------------
bool gt_SQ5PlayerEntersInfestation_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[5].state == 1)) {
        gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[5].state = 2;
        ObjectiveSetName(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[5].objective, StringExternal("Param/Value/556E72C6"));
        PingDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[5].ping);
        PingCreate(PlayerGroupSingle(UnitGetOwner(EventUnit())), "PingBoss", RegionGetCenter(RegionFromId(229)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[5].ping = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.5);
        BankValueSetFromInt(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, "SQ5", PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[5].state);
        SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ5PlayerEntersInfestation_Init () {
    gt_SQ5PlayerEntersInfestation = TriggerCreate("gt_SQ5PlayerEntersInfestation_Func");
    TriggerAddEventUnitRegion(gt_SQ5PlayerEntersInfestation, null, RegionFromId(64), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ5 - Player Talks to Petrose
//--------------------------------------------------------------------------------------------------
bool gt_SQ5PlayerTalkstoPetrose_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionFromId(224))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[5].state == 3)) {
        gv_players[(EventPlayer() - 1)].quests.talking = true;
        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
        TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(1597), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/F97E6B22"), StringExternal("Param/Value/045D0308"), 5.0, c_transmissionDurationAdd, true);
        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
        gv_players[(EventPlayer() - 1)].quests.storyQuests[5].state = 4;
        ObjectiveSetState(gv_players[(EventPlayer() - 1)].quests.storyQuests[5].objective, c_objectiveStateCompleted);
        ObjectiveDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[5].objective);
        BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, "SQ5", PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[5].state);
        TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[5].textTag);
        if ((UnitLevel(gv_players[(EventPlayer() - 1)].dragon) != 100)) {
            gf_AddExperience(gv_players[(EventPlayer() - 1)].dragon, 10000.0);
        }
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/3C91F57D"));
        gv_players[(EventPlayer() - 1)].quests.talking = false;
        PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[5].ping);
        gf_SQ6Setup(EventPlayer());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ5PlayerTalkstoPetrose_Init () {
    gt_SQ5PlayerTalkstoPetrose = TriggerCreate("gt_SQ5PlayerTalkstoPetrose_Func");
    TriggerAddEventUnitSelected(gt_SQ5PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_SQ5PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_SQ5PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ6 - Player Enters Teleport to Biodome
//--------------------------------------------------------------------------------------------------
bool gt_SQ6PlayerEntersTeleporttoBiodome_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 15))) {
            return false;
        }
        if (!((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].state == 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    ObjectiveSetState(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].objective, c_objectiveStateFailed);
    ObjectiveDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].objective);
    gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].state = 2;
    BankValueSetFromInt(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, "SQ6", PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].state);
    PingDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].ping);
    gf_SQ7Setup(UnitGetOwner(EventUnit()));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ6PlayerEntersTeleporttoBiodome_Init () {
    gt_SQ6PlayerEntersTeleporttoBiodome = TriggerCreate("gt_SQ6PlayerEntersTeleporttoBiodome_Func");
    TriggerAddEventUnitRegion(gt_SQ6PlayerEntersTeleporttoBiodome, null, RegionFromId(187), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ7 - Player Talks to Lanae
//--------------------------------------------------------------------------------------------------
bool gt_SQ7PlayerTalkstoLanae_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionFromId(226))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[7].state == 1)) {
        gv_players[(EventPlayer() - 1)].quests.talking = true;
        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
        TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(2595), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/D95C0650"), StringExternal("Param/Value/54B2D940"), 8.0, c_transmissionDurationAdd, true);
        PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].ping);
        PingCreate(PlayerGroupSingle(EventPlayer()), "PingBoss", UnitGetPosition(gv_machinaDePlagam), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
        gv_players[(EventPlayer() - 1)].quests.storyQuests[7].ping = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.5);
        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
        gv_players[(EventPlayer() - 1)].quests.storyQuests[7].state = 2;
        ObjectiveSetName(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].objective, StringExternal("Param/Value/B6E6C7C7"));
        SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, "SQ7", PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[7].state);
        TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].textTag);
        gv_players[(EventPlayer() - 1)].quests.talking = false;
        TriggerExecute(gt_MachinaDePlagamRespawn, true, false);
    }
    else {
        if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[7].state == 2)) {
            gv_players[(EventPlayer() - 1)].quests.talking = true;
            libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
            libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
            TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(2595), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/F5929901"), StringExternal("Param/Value/9C502B03"), 4.0, c_transmissionDurationAdd, true);
            libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
            libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
            gv_players[(EventPlayer() - 1)].quests.talking = false;
            TriggerExecute(gt_MachinaDePlagamRespawn, true, false);
        }
        else {
            if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[7].state == 3)) {
                gv_players[(EventPlayer() - 1)].quests.talking = true;
                libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(2595), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/826CFAF2"), StringExternal("Param/Value/3E5F5E2F"), 5.0, c_transmissionDurationAdd, true);
                libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                gv_players[(EventPlayer() - 1)].quests.storyQuests[7].state = 4;
                ObjectiveSetState(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].objective, c_objectiveStateCompleted);
                ObjectiveDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].objective);
                PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].ping);
                BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, "SQ7", PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[7].state);
                TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].textTag);
                if ((UnitLevel(gv_players[(EventPlayer() - 1)].dragon) != 100)) {
                    gf_AddExperience(gv_players[(EventPlayer() - 1)].dragon, 18000.0);
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/43EFA5FC"));
                gv_players[(EventPlayer() - 1)].quests.talking = false;
                PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].ping);
                gf_SQ8Setup(EventPlayer());
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ7PlayerTalkstoLanae_Init () {
    gt_SQ7PlayerTalkstoLanae = TriggerCreate("gt_SQ7PlayerTalkstoLanae_Func");
    TriggerAddEventUnitSelected(gt_SQ7PlayerTalkstoLanae, UnitRefFromUnit(UnitFromId(2595)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_SQ7PlayerTalkstoLanae, UnitRefFromUnit(UnitFromId(2595)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_SQ7PlayerTalkstoLanae, UnitRefFromUnit(UnitFromId(2595)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ8 - Biodome Entered
//--------------------------------------------------------------------------------------------------
bool gt_SQ8BiodomeEntered_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[8].state == 1)) {
        gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[8].state = 2;
        BankValueSetFromInt(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, "SQ8", PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[8].state);
        ObjectiveSetName(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[8].objective, StringExternal("Param/Value/9497FFEF"));
        PingDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[8].ping);
        PingCreate(PlayerGroupSingle(UnitGetOwner(EventUnit())), "PingSimple", UnitGetPosition(UnitFromId(1880)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[8].ping = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.5);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ8BiodomeEntered_Init () {
    gt_SQ8BiodomeEntered = TriggerCreate("gt_SQ8BiodomeEntered_Func");
    TriggerAddEventUnitRegion(gt_SQ8BiodomeEntered, null, RegionFromId(187), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ8 - Crystal 1 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_SQ8Crystal1Destroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pP;
    int lv_pPI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pP = PlayerGroupLoopCurrent();
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if ((gv_players[lv_pPI].quests.storyQuests[8].state == 2)) {
            gv_players[lv_pPI].quests.storyQuests[8].state = 3;
            BankValueSetFromInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ8", PlayerHandle(PlayerGroupLoopCurrent()), gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state);
            ObjectiveSetName(gv_players[lv_pPI].quests.storyQuests[8].objective, StringExternal("Param/Value/258EB839"));
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingSimple", UnitGetPosition(UnitFromId(1881)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ8Crystal1Destroyed_Init () {
    gt_SQ8Crystal1Destroyed = TriggerCreate("gt_SQ8Crystal1Destroyed_Func");
    TriggerAddEventUnitDied(gt_SQ8Crystal1Destroyed, UnitRefFromUnit(UnitFromId(1880)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ8 - Crystal 2 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_SQ8Crystal2Destroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pP;
    int lv_pPI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pP = PlayerGroupLoopCurrent();
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if ((gv_players[lv_pPI].quests.storyQuests[8].state == 3)) {
            gv_players[lv_pPI].quests.storyQuests[8].state = 4;
            BankValueSetFromInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ8", PlayerHandle(PlayerGroupLoopCurrent()), gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state);
            ObjectiveSetName(gv_players[lv_pPI].quests.storyQuests[8].objective, StringExternal("Param/Value/110CADCD"));
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingSimple", UnitGetPosition(UnitFromId(1882)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ8Crystal2Destroyed_Init () {
    gt_SQ8Crystal2Destroyed = TriggerCreate("gt_SQ8Crystal2Destroyed_Func");
    TriggerAddEventUnitDied(gt_SQ8Crystal2Destroyed, UnitRefFromUnit(UnitFromId(1881)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ8 - Crystal 3 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_SQ8Crystal3Destroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pP;
    int lv_pPI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pP = PlayerGroupLoopCurrent();
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if ((gv_players[lv_pPI].quests.storyQuests[8].state == 4)) {
            gv_players[lv_pPI].quests.storyQuests[8].state = 5;
            BankValueSetFromInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ8", PlayerHandle(PlayerGroupLoopCurrent()), gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state);
            ObjectiveSetName(gv_players[lv_pPI].quests.storyQuests[8].objective, StringExternal("Param/Value/DBE25CDC"));
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingSimple", UnitGetPosition(UnitFromId(1883)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ8Crystal3Destroyed_Init () {
    gt_SQ8Crystal3Destroyed = TriggerCreate("gt_SQ8Crystal3Destroyed_Func");
    TriggerAddEventUnitDied(gt_SQ8Crystal3Destroyed, UnitRefFromUnit(UnitFromId(1882)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ8 - Crystal 4 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_SQ8Crystal4Destroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pP;
    int lv_pPI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pP = PlayerGroupLoopCurrent();
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if ((gv_players[lv_pPI].quests.storyQuests[8].state == 5)) {
            gv_players[lv_pPI].quests.storyQuests[8].state = 6;
            BankValueSetFromInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ8", PlayerHandle(PlayerGroupLoopCurrent()), gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state);
            ObjectiveSetName(gv_players[lv_pPI].quests.storyQuests[8].objective, StringExternal("Param/Value/E3F4860E"));
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingSimple", UnitGetPosition(UnitFromId(1884)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ8Crystal4Destroyed_Init () {
    gt_SQ8Crystal4Destroyed = TriggerCreate("gt_SQ8Crystal4Destroyed_Func");
    TriggerAddEventUnitDied(gt_SQ8Crystal4Destroyed, UnitRefFromUnit(UnitFromId(1883)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ8 - Crystal 5 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_SQ8Crystal5Destroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pP;
    int lv_pPI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pP = PlayerGroupLoopCurrent();
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if ((gv_players[lv_pPI].quests.storyQuests[8].state == 6)) {
            gv_players[lv_pPI].quests.storyQuests[8].state = 7;
            BankValueSetFromInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ8", PlayerHandle(PlayerGroupLoopCurrent()), gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state);
            ObjectiveSetName(gv_players[lv_pPI].quests.storyQuests[8].objective, StringExternal("Param/Value/0CD41769"));
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingSimple", UnitGetPosition(UnitFromId(2501)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ8Crystal5Destroyed_Init () {
    gt_SQ8Crystal5Destroyed = TriggerCreate("gt_SQ8Crystal5Destroyed_Func");
    TriggerAddEventUnitDied(gt_SQ8Crystal5Destroyed, UnitRefFromUnit(UnitFromId(1884)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ8 - Crystal 6 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_SQ8Crystal6Destroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pP;
    int lv_pPI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pP = PlayerGroupLoopCurrent();
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if ((gv_players[lv_pPI].quests.storyQuests[8].state == 7)) {
            gv_players[lv_pPI].quests.storyQuests[8].state = 8;
            BankValueSetFromInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ8", PlayerHandle(PlayerGroupLoopCurrent()), gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state);
            ObjectiveSetState(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, c_objectiveStateCompleted);
            ObjectiveDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective);
            if ((UnitLevel(gv_players[(PlayerGroupLoopCurrent() - 1)].dragon) != 100)) {
                gf_AddExperience(gv_players[(EventPlayer() - 1)].dragon, 25000.0);
            }
            UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/2725B5FA"));
            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
            gf_SQ9Setup(PlayerGroupLoopCurrent());
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ8Crystal6Destroyed_Init () {
    gt_SQ8Crystal6Destroyed = TriggerCreate("gt_SQ8Crystal6Destroyed_Func");
    TriggerAddEventUnitDied(gt_SQ8Crystal6Destroyed, UnitRefFromUnit(UnitFromId(2501)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Load Side Quests
//--------------------------------------------------------------------------------------------------
bool gt_LoadSideQuests_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Mana0-0")) {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Mana0-0", PlayerHandle(PlayerGroupLoopCurrent()));
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[0].progress == 0)) {
                TextTagCreate(StringExternal("Param/Value/2F009883"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[0].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[0].textTag, c_textTagTimeDuration, 524287.0);
            }
            else {
                if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Mana1-0")) {
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[1].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Mana1-0", PlayerHandle(PlayerGroupLoopCurrent()));
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[1].progress == 0)) {
                        TextTagCreate(StringExternal("Param/Value/DE485F61"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[1].textTag = TextTagLastCreated();
                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[1].textTag, c_textTagTimeDuration, 524287.0);
                    }
                    else {
                        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Mana2-0")) {
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[2].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Mana2-0", PlayerHandle(PlayerGroupLoopCurrent()));
                            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[2].progress == 0)) {
                                TextTagCreate(StringExternal("Param/Value/D715BDE5"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[2].textTag = TextTagLastCreated();
                                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[2].textTag, c_textTagTimeDuration, 524287.0);
                            }
                            else {
                                if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Mana3-0")) {
                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[3].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Mana3-0", PlayerHandle(PlayerGroupLoopCurrent()));
                                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[3].progress == 0)) {
                                        TextTagCreate(StringExternal("Param/Value/3B996203"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[3].textTag = TextTagLastCreated();
                                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[3].textTag, c_textTagTimeDuration, 524287.0);
                                    }
                                    else {
                                        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Mana4-0")) {
                                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[4].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Mana4-0", PlayerHandle(PlayerGroupLoopCurrent()));
                                            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[4].progress == 0)) {
                                                TextTagCreate(StringExternal("Param/Value/788F4111"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[4].textTag = TextTagLastCreated();
                                                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[4].textTag, c_textTagTimeDuration, 524287.0);
                                            }
                                            else {
                                                if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Mana5-0")) {
                                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[5].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Mana5-0", PlayerHandle(PlayerGroupLoopCurrent()));
                                                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[5].progress == 0)) {
                                                        TextTagCreate(StringExternal("Param/Value/0169568B"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[5].textTag = TextTagLastCreated();
                                                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[5].textTag, c_textTagTimeDuration, 524287.0);
                                                    }
                                                }
                                                else {
                                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[5].progress = 0;
                                                    TextTagCreate(StringExternal("Param/Value/FC0B8386"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[5].textTag = TextTagLastCreated();
                                                    TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[5].textTag, c_textTagTimeDuration, 524287.0);
                                                }
                                            }
                                        }
                                        else {
                                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[4].progress = 0;
                                            TextTagCreate(StringExternal("Param/Value/D0E0AB0B"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[4].textTag = TextTagLastCreated();
                                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[4].textTag, c_textTagTimeDuration, 524287.0);
                                        }
                                    }
                                }
                                else {
                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[3].progress = 0;
                                    TextTagCreate(StringExternal("Param/Value/81A56668"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[3].textTag = TextTagLastCreated();
                                    TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[3].textTag, c_textTagTimeDuration, 524287.0);
                                }
                            }
                        }
                        else {
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[2].progress = 0;
                            TextTagCreate(StringExternal("Param/Value/81AF9223"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[2].textTag = TextTagLastCreated();
                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[2].textTag, c_textTagTimeDuration, 524287.0);
                        }
                    }
                }
                else {
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[1].progress = 0;
                    TextTagCreate(StringExternal("Param/Value/59C640A8"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[1].progress = TextTagLastCreated();
                    TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[1].textTag, c_textTagTimeDuration, 524287.0);
                }
            }
        }
        else {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[0].progress = 0;
            TextTagCreate(StringExternal("Param/Value/D3156BC0"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[0].textTag = TextTagLastCreated();
            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[0].textTag, c_textTagTimeDuration, 524287.0);
        }
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Malin0-0")) {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.malinQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Malin0-0", PlayerHandle(PlayerGroupLoopCurrent()));
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.malinQuests[0].progress == 0)) {
                TextTagCreate(StringExternal("Param/Value/08DE1272"), 72, UnitGetPosition(UnitFromId(2516)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.malinQuests[0].progress = TextTagLastCreated();
                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.malinQuests[0].textTag, c_textTagTimeDuration, 524287.0);
            }
        }
        else {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.malinQuests[0].progress = 0;
            TextTagCreate(StringExternal("Param/Value/7DE06E8C"), 72, UnitGetPosition(UnitFromId(2516)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.malinQuests[0].textTag = TextTagLastCreated();
            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.malinQuests[0].textTag, c_textTagTimeDuration, 524287.0);
        }
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Base0-0")) {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Base0-0", PlayerHandle(PlayerGroupLoopCurrent()));
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[0].progress == 0)) {
                TextTagCreate(StringExternal("Param/Value/1B093517"), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[0].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[0].textTag, c_textTagTimeDuration, 524287.0);
            }
            else {
                if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Base1-0")) {
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[1].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Base1-0", PlayerHandle(PlayerGroupLoopCurrent()));
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[1].progress == 0)) {
                        TextTagCreate(StringExternal("Param/Value/F6A8D66B"), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[1].textTag = TextTagLastCreated();
                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[1].textTag, c_textTagTimeDuration, 524287.0);
                    }
                }
                else {
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[1].progress = 0;
                    TextTagCreate(StringExternal("Param/Value/C9B57383"), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[1].textTag = TextTagLastCreated();
                    TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[1].textTag, c_textTagTimeDuration, 524287.0);
                }
            }
        }
        else {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[0].progress = 0;
            TextTagCreate(StringExternal("Param/Value/75E6820C"), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[0].textTag = TextTagLastCreated();
            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[0].textTag, c_textTagTimeDuration, 524287.0);
        }
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Oleum0-0")) {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.oleumQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Oleum0-0", PlayerHandle(PlayerGroupLoopCurrent()));
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.oleumQuests[0].progress == 0)) {
                TextTagCreate(StringExternal("Param/Value/8DFA2561"), 72, UnitGetPosition(UnitFromId(4381)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.oleumQuests[0].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.oleumQuests[0].textTag, c_textTagTimeDuration, 524287.0);
            }
        }
        else {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.oleumQuests[0].progress = 0;
            TextTagCreate(StringExternal("Param/Value/BEF311D1"), 72, UnitGetPosition(UnitFromId(4381)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.oleumQuests[0].textTag = TextTagLastCreated();
            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.oleumQuests[0].textTag, c_textTagTimeDuration, 524287.0);
        }
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Seryn0-0")) {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.serynQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Seryn0-0", PlayerHandle(PlayerGroupLoopCurrent()));
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.serynQuests[0].progress == 0)) {
                TextTagCreate(StringExternal("Param/Value/60C15502"), 72, UnitGetPosition(UnitFromId(2671)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.serynQuests[0].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.serynQuests[0].textTag, c_textTagTimeDuration, 524287.0);
            }
        }
        else {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.serynQuests[0].progress = 0;
            TextTagCreate(StringExternal("Param/Value/F977CC2E"), 72, UnitGetPosition(UnitFromId(2671)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.serynQuests[0].textTag = TextTagLastCreated();
            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.serynQuests[0].textTag, c_textTagTimeDuration, 524287.0);
        }
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Detsefni0-0")) {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.detsefniQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Detsefni0-0", PlayerHandle(PlayerGroupLoopCurrent()));
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.detsefniQuests[0].progress == 0)) {
                TextTagCreate(StringExternal("Param/Value/7EE2688E"), 72, UnitGetPosition(UnitFromId(4922)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.detsefniQuests[0].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.detsefniQuests[0].textTag, c_textTagTimeDuration, 524287.0);
            }
        }
        else {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.detsefniQuests[0].progress = 0;
            TextTagCreate(StringExternal("Param/Value/756E3A5A"), 72, UnitGetPosition(UnitFromId(4922)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.detsefniQuests[0].textTag = TextTagLastCreated();
            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.detsefniQuests[0].textTag, c_textTagTimeDuration, 524287.0);
        }
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-SergeantLister0-0")) {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.sergeantListerQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-SergeantLister0-0", PlayerHandle(PlayerGroupLoopCurrent()));
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.sergeantListerQuests[0].progress == 0)) {
                TextTagCreate(StringExternal("Param/Value/03D95F58"), 72, UnitGetPosition(UnitFromId(4923)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.sergeantListerQuests[0].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.sergeantListerQuests[0].textTag, c_textTagTimeDuration, 524287.0);
            }
        }
        else {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.sergeantListerQuests[0].progress = 0;
            TextTagCreate(StringExternal("Param/Value/97B825DC"), 72, UnitGetPosition(UnitFromId(4923)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.sergeantListerQuests[0].textTag = TextTagLastCreated();
            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.sergeantListerQuests[0].textTag, c_textTagTimeDuration, 524287.0);
        }
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Greed0-0")) {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.greedQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Greed0-0", PlayerHandle(PlayerGroupLoopCurrent()));
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.greedQuests[0].progress == 0)) {
                TextTagCreate(StringExternal("Param/Value/D473002B"), 72, UnitGetPosition(UnitFromId(4924)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.greedQuests[0].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.greedQuests[0].textTag, c_textTagTimeDuration, 524287.0);
            }
        }
        else {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.greedQuests[0].progress = 0;
            TextTagCreate(StringExternal("Param/Value/FFE6E959"), 72, UnitGetPosition(UnitFromId(4924)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.greedQuests[0].textTag = TextTagLastCreated();
            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.greedQuests[0].textTag, c_textTagTimeDuration, 524287.0);
        }
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Madeleine0-0")) {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.madelineQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Madeleine0-0", PlayerHandle(PlayerGroupLoopCurrent()));
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.madelineQuests[0].progress == 0)) {
                TextTagCreate(StringExternal("Param/Value/5625DC8F"), 72, UnitGetPosition(UnitFromId(4945)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.madelineQuests[0].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.madelineQuests[0].textTag, c_textTagTimeDuration, 524287.0);
            }
        }
        else {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.madelineQuests[0].progress = 0;
            TextTagCreate(StringExternal("Param/Value/4DD46BB6"), 72, UnitGetPosition(UnitFromId(4945)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.madelineQuests[0].textTag = TextTagLastCreated();
            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.madelineQuests[0].textTag, c_textTagTimeDuration, 524287.0);
        }
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Altoss0-0")) {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.altossQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Altoss0-0", PlayerHandle(PlayerGroupLoopCurrent()));
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.altossQuests[0].progress == 0)) {
                TextTagCreate(StringExternal("Param/Value/5707150A"), 72, UnitGetPosition(UnitFromId(4946)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.altossQuests[0].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.altossQuests[0].textTag, c_textTagTimeDuration, 524287.0);
            }
        }
        else {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.altossQuests[0].progress = 0;
            TextTagCreate(StringExternal("Param/Value/72459D54"), 72, UnitGetPosition(UnitFromId(4946)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.altossQuests[0].textTag = TextTagLastCreated();
            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.altossQuests[0].textTag, c_textTagTimeDuration, 524287.0);
        }
        if (BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Amp0-0")) {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.ampQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "SQ-Amp0-0", PlayerHandle(PlayerGroupLoopCurrent()));
            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.ampQuests[0].progress == 0)) {
                TextTagCreate(StringExternal("Param/Value/64903B57"), 72, UnitGetPosition(UnitFromId(444)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.ampQuests[0].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.ampQuests[0].textTag, c_textTagTimeDuration, 524287.0);
            }
        }
        else {
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.ampQuests[0].progress = 0;
            TextTagCreate(StringExternal("Param/Value/9FAC43FA"), 72, UnitGetPosition(UnitFromId(444)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.ampQuests[0].textTag = TextTagLastCreated();
            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.ampQuests[0].textTag, c_textTagTimeDuration, 524287.0);
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LoadSideQuests_Init () {
    gt_LoadSideQuests = TriggerCreate("gt_LoadSideQuests_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 0 - Talk to Mana
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest0TalktoMana_Func (bool testConds, bool runActions) {
    int auto3DC10FEA_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto3DC10FEA_val = gv_players[lv_qPI].quests.manaQuests[0].progress;
    if (auto3DC10FEA_val == 0) {
        gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/10839ED6"), StringExternal("Param/Value/378E78B5"), StringExternal("Param/Value/4059B14F"), StringExternal("Param/Value/F9A00D5C"));
    }
    else if (auto3DC10FEA_val == 1) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/C939D953"));
    }
    else if (auto3DC10FEA_val == 2) {
        gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/731375C0"), StringExternal("Param/Value/E1F95815"));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest0TalktoMana_Init () {
    gt_ManaQuest0TalktoMana = TriggerCreate("gt_ManaQuest0TalktoMana_Func");
    TriggerAddEventUnitSelected(gt_ManaQuest0TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_ManaQuest0TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_ManaQuest0TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest0QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.manaQuests[0].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/8E3307EA"), StringExternal("Param/Value/9D6BEEE8"), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.manaQuests[0].objective = ObjectiveLastCreated();
    UnitInventoryCreate(gv_players[lv_tPI].dragon, "BasicArmor");
    lv_tempArmor = UnitInventoryLastCreated();
    UnitInventoryCreate(gv_players[lv_tPI].dragon, "BasicArmor");
    gv_manaQuest0Armor[lv_tPI] = UnitInventoryLastCreated();
    UnitRemove(lv_tempArmor);
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.manaQuests[0].textTag, StringToText(""));
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, false);
    Wait(0.1, c_timeGame);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, true);
    Wait(0.1, c_timeGame);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, false);
    Wait(0.1, c_timeGame);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, true);
    Wait(0.1, c_timeGame);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, false);
    Wait(0.1, c_timeGame);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, true);
    Wait(0.1, c_timeGame);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, false);
    Wait(0.1, c_timeGame);
    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest0QuestAccept_Init () {
    gt_ManaQuest0QuestAccept = TriggerCreate("gt_ManaQuest0QuestAccept_Func");
    TriggerAddEventDialogControl(gt_ManaQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 0 - Equip Armor P1
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest0EquipArmorP1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(EventUnitInventoryItem()) - 1);
    // Conditions
    if (testConds) {
        if (!((gv_players[(UnitGetOwner(EventUnitInventoryItem()) - 1)].quests.manaQuests[0].progress == 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitInventoryContainer(gv_manaQuest0Armor[lv_qPI]) == 2)) {
        gv_players[lv_qPI].quests.manaQuests[0].progress = 2;
        ObjectiveSetState(gv_players[lv_qPI].quests.manaQuests[0].objective, c_objectiveStateCompleted);
        gv_manaQuest0Armor[lv_qPI] = null;
        TextTagSetText(gv_players[lv_qPI].quests.manaQuests[0].textTag, StringExternal("Param/Value/E213BE40"));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest0EquipArmorP1_Init () {
    gt_ManaQuest0EquipArmorP1 = TriggerCreate("gt_ManaQuest0EquipArmorP1_Func");
    TriggerAddEventUnitInventoryChange(gt_ManaQuest0EquipArmorP1, UnitRefFromVariable("gv_players[0].dragon"), c_unitInventoryChangeMoves, UnitRefFromVariable("gv_manaQuest0Armor[0]"));
    TriggerAddEventUnitInventoryChange(gt_ManaQuest0EquipArmorP1, UnitRefFromVariable("gv_players[1].dragon"), c_unitInventoryChangeMoves, UnitRefFromVariable("gv_manaQuest0Armor[1]"));
    TriggerAddEventUnitInventoryChange(gt_ManaQuest0EquipArmorP1, UnitRefFromVariable("gv_players[2].dragon"), c_unitInventoryChangeMoves, UnitRefFromVariable("gv_manaQuest0Armor[2]"));
    TriggerAddEventUnitInventoryChange(gt_ManaQuest0EquipArmorP1, UnitRefFromVariable("gv_players[3].dragon"), c_unitInventoryChangeMoves, UnitRefFromVariable("gv_manaQuest0Armor[3]"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest0RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 2))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.manaQuests[0].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Mana0-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.manaQuests[0].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.manaQuests[0].objective);
    gv_players[lv_tPI].quests.manaQuests[0].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    TextTagDestroy(gv_players[lv_tPI].quests.manaQuests[0].textTag);
    TextTagCreate(StringExternal("Param/Value/0B6F6B5B"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.manaQuests[1].textTag = TextTagLastCreated();
    TextTagSetTime(gv_players[lv_tPI].quests.manaQuests[1].textTag, c_textTagTimeDuration, 524287.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest0RewardAccept_Init () {
    gt_ManaQuest0RewardAccept = TriggerCreate("gt_ManaQuest0RewardAccept_Func");
    TriggerAddEventDialogControl(gt_ManaQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 1 - Talk to Mana
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest1TalktoMana_Func (bool testConds, bool runActions) {
    int auto3674C2B6_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto3674C2B6_val = gv_players[lv_qPI].quests.manaQuests[1].progress;
    if (auto3674C2B6_val == 0) {
        gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/EF1ACC9A"), StringExternal("Param/Value/7789F4B3"), StringExternal("Param/Value/F9855B12"), StringExternal("Param/Value/89553942"));
    }
    else if (auto3674C2B6_val == 1) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/18BD2755"));
    }
    else if (auto3674C2B6_val == 2) {
        gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/F3FB8101"), StringExternal("Param/Value/FA4DE787"));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest1TalktoMana_Init () {
    gt_ManaQuest1TalktoMana = TriggerCreate("gt_ManaQuest1TalktoMana_Func");
    TriggerAddEventUnitSelected(gt_ManaQuest1TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_ManaQuest1TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_ManaQuest1TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 1 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest1QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.manaQuests[1].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/699B9328"), StringExternal("Param/Value/2B14BCD9"), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.manaQuests[1].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.manaQuests[1].textTag, StringToText(""));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest1QuestAccept_Init () {
    gt_ManaQuest1QuestAccept = TriggerCreate("gt_ManaQuest1QuestAccept_Func");
    TriggerAddEventDialogControl(gt_ManaQuest1QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 1 - Kill Sheep
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest1KillSheep_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    int lv_pPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
    lv_pPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "SmallSheep"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
        if ((gv_players[lv_pPI].quests.manaQuests[1].progress == 1)) {
            gv_players[lv_pPI].quests.manaQuests[1].progress = 2;
            ObjectiveSetState(gv_players[lv_pPI].quests.manaQuests[1].objective, c_objectiveStateCompleted);
            TextTagSetText(gv_players[lv_pPI].quests.manaQuests[1].textTag, StringExternal("Param/Value/F3003B53"));
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest1KillSheep_Init () {
    gt_ManaQuest1KillSheep = TriggerCreate("gt_ManaQuest1KillSheep_Func");
    TriggerAddEventUnitDied(gt_ManaQuest1KillSheep, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 1 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest1RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 2))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.manaQuests[1].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Mana1-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.manaQuests[1].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.manaQuests[1].objective);
    gv_players[lv_tPI].quests.manaQuests[1].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/48B1F90D"));
    gf_AddExperience(gv_players[lv_tPI].dragon, 25);
    TextTagDestroy(gv_players[lv_tPI].quests.manaQuests[1].textTag);
    TextTagCreate(StringExternal("Param/Value/37757B36"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.manaQuests[2].textTag = TextTagLastCreated();
    TextTagSetTime(gv_players[lv_tPI].quests.manaQuests[2].textTag, c_textTagTimeDuration, 524287.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest1RewardAccept_Init () {
    gt_ManaQuest1RewardAccept = TriggerCreate("gt_ManaQuest1RewardAccept_Func");
    TriggerAddEventDialogControl(gt_ManaQuest1RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 2 - Talk to Mana
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest2TalktoMana_Func (bool testConds, bool runActions) {
    int autoE6491751_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoE6491751_val = gv_players[lv_qPI].quests.manaQuests[2].progress;
    if (autoE6491751_val == 0) {
        if ((UnitGetPropertyFixed(gv_players[lv_qPI].dragon, c_unitPropLife, c_unitPropCurrent) != UnitGetPropertyFixed(gv_players[lv_qPI].dragon, c_unitPropLifeMax, c_unitPropCurrent))) {
            gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/6009600F"), StringExternal("Param/Value/62B0BB79"), StringExternal("Param/Value/AED7BDFF"), StringExternal("Param/Value/B4C73527"));
        }
        else {
            gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/D60B4BB7"), StringExternal("Param/Value/D5D2F79B"), StringExternal("Param/Value/A3E41EF2"), StringExternal("Param/Value/70EAE5E9"));
        }
    }
    else if (autoE6491751_val == 1) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/7E6C12C5"));
    }
    else if (autoE6491751_val == 2) {
        gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/DB969F41"), StringExternal("Param/Value/AF8ECD40"));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest2TalktoMana_Init () {
    gt_ManaQuest2TalktoMana = TriggerCreate("gt_ManaQuest2TalktoMana_Func");
    TriggerAddEventUnitSelected(gt_ManaQuest2TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_ManaQuest2TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_ManaQuest2TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 2 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest2QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.manaQuests[2].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/74393FE6"), StringExternal("Param/Value/AD08DCE8"), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.manaQuests[2].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.manaQuests[2].textTag, StringToText(""));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest2QuestAccept_Init () {
    gt_ManaQuest2QuestAccept = TriggerCreate("gt_ManaQuest2QuestAccept_Func");
    TriggerAddEventDialogControl(gt_ManaQuest2QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 2 - Enter Wasteland Water
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest2EnterWastelandWater_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(EventUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 16))) {
            return false;
        }
        if (!UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic)) {
            return false;
        }
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
        if (!((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.manaQuests[2].progress == 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_qPI].quests.manaQuests[2].progress = 2;
    ObjectiveSetState(gv_players[lv_qPI].quests.manaQuests[2].objective, c_objectiveStateCompleted);
    TextTagSetText(gv_players[lv_qPI].quests.manaQuests[2].textTag, StringExternal("Param/Value/4A7BBDF9"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest2EnterWastelandWater_Init () {
    gt_ManaQuest2EnterWastelandWater = TriggerCreate("gt_ManaQuest2EnterWastelandWater_Func");
    TriggerAddEventUnitRegion(gt_ManaQuest2EnterWastelandWater, null, RegionFromId(42), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 2 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest2RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 2))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.manaQuests[2].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Mana2-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.manaQuests[2].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.manaQuests[2].objective);
    gv_players[lv_tPI].quests.manaQuests[2].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/E760FE26"));
    gf_AddExperience(gv_players[lv_tPI].dragon, 25);
    TextTagDestroy(gv_players[lv_tPI].quests.manaQuests[2].textTag);
    TextTagCreate(StringExternal("Param/Value/49BA605A"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.manaQuests[3].textTag = TextTagLastCreated();
    TextTagSetTime(gv_players[lv_tPI].quests.manaQuests[3].textTag, c_textTagTimeDuration, 524287.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest2RewardAccept_Init () {
    gt_ManaQuest2RewardAccept = TriggerCreate("gt_ManaQuest2RewardAccept_Func");
    TriggerAddEventDialogControl(gt_ManaQuest2RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 3 - Talk to Mana
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest3TalktoMana_Func (bool testConds, bool runActions) {
    int autoAFA0159D_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoAFA0159D_val = gv_players[lv_qPI].quests.manaQuests[3].progress;
    if (autoAFA0159D_val == 0) {
        gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/0F5230AE"), StringExternal("Param/Value/B8FA5D90"), StringExternal("Param/Value/16598A9B"), StringExternal("Param/Value/82067E73"));
    }
    else if (autoAFA0159D_val == 1) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/C4E513B5"));
    }
    else if (autoAFA0159D_val == 2) {
        gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/C943FD11"), StringExternal("Param/Value/E346759C"));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest3TalktoMana_Init () {
    gt_ManaQuest3TalktoMana = TriggerCreate("gt_ManaQuest3TalktoMana_Func");
    TriggerAddEventUnitSelected(gt_ManaQuest3TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_ManaQuest3TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_ManaQuest3TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 3 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest3QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.manaQuests[3].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/7D0D68C2"), StringExternal("Param/Value/729C207A"), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.manaQuests[3].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.manaQuests[3].textTag, StringToText(""));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest3QuestAccept_Init () {
    gt_ManaQuest3QuestAccept = TriggerCreate("gt_ManaQuest3QuestAccept_Func");
    TriggerAddEventDialogControl(gt_ManaQuest3QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 3 - Kill Srepti
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest3KillSrepti_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    int lv_pPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "Srepti"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
        if ((gv_players[lv_pPI].quests.manaQuests[3].progress == 1)) {
            gv_players[lv_pPI].quests.manaQuests[3].kills += 1;
            ObjectiveSetName(gv_players[lv_pPI].quests.manaQuests[3].objective, (StringExternal("Param/Value/8FDF552C") + (IntToText((10 - gv_players[lv_pPI].quests.manaQuests[3].kills)) + StringExternal("Param/Value/16FD1AF9"))));
            if ((gv_players[lv_pPI].quests.manaQuests[3].kills == 10)) {
                gv_players[lv_pPI].quests.manaQuests[3].progress = 2;
                ObjectiveSetState(gv_players[lv_pPI].quests.manaQuests[3].objective, c_objectiveStateCompleted);
                TextTagSetText(gv_players[lv_pPI].quests.manaQuests[3].textTag, StringExternal("Param/Value/57030FBB"));
            }
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest3KillSrepti_Init () {
    gt_ManaQuest3KillSrepti = TriggerCreate("gt_ManaQuest3KillSrepti_Func");
    TriggerAddEventUnitDied(gt_ManaQuest3KillSrepti, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 3 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest3RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 2))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.manaQuests[3].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Mana3-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.manaQuests[3].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.manaQuests[3].objective);
    gv_players[lv_tPI].quests.manaQuests[3].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/598F5F66"));
    gf_AddExperience(gv_players[lv_tPI].dragon, 150);
    TextTagDestroy(gv_players[lv_tPI].quests.manaQuests[3].textTag);
    TextTagCreate(StringExternal("Param/Value/6C209170"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.manaQuests[4].textTag = TextTagLastCreated();
    TextTagSetTime(gv_players[lv_tPI].quests.manaQuests[4].textTag, c_textTagTimeDuration, 524287.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest3RewardAccept_Init () {
    gt_ManaQuest3RewardAccept = TriggerCreate("gt_ManaQuest3RewardAccept_Func");
    TriggerAddEventDialogControl(gt_ManaQuest3RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 4 - Talk to Mana
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest4TalktoMana_Func (bool testConds, bool runActions) {
    int autoF06A7D93_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoF06A7D93_val = gv_players[lv_qPI].quests.manaQuests[4].progress;
    if (autoF06A7D93_val == 0) {
        if ((UnitGetPropertyFixed(gv_players[lv_qPI].dragon, c_unitPropLife, c_unitPropCurrent) != UnitGetPropertyFixed(gv_players[lv_qPI].dragon, c_unitPropLifeMax, c_unitPropCurrent))) {
            gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/0F7B287F"), StringExternal("Param/Value/B567CAF8"), StringExternal("Param/Value/F6D87979"), StringExternal("Param/Value/35A32236"));
        }
        else {
            gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/9F8C7B1C"), StringExternal("Param/Value/DB6B526A"), StringExternal("Param/Value/1093F445"), StringExternal("Param/Value/E66C3F8D"));
        }
    }
    else if (autoF06A7D93_val == 1) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/B7DADC24"));
    }
    else if (autoF06A7D93_val == 2) {
        gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/FCF6A792"), StringExternal("Param/Value/2C96AEC8"));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest4TalktoMana_Init () {
    gt_ManaQuest4TalktoMana = TriggerCreate("gt_ManaQuest4TalktoMana_Func");
    TriggerAddEventUnitSelected(gt_ManaQuest4TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_ManaQuest4TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_ManaQuest4TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 4 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest4QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.manaQuests[4].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/38F07793"), StringExternal("Param/Value/9D482A49"), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.manaQuests[4].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 100));
    TextTagSetText(gv_players[lv_tPI].quests.manaQuests[4].textTag, StringToText(""));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest4QuestAccept_Init () {
    gt_ManaQuest4QuestAccept = TriggerCreate("gt_ManaQuest4QuestAccept_Func");
    TriggerAddEventDialogControl(gt_ManaQuest4QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 4 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest4RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 2))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.manaQuests[4].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Mana4-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.manaQuests[4].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.manaQuests[4].objective);
    gv_players[lv_tPI].quests.manaQuests[4].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/15E97A53"));
    gf_AddExperience(gv_players[lv_tPI].dragon, 100);
    TextTagDestroy(gv_players[lv_tPI].quests.manaQuests[4].textTag);
    TextTagCreate(StringExternal("Param/Value/487305A4"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.manaQuests[5].textTag = TextTagLastCreated();
    TextTagSetTime(gv_players[lv_tPI].quests.manaQuests[5].textTag, c_textTagTimeDuration, 524287.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest4RewardAccept_Init () {
    gt_ManaQuest4RewardAccept = TriggerCreate("gt_ManaQuest4RewardAccept_Func");
    TriggerAddEventDialogControl(gt_ManaQuest4RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 4 - Purchase Potion
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest4PurchasePotion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
            return false;
        }
        if (!((gv_players[lv_qPI].quests.manaQuests[4].progress == 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_qPI].quests.manaQuests[4].progress = 2;
    ObjectiveSetState(gv_players[lv_qPI].quests.manaQuests[4].objective, c_objectiveStateCompleted);
    TextTagSetText(gv_players[lv_qPI].quests.manaQuests[4].textTag, StringExternal("Param/Value/B2FAD667"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest4PurchasePotion_Init () {
    gt_ManaQuest4PurchasePotion = TriggerCreate("gt_ManaQuest4PurchasePotion_Func");
    TriggerAddEventButtonPressed(gt_ManaQuest4PurchasePotion, c_playerAny, "SmallHealthPotion");
    TriggerAddEventButtonPressed(gt_ManaQuest4PurchasePotion, c_playerAny, "MediumHealthPotion");
    TriggerAddEventButtonPressed(gt_ManaQuest4PurchasePotion, c_playerAny, "LargeHealthPotion");
    TriggerAddEventButtonPressed(gt_ManaQuest4PurchasePotion, c_playerAny, "GrandHealthPotion");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 5 - Talk to Mana
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest5TalktoMana_Func (bool testConds, bool runActions) {
    int autoB9CA7EF2_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    autoB9CA7EF2_val = gv_players[lv_qPI].quests.manaQuests[5].progress;
    if (autoB9CA7EF2_val == 0) {
        gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/7F2E977B"), StringExternal("Param/Value/4058E6DB"), StringExternal("Param/Value/67E874D2"), StringExternal("Param/Value/5BAD673C"));
    }
    else if (autoB9CA7EF2_val == 1) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/0368FA7A"));
    }
    else if (autoB9CA7EF2_val == 2) {
        gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/071F67CE"), StringExternal("Param/Value/49C2F097"));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
    }
    else if (autoB9CA7EF2_val == 3) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/D4FB44DF"));
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest5TalktoMana_Init () {
    gt_ManaQuest5TalktoMana = TriggerCreate("gt_ManaQuest5TalktoMana_Func");
    TriggerAddEventUnitSelected(gt_ManaQuest5TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_ManaQuest5TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_ManaQuest5TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 5 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest5QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.manaQuests[5].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/F4BCC69C"), StringExternal("Param/Value/440CAF25"), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.manaQuests[5].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.manaQuests[5].textTag, StringToText(""));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest5QuestAccept_Init () {
    gt_ManaQuest5QuestAccept = TriggerCreate("gt_ManaQuest5QuestAccept_Func");
    TriggerAddEventDialogControl(gt_ManaQuest5QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 5 - Kill Alpha Srepti
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest5KillAlphaSrepti_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    int lv_pPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
    // Conditions
    if (testConds) {
        if (UnitGetOwner(libNtve_gf_KillingUnit()) == 16) {
            return false;
        }
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(libNtve_gf_KillingUnit()))) {
            return false;
        }
        if (UnitGetType(EventUnit()) != "AlphaSrepti") {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
        if ((gv_players[lv_pPI].quests.manaQuests[5].progress == 1)) {
            gv_players[lv_pPI].quests.manaQuests[5].progress = 2;
            ObjectiveSetState(gv_players[lv_pPI].quests.manaQuests[5].objective, c_objectiveStateCompleted);
            TextTagSetText(gv_players[lv_pPI].quests.manaQuests[5].textTag, StringExternal("Param/Value/F19542C7"));
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest5KillAlphaSrepti_Init () {
    gt_ManaQuest5KillAlphaSrepti = TriggerCreate("gt_ManaQuest5KillAlphaSrepti_Func");
    TriggerAddEventUnitDied(gt_ManaQuest5KillAlphaSrepti, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 5 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest5RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.manaQuests[5].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Mana5-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.manaQuests[5].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.manaQuests[5].objective);
    gv_players[lv_tPI].quests.manaQuests[5].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    UnitInventoryCreate(gv_players[lv_tPI].dragon, "MediumHealingOrb");
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/BCB36106"));
    gf_AddExperience(gv_players[lv_tPI].dragon, 1000);
    TextTagDestroy(gv_players[lv_tPI].quests.manaQuests[5].textTag);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest5RewardAccept_Init () {
    gt_ManaQuest5RewardAccept = TriggerCreate("gt_ManaQuest5RewardAccept_Func");
    TriggerAddEventDialogControl(gt_ManaQuest5RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 0 - Talk to Base
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest0TalktoBase_Func (bool testConds, bool runActions) {
    int auto008EA624_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto008EA624_val = gv_players[lv_qPI].quests.baseQuests[0].progress;
    if (auto008EA624_val == 0) {
        gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/D3E7E515"), StringExternal("Param/Value/4DE4DAA9"), StringExternal("Param/Value/CE6F05F8"), StringExternal("Param/Value/81DC4384"));
    }
    else if (auto008EA624_val == 1) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/B4E1E57D"));
    }
    else if (auto008EA624_val == 2) {
        gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/DE5135F3"), StringExternal("Param/Value/D1A86300"));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4233)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest0TalktoBase_Init () {
    gt_BaseQuest0TalktoBase = TriggerCreate("gt_BaseQuest0TalktoBase_Func");
    TriggerAddEventUnitSelected(gt_BaseQuest0TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_BaseQuest0TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_BaseQuest0TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest0QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[0].progress == 0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[1].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.baseQuests[0].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/FAE38376"), StringExternal("Param/Value/354CA705"), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.baseQuests[0].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.baseQuests[0].textTag, StringToText(""));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest0QuestAccept_Init () {
    gt_BaseQuest0QuestAccept = TriggerCreate("gt_BaseQuest0QuestAccept_Func");
    TriggerAddEventDialogControl(gt_BaseQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 0 - Set Respawn Point at Wasteland
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest0SetRespawnPointatWasteland_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(EventUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero)) {
            return false;
        }
        if (!((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.baseQuests[0].progress == 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_qPI].quests.baseQuests[0].progress = 2;
    ObjectiveSetState(gv_players[lv_qPI].quests.baseQuests[0].objective, c_objectiveStateCompleted);
    TextTagSetText(gv_players[lv_qPI].quests.baseQuests[0].textTag, StringExternal("Param/Value/EB78C493"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest0SetRespawnPointatWasteland_Init () {
    gt_BaseQuest0SetRespawnPointatWasteland = TriggerCreate("gt_BaseQuest0SetRespawnPointatWasteland_Func");
    TriggerAddEventUnitRegion(gt_BaseQuest0SetRespawnPointatWasteland, null, RegionFromId(124), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest0RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[0].progress == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.baseQuests[0].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Base0-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.baseQuests[0].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.baseQuests[0].objective);
    gv_players[lv_tPI].quests.baseQuests[0].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    gf_AddExperience(gv_players[lv_tPI].dragon, 25);
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/8D20327C"));
    TextTagDestroy(gv_players[lv_tPI].quests.baseQuests[0].textTag);
    TextTagCreate(StringExternal("Param/Value/B2162E35"), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.baseQuests[1].textTag = TextTagLastCreated();
    TextTagSetTime(gv_players[lv_tPI].quests.baseQuests[1].textTag, c_textTagTimeDuration, 524287.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest0RewardAccept_Init () {
    gt_BaseQuest0RewardAccept = TriggerCreate("gt_BaseQuest0RewardAccept_Func");
    TriggerAddEventDialogControl(gt_BaseQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 1 - Talk to Base
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest1TalktoBase_Func (bool testConds, bool runActions) {
    int auto79278DC8_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto79278DC8_val = gv_players[lv_qPI].quests.baseQuests[1].progress;
    if (auto79278DC8_val == 0) {
        gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/9E26A307"), StringExternal("Param/Value/0E7A1C61"), StringExternal("Param/Value/A11FAE9B"), StringExternal("Param/Value/497348F3"));
    }
    else if (auto79278DC8_val == 1) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/FBB0E580"));
    }
    else if (auto79278DC8_val == 2) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/3F0CE577"));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4233)), c_animNameDefault, "Angry", c_animFlagPlayForever, c_animTimeDefault);
    }
    else if (auto79278DC8_val == 3) {
        gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/670F1B94"), StringExternal("Param/Value/65AC0532"));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4233)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
    }
    else if (auto79278DC8_val == 4) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/9F536067"));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4233)), c_animNameDefault, "Dance", c_animFlagPlayForever, c_animTimeDefault);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest1TalktoBase_Init () {
    gt_BaseQuest1TalktoBase = TriggerCreate("gt_BaseQuest1TalktoBase_Func");
    TriggerAddEventUnitSelected(gt_BaseQuest1TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_BaseQuest1TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_BaseQuest1TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 1 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest1QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[0].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[1].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.baseQuests[1].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/E253F21A"), StringExternal("Param/Value/AADFE44D"), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.baseQuests[1].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.baseQuests[1].textTag, StringToText(""));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest1QuestAccept_Init () {
    gt_BaseQuest1QuestAccept = TriggerCreate("gt_BaseQuest1QuestAccept_Func");
    TriggerAddEventDialogControl(gt_BaseQuest1QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 1 - Activate Ballan Waypoint
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest1ActivateBallanWaypoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(EventUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero)) {
            return false;
        }
        if (!((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.baseQuests[1].progress == 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_qPI].quests.baseQuests[1].progress = 2;
    ObjectiveSetName(gv_players[lv_qPI].quests.baseQuests[1].objective, StringExternal("Param/Value/4D7B649C"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest1ActivateBallanWaypoint_Init () {
    gt_BaseQuest1ActivateBallanWaypoint = TriggerCreate("gt_BaseQuest1ActivateBallanWaypoint_Func");
    TriggerAddEventUnitRegion(gt_BaseQuest1ActivateBallanWaypoint, null, RegionFromId(125), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 2 - Use Ballan Waypoint to Wasteland
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest2UseBallanWaypointtoWasteland_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionFromId(125))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[1].progress == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventDialogControl() == gv_wastelandDialogButton)) {
        gf_WaypointTeleport(EventPlayer(), RegionFromId(124));
        gv_players[lv_tPI].quests.baseQuests[1].progress = 3;
        ObjectiveSetState(gv_players[lv_tPI].quests.baseQuests[1].objective, c_objectiveStateCompleted);
        TextTagSetText(gv_players[lv_tPI].quests.baseQuests[1].textTag, StringExternal("Param/Value/D05FC8E4"));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest2UseBallanWaypointtoWasteland_Init () {
    gt_BaseQuest2UseBallanWaypointtoWasteland = TriggerCreate("gt_BaseQuest2UseBallanWaypointtoWasteland_Func");
    TriggerAddEventDialogControl(gt_BaseQuest2UseBallanWaypointtoWasteland, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 1 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest1RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[0].progress == 3))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[1].progress == 3))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.baseQuests[1].progress = 4;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Base1-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.baseQuests[1].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.baseQuests[1].objective);
    gv_players[lv_tPI].quests.baseQuests[1].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    gf_AddExperience(gv_players[lv_tPI].dragon, 100);
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/AC1DE9E4"));
    TextTagDestroy(gv_players[lv_tPI].quests.baseQuests[1].textTag);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest1RewardAccept_Init () {
    gt_BaseQuest1RewardAccept = TriggerCreate("gt_BaseQuest1RewardAccept_Func");
    TriggerAddEventDialogControl(gt_BaseQuest1RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Detsefni Quest 0 - Talk to Detsefni
//--------------------------------------------------------------------------------------------------
bool gt_DetsefniQuest0TalktoDetsefni_Func (bool testConds, bool runActions) {
    int auto844705FF_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4922)), 3.0))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto844705FF_val = gv_players[lv_qPI].quests.detsefniQuests[0].progress;
    if (auto844705FF_val == 0) {
        gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/77465159"), StringExternal("Param/Value/99429556"), StringExternal("Param/Value/A9B2BE9C"), StringExternal("Param/Value/707ED4E0"));
    }
    else if (auto844705FF_val == 1) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/6BED864A"));
    }
    else if (auto844705FF_val == 2) {
        gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/22072B2B"), StringExternal("Param/Value/DE876B14"));
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4922)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DetsefniQuest0TalktoDetsefni_Init () {
    gt_DetsefniQuest0TalktoDetsefni = TriggerCreate("gt_DetsefniQuest0TalktoDetsefni_Func");
    TriggerAddEventUnitSelected(gt_DetsefniQuest0TalktoDetsefni, UnitRefFromUnit(UnitFromId(4922)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_DetsefniQuest0TalktoDetsefni, UnitRefFromUnit(UnitFromId(4922)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_DetsefniQuest0TalktoDetsefni, UnitRefFromUnit(UnitFromId(4922)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Detsefni Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_DetsefniQuest0QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4922)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.detsefniQuests[0].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.detsefniQuests[0].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/BE01F8B9"), StringToText(""), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.detsefniQuests[0].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.detsefniQuests[0].textTag, StringToText(""));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DetsefniQuest0QuestAccept_Init () {
    gt_DetsefniQuest0QuestAccept = TriggerCreate("gt_DetsefniQuest0QuestAccept_Func");
    TriggerAddEventDialogControl(gt_DetsefniQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Detsefni Quest 0 - Kill 25 Sreptis
//--------------------------------------------------------------------------------------------------
bool gt_DetsefniQuest0Kill25Sreptis_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    int lv_pPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "Srepti"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
        if ((gv_players[lv_pPI].quests.detsefniQuests[0].progress == 1)) {
            gv_players[lv_pPI].quests.detsefniQuests[0].kills += 1;
            ObjectiveSetName(gv_players[lv_pPI].quests.detsefniQuests[0].objective, (StringExternal("Param/Value/2AAE008D") + (IntToText((25 - gv_players[lv_pPI].quests.detsefniQuests[0].kills)) + StringExternal("Param/Value/996516FD"))));
            if ((gv_players[lv_pPI].quests.detsefniQuests[0].kills == 25)) {
                gv_players[lv_pPI].quests.detsefniQuests[0].progress = 2;
                ObjectiveSetState(gv_players[lv_pPI].quests.detsefniQuests[0].objective, c_objectiveStateCompleted);
                TextTagSetText(gv_players[lv_pPI].quests.detsefniQuests[0].textTag, StringExternal("Param/Value/C7D0B265"));
            }
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DetsefniQuest0Kill25Sreptis_Init () {
    gt_DetsefniQuest0Kill25Sreptis = TriggerCreate("gt_DetsefniQuest0Kill25Sreptis_Func");
    TriggerAddEventUnitDied(gt_DetsefniQuest0Kill25Sreptis, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Detsefni Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_DetsefniQuest0RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4922)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.detsefniQuests[0].progress == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.detsefniQuests[0].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Detsefni0-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.detsefniQuests[0].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.detsefniQuests[0].objective);
    gv_players[lv_tPI].quests.detsefniQuests[0].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    gf_AddExperience(gv_players[lv_tPI].dragon, 500.0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 5000));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/DACEB55D"));
    TextTagDestroy(gv_players[lv_tPI].quests.detsefniQuests[0].textTag);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DetsefniQuest0RewardAccept_Init () {
    gt_DetsefniQuest0RewardAccept = TriggerCreate("gt_DetsefniQuest0RewardAccept_Func");
    TriggerAddEventDialogControl(gt_DetsefniQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sergeant Lister Quest 0 - Talk to Sergeant Lister
//--------------------------------------------------------------------------------------------------
bool gt_SergeantListerQuest0TalktoSergeantLister_Func (bool testConds, bool runActions) {
    int autoFBB98C7D_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSelect(gv_players[lv_qPI].dragon, EventPlayer(), true);
    if (libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4923)), 3.0))) {
        autoFBB98C7D_val = gv_players[lv_qPI].quests.sergeantListerQuests[0].progress;
        if (autoFBB98C7D_val == 0) {
            gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/21BDD31D"), StringExternal("Param/Value/870AA9F6"), StringExternal("Param/Value/ABDC9981"), StringExternal("Param/Value/CED2A4D9"));
        }
        else if (autoFBB98C7D_val == 1) {
            gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/9027D913"));
        }
        else if (autoFBB98C7D_val == 2) {
            gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/F0A0DDC8"), StringExternal("Param/Value/C3DEB7CE"));
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4923)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
        }
        else {
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SergeantListerQuest0TalktoSergeantLister_Init () {
    gt_SergeantListerQuest0TalktoSergeantLister = TriggerCreate("gt_SergeantListerQuest0TalktoSergeantLister_Func");
    TriggerAddEventUnitSelected(gt_SergeantListerQuest0TalktoSergeantLister, UnitRefFromUnit(UnitFromId(4923)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_SergeantListerQuest0TalktoSergeantLister, UnitRefFromUnit(UnitFromId(4923)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_SergeantListerQuest0TalktoSergeantLister, UnitRefFromUnit(UnitFromId(4923)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sergeant Listeri Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_SergeantListeriQuest0QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4923)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.sergeantListerQuests[0].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.sergeantListerQuests[0].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/FFDAB444"), StringToText(""), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.sergeantListerQuests[0].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.sergeantListerQuests[0].textTag, StringToText(""));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SergeantListeriQuest0QuestAccept_Init () {
    gt_SergeantListeriQuest0QuestAccept = TriggerCreate("gt_SergeantListeriQuest0QuestAccept_Func");
    TriggerAddEventDialogControl(gt_SergeantListeriQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sergeant Lister Quest 0 - Kill 10 Creton Warriors
//--------------------------------------------------------------------------------------------------
bool gt_SergeantListerQuest0Kill10CretonWarriors_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    int lv_pPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "CretonWarrior"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
        if ((gv_players[lv_pPI].quests.sergeantListerQuests[0].progress == 1)) {
            gv_players[lv_pPI].quests.sergeantListerQuests[0].kills += 1;
            ObjectiveSetName(gv_players[lv_pPI].quests.sergeantListerQuests[0].objective, (StringExternal("Param/Value/D42CEA13") + (IntToText((10 - gv_players[lv_pPI].quests.sergeantListerQuests[0].kills)) + StringExternal("Param/Value/61137D94"))));
            if ((gv_players[lv_pPI].quests.sergeantListerQuests[0].kills == 10)) {
                gv_players[lv_pPI].quests.sergeantListerQuests[0].progress = 2;
                ObjectiveSetState(gv_players[lv_pPI].quests.sergeantListerQuests[0].objective, c_objectiveStateCompleted);
                TextTagSetText(gv_players[lv_pPI].quests.sergeantListerQuests[0].textTag, StringExternal("Param/Value/D2C09EC1"));
            }
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SergeantListerQuest0Kill10CretonWarriors_Init () {
    gt_SergeantListerQuest0Kill10CretonWarriors = TriggerCreate("gt_SergeantListerQuest0Kill10CretonWarriors_Func");
    TriggerAddEventUnitDied(gt_SergeantListerQuest0Kill10CretonWarriors, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sergeant Lister Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_SergeantListerQuest0RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4923)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.sergeantListerQuests[0].progress == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.sergeantListerQuests[0].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-SergeantLister0-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.sergeantListerQuests[0].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.sergeantListerQuests[0].objective);
    gv_players[lv_tPI].quests.sergeantListerQuests[0].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    gf_AddExperience(gv_players[lv_tPI].dragon, 750.0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 5000));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/E523125A"));
    TextTagDestroy(gv_players[lv_tPI].quests.sergeantListerQuests[0].textTag);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SergeantListerQuest0RewardAccept_Init () {
    gt_SergeantListerQuest0RewardAccept = TriggerCreate("gt_SergeantListerQuest0RewardAccept_Func");
    TriggerAddEventDialogControl(gt_SergeantListerQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Greed Quest 0 - Talk to Greed
//--------------------------------------------------------------------------------------------------
bool gt_GreedQuest0TalktoGreed_Func (bool testConds, bool runActions) {
    int auto05F674F6_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSelect(gv_players[lv_qPI].dragon, EventPlayer(), true);
    if (libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4924)), 3.0))) {
        auto05F674F6_val = gv_players[lv_qPI].quests.greedQuests[0].progress;
        if (auto05F674F6_val == 0) {
            gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/67477194"), StringExternal("Param/Value/156DA52C"), StringExternal("Param/Value/301CAD94"), StringExternal("Param/Value/3F89894F"));
        }
        else if (auto05F674F6_val == 1) {
            gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/A1694ED4"));
        }
        else if (auto05F674F6_val == 2) {
            gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/7897B78A"), StringExternal("Param/Value/2B4A19AF"));
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4924)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
        }
        else {
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GreedQuest0TalktoGreed_Init () {
    gt_GreedQuest0TalktoGreed = TriggerCreate("gt_GreedQuest0TalktoGreed_Func");
    TriggerAddEventUnitSelected(gt_GreedQuest0TalktoGreed, UnitRefFromUnit(UnitFromId(4924)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Greed  Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_GreedQuest0QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4924)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.greedQuests[0].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.greedQuests[0].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/8FAD68D6"), StringExternal("Param/Value/9168B955"), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.greedQuests[0].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.greedQuests[0].textTag, StringToText(""));
    MinimapPing(PlayerGroupSingle(EventPlayer()), UnitGetPosition(UnitFromId(4937)), 15.0, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GreedQuest0QuestAccept_Init () {
    gt_GreedQuest0QuestAccept = TriggerCreate("gt_GreedQuest0QuestAccept_Func");
    TriggerAddEventDialogControl(gt_GreedQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Greed Quest 0 - Find Mister Scruffers
//--------------------------------------------------------------------------------------------------
bool gt_GreedQuest0FindMisterScruffers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(EventUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero)) {
            return false;
        }
        if (!((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.greedQuests[0].progress == 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_qPI].quests.greedQuests[0].progress = 2;
    ObjectiveSetState(gv_players[lv_qPI].quests.greedQuests[0].objective, c_objectiveStateCompleted);
    TextTagSetText(gv_players[lv_qPI].quests.greedQuests[0].textTag, StringExternal("Param/Value/1B0CFA23"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GreedQuest0FindMisterScruffers_Init () {
    gt_GreedQuest0FindMisterScruffers = TriggerCreate("gt_GreedQuest0FindMisterScruffers_Func");
    TriggerAddEventUnitRegion(gt_GreedQuest0FindMisterScruffers, null, RegionCircle(UnitGetPosition(UnitFromId(4937)), 3.0), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Greed Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_GreedQuest0RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4924)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.greedQuests[0].progress == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.greedQuests[0].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Greed0-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.greedQuests[0].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.greedQuests[0].objective);
    gv_players[lv_tPI].quests.greedQuests[0].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    gf_AddExperience(gv_players[lv_tPI].dragon, 1500.0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 10000));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/10B63590"));
    TextTagDestroy(gv_players[lv_tPI].quests.greedQuests[0].textTag);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GreedQuest0RewardAccept_Init () {
    gt_GreedQuest0RewardAccept = TriggerCreate("gt_GreedQuest0RewardAccept_Func");
    TriggerAddEventDialogControl(gt_GreedQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Madeleine Quest 0 - Talk to Madeleine
//--------------------------------------------------------------------------------------------------
bool gt_MadeleineQuest0TalktoMadeleine_Func (bool testConds, bool runActions) {
    int autoC2B1B1C3_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSelect(gv_players[lv_qPI].dragon, EventPlayer(), true);
    if (libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4945)), 3.0))) {
        autoC2B1B1C3_val = gv_players[lv_qPI].quests.madelineQuests[0].progress;
        if (autoC2B1B1C3_val == 0) {
            gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/EBE16247"), StringExternal("Param/Value/724DC8F1"), StringExternal("Param/Value/C5689B89"), StringExternal("Param/Value/89D4B089"));
        }
        else if (autoC2B1B1C3_val == 1) {
            gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/584E83EC"));
        }
        else if (autoC2B1B1C3_val == 2) {
            gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/AEEC4072"), StringExternal("Param/Value/36BF1515"));
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4945)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
        }
        else {
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MadeleineQuest0TalktoMadeleine_Init () {
    gt_MadeleineQuest0TalktoMadeleine = TriggerCreate("gt_MadeleineQuest0TalktoMadeleine_Func");
    TriggerAddEventUnitSelected(gt_MadeleineQuest0TalktoMadeleine, UnitRefFromUnit(UnitFromId(4945)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Madeleine Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_MadeleineQuest0QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4945)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.madelineQuests[0].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.madelineQuests[0].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/A4E28FF5"), StringExternal("Param/Value/9F56823C"), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.madelineQuests[0].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.madelineQuests[0].textTag, StringToText(""));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MadeleineQuest0QuestAccept_Init () {
    gt_MadeleineQuest0QuestAccept = TriggerCreate("gt_MadeleineQuest0QuestAccept_Func");
    TriggerAddEventDialogControl(gt_MadeleineQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Madeleine Quest 0 - Kill 30 Karramarros
//--------------------------------------------------------------------------------------------------
bool gt_MadeleineQuest0Kill30Karramarros_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    int lv_pPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "Karramarro"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
        if ((gv_players[lv_pPI].quests.madelineQuests[0].progress == 1)) {
            gv_players[lv_pPI].quests.madelineQuests[0].kills += 1;
            ObjectiveSetName(gv_players[lv_pPI].quests.madelineQuests[0].objective, (StringExternal("Param/Value/FBCDD588") + (IntToText((30 - gv_players[lv_pPI].quests.madelineQuests[0].kills)) + StringExternal("Param/Value/C04FAF36"))));
            if ((gv_players[lv_pPI].quests.madelineQuests[0].kills == 30)) {
                gv_players[lv_pPI].quests.madelineQuests[0].progress = 2;
                ObjectiveSetState(gv_players[lv_pPI].quests.madelineQuests[0].objective, c_objectiveStateCompleted);
                TextTagSetText(gv_players[lv_pPI].quests.madelineQuests[0].textTag, StringExternal("Param/Value/AF200266"));
            }
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MadeleineQuest0Kill30Karramarros_Init () {
    gt_MadeleineQuest0Kill30Karramarros = TriggerCreate("gt_MadeleineQuest0Kill30Karramarros_Func");
    TriggerAddEventUnitDied(gt_MadeleineQuest0Kill30Karramarros, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Madeleine Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_MadeleineQuest0RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4945)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.madelineQuests[0].progress == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.madelineQuests[0].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Madeleine0-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.madelineQuests[0].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.madelineQuests[0].objective);
    gv_players[lv_tPI].quests.madelineQuests[0].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    gf_AddExperience(gv_players[lv_tPI].dragon, 1500.0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 7500));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/F3203442"));
    TextTagDestroy(gv_players[lv_tPI].quests.madelineQuests[0].textTag);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MadeleineQuest0RewardAccept_Init () {
    gt_MadeleineQuest0RewardAccept = TriggerCreate("gt_MadeleineQuest0RewardAccept_Func");
    TriggerAddEventDialogControl(gt_MadeleineQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Malin Quest 0 - Talk to Malin
//--------------------------------------------------------------------------------------------------
bool gt_MalinQuest0TalktoMalin_Func (bool testConds, bool runActions) {
    int auto23E309C6_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(2516)), 3.0))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto23E309C6_val = gv_players[lv_qPI].quests.malinQuests[0].progress;
    if (auto23E309C6_val == 0) {
        gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/BE16FE16"), StringExternal("Param/Value/C5D45F44"), StringExternal("Param/Value/7EDB808B"), StringExternal("Param/Value/95014774"));
    }
    else if (auto23E309C6_val == 1) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/AA5D2DAB"));
    }
    else if (auto23E309C6_val == 2) {
        gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/38B53DC8"), StringExternal("Param/Value/B4F7F0B0"));
    }
    else if (auto23E309C6_val == 1) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/09B716BE"));
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MalinQuest0TalktoMalin_Init () {
    gt_MalinQuest0TalktoMalin = TriggerCreate("gt_MalinQuest0TalktoMalin_Func");
    TriggerAddEventUnitSelected(gt_MalinQuest0TalktoMalin, UnitRefFromUnit(UnitFromId(2516)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_MalinQuest0TalktoMalin, UnitRefFromUnit(UnitFromId(2516)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_MalinQuest0TalktoMalin, UnitRefFromUnit(UnitFromId(2516)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Malin Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_MalinQuest0QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(2516)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.malinQuests[0].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.malinQuests[0].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/2C399FC9"), StringExternal("Param/Value/2FDE90B5"), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.malinQuests[0].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.malinQuests[0].textTag, StringToText(""));
    if ((gv_robus == UnitFromId(632))) {
        libNtve_gf_UnitCreateFacingPoint(1, "Robus", 0, 15, PointFromId(4140), UnitGetPosition(UnitFromId(2516)));
        gv_robus = UnitLastCreated();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MalinQuest0QuestAccept_Init () {
    gt_MalinQuest0QuestAccept = TriggerCreate("gt_MalinQuest0QuestAccept_Func");
    TriggerAddEventDialogControl(gt_MalinQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Malin Quest 0 - Kill Robus
//--------------------------------------------------------------------------------------------------
bool gt_MalinQuest0KillRobus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_robus = UnitFromId(632);
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_qPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
        if ((gv_players[lv_qPI].quests.malinQuests[0].progress == 1)) {
            gv_players[lv_qPI].quests.malinQuests[0].progress = 2;
            ObjectiveSetState(gv_players[lv_qPI].quests.malinQuests[0].objective, c_objectiveStateCompleted);
            TextTagSetText(gv_players[lv_qPI].quests.malinQuests[0].textTag, StringExternal("Param/Value/2BF560CD"));
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MalinQuest0KillRobus_Init () {
    gt_MalinQuest0KillRobus = TriggerCreate("gt_MalinQuest0KillRobus_Func");
    TriggerAddEventUnitDied(gt_MalinQuest0KillRobus, UnitRefFromVariable("gv_robus"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Malin Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_MalinQuest0RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(2516)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.malinQuests[0].progress == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.malinQuests[0].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Malin0-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.malinQuests[0].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.malinQuests[0].objective);
    gv_players[lv_tPI].quests.malinQuests[0].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/DAC0C4F2"));
    UnitInventoryCreate(gv_players[lv_tPI].dragon, "CarrionNeedles");
    gf_AddExperience(gv_players[lv_tPI].dragon, 2000);
    TextTagDestroy(gv_players[lv_tPI].quests.malinQuests[0].textTag);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MalinQuest0RewardAccept_Init () {
    gt_MalinQuest0RewardAccept = TriggerCreate("gt_MalinQuest0RewardAccept_Func");
    TriggerAddEventDialogControl(gt_MalinQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Amp Quest 0 - Talk to Amp
//--------------------------------------------------------------------------------------------------
bool gt_AmpQuest0TalktoAmp_Func (bool testConds, bool runActions) {
    int auto7EF011A8_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSelect(gv_players[lv_qPI].dragon, EventPlayer(), true);
    if (libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(444)), 3.0))) {
        auto7EF011A8_val = gv_players[lv_qPI].quests.ampQuests[0].progress;
        if (auto7EF011A8_val == 0) {
            gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/B3EC85D5"), StringExternal("Param/Value/9595576E"), StringExternal("Param/Value/F9E6F4B2"), StringExternal("Param/Value/769AE758"));
        }
        else if (auto7EF011A8_val == 1) {
            gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), (StringExternal("Param/Value/90233918") + (IntToText(((PlayerGroupCount(gv_humanPlayers) * 25) - gv_unitKills[3])) + StringExternal("Param/Value/5C36486F"))));
        }
        else if (auto7EF011A8_val == 2) {
            gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/73D38BE2"), StringExternal("Param/Value/7540A50F"));
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(444)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
        }
        else {
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AmpQuest0TalktoAmp_Init () {
    gt_AmpQuest0TalktoAmp = TriggerCreate("gt_AmpQuest0TalktoAmp_Func");
    TriggerAddEventUnitSelected(gt_AmpQuest0TalktoAmp, UnitRefFromUnit(UnitFromId(444)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Amp Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_AmpQuest0QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(444)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.ampQuests[0].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.ampQuests[0].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/F5DB17C5"), StringExternal("Param/Value/F2B500F3"), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.ampQuests[0].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.ampQuests[0].textTag, StringToText(""));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AmpQuest0QuestAccept_Init () {
    gt_AmpQuest0QuestAccept = TriggerCreate("gt_AmpQuest0QuestAccept_Func");
    TriggerAddEventDialogControl(gt_AmpQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Amp Quest 0 - Kill an Elite Creton Warrior
//--------------------------------------------------------------------------------------------------
bool gt_AmpQuest0KillanEliteCretonWarrior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    int lv_pPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "EliteCretonWarrior"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
        if ((gv_players[lv_pPI].quests.ampQuests[0].progress == 1)) {
            gv_players[lv_pPI].quests.ampQuests[0].progress = 2;
            ObjectiveSetState(gv_players[lv_pPI].quests.ampQuests[0].objective, c_objectiveStateCompleted);
            TextTagSetText(gv_players[lv_pPI].quests.ampQuests[0].textTag, StringExternal("Param/Value/2C21F4B5"));
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AmpQuest0KillanEliteCretonWarrior_Init () {
    gt_AmpQuest0KillanEliteCretonWarrior = TriggerCreate("gt_AmpQuest0KillanEliteCretonWarrior_Func");
    TriggerAddEventUnitDied(gt_AmpQuest0KillanEliteCretonWarrior, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Amp Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_AmpQuest0RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(444)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.ampQuests[0].progress == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.ampQuests[0].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Amp0-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.ampQuests[0].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.ampQuests[0].objective);
    gv_players[lv_tPI].quests.ampQuests[0].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    gf_AddExperience(gv_players[lv_tPI].dragon, 2000.0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 8000));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/4C1BFB18"));
    TextTagDestroy(gv_players[lv_tPI].quests.ampQuests[0].textTag);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AmpQuest0RewardAccept_Init () {
    gt_AmpQuest0RewardAccept = TriggerCreate("gt_AmpQuest0RewardAccept_Func");
    TriggerAddEventDialogControl(gt_AmpQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Altoss Quest 0 - Talk to Altoss
//--------------------------------------------------------------------------------------------------
bool gt_AltossQuest0TalktoAltoss_Func (bool testConds, bool runActions) {
    int autoCE3B070D_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSelect(gv_players[lv_qPI].dragon, EventPlayer(), true);
    if (libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4946)), 3.0))) {
        autoCE3B070D_val = gv_players[lv_qPI].quests.altossQuests[0].progress;
        if (autoCE3B070D_val == 0) {
            gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/88FA96CE"), StringExternal("Param/Value/8996F279"), StringExternal("Param/Value/D41137B8"), StringExternal("Param/Value/53399252"));
        }
        else if (autoCE3B070D_val == 1) {
            gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/ECF4A654"));
        }
        else if (autoCE3B070D_val == 2) {
            gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/053D639D"), StringExternal("Param/Value/5B4290DE"));
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4946)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
        }
        else {
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AltossQuest0TalktoAltoss_Init () {
    gt_AltossQuest0TalktoAltoss = TriggerCreate("gt_AltossQuest0TalktoAltoss_Func");
    TriggerAddEventUnitSelected(gt_AltossQuest0TalktoAltoss, UnitRefFromUnit(UnitFromId(4946)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Altoss Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_AltossQuest0QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4946)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.altossQuests[0].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.altossQuests[0].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/C8693973"), StringToText(""), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.altossQuests[0].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.altossQuests[0].textTag, StringToText(""));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AltossQuest0QuestAccept_Init () {
    gt_AltossQuest0QuestAccept = TriggerCreate("gt_AltossQuest0QuestAccept_Func");
    TriggerAddEventDialogControl(gt_AltossQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Altoss Quest 0 - Kill 15 Odvratans
//--------------------------------------------------------------------------------------------------
bool gt_AltossQuest0Kill15Odvratans_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    int lv_pPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
        if (!((UnitGetType(EventUnit()) == "Odvratan"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
        if ((gv_players[lv_pPI].quests.altossQuests[0].progress == 1)) {
            gv_players[lv_pPI].quests.altossQuests[0].kills += 1;
            ObjectiveSetName(gv_players[lv_pPI].quests.altossQuests[0].objective, (StringExternal("Param/Value/A082B51B") + (IntToText((15 - gv_players[lv_pPI].quests.altossQuests[0].kills)) + StringExternal("Param/Value/21D0C555"))));
            if ((gv_players[lv_pPI].quests.altossQuests[0].kills == 15)) {
                gv_players[lv_pPI].quests.altossQuests[0].progress = 2;
                ObjectiveSetState(gv_players[lv_pPI].quests.altossQuests[0].objective, c_objectiveStateCompleted);
                TextTagSetText(gv_players[lv_pPI].quests.altossQuests[0].textTag, StringExternal("Param/Value/733E3133"));
            }
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AltossQuest0Kill15Odvratans_Init () {
    gt_AltossQuest0Kill15Odvratans = TriggerCreate("gt_AltossQuest0Kill15Odvratans_Func");
    TriggerAddEventUnitDied(gt_AltossQuest0Kill15Odvratans, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Altoss Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_AltossQuest0RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4946)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.altossQuests[0].progress == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.altossQuests[0].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Altoss0-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.altossQuests[0].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.altossQuests[0].objective);
    gv_players[lv_tPI].quests.altossQuests[0].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    gf_AddExperience(gv_players[lv_tPI].dragon, 3500.0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 17500));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/15B40177"));
    TextTagDestroy(gv_players[lv_tPI].quests.altossQuests[0].textTag);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AltossQuest0RewardAccept_Init () {
    gt_AltossQuest0RewardAccept = TriggerCreate("gt_AltossQuest0RewardAccept_Func");
    TriggerAddEventDialogControl(gt_AltossQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Illisus Locust Spawn
//--------------------------------------------------------------------------------------------------
bool gt_IllisusLocustSpawn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup("Karramarro", 15, RegionFromId(239), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 5))) {
            return false;
        }
        if (!(libNtve_gf_UnitInRegion(gv_players[0].dragon, RegionFromId(239)) || libNtve_gf_UnitInRegion(gv_players[1].dragon, RegionFromId(239)) || libNtve_gf_UnitInRegion(gv_players[2].dragon, RegionFromId(239)) || libNtve_gf_UnitInRegion(gv_players[3].dragon, RegionFromId(239)))) {
            return false;
        }
        if (!((UnitGetType(gv_illisus) == "Illisus"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitCreate(1, "Karramarro", 0, 15, UnitGetPosition(gv_illisus), libNtve_gf_RandomAngle());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_IllisusLocustSpawn_Init () {
    gt_IllisusLocustSpawn = TriggerCreate("gt_IllisusLocustSpawn_Func");
    TriggerAddEventTimePeriodic(gt_IllisusLocustSpawn, 2.5, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Oleum Quest 0 - Talk to Oleum
//--------------------------------------------------------------------------------------------------
bool gt_OleumQuest0TalktoOleum_Func (bool testConds, bool runActions) {
    int auto8D30A0C7_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4381)), 3.0))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto8D30A0C7_val = gv_players[lv_qPI].quests.oleumQuests[0].progress;
    if (auto8D30A0C7_val == 0) {
        gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/0AA64FA6"), StringExternal("Param/Value/3E211E4A"), StringExternal("Param/Value/CAA545D2"), StringExternal("Param/Value/1630D13E"));
    }
    else if (auto8D30A0C7_val == 1) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/3411017D"));
    }
    else if (auto8D30A0C7_val == 2) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/779D797B"));
    }
    else if (auto8D30A0C7_val == 3) {
        gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/DB3EEE78"), StringExternal("Param/Value/61359ACF"));
    }
    else if (auto8D30A0C7_val == 4) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/7CEBCED8"));
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OleumQuest0TalktoOleum_Init () {
    gt_OleumQuest0TalktoOleum = TriggerCreate("gt_OleumQuest0TalktoOleum_Func");
    TriggerAddEventUnitSelected(gt_OleumQuest0TalktoOleum, UnitRefFromUnit(UnitFromId(4381)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_OleumQuest0TalktoOleum, UnitRefFromUnit(UnitFromId(4381)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_OleumQuest0TalktoOleum, UnitRefFromUnit(UnitFromId(4381)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Oleum Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_OleumQuest0QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4381)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.oleumQuests[0].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.oleumQuests[0].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/1DBB83B2"), StringExternal("Param/Value/8803AD2E"), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.oleumQuests[0].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.oleumQuests[0].textTag, StringToText(""));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OleumQuest0QuestAccept_Init () {
    gt_OleumQuest0QuestAccept = TriggerCreate("gt_OleumQuest0QuestAccept_Func");
    TriggerAddEventDialogControl(gt_OleumQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Oleum Quest 0 - Find Crew 137
//--------------------------------------------------------------------------------------------------
bool gt_OleumQuest0FindCrew137_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(EventUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero)) {
            return false;
        }
        if (!((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.oleumQuests[0].progress == 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_qPI].quests.oleumQuests[0].progress = 2;
    ObjectiveSetName(gv_players[lv_qPI].quests.oleumQuests[0].objective, StringExternal("Param/Value/517FDC8E"));
    if ((gv_illisus == UnitFromId(632))) {
        libNtve_gf_UnitCreateFacingPoint(1, "Illisus", 0, 15, RegionGetCenter(RegionFromId(231)), UnitGetPosition(UnitFromId(4381)));
        gv_illisus = UnitLastCreated();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OleumQuest0FindCrew137_Init () {
    gt_OleumQuest0FindCrew137 = TriggerCreate("gt_OleumQuest0FindCrew137_Func");
    TriggerAddEventUnitRegion(gt_OleumQuest0FindCrew137, null, RegionFromId(231), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Oleum Quest 0 - Kill Illisus
//--------------------------------------------------------------------------------------------------
bool gt_OleumQuest0KillIllisus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_illisus = UnitFromId(632);
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, null, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_qPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
        if ((gv_players[lv_qPI].quests.oleumQuests[0].progress == 2)) {
            gv_players[lv_qPI].quests.oleumQuests[0].progress = 3;
            ObjectiveSetState(gv_players[lv_qPI].quests.oleumQuests[0].objective, c_objectiveStateCompleted);
            TextTagSetText(gv_players[lv_qPI].quests.oleumQuests[0].textTag, StringExternal("Param/Value/9D2545A5"));
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OleumQuest0KillIllisus_Init () {
    gt_OleumQuest0KillIllisus = TriggerCreate("gt_OleumQuest0KillIllisus_Func");
    TriggerAddEventUnitDied(gt_OleumQuest0KillIllisus, UnitRefFromVariable("gv_illisus"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Oleum Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_OleumQuest0RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4381)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.oleumQuests[0].progress == 3))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.oleumQuests[0].progress = 4;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Oleum0-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.oleumQuests[0].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.oleumQuests[0].objective);
    gv_players[lv_tPI].quests.oleumQuests[0].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    gf_AddExperience(gv_players[lv_tPI].dragon, 2000.0);
    UnitInventoryCreate(gv_players[lv_tPI].dragon, "MinerArmor");
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/5DEC9FB0"));
    TextTagDestroy(gv_players[lv_tPI].quests.oleumQuests[0].textTag);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OleumQuest0RewardAccept_Init () {
    gt_OleumQuest0RewardAccept = TriggerCreate("gt_OleumQuest0RewardAccept_Func");
    TriggerAddEventDialogControl(gt_OleumQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Seryn Quest 0 - Talk to Seryn
//--------------------------------------------------------------------------------------------------
bool gt_SerynQuest0TalktoSeryn_Func (bool testConds, bool runActions) {
    int auto542CA1D6_val;
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(2671)), 3.0))) {
            return false;
        }
        if (gv_players[(EventPlayer() - 1)].quests.talking) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto542CA1D6_val = gv_players[lv_qPI].quests.serynQuests[0].progress;
    if (auto542CA1D6_val == 0) {
        gf_OpenQuestDialog(EventPlayer(), StringExternal("Param/Value/CE4C241E"), StringExternal("Param/Value/30903FF0"), StringExternal("Param/Value/A2DA0541"), StringExternal("Param/Value/87EFAAF6"));
    }
    else if (auto542CA1D6_val == 1) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/69F3DB8A"));
    }
    else if (auto542CA1D6_val == 2) {
        gf_OpenRewardDialog(EventPlayer(), StringExternal("Param/Value/B25D8810"), StringExternal("Param/Value/FCCCCCE3"));
    }
    else if (auto542CA1D6_val == 3) {
        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/6D032057"));
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SerynQuest0TalktoSeryn_Init () {
    gt_SerynQuest0TalktoSeryn = TriggerCreate("gt_SerynQuest0TalktoSeryn_Func");
    TriggerAddEventUnitSelected(gt_SerynQuest0TalktoSeryn, UnitRefFromUnit(UnitFromId(2671)), c_playerAny, true);
    TriggerAddEventUnitClick(gt_SerynQuest0TalktoSeryn, UnitRefFromUnit(UnitFromId(2671)), c_playerAny);
    TriggerAddEventUnitHighlight(gt_SerynQuest0TalktoSeryn, UnitRefFromUnit(UnitFromId(2671)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Seryn Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_SerynQuest0QuestAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(2671)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.serynQuests[0].progress == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.serynQuests[0].progress = 1;
    ObjectiveCreateForPlayers(StringExternal("Param/Value/0AEE9B5F"), StringExternal("Param/Value/A5AA44D2"), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
    gv_players[lv_tPI].quests.serynQuests[0].objective = ObjectiveLastCreated();
    gf_CloseQuestDialog(EventPlayer());
    TextTagSetText(gv_players[lv_tPI].quests.serynQuests[0].textTag, StringToText(""));
    if ((gv_shadowSeryn == UnitFromId(632))) {
        libNtve_gf_UnitCreateFacingPoint(1, "ShadowSeryn", 0, 15, RegionRandomPoint(RegionFromId(274)), UnitGetPosition(UnitFromId(2671)));
        gv_shadowSeryn = UnitLastCreated();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SerynQuest0QuestAccept_Init () {
    gt_SerynQuest0QuestAccept = TriggerCreate("gt_SerynQuest0QuestAccept_Func");
    TriggerAddEventDialogControl(gt_SerynQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Seryn Quest 0 - Kill Seryn's Shadow
//--------------------------------------------------------------------------------------------------
bool gt_SerynQuest0KillSerynsShadow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qPI;
    // Variable Initialization
    lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_shadowSeryn = UnitFromId(632);
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, null, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_qPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
        if ((gv_players[lv_qPI].quests.serynQuests[0].progress == 1)) {
            gv_players[lv_qPI].quests.serynQuests[0].progress = 2;
            ObjectiveSetState(gv_players[lv_qPI].quests.serynQuests[0].objective, c_objectiveStateCompleted);
            TextTagSetText(gv_players[lv_qPI].quests.serynQuests[0].textTag, StringExternal("Param/Value/FE6219AA"));
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SerynQuest0KillSerynsShadow_Init () {
    gt_SerynQuest0KillSerynsShadow = TriggerCreate("gt_SerynQuest0KillSerynsShadow_Func");
    TriggerAddEventUnitDied(gt_SerynQuest0KillSerynsShadow, UnitRefFromVariable("gv_shadowSeryn"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Seryn Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_SerynQuest0RewardAccept_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    unit lv_tempArmor;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
            return false;
        }
        if (!libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(2671)), 3.0))) {
            return false;
        }
        if (!((gv_players[(EventPlayer() - 1)].quests.serynQuests[0].progress == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[lv_tPI].quests.serynQuests[0].progress = 3;
    BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, "SQ-Seryn0-0", PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.serynQuests[0].progress);
    ObjectiveDestroy(gv_players[lv_tPI].quests.serynQuests[0].objective);
    gv_players[lv_tPI].quests.serynQuests[0].objective = c_invalidObjectiveId;
    gf_CloseRewardDialog(EventPlayer());
    gf_AddExperience(gv_players[lv_tPI].dragon, 3250.0);
    UnitInventoryCreate(gv_players[lv_tPI].dragon, "16M04N19E01R01");
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/002A804B"));
    TextTagDestroy(gv_players[lv_tPI].quests.serynQuests[0].textTag);
    libNtve_gf_AttachModelToUnit(UnitFromId(2671), "ArtifactActivated", "Ref_Origin");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SerynQuest0RewardAccept_Init () {
    gt_SerynQuest0RewardAccept = TriggerCreate("gt_SerynQuest0RewardAccept_Func");
    TriggerAddEventDialogControl(gt_SerynQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Chaos Unit Types
//--------------------------------------------------------------------------------------------------
bool gt_ChaosUnitTypes_Func (bool testConds, bool runActions) {
    int i;
    // Actions
    if (!runActions) {
        return true;
    }
       for(i = 0; i<=18; i += 1){
        gv_enemyUnitTypes[i] = "Impetus";
    }
    //gv_enemyUnitTypes[0] = "Impetus";
    //gv_enemyUnitTypes[1] = "Impetus";
    //gv_enemyUnitTypes[2] = "Impetus";
    //gv_enemyUnitTypes[3] = "Impetus";
    //gv_enemyUnitTypes[4] = "Impetus";
    //gv_enemyUnitTypes[5] = "Impetus";
    //gv_enemyUnitTypes[6] = "Impetus";
    //gv_enemyUnitTypes[7] = "Impetus";
    //gv_enemyUnitTypes[8] = "Impetus";
    //gv_enemyUnitTypes[9] = "Impetus";
    //gv_enemyUnitTypes[10] = "Impetus";
    //gv_enemyUnitTypes[11] = "Impetus";
    //gv_enemyUnitTypes[12] = "Impetus";
    //gv_enemyUnitTypes[13] = "Impetus";
    //gv_enemyUnitTypes[14] = "Impetus";
    //gv_enemyUnitTypes[15] = "Impetus";
    //gv_enemyUnitTypes[16] = "Impetus";
    //gv_enemyUnitTypes[17] = "Impetus";
    //gv_enemyUnitTypes[18] = "Impetus";
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChaosUnitTypes_Init () {
    int i = 0;
    gt_ChaosUnitTypes = TriggerCreate("gt_ChaosUnitTypes_Func");
    
}
//--------------------------------------------------------------------------------------------------
// Trigger: Syrital's Hatch
//--------------------------------------------------------------------------------------------------
bool gt_SyritalsHatch_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SyritalsTalons"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_syritalsHatchActive = true;
    if (gv_syritalsHatchActive && gv_guardiansHatchActive && gv_sremagsisHatchActive && gv_machinaDePlagamsHatchActive && gv_zauberersHatchActive) {
        SoundPlay(SoundLink("THorner03Tychus00046", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6138A008"));
        TriggerEnable(gt_Chaos, true);
        TriggerExecute(gt_ChaosUnitTypes, false, false);
        UnitRemove(gv_zauberersCrystal);
    }
    else {
        SoundPlay(SoundLink("Hatchery_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyritalsHatch_Init () {
    gt_SyritalsHatch = TriggerCreate("gt_SyritalsHatch_Func");
    TriggerAddEventUnitRegion(gt_SyritalsHatch, null, RegionFromId(287), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Guardian's Hatch
//--------------------------------------------------------------------------------------------------
bool gt_GuardiansHatch_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "TolicsFireOrb") || (UnitGetType(EventUnit()) == "KorlicsFrozenBlade") || (UnitGetType(EventUnit()) == "MadawcsElectricArmor")))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_guardiansHatchActive = true;
    if (gv_syritalsHatchActive && gv_guardiansHatchActive && gv_sremagsisHatchActive && gv_machinaDePlagamsHatchActive && gv_zauberersHatchActive) {
        SoundPlay(SoundLink("THorner03Tychus00046", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2872F80B"));
        TriggerEnable(gt_Chaos, true);
        TriggerExecute(gt_ChaosUnitTypes, false, false);
        UnitRemove(gv_zauberersCrystal);
    }
    else {
        SoundPlay(SoundLink("Hatchery_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GuardiansHatch_Init () {
    gt_GuardiansHatch = TriggerCreate("gt_GuardiansHatch_Func");
    TriggerAddEventUnitRegion(gt_GuardiansHatch, null, RegionFromId(286), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi's Hatch
//--------------------------------------------------------------------------------------------------
bool gt_SremagsisHatch_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SremagsisTentacles")))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_sremagsisHatchActive = true;
    if (gv_syritalsHatchActive && gv_guardiansHatchActive && gv_sremagsisHatchActive && gv_machinaDePlagamsHatchActive && gv_zauberersHatchActive) {
        SoundPlay(SoundLink("THorner03Tychus00046", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F92D1A24"));
        TriggerEnable(gt_Chaos, true);
        TriggerExecute(gt_ChaosUnitTypes, false, false);
        UnitRemove(gv_zauberersCrystal);
    }
    else {
        SoundPlay(SoundLink("Hatchery_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SremagsisHatch_Init () {
    gt_SremagsisHatch = TriggerCreate("gt_SremagsisHatch_Func");
    TriggerAddEventUnitRegion(gt_SremagsisHatch, null, RegionFromId(285), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam's Hatch
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamsHatch_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "PlagamArmor")))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_machinaDePlagamsHatchActive = true;
    if (gv_syritalsHatchActive && gv_guardiansHatchActive && gv_sremagsisHatchActive && gv_machinaDePlagamsHatchActive && gv_zauberersHatchActive) {
        SoundPlay(SoundLink("THorner03Tychus00046", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/76349601"));
        TriggerEnable(gt_Chaos, true);
        TriggerExecute(gt_ChaosUnitTypes, false, false);
        UnitRemove(gv_zauberersCrystal);
    }
    else {
        SoundPlay(SoundLink("Hatchery_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamsHatch_Init () {
    gt_MachinaDePlagamsHatch = TriggerCreate("gt_MachinaDePlagamsHatch_Func");
    TriggerAddEventUnitRegion(gt_MachinaDePlagamsHatch, null, RegionFromId(284), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Zauberer's Hatch
//--------------------------------------------------------------------------------------------------
bool gt_ZauberersHatch_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "FluxCapacitor") || (UnitGetType(EventUnit()) == "OblivionArmor") || (UnitGetType(EventUnit()) == "OblivionClaws") || (UnitGetType(EventUnit()) == "OblivionSpines")))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_zauberersHatchActive = true;
    if (gv_syritalsHatchActive && gv_guardiansHatchActive && gv_sremagsisHatchActive && gv_machinaDePlagamsHatchActive && gv_zauberersHatchActive) {
        SoundPlay(SoundLink("THorner03Tychus00046", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/53604CFB"));
        TriggerEnable(gt_Chaos, true);
        TriggerExecute(gt_ChaosUnitTypes, false, false);
        UnitRemove(gv_zauberersCrystal);
    }
    else {
        SoundPlay(SoundLink("Hatchery_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ZauberersHatch_Init () {
    gt_ZauberersHatch = TriggerCreate("gt_ZauberersHatch_Func");
    TriggerAddEventUnitRegion(gt_ZauberersHatch, null, RegionFromId(283), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Arena Text 1
//--------------------------------------------------------------------------------------------------
bool gt_SpawnArenaText1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/D73DB820"), 24, PointFromId(840), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnArenaText1_Init () {
    gt_SpawnArenaText1 = TriggerCreate("gt_SpawnArenaText1_Func");
    TriggerAddEventUnitRangePoint(gt_SpawnArenaText1, null, PointFromId(840), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Arena Text 2
//--------------------------------------------------------------------------------------------------
bool gt_SpawnArenaText2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/3F0C33B9"), 24, PointFromId(841), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnArenaText2_Init () {
    gt_SpawnArenaText2 = TriggerCreate("gt_SpawnArenaText2_Func");
    TriggerAddEventUnitRangePoint(gt_SpawnArenaText2, null, PointFromId(841), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Leaves Arena 1
//--------------------------------------------------------------------------------------------------
bool gt_HeroLeavesArena1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((!gv_matchGoingOn && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupRemove(gv_contestant1Group, gv_contestant1);
    gv_contestant1 = UnitFromId(632);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroLeavesArena1_Init () {
    gt_HeroLeavesArena1 = TriggerCreate("gt_HeroLeavesArena1_Func");
    TriggerAddEventUnitRegion(gt_HeroLeavesArena1, UnitRefFromVariable("gv_contestant1"), RegionFromId(80), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Leaves Arena 2
//--------------------------------------------------------------------------------------------------
bool gt_HeroLeavesArena2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((!gv_matchGoingOn && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupRemove(gv_contestant2Group, gv_contestant2);
    gv_contestant2 = UnitFromId(630);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroLeavesArena2_Init () {
    gt_HeroLeavesArena2 = TriggerCreate("gt_HeroLeavesArena2_Func");
    TriggerAddEventUnitRegion(gt_HeroLeavesArena2, UnitRefFromVariable("gv_contestant2"), RegionFromId(81), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Enters Arena 1
//--------------------------------------------------------------------------------------------------
bool gt_HeroEntersArena1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGroupCount(gv_contestant1Group, c_unitCountAlive) == 0) && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) && UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_contestant1 = EventUnit();
    UnitGroupAdd(gv_contestant1Group, gv_contestant1);
    if (!gv_matchGoingOn) {
        if ((UnitGroupCount(gv_contestant2Group, c_unitCountAlive) == 1)) {
            gv_respawnPoint[(UnitGetOwner(gv_contestant1) - 1)] = PointFromId(799);
            gv_respawnPoint[(UnitGetOwner(gv_contestant2) - 1)] = PointFromId(799);
            libNtve_gf_PauseUnit(gv_contestant1, true);
            libNtve_gf_PauseUnit(gv_contestant2, true);
            gv_matchGoingOn = true;
            TextTagDestroy(gv_arenaWaitingTextTag);
            UnitSetPosition(gv_contestant1, RegionGetCenter(RegionFromId(78)), false);
            UnitSetPosition(gv_contestant2, RegionGetCenter(RegionFromId(79)), false);
            CameraLockInput(UnitGetOwner(gv_contestant1), true);
            CameraLockInput(UnitGetOwner(gv_contestant2), true);
            CameraPan(UnitGetOwner(gv_contestant1), RegionGetCenter(RegionFromId(78)), 0.0, -1, 10, false);
            CameraPan(UnitGetOwner(gv_contestant2), RegionGetCenter(RegionFromId(79)), 0.0, -1, 10, false);
            UnitIssueOrder(gv_contestant1, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_contestant2, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_contestant1, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            UnitIssueOrder(gv_contestant2, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(UnitGetOwner(gv_contestant1)) + (StringExternal("Param/Value/FD8424B6") + PlayerName(UnitGetOwner(gv_contestant2)))));
            Wait(4.0, c_timeReal);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00020", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00020", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/CBDB183B"));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/E65F377F"));
            Wait(1.0, c_timeReal);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00019", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00019", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/D680D068"));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/7DAB2D45"));
            Wait(1.0, c_timeReal);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00018", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00018", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/A40C6F3E"));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/92A1F572"));
            Wait(1.0, c_timeReal);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00017", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00017", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/E057B9BE"));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/1601047B"));
            Wait(1.0, c_timeReal);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00016", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00016", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/C30FACB4"));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/C71179B0"));
            Wait(1.0, c_timeReal);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00012", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00012", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/E44FA671"));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/4156CCA3"));
            libNtve_gf_SetAlliance(UnitGetOwner(gv_contestant1), UnitGetOwner(gv_contestant2), libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_PauseUnit(gv_contestant1, false);
            libNtve_gf_PauseUnit(gv_contestant2, false);
            CameraLockInput(UnitGetOwner(gv_contestant1), false);
            CameraLockInput(UnitGetOwner(gv_contestant2), false);
            VisRevealerCreate(1, RegionFromId(77));
            VisRevealerCreate(2, RegionFromId(77));
            VisRevealerCreate(3, RegionFromId(77));
            VisRevealerCreate(4, RegionFromId(77));
            PlayerGroupAdd(gv_playersintheArena, UnitGetOwner(gv_contestant1));
            PlayerGroupAdd(gv_playersintheArena, UnitGetOwner(gv_contestant2));
        }
        else {
            TextTagCreate(StringExternal("Param/Value/C3ABD438"), 24, PointFromId(842), 1.0, true, true, PlayerGroupAll());
            gv_arenaWaitingTextTag = TextTagLastCreated();
            TextTagSetTime(gv_arenaWaitingTextTag, c_textTagTimeDuration, 5.0);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroEntersArena1_Init () {
    gt_HeroEntersArena1 = TriggerCreate("gt_HeroEntersArena1_Func");
    TriggerAddEventUnitRegion(gt_HeroEntersArena1, UnitRefFromVariable("gv_players[0].dragon"), RegionFromId(80), true);
    TriggerAddEventUnitRegion(gt_HeroEntersArena1, UnitRefFromVariable("gv_players[1].dragon"), RegionFromId(80), true);
    TriggerAddEventUnitRegion(gt_HeroEntersArena1, UnitRefFromVariable("gv_players[2].dragon"), RegionFromId(80), true);
    TriggerAddEventUnitRegion(gt_HeroEntersArena1, UnitRefFromVariable("gv_players[3].dragon"), RegionFromId(80), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Enters Arena 2
//--------------------------------------------------------------------------------------------------
bool gt_HeroEntersArena2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGroupCount(gv_contestant2Group, c_unitCountAlive) == 0) && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) && UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_contestant2 = EventUnit();
    UnitGroupAdd(gv_contestant2Group, gv_contestant2);
    if (!gv_matchGoingOn) {
        if ((UnitGroupCount(gv_contestant1Group, c_unitCountAlive) == 1)) {
            gv_respawnPoint[(UnitGetOwner(gv_contestant1) - 1)] = PointFromId(799);
            gv_respawnPoint[(UnitGetOwner(gv_contestant2) - 1)] = PointFromId(799);
            libNtve_gf_PauseUnit(gv_contestant1, true);
            libNtve_gf_PauseUnit(gv_contestant2, true);
            gv_matchGoingOn = true;
            TextTagDestroy(gv_arenaWaitingTextTag);
            UnitSetPosition(gv_contestant1, RegionGetCenter(RegionFromId(78)), false);
            UnitSetPosition(gv_contestant2, RegionGetCenter(RegionFromId(79)), false);
            CameraLockInput(UnitGetOwner(gv_contestant1), true);
            CameraLockInput(UnitGetOwner(gv_contestant2), true);
            CameraPan(UnitGetOwner(gv_contestant1), RegionGetCenter(RegionFromId(78)), 0.0, -1, 10, false);
            CameraPan(UnitGetOwner(gv_contestant2), RegionGetCenter(RegionFromId(79)), 0.0, -1, 10, false);
            UnitIssueOrder(gv_contestant1, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_contestant2, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_contestant1, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            UnitIssueOrder(gv_contestant2, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(UnitGetOwner(gv_contestant1)) + (StringExternal("Param/Value/515280CE") + PlayerName(UnitGetOwner(gv_contestant2)))));
            Wait(4.0, c_timeReal);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00020", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00020", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/486C1EB8"));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/F8E544B6"));
            Wait(1.0, c_timeReal);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00019", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00019", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/E5B6B20B"));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/8DD508CD"));
            Wait(1.0, c_timeReal);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00018", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00018", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/4B31DF10"));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/D11ADA5E"));
            Wait(1.0, c_timeReal);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00017", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00017", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/4DE1EE78"));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/4F348A52"));
            Wait(1.0, c_timeReal);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00016", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00016", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/313BFA96"));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/3B3F826B"));
            Wait(1.0, c_timeReal);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00012", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00012", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/10A1BB94"));
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/1A107626"));
            libNtve_gf_SetAlliance(UnitGetOwner(gv_contestant1), UnitGetOwner(gv_contestant2), libNtve_ge_AllianceSetting_Enemy);
            libNtve_gf_PauseUnit(gv_contestant1, false);
            libNtve_gf_PauseUnit(gv_contestant2, false);
            CameraLockInput(UnitGetOwner(gv_contestant1), false);
            CameraLockInput(UnitGetOwner(gv_contestant2), false);
            VisRevealerCreate(1, RegionFromId(77));
            VisRevealerCreate(2, RegionFromId(77));
            VisRevealerCreate(3, RegionFromId(77));
            VisRevealerCreate(4, RegionFromId(77));
        }
        else {
            TextTagCreate(StringExternal("Param/Value/3F2866C3"), 24, PointFromId(842), 1.0, true, true, PlayerGroupAll());
            gv_arenaWaitingTextTag = TextTagLastCreated();
            TextTagSetTime(gv_arenaWaitingTextTag, c_textTagTimeDuration, 5.0);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroEntersArena2_Init () {
    gt_HeroEntersArena2 = TriggerCreate("gt_HeroEntersArena2_Func");
    TriggerAddEventUnitRegion(gt_HeroEntersArena2, UnitRefFromVariable("gv_players[0].dragon"), RegionFromId(81), true);
    TriggerAddEventUnitRegion(gt_HeroEntersArena2, UnitRefFromVariable("gv_players[1].dragon"), RegionFromId(81), true);
    TriggerAddEventUnitRegion(gt_HeroEntersArena2, UnitRefFromVariable("gv_players[2].dragon"), RegionFromId(81), true);
    TriggerAddEventUnitRegion(gt_HeroEntersArena2, UnitRefFromVariable("gv_players[3].dragon"), RegionFromId(81), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Contestant 1 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Contestant1Dies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_winningAmmount;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[(UnitGetOwner(gv_contestant2) - 1)].stats.arena.wins += 1;
    gv_players[(UnitGetOwner(gv_contestant1) - 1)].stats.arena.losses += 1;
    libNtve_gf_SetAlliance(UnitGetOwner(gv_contestant1), UnitGetOwner(gv_contestant2), libNtve_ge_AllianceSetting_AllyWithSharedVision);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(UnitGetOwner(gv_contestant2)) + (StringExternal("Param/Value/E5ACB15C") + (IntToText(gv_players[(UnitGetOwner(gv_contestant2) - 1)].stats.level) + (StringExternal("Param/Value/A43FC730") + (PlayerName(UnitGetOwner(gv_contestant1)) + (StringExternal("Param/Value/54DD5501") + (IntToText(gv_players[(UnitGetOwner(gv_contestant1) - 1)].stats.level) + (StringExternal("Param/Value/F17C3378") + (FixedToText(UnitGetPropertyFixed(gv_contestant2, c_unitPropLife, c_unitPropCurrent), 2) + StringExternal("Param/Value/A494C013")))))))))));
    UnitSetPropertyFixed(gv_contestant2, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_contestant2, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_contestant2, c_unitPropShieldsPercent, 100.0);
    lv_winningAmmount = (100.0 + (UnitGetPropertyFixed(gv_contestant1, c_unitPropLevel, c_unitPropCurrent) - UnitGetPropertyFixed(gv_contestant2, c_unitPropLevel, c_unitPropCurrent)));
    UnitGroupRemove(gv_contestant1Group, gv_contestant1);
    gv_contestant1 = UnitFromId(630);
    UnitSetPosition(gv_contestant2, PointFromId(844), false);
    UnitIssueOrder(gv_contestant2, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_contestant2, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    CameraPan(UnitGetOwner(gv_contestant2), PointFromId(844), 0.0, -1, 10, false);
    PlayerModifyPropertyInt(UnitGetOwner(gv_contestant2), c_playerPropVespene, c_playerPropOperAdd, FixedToInt(lv_winningAmmount));
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, (StringExternal("Param/Value/F7D113B0") + (FixedToText(lv_winningAmmount, 0) + StringExternal("Param/Value/AE0C2D5D"))));
    PlayerGroupClear(gv_playersintheArena);
    UnitGroupRemove(gv_contestant2Group, gv_contestant2);
    gv_contestant2 = null;
    gv_matchGoingOn = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Contestant1Dies_Init () {
    gt_Contestant1Dies = TriggerCreate("gt_Contestant1Dies_Func");
    TriggerAddEventUnitDied(gt_Contestant1Dies, UnitRefFromVariable("gv_contestant1"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Contestant 2 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Contestant2Dies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_winningAmmount;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[(UnitGetOwner(gv_contestant1) - 1)].stats.arena.wins += 1;
    gv_players[(UnitGetOwner(gv_contestant2) - 1)].stats.arena.losses += 1;
    libNtve_gf_SetAlliance(UnitGetOwner(gv_contestant1), UnitGetOwner(gv_contestant2), libNtve_ge_AllianceSetting_AllyWithSharedVision);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(UnitGetOwner(gv_contestant1)) + (StringExternal("Param/Value/F48BA064") + (IntToText(gv_players[(UnitGetOwner(gv_contestant1) - 1)].stats.level) + (StringExternal("Param/Value/E1AF3427") + (PlayerName(UnitGetOwner(gv_contestant2)) + (StringExternal("Param/Value/D63E8112") + (IntToText(gv_players[(UnitGetOwner(gv_contestant2) - 1)].stats.level) + (StringExternal("Param/Value/EC586C99") + (FixedToText(UnitGetPropertyFixed(gv_contestant1, c_unitPropLife, c_unitPropCurrent), 2) + StringExternal("Param/Value/9B709EAA")))))))))));
    UnitSetPropertyFixed(gv_contestant1, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_contestant1, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_contestant1, c_unitPropShieldsPercent, 100.0);
    lv_winningAmmount = (100.0 + (UnitGetPropertyFixed(gv_contestant2, c_unitPropLevel, c_unitPropCurrent) - UnitGetPropertyFixed(gv_contestant1, c_unitPropLevel, c_unitPropCurrent)));
    UnitGroupRemove(gv_contestant2Group, gv_contestant2);
    gv_contestant2 = UnitFromId(632);
    UnitSetPosition(gv_contestant1, PointFromId(844), false);
    UnitIssueOrder(gv_contestant1, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_contestant1, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    CameraPan(UnitGetOwner(gv_contestant1), PointFromId(844), 0.0, -1, 10, false);
    PlayerModifyPropertyInt(UnitGetOwner(gv_contestant1), c_playerPropVespene, c_playerPropOperAdd, FixedToInt(lv_winningAmmount));
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, (StringExternal("Param/Value/D7C69713") + (FixedToText(lv_winningAmmount, 0) + StringExternal("Param/Value/B81843D9"))));
    PlayerGroupClear(gv_playersintheArena);
    UnitGroupRemove(gv_contestant1Group, gv_contestant1);
    gv_contestant1 = null;
    gv_matchGoingOn = false;
    CameraPan(UnitGetOwner(gv_contestant1), PointFromId(844), 0.0, -1, 10, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Contestant2Dies_Init () {
    gt_Contestant2Dies = TriggerCreate("gt_Contestant2Dies_Func");
    TriggerAddEventUnitDied(gt_Contestant2Dies, UnitRefFromVariable("gv_contestant2"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Open Inventory when click on stash
//--------------------------------------------------------------------------------------------------
bool gt_OpenInventorywhenclickonstash_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!UnitAbilityExists(EventUnit(), "StashInventory")) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash1", c_techCountCompleteOnly) > 0)) {
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 1, true);
    }
    else {
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 1, false);
    }
    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash12", c_techCountCompleteOnly) > 0)) {
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 2, true);
    }
    else {
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 2, false);
    }
    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash13", c_techCountCompleteOnly) > 0)) {
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 3, true);
    }
    else {
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 3, false);
    }
    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash14", c_techCountCompleteOnly) > 0)) {
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 4, true);
    }
    else {
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 4, false);
    }
    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash15", c_techCountCompleteOnly) > 0)) {
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 5, true);
    }
    else {
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 5, false);
    }
    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash16", c_techCountCompleteOnly) > 0)) {
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 6, true);
    }
    else {
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 6, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OpenInventorywhenclickonstash_Init () {
    gt_OpenInventorywhenclickonstash = TriggerCreate("gt_OpenInventorywhenclickonstash_Func");
    TriggerAddEventUnitSelected(gt_OpenInventorywhenclickonstash, UnitRefFromVariable("gv_stash[0]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_OpenInventorywhenclickonstash, UnitRefFromVariable("gv_stash[1]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_OpenInventorywhenclickonstash, UnitRefFromVariable("gv_stash[2]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_OpenInventorywhenclickonstash, UnitRefFromVariable("gv_stash[3]"), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Drop stuff not unlocked yet
//--------------------------------------------------------------------------------------------------
bool gt_Dropstuffnotunlockedyet_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash1", c_techCountCompleteOnly) == 0)) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 1)) {
                UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
                UnitInventoryRemove(UnitGroupLoopCurrent());
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/79C3CACF"));
            }
        }
        UnitGroupLoopEnd();
    }
    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash12", c_techCountCompleteOnly) == 0)) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 2)) {
                UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
                UnitInventoryRemove(UnitGroupLoopCurrent());
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/8A5A42C4"));
            }
        }
        UnitGroupLoopEnd();
    }
    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash13", c_techCountCompleteOnly) == 0)) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
                UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
                UnitInventoryRemove(UnitGroupLoopCurrent());
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/26EAADF9"));
            }
        }
        UnitGroupLoopEnd();
    }
    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash14", c_techCountCompleteOnly) == 0)) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 4)) {
                UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
                UnitInventoryRemove(UnitGroupLoopCurrent());
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/BFCA3806"));
            }
        }
        UnitGroupLoopEnd();
    }
    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash15", c_techCountCompleteOnly) == 0)) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 5)) {
                UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
                UnitInventoryRemove(UnitGroupLoopCurrent());
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/52EA9DC9"));
            }
        }
        UnitGroupLoopEnd();
    }
    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash16", c_techCountCompleteOnly) == 0)) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 6)) {
                UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
                UnitInventoryRemove(UnitGroupLoopCurrent());
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/CC44A819"));
            }
        }
        UnitGroupLoopEnd();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Dropstuffnotunlockedyet_Init () {
    gt_Dropstuffnotunlockedyet = TriggerCreate("gt_Dropstuffnotunlockedyet_Func");
    TriggerAddEventUnitInventoryChange(gt_Dropstuffnotunlockedyet, UnitRefFromVariable("gv_stash[0]"), c_unitInventoryChangeMoves, null);
    TriggerAddEventUnitInventoryChange(gt_Dropstuffnotunlockedyet, UnitRefFromVariable("gv_stash[1]"), c_unitInventoryChangeMoves, null);
    TriggerAddEventUnitInventoryChange(gt_Dropstuffnotunlockedyet, UnitRefFromVariable("gv_stash[2]"), c_unitInventoryChangeMoves, null);
    TriggerAddEventUnitInventoryChange(gt_Dropstuffnotunlockedyet, UnitRefFromVariable("gv_stash[3]"), c_unitInventoryChangeMoves, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Potion Hotkey P1
//--------------------------------------------------------------------------------------------------
bool gt_PotionHotkeyP1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iPI;
    int lv_iP;
    unit lv_sHP;
    unit lv_mHP;
    unit lv_lHP;
    unit lv_gHP;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_iPI = 0;
    lv_iP = 1;
    UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_iPI].dragon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SmallHealthPotion")) {
            lv_sHP = UnitGroupLoopCurrent();
        }
        else {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "MediumHealthPotion")) {
                lv_mHP = UnitGroupLoopCurrent();
            }
            else {
                if ((UnitGetType(UnitGroupLoopCurrent()) == "LargeHealthPotion")) {
                    lv_lHP = UnitGroupLoopCurrent();
                }
                else {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandHealthPotion")) {
                        lv_gHP = UnitGroupLoopCurrent();
                    }
                }
            }
        }
    }
    UnitGroupLoopEnd();
    if (((lv_sHP != null) || (lv_mHP != null) || (lv_lHP != null) || (lv_gHP != null))) {
        if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) != 0.0)) {
            if ((UnitGetCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName) <= 0.0)) {
                if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 0.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 100.0)) {
                    if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0) && (lv_sHP != null)) {
                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                        UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                        TextTagCreate(StringExternal("Param/Value/BCDAA2DF"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                    }
                    else {
                        if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0) && (lv_mHP != null)) {
                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                            UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                            TextTagCreate(StringExternal("Param/Value/AA4C7E34"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                        }
                        else {
                            if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0) && (lv_lHP != null)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                TextTagCreate(StringExternal("Param/Value/6C6D61A4"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0) && (lv_gHP != null)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                    TextTagCreate(StringExternal("Param/Value/67A573EC"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    TextTagCreate(StringExternal("Param/Value/9A1ABDEA"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                }
                            }
                        }
                    }
                }
                else {
                    if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 100.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 250.0)) {
                        if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0) && (lv_mHP != null)) {
                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                            UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                            TextTagCreate(StringExternal("Param/Value/35007132"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                        }
                        else {
                            if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0) && (lv_lHP != null)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                TextTagCreate(StringExternal("Param/Value/56B61472"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0) && (lv_gHP != null)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                    TextTagCreate(StringExternal("Param/Value/8BE2918B"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0) && (lv_sHP != null)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                        TextTagCreate(StringExternal("Param/Value/3D62AC12"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        TextTagCreate(StringExternal("Param/Value/C85EC397"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 250.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 500.0)) {
                            if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0) && (lv_lHP != null)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                TextTagCreate(StringExternal("Param/Value/36717869"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0) && (lv_gHP != null)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                    TextTagCreate(StringExternal("Param/Value/B988CA39"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0) && (lv_mHP != null)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                        TextTagCreate(StringExternal("Param/Value/04941F90"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0) && (lv_sHP != null)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                            TextTagCreate(StringExternal("Param/Value/EAF583BC"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            TextTagCreate(StringExternal("Param/Value/25ABBE34"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 500.0)) {
                                if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0) && (lv_gHP != null)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                    TextTagCreate(StringExternal("Param/Value/6D80E3E6"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0) && (lv_lHP != null)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                        TextTagCreate(StringExternal("Param/Value/CF16A979"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0) && (lv_mHP != null)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                            TextTagCreate(StringExternal("Param/Value/3A0312A1"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0) && (lv_sHP != null)) {
                                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                                                UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                                TextTagCreate(StringExternal("Param/Value/0518148A"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                            }
                                            else {
                                                TextTagCreate(StringExternal("Param/Value/389CC43C"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                TextTagCreate(StringExternal("Param/Value/1F45E83A"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
            }
        }
        else {
            TextTagCreate(StringExternal("Param/Value/F6872929"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
        }
    }
    else {
        TextTagCreate(StringExternal("Param/Value/BCD98EBD"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PotionHotkeyP1_Init () {
    gt_PotionHotkeyP1 = TriggerCreate("gt_PotionHotkeyP1_Func");
    TriggerAddEventButtonPressed(gt_PotionHotkeyP1, 1, "UsePotion");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Potion Hotkey P2
//--------------------------------------------------------------------------------------------------
bool gt_PotionHotkeyP2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iPI;
    int lv_iP;
    unit lv_sHP;
    unit lv_mHP;
    unit lv_lHP;
    unit lv_gHP;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_iPI = 1;
    lv_iP = 2;
    UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_iPI].dragon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SmallHealthPotion")) {
            lv_sHP = UnitGroupLoopCurrent();
        }
        else {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "MediumHealthPotion")) {
                lv_mHP = UnitGroupLoopCurrent();
            }
            else {
                if ((UnitGetType(UnitGroupLoopCurrent()) == "LargeHealthPotion")) {
                    lv_lHP = UnitGroupLoopCurrent();
                }
                else {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandHealthPotion")) {
                        lv_gHP = UnitGroupLoopCurrent();
                    }
                }
            }
        }
    }
    UnitGroupLoopEnd();
    if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) != 0.0)) {
        if ((UnitGetCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName) <= 0.0)) {
            if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 0.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 100.0)) {
                if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0)) {
                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                    UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                    TextTagCreate(StringExternal("Param/Value/1D045780"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                    if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0)) {
                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                        UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                        TextTagCreate(StringExternal("Param/Value/4647C1FD"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                    }
                    else {
                        if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0)) {
                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                            UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                            TextTagCreate(StringExternal("Param/Value/8CCF9F59"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                        }
                        else {
                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                TextTagCreate(StringExternal("Param/Value/A3035116"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                TextTagCreate(StringExternal("Param/Value/921C5D2D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                            }
                        }
                    }
                }
            }
            else {
                if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 100.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 250.0)) {
                    if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0)) {
                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                        UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                        TextTagCreate(StringExternal("Param/Value/ED6D1F51"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                    }
                    else {
                        if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0)) {
                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                            UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                            TextTagCreate(StringExternal("Param/Value/8C1AE928"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                        }
                        else {
                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                TextTagCreate(StringExternal("Param/Value/BA9D3D10"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                    TextTagCreate(StringExternal("Param/Value/50714DAC"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    TextTagCreate(StringExternal("Param/Value/872DD75E"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                }
                            }
                        }
                    }
                }
                else {
                    if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 250.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 500.0)) {
                        if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0)) {
                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                            UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                            TextTagCreate(StringExternal("Param/Value/95D1F36E"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                        }
                        else {
                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                TextTagCreate(StringExternal("Param/Value/553CAB51"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                    TextTagCreate(StringExternal("Param/Value/187F076C"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                        TextTagCreate(StringExternal("Param/Value/6AE3D28C"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        TextTagCreate(StringExternal("Param/Value/2B019AA6"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 500.0)) {
                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                TextTagCreate(StringExternal("Param/Value/DCC6C75B"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                    TextTagCreate(StringExternal("Param/Value/E6512FED"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                        TextTagCreate(StringExternal("Param/Value/BDA99B77"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                            TextTagCreate(StringExternal("Param/Value/A108E2EB"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
    
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            TextTagCreate(StringExternal("Param/Value/3A4222B0"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
        }
    }
    else {
        TextTagCreate(StringExternal("Param/Value/5C863F6E"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PotionHotkeyP2_Init () {
    gt_PotionHotkeyP2 = TriggerCreate("gt_PotionHotkeyP2_Func");
    TriggerAddEventButtonPressed(gt_PotionHotkeyP2, 2, "UsePotion");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Potion Hotkey P3
//--------------------------------------------------------------------------------------------------
bool gt_PotionHotkeyP3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iPI;
    int lv_iP;
    unit lv_sHP;
    unit lv_mHP;
    unit lv_lHP;
    unit lv_gHP;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_iPI = 2;
    lv_iP = 3;
    UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_iPI].dragon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SmallHealthPotion")) {
            lv_sHP = UnitGroupLoopCurrent();
        }
        else {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "MediumHealthPotion")) {
                lv_mHP = UnitGroupLoopCurrent();
            }
            else {
                if ((UnitGetType(UnitGroupLoopCurrent()) == "LargeHealthPotion")) {
                    lv_lHP = UnitGroupLoopCurrent();
                }
                else {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandHealthPotion")) {
                        lv_gHP = UnitGroupLoopCurrent();
                    }
                }
            }
        }
    }
    UnitGroupLoopEnd();
    if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) != 0.0)) {
        if ((UnitGetCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName) <= 0.0)) {
            if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 0.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 100.0)) {
                if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0)) {
                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                    UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                    TextTagCreate(StringExternal("Param/Value/CFB458AE"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                    if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0)) {
                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                        UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                        TextTagCreate(StringExternal("Param/Value/5B70970A"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                    }
                    else {
                        if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0)) {
                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                            UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                            TextTagCreate(StringExternal("Param/Value/C322E4A6"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                        }
                        else {
                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                TextTagCreate(StringExternal("Param/Value/E0D6114B"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                TextTagCreate(StringExternal("Param/Value/2B56444A"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                            }
                        }
                    }
                }
            }
            else {
                if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 100.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 250.0)) {
                    if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0)) {
                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                        UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                        TextTagCreate(StringExternal("Param/Value/BA82A05D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                    }
                    else {
                        if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0)) {
                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                            UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                            TextTagCreate(StringExternal("Param/Value/6A25F76F"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                        }
                        else {
                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                TextTagCreate(StringExternal("Param/Value/56AABACD"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                    TextTagCreate(StringExternal("Param/Value/7DCB126A"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    TextTagCreate(StringExternal("Param/Value/51467DAF"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                }
                            }
                        }
                    }
                }
                else {
                    if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 250.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 500.0)) {
                        if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0)) {
                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                            UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                            TextTagCreate(StringExternal("Param/Value/5DE1E23C"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                        }
                        else {
                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                TextTagCreate(StringExternal("Param/Value/7CD8C421"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                    TextTagCreate(StringExternal("Param/Value/904ABFCA"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                        TextTagCreate(StringExternal("Param/Value/DD307554"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        TextTagCreate(StringExternal("Param/Value/876F8BB7"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 500.0)) {
                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                TextTagCreate(StringExternal("Param/Value/4D82AEB8"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                    TextTagCreate(StringExternal("Param/Value/669315A2"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                        TextTagCreate(StringExternal("Param/Value/6AFDE531"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                            TextTagCreate(StringExternal("Param/Value/D5C2D65F"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            TextTagCreate(StringExternal("Param/Value/7E1BDB44"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            TextTagCreate(StringExternal("Param/Value/43CA2959"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
        }
    }
    else {
        TextTagCreate(StringExternal("Param/Value/65DC86E2"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PotionHotkeyP3_Init () {
    gt_PotionHotkeyP3 = TriggerCreate("gt_PotionHotkeyP3_Func");
    TriggerAddEventButtonPressed(gt_PotionHotkeyP3, 3, "UsePotion");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Potion Hotkey P4
//--------------------------------------------------------------------------------------------------
bool gt_PotionHotkeyP4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iPI;
    int lv_iP;
    unit lv_sHP;
    unit lv_mHP;
    unit lv_lHP;
    unit lv_gHP;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_iPI = 3;
    lv_iP = 4;
    UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_iPI].dragon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "SmallHealthPotion")) {
            lv_sHP = UnitGroupLoopCurrent();
        }
        else {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "MediumHealthPotion")) {
                lv_mHP = UnitGroupLoopCurrent();
            }
            else {
                if ((UnitGetType(UnitGroupLoopCurrent()) == "LargeHealthPotion")) {
                    lv_lHP = UnitGroupLoopCurrent();
                }
                else {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandHealthPotion")) {
                        lv_gHP = UnitGroupLoopCurrent();
                    }
                }
            }
        }
    }
    UnitGroupLoopEnd();
    if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) != 0.0)) {
        if ((UnitGetCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName) <= 0.0)) {
            if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 0.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 100.0)) {
                if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0)) {
                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                    UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                    TextTagCreate(StringExternal("Param/Value/F02CB623"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                    if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0)) {
                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                        UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                        TextTagCreate(StringExternal("Param/Value/905A669C"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                    }
                    else {
                        if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0)) {
                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                            UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                            TextTagCreate(StringExternal("Param/Value/771E3B32"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                        }
                        else {
                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                TextTagCreate(StringExternal("Param/Value/C253BDD1"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                TextTagCreate(StringExternal("Param/Value/670ACBDF"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                            }
                        }
                    }
                }
            }
            else {
                if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 100.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 250.0)) {
                    if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0)) {
                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                        UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                        TextTagCreate(StringExternal("Param/Value/715A967C"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                    }
                    else {
                        if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0)) {
                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                            UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                            TextTagCreate(StringExternal("Param/Value/9B7978D5"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                        }
                        else {
                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                TextTagCreate(StringExternal("Param/Value/4E0BE1DE"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                    TextTagCreate(StringExternal("Param/Value/062C0495"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    TextTagCreate(StringExternal("Param/Value/7C5C7E95"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                }
                            }
                        }
                    }
                }
                else {
                    if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 250.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 500.0)) {
                        if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0)) {
                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                            UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                            TextTagCreate(StringExternal("Param/Value/5525CF51"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                        }
                        else {
                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                TextTagCreate(StringExternal("Param/Value/C0EE73E8"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                    TextTagCreate(StringExternal("Param/Value/639D49EF"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                        TextTagCreate(StringExternal("Param/Value/2A9B4BEB"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        TextTagCreate(StringExternal("Param/Value/67799F63"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    }
                                }
                            }
                        }
                    }
                    else {
                        if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 500.0)) {
                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) < 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                TextTagCreate(StringExternal("Param/Value/A1267830"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) < 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                    TextTagCreate(StringExternal("Param/Value/A28634A1"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) < 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                        TextTagCreate(StringExternal("Param/Value/23E2C494"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) < 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                            TextTagCreate(StringExternal("Param/Value/B4D4EA55"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            TextTagCreate(StringExternal("Param/Value/B9576EF6"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else {
            TextTagCreate(StringExternal("Param/Value/68F72793"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
        }
    }
    else {
        TextTagCreate(StringExternal("Param/Value/6330997A"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PotionHotkeyP4_Init () {
    gt_PotionHotkeyP4 = TriggerCreate("gt_PotionHotkeyP4_Func");
    TriggerAddEventButtonPressed(gt_PotionHotkeyP4, 4, "UsePotion");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Grand Orb of Anger Counter
//--------------------------------------------------------------------------------------------------
bool gt_GrandOrbofAngerCounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_numberofGrandOrbofAnger;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitInventoryGroup(gv_players[0].dragon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 3) && (UnitGetType(UnitGroupLoopCurrent()) == "GrandOrbofAnger")) {
            lv_numberofGrandOrbofAnger += 1;
        }
    }
    UnitGroupLoopEnd();
    gv_grandOrbofAngerCount[0] = lv_numberofGrandOrbofAnger;
    lv_numberofGrandOrbofAnger = 0;
    UnitGroupLoopBegin(UnitInventoryGroup(gv_players[1].dragon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandOrbofAnger") && (UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
            lv_numberofGrandOrbofAnger += 1;
        }
    }
    UnitGroupLoopEnd();
    gv_grandOrbofAngerCount[1] = lv_numberofGrandOrbofAnger;
    lv_numberofGrandOrbofAnger = 0;
    UnitGroupLoopBegin(UnitInventoryGroup(gv_players[2].dragon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandOrbofAnger") && (UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
            lv_numberofGrandOrbofAnger += 1;
        }
    }
    UnitGroupLoopEnd();
    gv_grandOrbofAngerCount[2] = lv_numberofGrandOrbofAnger;
    lv_numberofGrandOrbofAnger = 0;
    UnitGroupLoopBegin(UnitInventoryGroup(gv_players[3].dragon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandOrbofAnger") && (UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
            lv_numberofGrandOrbofAnger += 1;
        }
    }
    UnitGroupLoopEnd();
    gv_grandOrbofAngerCount[3] = lv_numberofGrandOrbofAnger;
    lv_numberofGrandOrbofAnger = 0;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GrandOrbofAngerCounter_Init () {
    gt_GrandOrbofAngerCounter = TriggerCreate("gt_GrandOrbofAngerCounter_Func");
    TriggerAddEventTimePeriodic(gt_GrandOrbofAngerCounter, 10.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Grand Orb of Anger Effect P1
//--------------------------------------------------------------------------------------------------
bool gt_GrandOrbofAngerEffectP1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    if (!libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(3)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(126)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(127)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(128)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(129)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(130))) {
        UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(gv_players[lv_pI].dragon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[lv_pI].dragon), (gv_grandOrbofAngerCount[lv_pI] * 4.0)), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_players[lv_pI].dragon), c_orderQueueAddToEnd);
        }
        UnitGroupLoopEnd();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GrandOrbofAngerEffectP1_Init () {
    gt_GrandOrbofAngerEffectP1 = TriggerCreate("gt_GrandOrbofAngerEffectP1_Func");
    TriggerAddEventTimePeriodic(gt_GrandOrbofAngerEffectP1, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Grand Orb of Anger Effect P2
//--------------------------------------------------------------------------------------------------
bool gt_GrandOrbofAngerEffectP2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pI;
    // Variable Initialization
    lv_pI = 1;
    // Actions
    if (!runActions) {
        return true;
    }
    if (!libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(3)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(126)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(127)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(128)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(129)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(130))) {
        UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(gv_players[lv_pI].dragon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[lv_pI].dragon), (gv_grandOrbofAngerCount[lv_pI] * 4.0)), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_players[lv_pI].dragon), c_orderQueueAddToEnd);
        }
        UnitGroupLoopEnd();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GrandOrbofAngerEffectP2_Init () {
    gt_GrandOrbofAngerEffectP2 = TriggerCreate("gt_GrandOrbofAngerEffectP2_Func");
    TriggerAddEventTimePeriodic(gt_GrandOrbofAngerEffectP2, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Grand Orb of Anger Effect P3
//--------------------------------------------------------------------------------------------------
bool gt_GrandOrbofAngerEffectP3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pI;
    // Variable Initialization
    lv_pI = 2;
    // Actions
    if (!runActions) {
        return true;
    }
    if (!libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(3)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(126)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(127)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(128)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(129)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(130))) {
        UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(gv_players[lv_pI].dragon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[lv_pI].dragon), (gv_grandOrbofAngerCount[lv_pI] * 4.0)), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_players[lv_pI].dragon), c_orderQueueAddToEnd);
        }
        UnitGroupLoopEnd();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GrandOrbofAngerEffectP3_Init () {
    gt_GrandOrbofAngerEffectP3 = TriggerCreate("gt_GrandOrbofAngerEffectP3_Func");
    TriggerAddEventTimePeriodic(gt_GrandOrbofAngerEffectP3, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Grand Orb of Anger Effect P4
//--------------------------------------------------------------------------------------------------
bool gt_GrandOrbofAngerEffectP4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pI;
    // Variable Initialization
    lv_pI = 3;
    // Actions
    if (!runActions) {
        return true;
    }
    if (!libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(3)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(126)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(127)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(128)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(129)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(130))) {
        UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(gv_players[lv_pI].dragon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[lv_pI].dragon), (gv_grandOrbofAngerCount[lv_pI] * 4.0)), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_players[lv_pI].dragon), c_orderQueueAddToEnd);
        }
        UnitGroupLoopEnd();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GrandOrbofAngerEffectP4_Init () {
    gt_GrandOrbofAngerEffectP4 = TriggerCreate("gt_GrandOrbofAngerEffectP4_Func");
    TriggerAddEventTimePeriodic(gt_GrandOrbofAngerEffectP4, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player 1 Buys Occulus of Warning
//--------------------------------------------------------------------------------------------------
bool gt_Player1BuysOcculusofWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaSubtitle, StringExternal("Param/Value/45B25FC6"));
    BankValueSetFromFlag(gv_players[0].banks.dragonBank, "OOW", PlayerHandle(1), true);
    gv_occulusofWarning[0] = true;
    TriggerEnable(gt_OcculusPingPlayer1, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Player1BuysOcculusofWarning_Init () {
    gt_Player1BuysOcculusofWarning = TriggerCreate("gt_Player1BuysOcculusofWarning_Func");
    TriggerAddEventUnitAbility(gt_Player1BuysOcculusofWarning, null, AbilityCommand("ShardShop", 0), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player 2 Buys Occulus of Warning
//--------------------------------------------------------------------------------------------------
bool gt_Player2BuysOcculusofWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(2), c_messageAreaSubtitle, StringExternal("Param/Value/52F50202"));
    BankValueSetFromFlag(gv_players[1].banks.dragonBank, "OOW", PlayerHandle(2), true);
    gv_occulusofWarning[1] = true;
    TriggerEnable(gt_OcculusPingPlayer2, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Player2BuysOcculusofWarning_Init () {
    gt_Player2BuysOcculusofWarning = TriggerCreate("gt_Player2BuysOcculusofWarning_Func");
    TriggerAddEventUnitAbility(gt_Player2BuysOcculusofWarning, null, AbilityCommand("ShardShop", 0), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player 3 Buys Occulus of Warning
//--------------------------------------------------------------------------------------------------
bool gt_Player3BuysOcculusofWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 3))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(3), c_messageAreaSubtitle, StringExternal("Param/Value/9996DFC0"));
    BankValueSetFromFlag(gv_players[2].banks.dragonBank, "OOW", PlayerHandle(3), true);
    gv_occulusofWarning[2] = true;
    TriggerEnable(gt_OcculusPingPlayer3, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Player3BuysOcculusofWarning_Init () {
    gt_Player3BuysOcculusofWarning = TriggerCreate("gt_Player3BuysOcculusofWarning_Func");
    TriggerAddEventUnitAbility(gt_Player3BuysOcculusofWarning, null, AbilityCommand("ShardShop", 0), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player 4 Buys Occulus of Warning
//--------------------------------------------------------------------------------------------------
bool gt_Player4BuysOcculusofWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 4))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(4), c_messageAreaSubtitle, StringExternal("Param/Value/21D5DB64"));
    BankValueSetFromFlag(gv_players[3].banks.dragonBank, "OOW", PlayerHandle(4), true);
    gv_occulusofWarning[3] = true;
    TriggerEnable(gt_OcculusPingPlayer4, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Player4BuysOcculusofWarning_Init () {
    gt_Player4BuysOcculusofWarning = TriggerCreate("gt_Player4BuysOcculusofWarning_Func");
    TriggerAddEventUnitAbility(gt_Player4BuysOcculusofWarning, null, AbilityCommand("ShardShop", 0), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Occulus Ping Player 1
//--------------------------------------------------------------------------------------------------
bool gt_OcculusPingPlayer1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[0].dragon), 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1000));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(1), "PingNumeric0", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
        PingSetScale(PingLastCreated(), 0.2);
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OcculusPingPlayer1_Init () {
    gt_OcculusPingPlayer1 = TriggerCreate("gt_OcculusPingPlayer1_Func");
    TriggerEnable(gt_OcculusPingPlayer1, false);
    TriggerAddEventTimePeriodic(gt_OcculusPingPlayer1, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Occulus Ping Player 2
//--------------------------------------------------------------------------------------------------
bool gt_OcculusPingPlayer2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroupAlliance(2, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[1].dragon), 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1000));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(1), "PingNumeric0", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
        PingSetScale(PingLastCreated(), 0.2);
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OcculusPingPlayer2_Init () {
    gt_OcculusPingPlayer2 = TriggerCreate("gt_OcculusPingPlayer2_Func");
    TriggerEnable(gt_OcculusPingPlayer2, false);
    TriggerAddEventTimePeriodic(gt_OcculusPingPlayer2, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Occulus Ping Player 3
//--------------------------------------------------------------------------------------------------
bool gt_OcculusPingPlayer3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroupAlliance(3, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[2].dragon), 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1000));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(1), "PingNumeric0", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
        PingSetScale(PingLastCreated(), 0.2);
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OcculusPingPlayer3_Init () {
    gt_OcculusPingPlayer3 = TriggerCreate("gt_OcculusPingPlayer3_Func");
    TriggerEnable(gt_OcculusPingPlayer3, false);
    TriggerAddEventTimePeriodic(gt_OcculusPingPlayer3, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Occulus Ping Player 4
//--------------------------------------------------------------------------------------------------
bool gt_OcculusPingPlayer4_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroupAlliance(4, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[3].dragon), 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1000));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(1), "PingNumeric0", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
        PingSetScale(PingLastCreated(), 0.2);
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OcculusPingPlayer4_Init () {
    gt_OcculusPingPlayer4 = TriggerCreate("gt_OcculusPingPlayer4_Func");
    TriggerEnable(gt_OcculusPingPlayer4, false);
    TriggerAddEventTimePeriodic(gt_OcculusPingPlayer4, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Buys Facet of Revenge
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuysFacetofRevenge_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/EFCF1DB3"));
    BankValueSetFromFlag(gv_players[(EventPlayer() - 1)].banks.dragonBank, "FOR", PlayerHandle(EventPlayer()), true);
    gv_facetofRevenge[(EventPlayer() - 1)] = true;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerBuysFacetofRevenge_Init () {
    gt_PlayerBuysFacetofRevenge = TriggerCreate("gt_PlayerBuysFacetofRevenge_Func");
    TriggerAddEventUnitAbility(gt_PlayerBuysFacetofRevenge, null, AbilityCommand("ShardShop", 2), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Buys Crystal of Rebirth
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuysCrystalofRebirth_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/E513C8C7"));
    BankValueSetFromFlag(gv_players[(EventPlayer() - 1)].banks.dragonBank, "COR", PlayerHandle(EventPlayer()), true);
    gv_crystalofRebirth[(EventPlayer() - 1)] = true;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerBuysCrystalofRebirth_Init () {
    gt_PlayerBuysCrystalofRebirth = TriggerCreate("gt_PlayerBuysCrystalofRebirth_Func");
    TriggerAddEventUnitAbility(gt_PlayerBuysCrystalofRebirth, null, AbilityCommand("ShardShop", 1), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Buys Jewel of Return
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuysJewelofReturn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/95AF4D43"));
    BankValueSetFromFlag(gv_players[(EventPlayer() - 1)].banks.dragonBank, "JOR", PlayerHandle(EventPlayer()), true);
    gv_jewelofReturn[(EventPlayer() - 1)] = true;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerBuysJewelofReturn_Init () {
    gt_PlayerBuysJewelofReturn = TriggerCreate("gt_PlayerBuysJewelofReturn_Func");
    TriggerAddEventUnitAbility(gt_PlayerBuysJewelofReturn, null, AbilityCommand("ShardShop", 3), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Buys Stone of Protection
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuysStoneofProtection_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/5C4BAF8F"));
    BankValueSetFromFlag(gv_players[(EventPlayer() - 1)].banks.dragonBank, "SOR", PlayerHandle(EventPlayer()), true);
    gv_stoneofProtection[(EventPlayer() - 1)] = true;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerBuysStoneofProtection_Init () {
    gt_PlayerBuysStoneofProtection = TriggerCreate("gt_PlayerBuysStoneofProtection_Func");
    TriggerAddEventUnitAbility(gt_PlayerBuysStoneofProtection, null, AbilityCommand("ShardShop", 5), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Buys Ring of Quickening
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuysRingofQuickening_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/8AC4E98E"));
    BankValueSetFromFlag(gv_players[(EventPlayer() - 1)].banks.dragonBank, "ROQ", PlayerHandle(EventPlayer()), true);
    gv_ringofQuickening[(EventPlayer() - 1)] = true;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerBuysRingofQuickening_Init () {
    gt_PlayerBuysRingofQuickening = TriggerCreate("gt_PlayerBuysRingofQuickening_Func");
    TriggerAddEventUnitAbility(gt_PlayerBuysRingofQuickening, null, AbilityCommand("ShardShop", 4), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tolic's Fire Orb Damage Response
//--------------------------------------------------------------------------------------------------
bool gt_TolicsFireOrbDamageResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_numberTolicOrbs;
    int lv_randomNumber;
    int lv_thisTag;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitDamageSourceUnit())))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "TolicsFireOrb") && (UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
            lv_numberTolicOrbs += 1;
        }
    }
    UnitGroupLoopEnd();
    if ((RandomFixed(0.0, 100.0) <= (lv_numberTolicOrbs * 20.0))) {
        UnitBehaviorAdd(EventUnitDamageSourceUnit(), "Burning", EventUnit(), 1);
        TextTagCreate(StringExternal("Param/Value/C8E11905"), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, true, PlayerGroupSingle(UnitGetOwner(EventUnit())));
        lv_thisTag = TextTagLastCreated();
        TextTagSetVelocity(lv_thisTag, 0.75, 270.0);
        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 0.00, 0.00));
        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
    }
    lv_numberTolicOrbs = 0;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TolicsFireOrbDamageResponse_Init () {
    gt_TolicsFireOrbDamageResponse = TriggerCreate("gt_TolicsFireOrbDamageResponse_Func");
    TriggerAddEventUnitDamaged(gt_TolicsFireOrbDamageResponse, UnitRefFromVariable("gv_players[0].dragon"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_TolicsFireOrbDamageResponse, UnitRefFromVariable("gv_players[1].dragon"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_TolicsFireOrbDamageResponse, UnitRefFromVariable("gv_players[2].dragon"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_TolicsFireOrbDamageResponse, UnitRefFromVariable("gv_players[3].dragon"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Stack Charge Names
//--------------------------------------------------------------------------------------------------
bool gt_SetStackChargeNames_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_stackChargeNames[0] = "Item/SmallHealthPotion";
    gv_stackChargeNames[1] = "Item/MediumHealthPotion";
    gv_stackChargeNames[2] = "Item/LargeHealthPotion";
    gv_stackChargeNames[3] = "Item/GrandHealthPotion";
    gv_stackChargeNames[4] = "Item/SmallAttackSpeedPotion";
    gv_stackChargeNames[5] = "Item/MediumAttackSpeedPotion";
    gv_stackChargeNames[6] = "Item/LargeAttackSpeedPotion";
    gv_stackChargeNames[7] = "Item/GrandAttackSpeedPotion";
    gv_stackChargeNames[8] = "Item/TownPortal";
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetStackChargeNames_Init () {
    gt_SetStackChargeNames = TriggerCreate("gt_SetStackChargeNames_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Save Stack Counts On Inventory Edit
//--------------------------------------------------------------------------------------------------
bool gt_SaveStackCountsOnInventoryEdit_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!gv_playersSetUp) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) && !gv_evolving[(UnitGetOwner(EventUnit()) - 1)]) {
        gf_SaveStackCounts(UnitGetOwner(EventUnit()));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SaveStackCountsOnInventoryEdit_Init () {
    gt_SaveStackCountsOnInventoryEdit = TriggerCreate("gt_SaveStackCountsOnInventoryEdit_Func");
    TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeLoses, null);
    TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeDrops, null);
    TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeSells, null);
    TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeGives, null);
    TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeExhausts, null);
    TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeGains, null);
    TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeBuys, null);
    TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeReceives, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Save Stack Counts Periodically
//--------------------------------------------------------------------------------------------------
bool gt_SaveStackCountsPeriodically_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!gv_playersSetUp) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (!gv_evolving[(PlayerGroupLoopCurrent() - 1)]) {
            gf_SaveStackCounts(PlayerGroupLoopCurrent());
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SaveStackCountsPeriodically_Init () {
    gt_SaveStackCountsPeriodically = TriggerCreate("gt_SaveStackCountsPeriodically_Func");
    TriggerAddEventTimePeriodic(gt_SaveStackCountsPeriodically, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Town Portal
//--------------------------------------------------------------------------------------------------
bool gt_TownPortal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    lv_triggeringPlayerIndex = (UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem())) - 1);
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "TownPortal"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (StringEqual(gv_locationString[lv_triggeringPlayerIndex], "Ballan", c_stringCase)) {
        UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, "TownPortal");
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/A9B50B40"));
        return true;
    }
    if (StringEqual(gv_locationString[lv_triggeringPlayerIndex], "Syrital's Lair", c_stringCase)) {
        UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, "TownPortal");
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/610BC81D"));
        return true;
    }
    if (StringEqual(gv_locationString[lv_triggeringPlayerIndex], "Underground Forest", c_stringCase)) {
        UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, "TownPortal");
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/12E3CCA2"));
        return true;
    }
    if (StringEqual(gv_locationString[lv_triggeringPlayerIndex], "Relamy Gorge", c_stringCase)) {
        UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, "TownPortal");
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/42B004B8"));
        return true;
    }
    if (StringEqual(gv_locationString[lv_triggeringPlayerIndex], "???", c_stringCase)) {
        UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, "TownPortal");
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/EBFF7D03"));
        return true;
    }
    if (StringEqual(gv_locationString[lv_triggeringPlayerIndex], "Infestation", c_stringCase)) {
        UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, "TownPortal");
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/1F7CF99A"));
        return true;
    }
    //if (UnitGroupHasUnit(gv_unitsthatdidDamagetoSyrital, gv_players[lv_triggeringPlayerIndex].dragon)) {
      //  UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, "TownPortal");
       // UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/FD1FB43C"));
        //return true;
  //  }
    //if (UnitGroupHasUnit(gv_unitsthatdidDamagetoSremagsi, gv_players[lv_triggeringPlayerIndex].dragon)) {
      //  UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, "TownPortal");
      //  UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/746AD6C2"));
      // return true;
   // 
 if (StringEqual(gv_locationString[lv_triggeringPlayerIndex], "Machina De Plagam's Crater", c_stringCase)) {
        UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, "TownPortal");
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/BD25568D"));
        return true;
    }
  //  if (UnitGroupHasUnit(gv_unitsthatdidDamagetoMachinaDePlagam, gv_players[lv_triggeringPlayerIndex].dragon)) {
   //     UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, "TownPortal");
   //     UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/BD25568D"));
   //     return true;
   // }
    if (PlayerGroupHasPlayer(gv_playersInBattleWithZauberer2ndForm, UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem())))) {
        UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, "TownPortal");
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/D47362FB"));
        return true;
    }
    if (PlayerGroupHasPlayer(gv_playersInBattleWithZauberer1stForm, UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem())))) {
        UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, "TownPortal");
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/7A32E589"));
        return true;
    }
     if (PlayerGroupHasPlayer(gv_playersinBattlewithGuardians, UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem())))) {
        UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, "TownPortal");
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/3B59D3E0"));
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/4B9AC8CB"));
    libNtve_gf_MakeUnitInvulnerable(gv_players[lv_triggeringPlayerIndex].dragon, true);
    libNtve_gf_PauseUnit(gv_players[lv_triggeringPlayerIndex].dragon, true);
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())));
    CameraPan(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem())), PointFromId(2508), 0.0, -1, 10.0, false);
    UnitSetPosition(gv_players[lv_triggeringPlayerIndex].dragon, PointFromId(2508), false);
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", PointFromId(2508));
    libNtve_gf_MakeUnitInvulnerable(gv_players[lv_triggeringPlayerIndex].dragon, false);
    libNtve_gf_PauseUnit(gv_players[lv_triggeringPlayerIndex].dragon, false);
    UnitBehaviorRemovePlayer(gv_players[lv_triggeringPlayerIndex].dragon, "TimePenalty", UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem())), c_unitBehaviorCountAll);
    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_soundtrackCategoryMusic, "BiodomeTheme2", c_soundtrackCueAny, 0, false);
    gv_locationString[lv_triggeringPlayerIndex] = "Ballan";
    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TownPortal_Init () {
    gt_TownPortal = TriggerCreate("gt_TownPortal_Func");
    TriggerAddEventUnitInventoryChange(gt_TownPortal, null, c_unitInventoryChangeUses, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unit drops item
//--------------------------------------------------------------------------------------------------
bool gt_Unitdropsitem_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetOwner(EventUnitInventoryItem(), 0, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Unitdropsitem_Init () {
    gt_Unitdropsitem = TriggerCreate("gt_Unitdropsitem_Func");
    TriggerAddEventUnitInventoryChange(gt_Unitdropsitem, null, c_unitInventoryChangeDrops, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unit gains item
//--------------------------------------------------------------------------------------------------
bool gt_Unitgainsitem_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetOwner(EventUnitInventoryItem(), UnitGetOwner(EventUnit()), true);
    if (((UnitGetType(EventUnitInventoryItem()) == "HerosMight"))) {
        if (!gf_IsAdmin(EventPlayer())) {
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/50B63FB2"));
            UnitInventoryRemove(EventUnitInventoryItem());
        }
    } else
    if ((UnitGetType(EventUnitInventoryItem()) == "ModArmor")) {
        if (!gf_IsAdmin(EventPlayer())) {
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/00B671DA"));
            UnitInventoryRemove(EventUnitInventoryItem());
        }
    } else
    if (UnitGetType(EventUnitInventoryItem()) == "WingClaws") {
        if (PlayerHandle(EventPlayer()) != "" && PlayerName(EventPlayer()) == StringToText("Wingcrafter") && !gf_IsAdmin(EventPlayer())) {
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/50B63FB2"));
            UnitInventoryRemove(EventUnitInventoryItem());
        }
    } else
    if (((UnitGetType(EventUnitInventoryItem()) == "DevilsFlamethrower"))) {
        if (PlayerHandle(EventPlayer()) != "1-S2-1-2755172" && !gf_IsAdmin(EventPlayer())) {
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/CD8DEF38"));
            UnitInventoryRemove(EventUnitInventoryItem());
        }
    } else
    if (((UnitGetType(EventUnitInventoryItem()) == "MadawcsElectricArmor") || (UnitGetType(EventUnitInventoryItem()) == "ModArmor") || (UnitGetType(EventUnitInventoryItem()) == "PlagamArmor"))) {
        UnitSetPropertyFixed(UnitInventoryUnit(EventUnitInventoryItem()), c_unitPropShieldsPercent, 0.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Unitgainsitem_Init () {
    gt_Unitgainsitem = TriggerCreate("gt_Unitgainsitem_Func");
    TriggerAddEventUnitInventoryChange(gt_Unitgainsitem, null, c_unitInventoryChangeGains, null);
    TriggerAddEventUnitInventoryChange(gt_Unitgainsitem, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_Unitgainsitem, null, c_unitInventoryChangeBuys, null);
    TriggerAddEventUnitInventoryChange(gt_Unitgainsitem, null, c_unitInventoryChangeReceives, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Shield Check
//--------------------------------------------------------------------------------------------------
bool gt_ShieldCheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitInventoryContainer(EventUnitInventoryItem()) == 2))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (((UnitGetType(EventUnitInventoryItem()) == "MadawcsElectricArmor") || (UnitGetType(EventUnitInventoryItem()) == "ModArmor") || (UnitGetType(EventUnitInventoryItem()) == "PlagamArmor"))) {
        UnitSetPropertyFixed(UnitInventoryUnit(EventUnitInventoryItem()), c_unitPropShieldsPercent, 0.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShieldCheck_Init () {
    gt_ShieldCheck = TriggerCreate("gt_ShieldCheck_Func");
    TriggerAddEventUnitInventoryChange(gt_ShieldCheck, null, c_unitInventoryChangeMoves, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Weapon Check
//--------------------------------------------------------------------------------------------------
bool gt_WeaponCheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!gv_playersSetUp) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_RemoveWeapons(UnitInventoryUnit(EventUnitInventoryItem()));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WeaponCheck_Init () {
    gt_WeaponCheck = TriggerCreate("gt_WeaponCheck_Func");
    TriggerAddEventUnitInventoryChange(gt_WeaponCheck, null, c_unitInventoryChangeGains, null);
    TriggerAddEventUnitInventoryChange(gt_WeaponCheck, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_WeaponCheck, null, c_unitInventoryChangeLoses, null);
    TriggerAddEventUnitInventoryChange(gt_WeaponCheck, null, c_unitInventoryChangeMoves, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Selling System Redux
//--------------------------------------------------------------------------------------------------
bool gt_SellingSystemRedux_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mySlot;
    int lv_myContainer;
    int lv_myIndex;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_mySlot = UnitInventorySlot(EventUnitInventoryItem());
    lv_myContainer = UnitInventoryContainer(EventUnitInventoryItem());
    lv_myIndex = UnitInventoryIndex(EventUnitInventoryItem());
    if (((DistanceBetweenPoints(UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), UnitGetPosition(UnitFromId(240))) > 20.0) && (DistanceBetweenPoints(UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), UnitGetPosition(UnitFromId(1202))) > 20.0) && (DistanceBetweenPoints(UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), UnitGetPosition(UnitFromId(2777))) > 20.0) && (DistanceBetweenPoints(UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), UnitGetPosition(UnitFromId(660))) > 20.0))) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())), c_messageAreaSubtitle, StringExternal("Param/Value/DDDE08EE"));
        UnitInventoryCreate(gv_players[(UnitGetOwner(EventUnitInventoryItem()) - 1)].dragon, UnitGetType(EventUnitInventoryItem()));
        UnitInventoryMove(UnitInventoryLastCreated(), lv_myContainer, lv_mySlot);
    }
    else {
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitInventoryItem()), c_playerPropMinerals, c_playerPropOperAdd, (UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostMinerals) / 10));
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())), c_messageAreaSubtitle, ((UnitTypeGetName(UnitGetType(EventUnitInventoryItem())) + StringExternal("Param/Value/5AC0AC57")) + IntToText((UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostMinerals) / 10))));
        TextTagCreate((StringExternal("Param/Value/E6C199C9") + IntToText((UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostMinerals) / 10))), 24, UnitGetPosition(gv_players[(UnitGetOwner(EventUnitInventoryItem()) - 1)].dragon), 1.0, true, true, PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())));
        TextTagSetVelocity(TextTagLastCreated(), 0.75, 90.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SellingSystemRedux_Init () {
    gt_SellingSystemRedux = TriggerCreate("gt_SellingSystemRedux_Func");
    TriggerAddEventUnitInventoryChange(gt_SellingSystemRedux, null, c_unitInventoryChangeSells, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Armor Shop Text Tag
//--------------------------------------------------------------------------------------------------
bool gt_DisplayArmorShopTextTag_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/E57A2F8D"), 24, PointFromId(1216), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayArmorShopTextTag_Init () {
    gt_DisplayArmorShopTextTag = TriggerCreate("gt_DisplayArmorShopTextTag_Func");
    TriggerAddEventUnitRangePoint(gt_DisplayArmorShopTextTag, null, PointFromId(1216), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Weapon Shop and Credits Text Tags
//--------------------------------------------------------------------------------------------------
bool gt_DisplayWeaponShopTextTag_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/869F54FF"), 24, PointFromId(1215), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TextTagCreate(StringExternal("DOCSTR_ViewCredits"), 24, PointFromName("View Credits"), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayWeaponShopTextTag_Init () {
    gt_DisplayWeaponShopTextTag = TriggerCreate("gt_DisplayWeaponShopTextTag_Func");
    TriggerAddEventUnitRangePoint(gt_DisplayWeaponShopTextTag, null, PointFromId(1215), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Orb Shop Text Tag
//--------------------------------------------------------------------------------------------------
bool gt_DisplayOrbShopTextTag_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/E6685081"), 24, PointFromId(1203), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayOrbShopTextTag_Init () {
    gt_DisplayOrbShopTextTag = TriggerCreate("gt_DisplayOrbShopTextTag_Func");
    TriggerAddEventUnitRangePoint(gt_DisplayOrbShopTextTag, null, PointFromId(1203), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Shard Shop Text Tag
//--------------------------------------------------------------------------------------------------
bool gt_DisplayShardShopTextTag_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/CB97CC80"), 24, PointFromId(2778), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayShardShopTextTag_Init () {
    gt_DisplayShardShopTextTag = TriggerCreate("gt_DisplayShardShopTextTag_Func");
    TriggerAddEventUnitRangePoint(gt_DisplayShardShopTextTag, null, PointFromId(2778), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Stash Text Tag P1
//--------------------------------------------------------------------------------------------------
bool gt_DisplayStashTextTagP1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/D3D7C9C1"), 24, PointFromId(4835), 1.0, true, true, PlayerGroupSingle(1));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayStashTextTagP1_Init () {
    gt_DisplayStashTextTagP1 = TriggerCreate("gt_DisplayStashTextTagP1_Func");
    TriggerAddEventUnitRangePoint(gt_DisplayStashTextTagP1, null, PointFromId(4835), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Stash Text Tag P2
//--------------------------------------------------------------------------------------------------
bool gt_DisplayStashTextTagP2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/673F3B18"), 24, PointFromId(4836), 1.0, true, true, PlayerGroupSingle(2));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayStashTextTagP2_Init () {
    gt_DisplayStashTextTagP2 = TriggerCreate("gt_DisplayStashTextTagP2_Func");
    TriggerAddEventUnitRangePoint(gt_DisplayStashTextTagP2, null, PointFromId(4836), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Stash Text Tag P3
//--------------------------------------------------------------------------------------------------
bool gt_DisplayStashTextTagP3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/FDEBF9A4"), 24, PointFromId(4837), 1.0, true, true, PlayerGroupSingle(3));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayStashTextTagP3_Init () {
    gt_DisplayStashTextTagP3 = TriggerCreate("gt_DisplayStashTextTagP3_Func");
    TriggerAddEventUnitRangePoint(gt_DisplayStashTextTagP3, null, PointFromId(4837), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Stash Text Tag P4
//--------------------------------------------------------------------------------------------------
bool gt_DisplayStashTextTagP4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/4DBA1D44"), 24, PointFromId(4838), 1.0, true, true, PlayerGroupSingle(4));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayStashTextTagP4_Init () {
    gt_DisplayStashTextTagP4 = TriggerCreate("gt_DisplayStashTextTagP4_Func");
    TriggerAddEventUnitRangePoint(gt_DisplayStashTextTagP4, null, PointFromId(4838), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Underground Forest Enter
//--------------------------------------------------------------------------------------------------
bool gt_UndergroundForestEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
            return false;
        }
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    PlayerGroupAdd(gv_playersinUndergroundForest, UnitGetOwner(EventUnit()));
    PlayerSetToDLighting(UnitGetOwner(EventUnit()), "DesertWorldNight");
    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "UndergroundForestTheme", c_soundtrackCueAny, 0, false);
    CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(273)), 0.0, -1, 10, false);
    UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(273)), false);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    //gv_locationText[lv_triggeringPlayerIndex] = "Underground Forest";
        gv_locationString[lv_triggeringPlayerIndex] = "Underground Forest";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UndergroundForestEnter_Init () {
    gt_UndergroundForestEnter = TriggerCreate("gt_UndergroundForestEnter_Func");
    TriggerAddEventUnitRegion(gt_UndergroundForestEnter, null, RegionFromId(30), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Underground Forest Exit
//--------------------------------------------------------------------------------------------------
bool gt_UndergroundForestExit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    fixed lv_robusLifePercent;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    PlayerGroupRemove(gv_playersinUndergroundForest, UnitGetOwner(EventUnit()));
    CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(272)), 0.0, -1, 10, false);
    PlayerSetToDLighting(UnitGetOwner(EventUnit()), "Korhal");
    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "CretonTheme", c_soundtrackCueAny, 0, false);
    UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(272)), false);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    //gv_locationText[lv_triggeringPlayerIndex] = "Creton";
        gv_locationString[lv_triggeringPlayerIndex] = "Creton";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];    
    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UndergroundForestExit_Init () {
    gt_UndergroundForestExit = TriggerCreate("gt_UndergroundForestExit_Func");
    TriggerAddEventUnitRegion(gt_UndergroundForestExit, null, RegionFromId(271), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Gorge Enter
//--------------------------------------------------------------------------------------------------
bool gt_RelamyGorgeEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
            return false;
        }
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    PlayerGroupAdd(gv_playersinRelamyGorge, UnitGetOwner(EventUnit()));
    PlayerSetToDLighting(UnitGetOwner(EventUnit()), "IceWorldNight");
    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "RelamyGorgeTheme", c_soundtrackCueAny, 0, false);
    CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(232)), 0.0, -1, 10, false);
    UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(232)), false);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    //gv_locationText[lv_triggeringPlayerIndex] = "Relamy Gorge";
        gv_locationString[lv_triggeringPlayerIndex] = "Relamy Gorge";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyGorgeEnter_Init () {
    gt_RelamyGorgeEnter = TriggerCreate("gt_RelamyGorgeEnter_Func");
    TriggerAddEventUnitRegion(gt_RelamyGorgeEnter, null, RegionFromId(240), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Gorge Exit
//--------------------------------------------------------------------------------------------------
bool gt_RelamyGorgeExit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    fixed lv_robusLifePercent;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    PlayerGroupRemove(gv_playersinRelamyGorge, UnitGetOwner(EventUnit()));
    CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(270)), 0.0, -1, 10, false);
    PlayerSetToDLighting(UnitGetOwner(EventUnit()), "Korhal");
    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "RelamyCaveTheme", c_soundtrackCueAny, 0, false);
    UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(270)), false);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    //gv_locationText[lv_triggeringPlayerIndex] = "Relamy Pass";
        gv_locationString[lv_triggeringPlayerIndex] = "Relamy Pass";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyGorgeExit_Init () {
    gt_RelamyGorgeExit = TriggerCreate("gt_RelamyGorgeExit_Func");
    TriggerAddEventUnitRegion(gt_RelamyGorgeExit, null, RegionFromId(269), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Cave Enter
//--------------------------------------------------------------------------------------------------
bool gt_RelamyCaveEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    bool firstTimeInRelamyCave;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
            return false;
        }
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    PlayerGroupAdd(gv_playersinRelamyCave, UnitGetOwner(EventUnit()));
    PlayerSetToDLighting(UnitGetOwner(EventUnit()), "Zerus");
    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "RelamyTheme", c_soundtrackCueAny, 0, false);
    CameraPan(UnitGetOwner(EventUnit()), PointFromId(4072), 0.0, -1, 10, false);
    UnitSetPosition(EventUnit(), PointFromId(4072), false);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    //gv_locationText[lv_triggeringPlayerIndex] = "???";
        gv_locationString[lv_triggeringPlayerIndex] = "???";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && firstTimeInRelamyCave) {
        UnitSetPropertyFixed(gv_robus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_robus, c_unitPropLifeMax, c_unitPropCurrent) * UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
        firstTimeInRelamyCave = false;
}
    UnitSetPropertyFixed(gv_robus, c_unitPropLifePercent, 100.0);
    if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
        UnitGroupLoopBegin(UnitGroup("Karramarro", 15, RegionFromId(264), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyCaveEnter_Init () {
    bool firstTimeInRelamyCave = true;
    gt_RelamyCaveEnter = TriggerCreate("gt_RelamyCaveEnter_Func");
    TriggerAddEventUnitRegion(gt_RelamyCaveEnter, null, RegionFromId(260), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Cave Exit
//--------------------------------------------------------------------------------------------------
bool gt_RelamyCaveExit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    fixed lv_robusLifePercent;
    int multiplayerMultiplierHolder;
    int thisIsZero;
    int multiplayerMultiplier;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    PlayerGroupRemove(gv_playersinRelamyCave, UnitGetOwner(EventUnit()));
    CameraPan(UnitGetOwner(EventUnit()), PointFromId(4073), 0.0, -1, 10, false);
    PlayerSetToDLighting(UnitGetOwner(EventUnit()), "Korhal");
    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "RelamyCaveTheme", c_soundtrackCueAny, 0, false);
    UnitSetPosition(EventUnit(), PointFromId(4073), false);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
   //gv_locationText[lv_triggeringPlayerIndex] = "Relamy Canyon";
        gv_locationString[lv_triggeringPlayerIndex] = "Relamy Canyon";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    lv_robusLifePercent = UnitGetPropertyFixed(gv_robus, c_unitPropLifePercent, c_unitPropCurrent);
    
    multiplayerMultiplier = UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    if(multiplayerMultiplier == thisIsZero){
        multiplayerMultiplierHolder = 1;
        } else{
        multiplayerMultiplierHolder = UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    
    UnitSetPropertyFixed(gv_robus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_robus, c_unitPropLifeMax, c_unitPropCurrent))* multiplayerMultiplierHolder); //* UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
    UnitSetPropertyFixed(gv_robus, c_unitPropLifePercent, lv_robusLifePercent);
   
    
    //UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) +1));
    //UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyCaveExit_Init () {
    int multiplayerMultiplierHolder = 0;
    int thisIsZero = 0;
    int multiplayerMultiplier = 0;
    gt_RelamyCaveExit = TriggerCreate("gt_RelamyCaveExit_Func");
    TriggerAddEventUnitRegion(gt_RelamyCaveExit, null, RegionFromId(261), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Infestation Spawn Trigger
//--------------------------------------------------------------------------------------------------
bool gt_SetInfestationSpawnTrigger_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_infestationSpawnTrigger[0] = gt_SpawnEnemiesVerbotenInfestationPlayer1;
    gv_infestationSpawnTrigger[1] = gt_SpawnEnemiesVerbotenInfestationPlayer2;
    gv_infestationSpawnTrigger[2] = gt_SpawnEnemiesVerbotenInfestationPlayer3;
    gv_infestationSpawnTrigger[3] = gt_SpawnEnemiesVerbotenInfestationPlayer4;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetInfestationSpawnTrigger_Init () {
    gt_SetInfestationSpawnTrigger = TriggerCreate("gt_SetInfestationSpawnTrigger_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Verboten Infestation Enter
//--------------------------------------------------------------------------------------------------
bool gt_VerbotenInfestationEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    TriggerExecute(gv_infestationSpawnTrigger[lv_triggeringPlayerIndex], true, true);
    PlayerGroupAdd(gv_playersinInfestation, UnitGetOwner(EventUnit()));
    gv_verbotenInfestationSpawned[lv_triggeringPlayerIndex] = true;
    PlayerSetToDLighting(UnitGetOwner(EventUnit()), "Char");
    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "InfestationTheme", c_soundtrackCueAny, 0, false);
    CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(64)), 0.0, -1, 10, false);
    UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(64)), false);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    //gv_locationText[lv_triggeringPlayerIndex] = "Infestation";
        gv_locationString[lv_triggeringPlayerIndex] = "Infestation";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    gv_respawnPoint[lv_triggeringPlayerIndex] = RegionGetCenter(RegionFromId(64));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VerbotenInfestationEnter_Init () {
    gt_VerbotenInfestationEnter = TriggerCreate("gt_VerbotenInfestationEnter_Func");
    TriggerAddEventUnitRegion(gt_VerbotenInfestationEnter, null, RegionFromId(61), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Verboten Infestation Exit
//--------------------------------------------------------------------------------------------------
bool gt_VerbotenInfestationExit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    PlayerGroupRemove(gv_playersinInfestation, UnitGetOwner(EventUnit()));
    CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(62)), 0.0, -1, 10, false);
    PlayerSetToDLighting(UnitGetOwner(EventUnit()), "Korhal");
    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "VerbotenTheme", c_soundtrackCueAny, 0, false);
    UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(62)), false);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    //gv_locationText[lv_triggeringPlayerIndex] = "Verboten Forest";
        gv_locationString[lv_triggeringPlayerIndex] = "Verboten Forest";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    gv_respawnPoint[lv_triggeringPlayerIndex] = PointFromId(1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VerbotenInfestationExit_Init () {
    gt_VerbotenInfestationExit = TriggerCreate("gt_VerbotenInfestationExit_Func");
    TriggerAddEventUnitRegion(gt_VerbotenInfestationExit, null, RegionFromId(63), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Blizzard Freeze Chance
//--------------------------------------------------------------------------------------------------
bool gt_BlizzardFreezeChance_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((RandomFixed(0.0, 100.0) <= (0.5 * UnitAbilityGetLevel(EventUnitDamageSourceUnit(), "Blizzard")))) {
        UnitBehaviorAdd(EventUnit(), "Frozen", EventUnitDamageSourceUnit(), 1);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BlizzardFreezeChance_Init () {
    gt_BlizzardFreezeChance = TriggerCreate("gt_BlizzardFreezeChance_Func");
    TriggerAddEventUnitDamaged(gt_BlizzardFreezeChance, null, c_unitDamageTypeSpell, c_unitDamageNonFatal, "BlizzardDamage");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Fireball
//--------------------------------------------------------------------------------------------------
bool gt_LearnFireball_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.fireball = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "Fireball");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnFireball_Init () {
    gt_LearnFireball = TriggerCreate("gt_LearnFireball_Func");
    TriggerAddEventUnitAbility(gt_LearnFireball, null, AbilityCommand("LearnSkillsFire", 0), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Fireclaws
//--------------------------------------------------------------------------------------------------
bool gt_LearnFireclaws_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.fireClaw = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "FireClaws");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnFireclaws_Init () {
    gt_LearnFireclaws = TriggerCreate("gt_LearnFireclaws_Func");
    TriggerAddEventUnitAbility(gt_LearnFireclaws, null, AbilityCommand("LearnSkillsFire", 1), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Flameegg
//--------------------------------------------------------------------------------------------------
bool gt_LearnFlameegg_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.flameEgg = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "FlameEgg");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnFlameegg_Init () {
    gt_LearnFlameegg = TriggerCreate("gt_LearnFlameegg_Func");
    TriggerAddEventUnitAbility(gt_LearnFlameegg, null, AbilityCommand("LearnSkillsFire", 2), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Inferno
//--------------------------------------------------------------------------------------------------
bool gt_LearnInferno_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.inferno = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "Inferno");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnInferno_Init () {
    gt_LearnInferno = TriggerCreate("gt_LearnInferno_Func");
    TriggerAddEventUnitAbility(gt_LearnInferno, null, AbilityCommand("LearnSkillsFire", 3), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Nova
//--------------------------------------------------------------------------------------------------
bool gt_LearnNova_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.nova = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "Nova");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnNova_Init () {
    gt_LearnNova = TriggerCreate("gt_LearnNova_Func");
    TriggerAddEventUnitAbility(gt_LearnNova, null, AbilityCommand("LearnSkillsFire", 4), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Frostspike
//--------------------------------------------------------------------------------------------------
bool gt_LearnFrostspike_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.frostSpike = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "FrostSpike");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnFrostspike_Init () {
    gt_LearnFrostspike = TriggerCreate("gt_LearnFrostspike_Func");
    TriggerAddEventUnitAbility(gt_LearnFrostspike, null, AbilityCommand("LearnSkillsIce", 0), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Blizzard
//--------------------------------------------------------------------------------------------------
bool gt_LearnBlizzard_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.blizzard = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "Blizzard");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnBlizzard_Init () {
    gt_LearnBlizzard = TriggerCreate("gt_LearnBlizzard_Func");
    TriggerAddEventUnitAbility(gt_LearnBlizzard, null, AbilityCommand("LearnSkillsIce", 1), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Subzero
//--------------------------------------------------------------------------------------------------
bool gt_LearnSubzero_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.subzero = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "SubZero");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnSubzero_Init () {
    gt_LearnSubzero = TriggerCreate("gt_LearnSubzero_Func");
    TriggerAddEventUnitAbility(gt_LearnSubzero, null, AbilityCommand("LearnSkillsIce", 2), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Frozenarmor
//--------------------------------------------------------------------------------------------------
bool gt_LearnFrozenarmor_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.frozenArmour = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "FrozenArmor");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnFrozenarmor_Init () {
    gt_LearnFrozenarmor = TriggerCreate("gt_LearnFrozenarmor_Func");
    TriggerAddEventUnitAbility(gt_LearnFrozenarmor, null, AbilityCommand("LearnSkillsIce", 3), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Check Player is not eveolved
//--------------------------------------------------------------------------------------------------
bool gt_CheckPlayerisnoteveolved_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!gv_playersSetUp) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        if ((UnitLevel(gv_players[lv_pPI].dragon) == 25) && (UnitGetType(gv_players[lv_pPI].dragon) == "BabyDragon")) {
            gf_EvolvetoTeen(PlayerGroupLoopCurrent());
        }
        if ((UnitLevel(gv_players[lv_pPI].dragon) == 50) && (UnitGetType(gv_players[lv_pPI].dragon) == "TeenDragon")) {
            gf_EvolvetoAdult(PlayerGroupLoopCurrent());
        }
        if ((UnitLevel(gv_players[lv_pPI].dragon) == 75) && (UnitGetType(gv_players[lv_pPI].dragon) == "AdultDragon")) {
            gf_EvolvetoMaster(PlayerGroupLoopCurrent());
        }
        if ((UnitLevel(gv_players[lv_pPI].dragon) == 100) && (UnitGetType(gv_players[lv_pPI].dragon) == "MasterDragon")) {
            gf_EvolvetoLegendary(PlayerGroupLoopCurrent());
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CheckPlayerisnoteveolved_Init () {
    gt_CheckPlayerisnoteveolved = TriggerCreate("gt_CheckPlayerisnoteveolved_Func");
    TriggerAddEventTimePeriodic(gt_CheckPlayerisnoteveolved, 10.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dummy Dies
//--------------------------------------------------------------------------------------------------
bool gt_DummyDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DragonDummy"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitRemove(EventUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DummyDies_Init () {
    gt_DummyDies = TriggerCreate("gt_DummyDies_Func");
    TriggerAddEventUnitDied(gt_DummyDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Revive Dragon (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_ReviveDragonNormal_Func (bool testConds, bool runActions) {
    int autoC8EE7902_ae;
    int autoC8EE7902_ai;
    // Variable Declarations
    int lv_levelCountdown;
    fixed lv_maxExp;
    int lv_tempAgility;
    int lv_tempDexterity;
    int lv_tempIntelligence;
    int lv_tempStrength;
    int lv_tempVitality;
    int lv_importantPlayerIndex;
    int lv_importantPlayer;
    int lv_strengthoftheDragon;
    int lv_mindoftheDragon;
    int lv_powerOverwhelming;
    int lv_rage;
    int lv_vampiricTendencies;
    int lv_zeal;
    int lv_n;
    unit lv_revenge;
    string gv_NameOfUnitThatKilledDragon;
    point lv_deadpoint;
    int lv_deathPlayer;
    
    // Variable Initialization
    gv_NameOfUnitThatKilledDragon = TextToString(UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())));
    // Conditions
    if (testConds) {
        if (!gv_playersSetUp) {
            return false;
        }
        if (UnitGetOwner(libNtve_gf_KillingUnit()) != 16) {
            if (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(libNtve_gf_KillingUnit()))) {
                return false;
            }
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_ShowHideBossBar(false, lv_importantPlayer);
    libNtve_gf_ShowHideBossBar(false, (lv_importantPlayer + 4));
    libNtve_gf_ShowHideBossBar(false, (lv_importantPlayer + 8));
    if (!gv_dragonDying[(UnitGetOwner(EventUnit()) - 1)]) {
        lv_importantPlayer = UnitGetOwner(EventUnit());
        lv_importantPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
        lv_deathPlayer = UnitGetOwner(libNtve_gf_KillingUnit());
        lv_deadpoint = UnitGetPosition(EventUnit());
        gv_gold[lv_importantPlayerIndex] = PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals);
        lv_levelCountdown = gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.level;
        lv_levelCountdown = gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.level;
        lv_levelCountdown = (lv_levelCountdown - 1);
        lv_tempVitality = gv_players[lv_importantPlayerIndex].stats.vitality;
        lv_tempStrength = gv_players[lv_importantPlayerIndex].stats.strength;
        lv_tempIntelligence = gv_players[lv_importantPlayerIndex].stats.intelligence;
        lv_tempDexterity = gv_players[lv_importantPlayerIndex].stats.dexterity;
        lv_tempAgility = gv_players[lv_importantPlayerIndex].stats.agility;
        while ((lv_levelCountdown > 0)) {
            lv_maxExp += (lv_levelCountdown * 100.0);
            lv_levelCountdown = (lv_levelCountdown - 1);
        }
        if (gv_facetofRevenge[lv_importantPlayerIndex] && (UnitGetOwner(libNtve_gf_KillingUnit()) != 16)) {
            libNtve_gf_UnitCreateFacingPoint(1, "DragonDummy", c_unitCreateIgnorePlacement, lv_importantPlayer, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
            lv_revenge = UnitLastCreated();
            UnitBehaviorAdd(lv_revenge, "Intelligence", EventUnit(), 500);
            UnitAbilityChangeLevel(lv_revenge, "Nova", 20);
            UnitAbilityEnable(lv_revenge, "Nova", true);
            UnitIssueOrder(lv_revenge, Order(AbilityCommand("Nova", 0)), c_orderQueueReplace);
        }
        libNtve_gf_ShowHideBossBar(false, lv_importantPlayer);
        SoundPlay(SoundLink("DragonDeath", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
        if(gv_NameOfUnitThatKilledDragon == "Magical Demonic Sheep"){
            TimerStart(gv_dyingTimer[lv_importantPlayerIndex], 5.0, false, c_timeReal);
            TimerWindowCreate(gv_dyingTimer[lv_importantPlayerIndex], StringExternal("Slipping back..."), true, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CCBC876F"));
            gv_dyingTimerWindow[lv_importantPlayerIndex] = TimerWindowLastCreated();
            TimerWindowShow(gv_dyingTimerWindow[lv_importantPlayerIndex], PlayerGroupAll(), false);
            TimerWindowShow(gv_dyingTimerWindow[lv_importantPlayerIndex], PlayerGroupSingle(lv_importantPlayer), true);
            libNtve_gf_WaitForTimer(gv_dyingTimer[lv_importantPlayerIndex], 0.0, false);
            TimerWindowDestroy(gv_dyingTimerWindow[lv_importantPlayerIndex]);
        }else{
        
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lv_importantPlayer) + (StringExternal("Param/Value/58B61D3F") + (IntToText((gv_players[lv_importantPlayerIndex].stats.level - 0)) + ((StringExternal("Param/Value/37C93D65") + UnitTypeGetName(UnitGetType(EventUnit()))) + (StringExternal("Param/Value/79A9A1A7") + UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit()))))))));
        if (gv_ringofQuickening[lv_importantPlayerIndex]) {
            TimerStart(gv_dyingTimer[lv_importantPlayerIndex], 15.0, false, c_timeReal);
            TimerWindowCreate(gv_dyingTimer[lv_importantPlayerIndex], StringExternal("Param/Value/976FC4D2"), true, false);
            gv_dyingTimerWindow[lv_importantPlayerIndex] = TimerWindowLastCreated();
            TimerWindowShow(gv_dyingTimerWindow[lv_importantPlayerIndex], PlayerGroupAll(), false);
            TimerWindowShow(gv_dyingTimerWindow[lv_importantPlayerIndex], PlayerGroupSingle(lv_importantPlayer), true);
            libNtve_gf_WaitForTimer(gv_dyingTimer[lv_importantPlayerIndex], 0.0, false);
            TimerWindowDestroy(gv_dyingTimerWindow[lv_importantPlayerIndex]);
        }
        else {
            TimerStart(gv_dyingTimer[lv_importantPlayerIndex], 30.0, false, c_timeReal);
            TimerWindowCreate(gv_dyingTimer[lv_importantPlayerIndex], StringExternal("Param/Value/E2363CFF"), true, false);
            gv_dyingTimerWindow[lv_importantPlayerIndex] = TimerWindowLastCreated();
            TimerWindowShow(gv_dyingTimerWindow[lv_importantPlayerIndex], PlayerGroupAll(), false);
            TimerWindowShow(gv_dyingTimerWindow[lv_importantPlayerIndex], PlayerGroupSingle(lv_importantPlayer), true);
            libNtve_gf_WaitForTimer(gv_dyingTimer[lv_importantPlayerIndex], 0.0, false);
            TimerWindowDestroy(gv_dyingTimerWindow[lv_importantPlayerIndex]);
        }
    }
       
            if (!gv_crystalofRebirth[lv_importantPlayerIndex]) {
                PlayerModifyPropertyInt(lv_importantPlayer, c_playerPropMinerals, c_playerPropOperSubtract, (gv_gold[lv_importantPlayerIndex] / 20));
                UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, (StringExternal("Param/Value/084751AF") + (IntToText((gv_gold[lv_importantPlayerIndex] / 20)) + StringExternal("Param/Value/D0C92283"))));
            }
            else {
                PlayerModifyPropertyInt(lv_importantPlayer, c_playerPropMinerals, c_playerPropOperSubtract, (gv_gold[lv_importantPlayerIndex] / 40));
                UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, (StringExternal("Param/Value/0ED69490") + (IntToText((gv_gold[lv_importantPlayerIndex] / 40)) + StringExternal("Param/Value/1B6BBEA5"))));
                }
        
        if (gv_jewelofReturn[lv_importantPlayerIndex] && !UnitGroupHasUnit(gv_unitsthatdidDamagetoSyrital, gv_players[lv_importantPlayerIndex].dragon) && !UnitGroupHasUnit(gv_unitsthatdidDamagetoSremagsi, gv_players[lv_importantPlayerIndex].dragon) && !UnitGroupHasUnit(gv_unitsthatdidDamagetoMachinaDePlagam, gv_players[lv_importantPlayerIndex].dragon) && !PlayerGroupHasPlayer(gv_playersinBattlewithGuardians, lv_importantPlayer) && !PlayerGroupHasPlayer(gv_playersInBattleWithZauberer1stForm, lv_importantPlayer) && !PlayerGroupHasPlayer(gv_playersInBattleWithZauberer2ndForm, lv_importantPlayer) && !PlayerGroupHasPlayer(gv_playersInBioDome, lv_importantPlayer) && !PlayerGroupHasPlayer(gv_playersintheArena, lv_importantPlayer) && (lv_deathPlayer != 16)) {
            UnitSetPosition(gv_players[lv_importantPlayerIndex].dragon, lv_deadpoint, false);
            UnitRevive(gv_players[lv_importantPlayerIndex].dragon);
            libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
            libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
            UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropLifePercent, 50.0);
            UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropEnergyPercent, 0.0);
            UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropShields, 0.0);
            UnitSetPosition(gv_players[lv_importantPlayerIndex].dragon, lv_deadpoint, false);
        }
        else {
            UnitSetPosition(gv_players[lv_importantPlayerIndex].dragon, gv_respawnPoint[lv_importantPlayerIndex], false);
            UnitRevive(gv_players[lv_importantPlayerIndex].dragon);
            libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
            libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
            UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropLifePercent, 50.0);
            UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropEnergyPercent, 0.0);
            UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropShields, 0.0);
            UnitSetPosition(gv_players[lv_importantPlayerIndex].dragon, gv_respawnPoint[lv_importantPlayerIndex], false);
        }
        CameraPan(lv_importantPlayer, UnitGetPosition(gv_players[lv_importantPlayerIndex].dragon), 0.0, -1, 10, false);
        if (gv_stoneofProtection[lv_importantPlayerIndex]) {
            UnitGroupLoopBegin(UnitGroupAlliance(lv_importantPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[lv_importantPlayerIndex].dragon), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Paused", gv_players[lv_importantPlayerIndex].dragon, 1);
            }
            UnitGroupLoopEnd();
        }
        while ((lv_tempVitality > 0)) {
            UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "AddVitality", lv_importantPlayer, 1);
            lv_tempVitality = (lv_tempVitality - 1);
        }
        while ((lv_tempStrength > 0)) {
            UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "AddStrength", lv_importantPlayer, 1);
            lv_tempStrength = (lv_tempStrength - 1);
        }
        while ((lv_tempIntelligence > 0)) {
            UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "AddIntelligence", lv_importantPlayer, 1);
            lv_tempIntelligence = (lv_tempIntelligence - 1);
        }
        while ((lv_tempDexterity > 0)) {
            UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "AddDexterity", lv_importantPlayer, 1);
            lv_tempDexterity = (lv_tempDexterity - 1);
        }
        while ((lv_tempAgility > 0)) {
            UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "AddAgility", lv_importantPlayer, 1);
            lv_tempAgility = (lv_tempAgility - 1);
        }
        autoC8EE7902_ae = gv_players[lv_importantPlayerIndex].stats.reborn.count;
        autoC8EE7902_ai = 1;
        lv_n = 1;
        for ( ; ( (autoC8EE7902_ai >= 0 && lv_n <= autoC8EE7902_ae) || (autoC8EE7902_ai <= 0 && lv_n >= autoC8EE7902_ae) ) ; lv_n += autoC8EE7902_ai ) {
            UnitBehaviorAdd(gv_players[lv_importantPlayerIndex].dragon, "BlessingofDrache", gv_players[lv_importantPlayerIndex].dragon, 1);
        }
        if (gv_fireSkin[lv_importantPlayerIndex]) {
            UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "FireSkin", lv_importantPlayer, 1);
        }
        if (gv_allSeeingEye[lv_importantPlayerIndex]) {
            UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "AllSeeingEye", lv_importantPlayer, 1);
        }
        gf_ReapplyBuffs(lv_importantPlayer);
        BankValueSetFromUnit(gv_players[lv_importantPlayerIndex].banks.dragonBank, "Dragon", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].dragon);
        UnitIssueOrder(gv_players[lv_importantPlayerIndex].dragon, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
        libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Full);
        libNtve_gf_UnitRemoveCooldown(gv_players[lv_importantPlayerIndex].dragon, gv_aSPCooldownName);
        gv_autosavePrevention[lv_importantPlayerIndex] = false;
        gf_StatCheck(lv_importantPlayer);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReviveDragonNormal_Init () {
    gt_ReviveDragonNormal = TriggerCreate("gt_ReviveDragonNormal_Func");
    TriggerAddEventUnitDied(gt_ReviveDragonNormal, UnitRefFromVariable("gv_players[0].dragon"));
    TriggerAddEventUnitDied(gt_ReviveDragonNormal, UnitRefFromVariable("gv_players[1].dragon"));
    TriggerAddEventUnitDied(gt_ReviveDragonNormal, UnitRefFromVariable("gv_players[2].dragon"));
    TriggerAddEventUnitDied(gt_ReviveDragonNormal, UnitRefFromVariable("gv_players[3].dragon"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Revive Dragon (PvP)
//--------------------------------------------------------------------------------------------------
bool gt_ReviveDragonPvP_Func (bool testConds, bool runActions) {
    int auto7DAAFB49_ae;
    int auto7DAAFB49_ai;
    // Variable Declarations
    int lv_levelCountdown;
    fixed lv_maxExp;
    int lv_tempAgility;
    int lv_tempDexterity;
    int lv_tempIntelligence;
    int lv_tempStrength;
    int lv_tempVitality;
    int lv_importantPlayerIndex;
    int lv_importantPlayer;
    int lv_strengthoftheDragon;
    int lv_mindoftheDragon;
    int lv_powerOverwhelming;
    int lv_rage;
    int lv_vampiricTendencies;
    int lv_zeal;
    int lv_n;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (
            !gv_playersSetUp 
            || UnitGetOwner(libNtve_gf_KillingUnit()) == 16 
            || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(libNtve_gf_KillingUnit()))
        ) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (!gv_dragonDying[(UnitGetOwner(EventUnit()) - 1)]) {
        lv_importantPlayer = UnitGetOwner(EventUnit());
        lv_importantPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
        libNtve_gf_ShowHideBossBar(false, lv_importantPlayer);
        libNtve_gf_ShowHideBossBar(false, (lv_importantPlayer + 4));
        libNtve_gf_ShowHideBossBar(false, (lv_importantPlayer + 8));
        SoundPlay(SoundLink("DragonDeath", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
        lv_levelCountdown = gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.level;
        while ((lv_levelCountdown > 0)) {
            lv_maxExp += (lv_levelCountdown * 100.0);
            lv_levelCountdown = (lv_levelCountdown - 1);
        }
        UnitSetPosition(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, PointFromId(2508), false);
        UnitRevive(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon);
        libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 0.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 0.0);
        UnitSetPosition(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, gv_respawnPoint[lv_importantPlayerIndex], false);
        CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon), 0.0, -1, 10, false);
        lv_levelCountdown = gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.level;
        lv_levelCountdown = (lv_levelCountdown - 1);
        lv_tempVitality = gv_players[lv_importantPlayerIndex].stats.vitality;
        lv_tempStrength = gv_players[lv_importantPlayerIndex].stats.strength;
        lv_tempIntelligence = gv_players[lv_importantPlayerIndex].stats.intelligence;
        lv_tempDexterity = gv_players[lv_importantPlayerIndex].stats.dexterity;
        lv_tempAgility = gv_players[lv_importantPlayerIndex].stats.agility;
        while ((lv_tempVitality > 0)) {
            UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "AddVitality", lv_importantPlayer, 1);
            lv_tempVitality = (lv_tempVitality - 1);
        }
        while ((lv_tempStrength > 0)) {
            UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "AddStrength", lv_importantPlayer, 1);
            lv_tempStrength = (lv_tempStrength - 1);
        }
        while ((lv_tempIntelligence > 0)) {
            UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "AddIntelligence", lv_importantPlayer, 1);
            lv_tempIntelligence = (lv_tempIntelligence - 1);
        }
        while ((lv_tempDexterity > 0)) {
            UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "AddDexterity", lv_importantPlayer, 1);
            lv_tempDexterity = (lv_tempDexterity - 1);
        }
        while ((lv_tempAgility > 0)) {
            UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "AddAgility", lv_importantPlayer, 1);
            lv_tempAgility = (lv_tempAgility - 1);
        }
        auto7DAAFB49_ae = gv_players[lv_importantPlayerIndex].stats.reborn.count;
        auto7DAAFB49_ai = 1;
        lv_n = 1;
        for ( ; ( (auto7DAAFB49_ai >= 0 && lv_n <= auto7DAAFB49_ae) || (auto7DAAFB49_ai <= 0 && lv_n >= auto7DAAFB49_ae) ) ; lv_n += auto7DAAFB49_ai ) {
            UnitBehaviorAdd(gv_players[lv_importantPlayerIndex].dragon, "BlessingofDrache", gv_players[lv_importantPlayerIndex].dragon, 1);
        }
        if (gv_fireSkin[lv_importantPlayerIndex]) {
            UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "FireSkin", lv_importantPlayer, 1);
        }
        if (gv_allSeeingEye[lv_importantPlayerIndex]) {
            UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, "AllSeeingEye", lv_importantPlayer, 1);
        }
        gf_ReapplyBuffs(UnitGetOwner(EventUnit()));
        BankValueSetFromUnit(gv_players[lv_importantPlayerIndex].banks.dragonBank, "Dragon", PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon);
        UnitIssueOrder(gv_players[lv_importantPlayerIndex].dragon, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
        libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Full);
        libNtve_gf_UnitRemoveCooldown(gv_players[lv_importantPlayerIndex].dragon, gv_aSPCooldownName);
        gv_autosavePrevention[lv_importantPlayerIndex] = false;
        gf_StatCheck(lv_importantPlayer);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReviveDragonPvP_Init () {
    gt_ReviveDragonPvP = TriggerCreate("gt_ReviveDragonPvP_Func");
    TriggerAddEventUnitDied(gt_ReviveDragonPvP, UnitRefFromVariable("gv_players[0].dragon"));
    TriggerAddEventUnitDied(gt_ReviveDragonPvP, UnitRefFromVariable("gv_players[1].dragon"));
    TriggerAddEventUnitDied(gt_ReviveDragonPvP, UnitRefFromVariable("gv_players[2].dragon"));
    TriggerAddEventUnitDied(gt_ReviveDragonPvP, UnitRefFromVariable("gv_players[3].dragon"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Up Attribute Dialog
//--------------------------------------------------------------------------------------------------
bool gt_SetUpAttributeDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    DialogCreate(200, 65, c_anchorBottomRight, 425, 215, true);
    gv_players[0].stats.attributeDialog.state = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_players[0].stats.attributeDialog.state, 200, 30, c_anchorTop, 25, 5, StringExternal("Param/Value/E8D04C14"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_players[0].stats.attributeDialog.state, 200, 25, c_anchorBottom, 90, 15, StringToText(gv_attributeText[0]), Color(22*100/255,128*100/255,0), false, 2.0);
    gv_players[0].stats.attributeDialog.textBox = DialogControlLastCreated();
    DialogSetVisible(gv_players[0].stats.attributeDialog.state, PlayerGroupSingle(1), true);
    DialogCreate(200, 65, c_anchorBottomRight, 400, 200, true);
    gv_players[1].stats.attributeDialog.state = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_players[1].stats.attributeDialog.state, 200, 30, c_anchorTop, 25, 5, StringExternal("Param/Value/51EFD861"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_players[1].stats.attributeDialog.state, 200, 25, c_anchorBottom, 90, 15, StringToText(gv_attributeText[1]), Color(22*100/255,128*100/255,0), false, 2.0);
    gv_players[1].stats.attributeDialog.textBox = DialogControlLastCreated();
    DialogSetVisible(gv_players[1].stats.attributeDialog.state, PlayerGroupSingle(2), true);
    DialogCreate(200, 65, c_anchorBottomRight, 400, 200, true);
    gv_players[2].stats.attributeDialog.state = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_players[2].stats.attributeDialog.state, 200, 30, c_anchorTop, 25, 5, StringExternal("Param/Value/4872BA9E"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_players[2].stats.attributeDialog.state, 200, 25, c_anchorBottom, 90, 15, StringToText(gv_attributeText[2]), Color(22*100/255,128*100/255,0), false, 2.0);
    gv_players[2].stats.attributeDialog.textBox = DialogControlLastCreated();
    DialogSetVisible(gv_players[2].stats.attributeDialog.state, PlayerGroupSingle(3), true);
    DialogCreate(200, 65, c_anchorBottomRight, 400, 200, true);
    gv_players[3].stats.attributeDialog.state = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_players[3].stats.attributeDialog.state, 200, 30, c_anchorTop, 25, 5, StringExternal("Param/Value/9EA6C311"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_players[3].stats.attributeDialog.state, 200, 25, c_anchorBottom, 90, 15, StringToText(gv_attributeText[3]), Color(22*100/255,128*100/255,0), false, 2.0);
    gv_players[3].stats.attributeDialog.textBox = DialogControlLastCreated();
    DialogSetVisible(gv_players[3].stats.attributeDialog.state, PlayerGroupSingle(4), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetUpAttributeDialog_Init () {
    gt_SetUpAttributeDialog = TriggerCreate("gt_SetUpAttributeDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Level 0 Check
//--------------------------------------------------------------------------------------------------
bool gt_Level0Check_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) ) {
            return false;
        }
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent) < 0.0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetType(EventUnit()) == "MasterDragon")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLevel, 99.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropXP, 499999.0);
    }
    if ((UnitGetType(EventUnit()) == "LegendaryDragon")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLevel, 100.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropXP, 0.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Level0Check_Init () {
    gt_Level0Check = TriggerCreate("gt_Level0Check_Func");
    TriggerAddEventUnitGainExperience(gt_Level0Check, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Level Up
//--------------------------------------------------------------------------------------------------
bool gt_LevelUp_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (gv_evolving[(UnitGetOwner(EventUnit()) - 1)]) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_LevelUp(UnitGetOwner(EventUnit()));
    gf_StatCheck(UnitGetOwner(EventUnit()));
    if ((UnitLevel(EventUnit()) == 25) && ((UnitGetType(EventUnit()) == "BabyDragon") || (UnitGetType(EventUnit()) == "BabyIceDragon"))) {
        gf_EvolvetoTeen(UnitGetOwner(EventUnit()));
    }
    else {
        if ((UnitLevel(EventUnit()) == 50) && ((UnitGetType(EventUnit()) == "TeenDragon") || (UnitGetType(EventUnit()) == "TeenIceDragon"))) {
            gf_EvolvetoAdult(UnitGetOwner(EventUnit()));
        }
        else {
            if ((UnitLevel(EventUnit()) == 75) && ((UnitGetType(EventUnit()) == "AdultDragon") || (UnitGetType(EventUnit()) == "AdultIceDragon"))) {
                gf_EvolvetoMaster(UnitGetOwner(EventUnit()));
            }
            else {
                if ((UnitLevel(EventUnit()) == 100) && ((UnitGetType(EventUnit()) == "MasterDragon") || (UnitGetType(EventUnit()) == "MasterIceDragon"))) {
                    gf_EvolvetoLegendary(UnitGetOwner(EventUnit()));
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LevelUp_Init () {
    gt_LevelUp = TriggerCreate("gt_LevelUp_Func");
    TriggerAddEventUnitGainLevel(gt_LevelUp, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Evolution Check
//--------------------------------------------------------------------------------------------------
bool gt_EvolutionCheck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitLevel(EventUnit()) == 25) && ((UnitGetType(EventUnit()) == "BabyDragon") || (UnitGetType(EventUnit()) == "BabyIceDragon"))) {
        gf_EvolvetoTeen(UnitGetOwner(EventUnit()));
    }
    else {
        if ((UnitLevel(EventUnit()) == 50) && ((UnitGetType(EventUnit()) == "TeenDragon") || (UnitGetType(EventUnit()) == "TeenIceDragon"))) {
            gf_EvolvetoAdult(UnitGetOwner(EventUnit()));
        }
        else {
            if ((UnitLevel(EventUnit()) == 75) && ((UnitGetType(EventUnit()) == "AdultDragon") || (UnitGetType(EventUnit()) == "AdultIceDragon"))) {
                gf_EvolvetoMaster(UnitGetOwner(EventUnit()));
            }
            else {
                if ((UnitLevel(EventUnit()) == 100) && ((UnitGetType(EventUnit()) == "MasterDragon") || (UnitGetType(EventUnit()) == "MasterIceDragon"))) {
                    gf_EvolvetoLegendary(UnitGetOwner(EventUnit()));
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EvolutionCheck_Init () {
    gt_EvolutionCheck = TriggerCreate("gt_EvolutionCheck_Func");
    TriggerAddEventUnitRegion(gt_EvolutionCheck, null, RegionFromId(258), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Agility+1
//--------------------------------------------------------------------------------------------------
bool gt_Agility1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints > 0.0)) {
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints - 1.0);
        BankValueSetFromFixed(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, "AP", PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.attributePoints);
        gv_attributeText[lv_triggeringPlayerIndex] = FixedToString(gv_players[lv_triggeringPlayerIndex].stats.attributePoints, 0);
        libNtve_gf_SetDialogItemText(gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributeDialog.textBox, StringToText(gv_attributeText[(UnitGetOwner(EventUnit()) - 1)]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
        UnitBehaviorAddPlayer(EventUnit(), "AddAgility", UnitGetOwner(EventUnit()), 1);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.agility = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.agility + 1);
        if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints == 0.0)) {
            gf_HideStats(EventUnit());
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_triggeringPlayer), c_messageAreaError, StringExternal("Param/Value/EAFC558B"));
    }
    if ((gv_players[lv_triggeringPlayerIndex].stats.agility == 100)) {
        UnitAbilityShow(EventUnit(), "Agility1", false);
    }
    while (gv_players[lv_triggeringPlayerIndex].banks.accessing) {
        Wait(1.0, c_timeGame);
    }
    gv_players[lv_triggeringPlayerIndex].banks.accessing = true;
    BankValueSetFromInt(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, "Ag", PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.agility);
    gv_players[lv_triggeringPlayerIndex].banks.accessing = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Agility1_Init () {
    gt_Agility1 = TriggerCreate("gt_Agility1_Func");
    TriggerAddEventUnitAbility(gt_Agility1, null, AbilityCommand("Agility1", 0), c_abilEffectStageFinish, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dexterity+1
//--------------------------------------------------------------------------------------------------
bool gt_Dexterity1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints > 0.0)) {
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints - 1.0);
        BankValueSetFromFixed(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, "AP", PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.attributePoints);
        gv_attributeText[lv_triggeringPlayerIndex] = FixedToString(gv_players[lv_triggeringPlayerIndex].stats.attributePoints, 0);
        libNtve_gf_SetDialogItemText(gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributeDialog.textBox, StringToText(gv_attributeText[(UnitGetOwner(EventUnit()) - 1)]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
        UnitBehaviorAddPlayer(EventUnit(), "AddDexterity", UnitGetOwner(EventUnit()), 1);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.dexterity = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.dexterity + 1);
        if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints == 0.0)) {
            gf_HideStats(EventUnit());
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_triggeringPlayer), c_messageAreaError, StringExternal("Param/Value/925025D3"));
    }
    while (gv_players[lv_triggeringPlayerIndex].banks.accessing) {
        Wait(1.0, c_timeGame);
    }
    gv_players[lv_triggeringPlayerIndex].banks.accessing = true;
    BankValueSetFromInt(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, "De", PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.dexterity);
    gv_players[lv_triggeringPlayerIndex].banks.accessing = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Dexterity1_Init () {
    gt_Dexterity1 = TriggerCreate("gt_Dexterity1_Func");
    TriggerAddEventUnitAbility(gt_Dexterity1, null, AbilityCommand("Dexterity1", 0), c_abilEffectStageFinish, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Intelligence+1
//--------------------------------------------------------------------------------------------------
bool gt_Intelligence1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints > 0.0)) {
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints - 1.0);
        BankValueSetFromFixed(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, "AP", PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.attributePoints);
        gv_attributeText[lv_triggeringPlayerIndex] = FixedToString(gv_players[lv_triggeringPlayerIndex].stats.attributePoints, 0);
        libNtve_gf_SetDialogItemText(gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributeDialog.textBox, StringToText(gv_attributeText[(UnitGetOwner(EventUnit()) - 1)]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
        UnitBehaviorAddPlayer(EventUnit(), "AddIntelligence", UnitGetOwner(EventUnit()), 1);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.intelligence = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.intelligence + 1);
        if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints == 0.0)) {
            gf_HideStats(EventUnit());
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaError, StringExternal("Param/Value/6DCD7D69"));
    }
    while (gv_players[lv_triggeringPlayerIndex].banks.accessing) {
        Wait(1.0, c_timeGame);
    }
    gv_players[lv_triggeringPlayerIndex].banks.accessing = true;
    BankValueSetFromInt(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, "Int", PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.intelligence);
    gv_players[lv_triggeringPlayerIndex].banks.accessing = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Intelligence1_Init () {
    gt_Intelligence1 = TriggerCreate("gt_Intelligence1_Func");
    TriggerAddEventUnitAbility(gt_Intelligence1, null, AbilityCommand("Intelligence1", 0), c_abilEffectStageFinish, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Strength+1
//--------------------------------------------------------------------------------------------------
bool gt_Strength1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints > 0.0)) {
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints - 1.0);
        BankValueSetFromFixed(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, "AP", PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.attributePoints);
        gv_attributeText[lv_triggeringPlayerIndex] = FixedToString(gv_players[lv_triggeringPlayerIndex].stats.attributePoints, 0);
        libNtve_gf_SetDialogItemText(gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributeDialog.textBox, StringToText(gv_attributeText[(UnitGetOwner(EventUnit()) - 1)]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
        UnitBehaviorAddPlayer(EventUnit(), "AddStrength", UnitGetOwner(EventUnit()), 1);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.strength = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.strength + 1);
        if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints == 0.0)) {
            gf_HideStats(EventUnit());
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_triggeringPlayer), c_messageAreaError, StringExternal("Param/Value/E289DC4A"));
    }
    while (gv_players[lv_triggeringPlayerIndex].banks.accessing) {
        Wait(1.0, c_timeGame);
    }
   
    gv_players[lv_triggeringPlayerIndex].banks.accessing = true;
    BankValueSetFromInt(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, "Str", PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.strength);
    gv_players[lv_triggeringPlayerIndex].banks.accessing = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Strength1_Init () {
    gt_Strength1 = TriggerCreate("gt_Strength1_Func");
    TriggerAddEventUnitAbility(gt_Strength1, null, AbilityCommand("Strength1", 0), c_abilEffectStageFinish, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Vitality+1
//--------------------------------------------------------------------------------------------------
bool gt_Vitality1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints > 0.0)) {
        SoundPlay(SoundLink("UI_ChallengeCountdown", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints - 1.0);
        BankValueSetFromFixed(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, "AP", PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.attributePoints);
        gv_attributeText[lv_triggeringPlayerIndex] = FixedToString(gv_players[lv_triggeringPlayerIndex].stats.attributePoints, 0);
        libNtve_gf_SetDialogItemText(gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributeDialog.textBox, StringToText(gv_attributeText[(UnitGetOwner(EventUnit()) - 1)]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
        UnitBehaviorAddPlayer(EventUnit(), "AddVitality", UnitGetOwner(EventUnit()), 1);
        gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.vitality = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.vitality + 1);
        if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints == 0.0)) {
            gf_HideStats(EventUnit());
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_triggeringPlayer), c_messageAreaError, StringExternal("Param/Value/5188E700"));
    }
    while (gv_players[lv_triggeringPlayerIndex].banks.accessing) {
        Wait(1.0, c_timeGame);
    }
    gv_players[lv_triggeringPlayerIndex].banks.accessing = true;
    BankValueSetFromInt(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, "Vi", PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.vitality);
    gv_players[lv_triggeringPlayerIndex].banks.accessing = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Vitality1_Init () {
    gt_Vitality1 = TriggerCreate("gt_Vitality1_Func");
    TriggerAddEventUnitAbility(gt_Vitality1, null, AbilityCommand("Vitality1", 0), c_abilEffectStageFinish, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Buffs
//--------------------------------------------------------------------------------------------------
bool gt_UpdateBuffs_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_ReapplyBuffs(PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateBuffs_Init () {
    gt_UpdateBuffs = TriggerCreate("gt_UpdateBuffs_Func");
    TriggerAddEventTimePeriodic(gt_UpdateBuffs, 10.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Show Talents
//--------------------------------------------------------------------------------------------------
bool gt_ShowTalents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    lib1_gf_ShowHideTalentTree(lv_triggeringPlayer);
    gf_ReapplyBuffs(lv_triggeringPlayer);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShowTalents_Init () {
    gt_ShowTalents = TriggerCreate("gt_ShowTalents_Func");
    TriggerAddEventUnitAbility(gt_ShowTalents, null, AbilityCommand("Talents", 0), c_unitAbilStageExecute, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set isIdle On
//--------------------------------------------------------------------------------------------------
bool gt_SetisIdleOn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_isIdle[(UnitGetOwner(EventUnit()) - 1)] = true;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetisIdleOn_Init () {
    gt_SetisIdleOn = TriggerCreate("gt_SetisIdleOn_Func");
    TriggerAddEventUnitBecomesIdle(gt_SetisIdleOn, UnitRefFromVariable("gv_players[0].dragon"), true);
    TriggerAddEventUnitBecomesIdle(gt_SetisIdleOn, UnitRefFromVariable("gv_players[1].dragon"), true);
    TriggerAddEventUnitBecomesIdle(gt_SetisIdleOn, UnitRefFromVariable("gv_players[2].dragon"), true);
    TriggerAddEventUnitBecomesIdle(gt_SetisIdleOn, UnitRefFromVariable("gv_players[3].dragon"), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set isIdle Off
//--------------------------------------------------------------------------------------------------
bool gt_SetisIdleOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_isIdle[(UnitGetOwner(EventUnit()) - 1)] = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetisIdleOff_Init () {
    gt_SetisIdleOff = TriggerCreate("gt_SetisIdleOff_Func");
    TriggerAddEventUnitBecomesIdle(gt_SetisIdleOff, UnitRefFromVariable("gv_players[0].dragon"), false);
    TriggerAddEventUnitBecomesIdle(gt_SetisIdleOff, UnitRefFromVariable("gv_players[1].dragon"), false);
    TriggerAddEventUnitBecomesIdle(gt_SetisIdleOff, UnitRefFromVariable("gv_players[2].dragon"), false);
    TriggerAddEventUnitBecomesIdle(gt_SetisIdleOff, UnitRefFromVariable("gv_players[3].dragon"), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defend Yourself
//--------------------------------------------------------------------------------------------------
bool gt_DefendYourself_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!gv_isIdle[(UnitGetOwner(EventUnit()) - 1)]) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DefendYourself_Init () {
    gt_DefendYourself = TriggerCreate("gt_DefendYourself_Func");
    TriggerAddEventUnitAttacked2(gt_DefendYourself, UnitRefFromVariable("gv_players[0].dragon"), null);
    TriggerAddEventUnitAttacked2(gt_DefendYourself, UnitRefFromVariable("gv_players[1].dragon"), null);
    TriggerAddEventUnitAttacked2(gt_DefendYourself, UnitRefFromVariable("gv_players[2].dragon"), null);
    TriggerAddEventUnitAttacked2(gt_DefendYourself, UnitRefFromVariable("gv_players[3].dragon"), null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Frost Spike
//--------------------------------------------------------------------------------------------------
bool gt_FrostSpike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_CreateModelAtPoint("SelendisInterceptorAttackImpact", UnitGetPosition(EventUnit()));
    libNtve_gf_AttachModelToUnit(EventUnit(), "SelendisInterceptorAttackImpact", "Ref_Center");
    SoundPlayAtPoint(SoundLink("Bilestrider_AttackImpact", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FrostSpike_Init () {
    gt_FrostSpike = TriggerCreate("gt_FrostSpike_Func");
    TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel1");
    TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel10");
    TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel");
    TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel3");
    TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel4");
    TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel5");
    TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel6");
    TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel7");
    TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel8");
    TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel9");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Syrital - Talons Burning
//--------------------------------------------------------------------------------------------------
bool gt_SyritalTalonsBurning_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_RandomEffectonAttack(10.0, 1, "Burning2", EventUnit(), EventUnitDamageSourceUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyritalTalonsBurning_Init () {
    gt_SyritalTalonsBurning = TriggerCreate("gt_SyritalTalonsBurning_Func");
    TriggerAddEventUnitDamaged(gt_SyritalTalonsBurning, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "Talons2");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Robus - Spawn Allies
//--------------------------------------------------------------------------------------------------
bool gt_RobusSpawnAllies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnitDamageSourceUnit())) ) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGroupCount(UnitGroup("Karramarro", 15, RegionFromId(264), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0)) {
        gf_RandomlySpawnAllies((5.0 / UnitGroupCount(UnitGroup("Karramarro", 15, RegionFromId(264), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), 1, "Karramarro", EventUnit(), EventUnitDamageSourceUnit());
    }
    else {
        gf_RandomlySpawnAllies(10.0, 1, "Karramarro", EventUnit(), EventUnitDamageSourceUnit());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RobusSpawnAllies_Init () {
    gt_RobusSpawnAllies = TriggerCreate("gt_RobusSpawnAllies_Func");
    TriggerAddEventUnitDamaged(gt_RobusSpawnAllies, UnitRefFromVariable("gv_robus"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Robus - Carrion Needles Poison
//--------------------------------------------------------------------------------------------------
bool gt_RobusCarrionNeedlesPoison_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_RandomEffectonAttack(10.0, 1, "Poisoned", EventUnit(), EventUnitDamageSourceUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RobusCarrionNeedlesPoison_Init () {
    gt_RobusCarrionNeedlesPoison = TriggerCreate("gt_RobusCarrionNeedlesPoison_Func");
    TriggerAddEventUnitDamaged(gt_RobusCarrionNeedlesPoison, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "CarrionNeedles");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi - Tentacle Disorientation
//--------------------------------------------------------------------------------------------------
bool gt_SremagsiTentacleDisorientation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_RandomEffectonAttack(10.0, 1, "Disorientated", EventUnit(), EventUnitDamageSourceUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SremagsiTentacleDisorientation_Init () {
    gt_SremagsiTentacleDisorientation = TriggerCreate("gt_SremagsiTentacleDisorientation_Func");
    TriggerAddEventUnitDamaged(gt_SremagsiTentacleDisorientation, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "TenteclesDamage");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Carrion Needles Poison
//--------------------------------------------------------------------------------------------------
bool gt_HeroCarrionNeedlesPoison_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_RandomEffectonAttack(2.5, 1, "Poisoned", EventUnit(), EventUnitDamageSourceUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroCarrionNeedlesPoison_Init () {
    gt_HeroCarrionNeedlesPoison = TriggerCreate("gt_HeroCarrionNeedlesPoison_Func");
    TriggerAddEventUnitDamaged(gt_HeroCarrionNeedlesPoison, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "CarrionNeedles");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Sremagsi's Tentacles Disorientated
//--------------------------------------------------------------------------------------------------
bool gt_HeroSremagsisTentaclesDisorientated_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_RandomEffectonAttack(2.5, 1, "Poisoned", EventUnit(), EventUnitDamageSourceUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroSremagsisTentaclesDisorientated_Init () {
    gt_HeroSremagsisTentaclesDisorientated = TriggerCreate("gt_HeroSremagsisTentaclesDisorientated_Func");
    TriggerAddEventUnitDamaged(gt_HeroSremagsisTentaclesDisorientated, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "SremagsisTentacles");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Nosferatu's Logic
//--------------------------------------------------------------------------------------------------
bool gt_NosferatusLogic_Func (bool testConds, bool runActions) {
    int autoD08DB74B_val;
    // Variable Declarations
    int lv_randomNum;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomNum = RandomInt(0, 3);
    autoD08DB74B_val = lv_randomNum;
    if (autoD08DB74B_val == 0) {
        UnitIssueOrder(gv_nosferatu, Order(AbilityCommand("Nova", 0)), c_orderQueueReplace);
        UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueAddToEnd);
    }
    else if (autoD08DB74B_val == 1) {
        UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand("Inferno", 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
        UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueAddToEnd);
    }
    else if (autoD08DB74B_val == 2) {
        UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand("GravitonPrison", 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
        UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueAddToEnd);
    }
    else if (autoD08DB74B_val == 3) {
        UnitIssueOrder(gv_nosferatu, OrderTargetingPoint(AbilityCommand("HybridBlink", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueAddToEnd);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_NosferatusLogic_Init () {
    gt_NosferatusLogic = TriggerCreate("gt_NosferatusLogic_Func");
    TriggerEnable(gt_NosferatusLogic, false);
    TriggerAddEventTimePeriodic(gt_NosferatusLogic, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Nosferatu Dies
//--------------------------------------------------------------------------------------------------
bool gt_NosferatuDies_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_NosferatusLogic, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_NosferatuDies_Init () {
    gt_NosferatuDies = TriggerCreate("gt_NosferatuDies_Func");
    TriggerAddEventUnitDied(gt_NosferatuDies, UnitRefFromVariable("gv_nosferatu"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Nosferatu death count
//--------------------------------------------------------------------------------------------------
bool gt_Nosferatudeathcount_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(libNtve_gf_KillingUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_nosferatusDeathCount >= 10000)) {
        gv_nosferatusDeathCount = 0;
        libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
        libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
        libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
        libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
        libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
        libNtve_gf_UnitCreateFacingPoint(1, "Nosferatu", 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
        gv_nosferatu = UnitLastCreated();
        MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_nosferatu), 10.0, Color(25.10, 0.00, 0.00));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8234D839"));
        TriggerEnable(gt_NosferatusLogic, true);
    }
    else {
        gv_nosferatusDeathCount += 1;
    }
    gf_NosferatusRelic(UnitGetOwner(libNtve_gf_KillingUnit()), libNtve_gf_KillingUnit(), UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropLifeMax));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Nosferatudeathcount_Init () {
    gt_Nosferatudeathcount = TriggerCreate("gt_Nosferatudeathcount_Func");
    TriggerAddEventUnitDied(gt_Nosferatudeathcount, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Greed is Good
//--------------------------------------------------------------------------------------------------
bool gt_GreedisGood_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_killResouces;
    fixed lv_giGLevel;
    int lv_thisTag;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(libNtve_gf_KillingUnit()))) {
        lv_killResouces = UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent);
        lv_giGLevel = UnitBehaviorCount(libNtve_gf_KillingUnit(), "GreedIsGood");
        PlayerModifyPropertyInt(UnitGetOwner(libNtve_gf_KillingUnit()), c_playerPropMinerals, c_playerPropOperAdd, FixedToInt(((lv_giGLevel * 0.05) * lv_killResouces)));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GreedisGood_Init () {
    gt_GreedisGood = TriggerCreate("gt_GreedisGood_Func");
    TriggerAddEventUnitDied(gt_GreedisGood, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Quick Learner
//--------------------------------------------------------------------------------------------------
bool gt_QuickLearner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_killExperience;
    fixed lv_qLLevel;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_killExperience = UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent);
    lv_qLLevel = UnitBehaviorCount(libNtve_gf_KillingUnit(), "QuickLearner");
    gf_AddExperience(libNtve_gf_KillingUnit(), ((lv_qLLevel * 0.01) * UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_QuickLearner_Init () {
    gt_QuickLearner = TriggerCreate("gt_QuickLearner_Func");
    TriggerAddEventUnitDied(gt_QuickLearner, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero takes melee damage
//--------------------------------------------------------------------------------------------------
bool gt_Herotakesmeleedamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_randomNumber;
    int lv_thisTag;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomNumber = RandomFixed(0.0, 100.0);
    if (((lv_randomNumber >= 0.0) && (lv_randomNumber < ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.reborn.dodge * 0.1) + (UnitBehaviorCount(EventUnit(), "Agility") * 0.1))))) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
        TextTagCreate(StringExternal("Param/Value/4906195F"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        lv_thisTag = TextTagLastCreated();
        TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 50.20, 100.00));
        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
    }
    else {
        gf_Rage(EventUnit(), EventUnitDamageAmount());
        gf_RealmSwitch(EventUnit(), EventUnitDamageSourceUnit());
        if ((UnitBehaviorCount(EventUnit(), "SpikedScales") > 0)) {
            UnitDamage(EventUnitDamageSourceUnit(), EventUnitDamageEffect(), EventUnitDamageSourceUnit(), (-1.0 * (EventUnitDamageAmount() * (0.09 * UnitBehaviorCount(EventUnit(), "SpikedScales")))));
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Herotakesmeleedamage_Init () {
    gt_Herotakesmeleedamage = TriggerCreate("gt_Herotakesmeleedamage_Func");
    TriggerAddEventUnitDamaged(gt_Herotakesmeleedamage, null, c_unitDamageTypeMelee, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero takes ranged damage
//--------------------------------------------------------------------------------------------------
bool gt_Herotakesrangeddamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_randomNumber;
    int lv_thisTag;
    unit lv_target;
    unit lv_dummy;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomNumber = RandomFixed(0.0, 100.0);
    if (((lv_randomNumber >= 0.0) && (lv_randomNumber < ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.reborn.dodge * 0.1) + (UnitBehaviorCount(EventUnit(), "Agility") * 0.1))))) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
        TextTagCreate(StringExternal("Param/Value/E743D0C8"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        lv_thisTag = TextTagLastCreated();
        TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 50.20, 100.00));
        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
    }
    else {
        gf_Rage(EventUnit(), EventUnitDamageAmount());
        gf_RealmSwitch(EventUnit(), EventUnitDamageSourceUnit());
        lv_randomNumber = RandomFixed(0.0, 100.0);
        if ((lv_randomNumber < (1.0 * UnitBehaviorCount(EventUnit(), "Retaliation")))) {
            libNtve_gf_UnitCreateFacingPoint(1, "DragonDummy", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitDamageSourceUnit()));
            lv_dummy = UnitLastCreated();
            UnitBehaviorAdd(lv_dummy, "Intelligence", lv_dummy, (UnitBehaviorCount(EventUnit(), "Intelligence") - 1));
            if ((UnitAbilityGetLevel(EventUnit(), "Nova") >= 1)) {
                UnitAbilityChangeLevel(lv_dummy, "Nova", FixedToInt(UnitAbilityGetLevel(EventUnit(), "Nova")));
            }
            else {
                UnitAbilityChangeLevel(lv_dummy, "Nova", 1);
            }
            UnitAbilityEnable(lv_dummy, "Nova", true);
            UnitIssueOrder(lv_dummy, Order(AbilityCommand("Nova", 0)), c_orderQueueReplace);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Herotakesrangeddamage_Init () {
    gt_Herotakesrangeddamage = TriggerCreate("gt_Herotakesrangeddamage_Func");
    TriggerAddEventUnitDamaged(gt_Herotakesrangeddamage, null, c_unitDamageTypeRanged, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero takes spell damage
//--------------------------------------------------------------------------------------------------
bool gt_Herotakesspelldamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_randomNumber;
    int lv_thisTag;
    unit lv_target;
    unit lv_dummy;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_Rage(EventUnit(), EventUnitDamageAmount());
    gf_RealmSwitch(EventUnit(), EventUnitDamageSourceUnit());
    lv_randomNumber = RandomFixed(0.0, 100.0);
    if ((lv_randomNumber < (1.0 * UnitBehaviorCount(EventUnit(), "Retaliation")))) {
        libNtve_gf_UnitCreateFacingPoint(1, "DragonDummy", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitDamageSourceUnit()));
        lv_dummy = UnitLastCreated();
        UnitBehaviorAdd(lv_dummy, "Intelligence", lv_dummy, (UnitBehaviorCount(EventUnit(), "Intelligence") - 1));
        UnitAbilityChangeLevel(lv_dummy, "Nova", FixedToInt(UnitAbilityGetLevel(EventUnit(), "Nova")));
        UnitAbilityEnable(lv_dummy, "Nova", true);
        UnitIssueOrder(lv_dummy, Order(AbilityCommand("Nova", 0)), c_orderQueueReplace);
    }
    lv_randomNumber = RandomFixed(0.0, 100.0);
    if ((lv_randomNumber < (1.0 * UnitBehaviorCount(EventUnit(), "AbsorbMana")))) {
        UnitAbilityReset(EventUnit(), AbilityCommand("Fireball", 0), c_spendLocationAll);
        UnitAbilityReset(EventUnit(), AbilityCommand("FireClaws", 0), c_spendLocationAll);
        UnitAbilityReset(EventUnit(), AbilityCommand("FlameEgg", 0), c_spendLocationAll);
        UnitAbilityReset(EventUnit(), AbilityCommand("Nova", 0), c_spendLocationAll);
        UnitAbilityReset(EventUnit(), AbilityCommand("Inferno", 0), c_spendLocationAll);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Herotakesspelldamage_Init () {
    gt_Herotakesspelldamage = TriggerCreate("gt_Herotakesspelldamage_Func");
    TriggerAddEventUnitDamaged(gt_Herotakesspelldamage, null, c_unitDamageTypeSpell, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero takes splash damage
//--------------------------------------------------------------------------------------------------
bool gt_Herotakessplashdamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_Rage(EventUnit(), EventUnitDamageAmount());
    gf_RealmSwitch(EventUnit(), EventUnitDamageSourceUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Herotakessplashdamage_Init () {
    gt_Herotakessplashdamage = TriggerCreate("gt_Herotakessplashdamage_Func");
    TriggerAddEventUnitDamaged(gt_Herotakessplashdamage, null, c_unitDamageTypeSplash, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Miss ranged
//--------------------------------------------------------------------------------------------------
bool gt_HeroMissranged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_randomNumber;
    int lv_thisTag;
    unitgroup lv_surroundingUnits;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    lv_surroundingUnits = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnitDamageSourceUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomNumber = RandomFixed(0.0, 100.0);
    if ((lv_randomNumber > (75.0 + ((gv_players[(UnitGetOwner(EventUnitDamageSourceUnit()) - 1)].stats.reborn.miss * 0.1) + (UnitBehaviorCount(EventUnitDamageSourceUnit(), "Dexterity") * 0.05))))) {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) <= 0.0)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
            TextTagCreate(StringExternal("Param/Value/9BDF1BE1"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
            lv_thisTag = TextTagLastCreated();
            TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
            TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
            TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
        }
    }
    else {
        lv_randomNumber = RandomFixed(0.0, 100.0);
        if (((lv_randomNumber < (0.2 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "Dexterity"))))) {
            UnitDamage(EventUnitDamageSourceUnit(), "CriticalStrike", EventUnit(), (EventUnitDamageAmount() * (0.004 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "Strength"))));
            libNtve_gf_CreateModelAtPoint("FrenzyStartImpact", UnitGetPosition(EventUnit()));
            TextTagCreate(StringExternal("Param/Value/0B6294CD"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
            lv_thisTag = TextTagLastCreated();
            TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
            TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
            TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroMissranged_Init () {
    gt_HeroMissranged = TriggerCreate("gt_HeroMissranged_Func");
    TriggerAddEventUnitDamaged(gt_HeroMissranged, null, c_unitDamageTypeRanged, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Miss melee
//--------------------------------------------------------------------------------------------------
bool gt_HeroMissmelee_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_randomNumber;
    int lv_thisTag;
    unitgroup lv_surroundingUnits;
    fixed lv_vTGainMax;
    fixed lv_pOGainMax;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    lv_surroundingUnits = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
        if (!PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(EventUnit())), UnitGetOwner(EventUnitDamageSourceUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomNumber = RandomFixed(0.0, 100.0);
    if ((lv_randomNumber > (75.0 + ((gv_players[(UnitGetOwner(EventUnitDamageSourceUnit()) - 1)].stats.reborn.miss * 0.1) + (UnitBehaviorCount(EventUnitDamageSourceUnit(), "Dexterity") * 0.05))))) {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) <= 0.0)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
            TextTagCreate(StringExternal("Param/Value/6979B884"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
            lv_thisTag = TextTagLastCreated();
            TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
            TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
            TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
        }
    }
    else {
        if ((EventUnitDamageEffect() != "OnFire")) {
            lv_vTGainMax = (EventUnitDamageAmount() * (0.01 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "VampiricTendencies")));
            UnitSetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLife, c_unitPropCurrent) + lv_vTGainMax));
            if ((lv_vTGainMax > 0.0)) {
                TextTagCreate(FixedToText(lv_vTGainMax, 0), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, true, PlayerGroupAll());
                lv_thisTag = TextTagLastCreated();
                TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
                TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 100.00, 0.00));
                TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
            }
            lv_pOGainMax = (EventUnitDamageAmount() * (0.01 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "PowerOverwhelming")));
            UnitSetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropEnergy, c_unitPropCurrent) + lv_pOGainMax));
            if ((lv_pOGainMax > 0.0)) {
                TextTagCreate(FixedToText(lv_pOGainMax, 0), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, true, PlayerGroupAll());
                lv_thisTag = TextTagLastCreated();
                TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
                TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 100.00, 100.00));
                TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
            }
        }
        lv_randomNumber = RandomFixed(0.0, 100.0);
        if (((lv_randomNumber < (0.2 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "Dexterity"))))) {
            if ((EventUnitDamageEffect() != "CriticalStrike")) {
                if ((UnitBehaviorCount(EventUnitDamageSourceUnit(), "CriticalCrepitus") > 0)) {
                    UnitDamage(EventUnitDamageSourceUnit(), "CriticalCrepitusDamage", EventUnit(), (EventUnitDamageAmount() * (0.004 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "Strength"))));
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, UnitGetPosition(EventUnit()));
                    TextTagCreate(StringExternal("Param/Value/B416B1B4"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                    lv_thisTag = TextTagLastCreated();
                    TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                    lv_surroundingUnits = UnitGroupAlliance(UnitGetOwner(EventUnitDamageSourceUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    UnitGroupRemove(lv_surroundingUnits, EventUnit());
                    UnitGroupLoopBegin(lv_surroundingUnits);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitDamage(EventUnitDamageSourceUnit(), "CriticalCrepitusDamage", UnitGroupLoopCurrent(), ((0.05 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "CriticalCrepitus")) * (EventUnitDamageAmount() * (0.004 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "Strength")))));
                        libNtve_gf_CreateModelAtPoint("FrenzyStartImpact", UnitGetPosition(UnitGroupLoopCurrent()));
                        TextTagCreate(StringExternal("Param/Value/BB36AEC9"), 24, UnitGetPosition(UnitGroupLoopCurrent()), 1.0, true, true, PlayerGroupAll());
                        lv_thisTag = TextTagLastCreated();
                        TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                    }
                    UnitGroupLoopEnd();
                }
                else {
                    UnitDamage(EventUnitDamageSourceUnit(), "CriticalStrike", EventUnit(), (EventUnitDamageAmount() * (0.004 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "Strength"))));
                    libNtve_gf_CreateModelAtPoint("FrenzyStartImpact", UnitGetPosition(EventUnit()));
                    TextTagCreate(StringExternal("Param/Value/F3D40B26"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                    lv_thisTag = TextTagLastCreated();
                    TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroMissmelee_Init () {
    gt_HeroMissmelee = TriggerCreate("gt_HeroMissmelee_Func");
    TriggerAddEventUnitDamaged(gt_HeroMissmelee, null, c_unitDamageTypeMelee, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Miss melee (1 Shot)
//--------------------------------------------------------------------------------------------------
bool gt_HeroMissmelee1Shot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_randomNumber;
    int lv_thisTag;
    unitgroup lv_surroundingUnits;
    fixed lv_vTGainMax;
    fixed lv_pOGainMax;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    lv_surroundingUnits = UnitGroupEmpty();
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
        if (!PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(EventUnit())), UnitGetOwner(EventUnitDamageSourceUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventUnitDamageEffect() != "OnFire")) {
        lv_vTGainMax = (EventUnitDamageAmount() * (0.01 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "VampiricTendencies")));
        UnitSetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLife, c_unitPropCurrent) + lv_vTGainMax));
        if ((lv_vTGainMax > 0.0)) {
            TextTagCreate(FixedToText(lv_vTGainMax, 0), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, true, PlayerGroupAll());
            lv_thisTag = TextTagLastCreated();
            TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
            TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 100.00, 0.00));
            TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
        }
        lv_pOGainMax = (EventUnitDamageAmount() * (0.01 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "PowerOverwhelming")));
        UnitSetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropEnergy, c_unitPropCurrent) + lv_pOGainMax));
        if ((lv_pOGainMax > 0.0)) {
            TextTagCreate(FixedToText(lv_pOGainMax, 0), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, true, PlayerGroupAll());
            lv_thisTag = TextTagLastCreated();
            TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
            TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 100.00, 100.00));
            TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroMissmelee1Shot_Init () {
    gt_HeroMissmelee1Shot = TriggerCreate("gt_HeroMissmelee1Shot_Func");
    TriggerAddEventUnitDamaged(gt_HeroMissmelee1Shot, null, c_unitDamageTypeMelee, c_unitDamageFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero gives ranged damage
//--------------------------------------------------------------------------------------------------
bool gt_Herogivesrangeddamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 0))) {
            return false;
        }
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) != 16))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(EventUnit())), UnitGetOwner(EventUnitDamageSourceUnit()))) {
        gf_StickyShot(EventUnitDamageSourceUnit(), EventUnit());
        gf_DualWield(EventUnitDamageSourceUnit(), EventUnit(), EventUnitDamageEffect(), EventUnitDamageAmount());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Herogivesrangeddamage_Init () {
    gt_Herogivesrangeddamage = TriggerCreate("gt_Herogivesrangeddamage_Func");
    TriggerAddEventUnitDamaged(gt_Herogivesrangeddamage, null, c_unitDamageTypeRanged, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dark Dissulto
//--------------------------------------------------------------------------------------------------
bool gt_DarkDissulto_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_randomNumber;
    int lv_thisTag;
    unitgroup lv_surroundingUnits;
    actor lv_abilityActor;
    unit lv_target;
    unit lv_dummy;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    lv_surroundingUnits = UnitGroupEmpty();
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomNumber = RandomFixed(0.0, 100.0);
    if ((lv_randomNumber <= (2.5 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "DarkDissulto")))) {
        if (((EventUnitDamageEffect() == "FireballDamage") || (EventUnitDamageEffect() == "FireballDamageLevel10") || (EventUnitDamageEffect() == "FireballDamage2") || (EventUnitDamageEffect() == "FireballDamageLevel3") || (EventUnitDamageEffect() == "FireballDamageLevel4") || (EventUnitDamageEffect() == "FireballDamageLevel5") || (EventUnitDamageEffect() == "FireballDamageLevel6") || (EventUnitDamageEffect() == "FireballDamageLevel7") || (EventUnitDamageEffect() == "FireballDamageLevel8") || (EventUnitDamageEffect() == "FireballDamageLevel9"))) {
            lv_surroundingUnits = UnitGroupAlliance(UnitGetOwner(EventUnitDamageSourceUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 9.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupRemove(lv_surroundingUnits, EventUnit());
            if ((UnitGroupCount(lv_surroundingUnits, c_unitCountAlive) > 0)) {
                lv_target = UnitGroupClosestToPoint(lv_surroundingUnits, UnitGetPosition(EventUnit()));
                TextTagCreate(StringExternal("Param/Value/B80726D6"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                lv_thisTag = TextTagLastCreated();
                TextTagSetVelocity(lv_thisTag, 0.75, 0.0);
                TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
                TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                TextTagCreate(StringExternal("Param/Value/33A50692"), 24, UnitGetPosition(lv_target), 1.0, true, true, PlayerGroupAll());
                lv_thisTag = TextTagLastCreated();
                TextTagSetVelocity(lv_thisTag, 0.75, 180.0);
                TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
                TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                libNtve_gf_UnitCreateFacingPoint(1, "DragonDummy", 0, UnitGetOwner(EventUnitDamageSourceUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(lv_target));
                lv_dummy = UnitLastCreated();
                UnitBehaviorAdd(lv_dummy, "DarkDissulto", lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), "DarkDissulto") - 1));
                UnitBehaviorAdd(lv_dummy, "Intelligence", lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), "Intelligence") - 1));
                UnitAbilityChangeLevel(lv_dummy, "Fireball", FixedToInt(UnitAbilityGetLevel(EventUnitDamageSourceUnit(), "Fireball")));
                UnitAbilityEnable(lv_dummy, "Fireball", true);
                UnitIssueOrder(lv_dummy, OrderTargetingUnit(AbilityCommand("Fireball", 0), lv_target), c_orderQueueReplace);
            }
        }
        else {
            if (((EventUnitDamageEffect() == "FlameEggLevel1") || (EventUnitDamageEffect() == "FlameEggLevel10Damage") || (EventUnitDamageEffect() == "FlameEggLevel2") || (EventUnitDamageEffect() == "FlameEggLevel3") || (EventUnitDamageEffect() == "FlameEggLevel4") || (EventUnitDamageEffect() == "FlameEggLevel5") || (EventUnitDamageEffect() == "FlameEggLevel6") || (EventUnitDamageEffect() == "FlameEggLevel7") || (EventUnitDamageEffect() == "FlameEggLevel8") || (EventUnitDamageEffect() == "FlameEggLevel9"))) {
                lv_surroundingUnits = UnitGroupAlliance(UnitGetOwner(EventUnitDamageSourceUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                UnitGroupRemove(lv_surroundingUnits, EventUnit());
                if ((UnitGroupCount(lv_surroundingUnits, c_unitCountAlive) > 0)) {
                    lv_target = UnitGroupClosestToPoint(lv_surroundingUnits, UnitGetPosition(EventUnit()));
                    TextTagCreate(StringExternal("Param/Value/3B61BACC"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                    lv_thisTag = TextTagLastCreated();
                    TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                    TextTagCreate(StringExternal("Param/Value/29D50265"), 24, UnitGetPosition(lv_target), 1.0, true, true, PlayerGroupAll());
                    lv_thisTag = TextTagLastCreated();
                    TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                    libNtve_gf_UnitCreateFacingPoint(1, "DragonDummy", 0, UnitGetOwner(EventUnitDamageSourceUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(lv_target));
                    lv_dummy = UnitLastCreated();
                    UnitBehaviorAdd(lv_dummy, "DarkDissulto", lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), "DarkDissulto") - 1));
                    UnitBehaviorAdd(lv_dummy, "Intelligence", lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), "Intelligence") - 1));
                    UnitAbilityChangeLevel(lv_dummy, "FlameEgg", FixedToInt(UnitAbilityGetLevel(EventUnitDamageSourceUnit(), "FlameEgg")));
                    UnitAbilityEnable(lv_dummy, "FlameEgg", true);
                    UnitIssueOrder(lv_dummy, OrderTargetingPoint(AbilityCommand("FlameEgg", 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
                }
            }
            else {
                if (((EventUnitDamageEffect() == "FrostSpikeDamageLevel1") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel10") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel3") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel4") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel5") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel6") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel7") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel8") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel9"))) {
                    lv_surroundingUnits = UnitGroupAlliance(UnitGetOwner(EventUnitDamageSourceUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    UnitGroupRemove(lv_surroundingUnits, EventUnit());
                    if ((UnitGroupCount(lv_surroundingUnits, c_unitCountAlive) > 0)) {
                        lv_target = UnitGroupClosestToPoint(lv_surroundingUnits, UnitGetPosition(EventUnit()));
                        TextTagCreate(StringExternal("Param/Value/75BACF39"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                        lv_thisTag = TextTagLastCreated();
                        TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                        TextTagCreate(StringExternal("Param/Value/4970FF75"), 24, UnitGetPosition(lv_target), 1.0, true, true, PlayerGroupAll());
                        lv_thisTag = TextTagLastCreated();
                        TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                        libNtve_gf_UnitCreateFacingPoint(1, "DragonDummy", 0, UnitGetOwner(EventUnitDamageSourceUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(lv_target));
                        lv_dummy = UnitLastCreated();
                        UnitBehaviorAdd(lv_dummy, "DarkDissulto", lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), "DarkDissulto") - 1));
                        UnitBehaviorAdd(lv_dummy, "Intelligence", lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), "Intelligence") - 1));
                        UnitAbilityChangeLevel(lv_dummy, "FrostSpike", FixedToInt(UnitAbilityGetLevel(EventUnitDamageSourceUnit(), "FrostSpike")));
                        UnitAbilityEnable(lv_dummy, "FrostSpike", true);
                        UnitIssueOrder(lv_dummy, OrderTargetingUnit(AbilityCommand("FrostSpike", 0), lv_target), c_orderQueueReplace);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DarkDissulto_Init () {
    gt_DarkDissulto = TriggerCreate("gt_DarkDissulto_Func");
    TriggerAddEventUnitDamaged(gt_DarkDissulto, null, c_unitDamageTypeSpell, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy AI (Attacked)
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAIAttacked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventUnitTarget() == UnitFromId(2511))) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(EventUnit())) + (PointGetX(UnitGetPosition(EventUnit())) - PointGetX(UnitGetPosition(EventUnitTarget())))), (PointGetY(UnitGetPosition(EventUnit())) + (PointGetY(UnitGetPosition(EventUnit())) - PointGetY(UnitGetPosition(EventUnitTarget())))))), c_orderQueueReplace);
    }
    else {
        if ((EventUnitTarget() == UnitFromId(1597))) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(EventUnit())) + (PointGetX(UnitGetPosition(EventUnit())) - PointGetX(UnitGetPosition(EventUnitTarget())))), (PointGetY(UnitGetPosition(EventUnit())) + (PointGetY(UnitGetPosition(EventUnit())) - PointGetY(UnitGetPosition(EventUnitTarget())))))), c_orderQueueReplace);
        }
        else {
            if ((EventUnitTarget() == UnitFromId(1976))) {
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(EventUnit())) + (PointGetX(UnitGetPosition(EventUnit())) - PointGetX(UnitGetPosition(EventUnitTarget())))), (PointGetY(UnitGetPosition(EventUnit())) + (PointGetY(UnitGetPosition(EventUnit())) - PointGetY(UnitGetPosition(EventUnitTarget())))))), c_orderQueueReplace);
            }
            else {
                UnitGroupLoopBegin(UnitGroupAlliance(15, c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), (FixedToInt(UnitGetPropertyFixed(EventUnitTarget(), c_unitPropLevel, c_unitPropCurrent)) / 10.0)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitTarget()), c_orderQueueAddToEnd);
                }
                UnitGroupLoopEnd();
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyAIAttacked_Init () {
    gt_EnemyAIAttacked = TriggerCreate("gt_EnemyAIAttacked_Func");
    TriggerAddEventUnitAttacked(gt_EnemyAIAttacked, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy AI (Lava) 1
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAILava1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueAddToFront);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(255))), c_orderQueueAddToFront);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyAILava1_Init () {
    gt_EnemyAILava1 = TriggerCreate("gt_EnemyAILava1_Func");
    TriggerAddEventUnitRegion(gt_EnemyAILava1, null, RegionFromId(252), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy AI (Lava) 2
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAILava2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueAddToFront);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(256))), c_orderQueueAddToFront);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyAILava2_Init () {
    gt_EnemyAILava2 = TriggerCreate("gt_EnemyAILava2_Func");
    TriggerAddEventUnitRegion(gt_EnemyAILava2, null, RegionFromId(253), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy AI (Lava) 3
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAILava3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueAddToFront);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(257))), c_orderQueueAddToFront);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyAILava3_Init () {
    gt_EnemyAILava3 = TriggerCreate("gt_EnemyAILava3_Func");
    TriggerAddEventUnitRegion(gt_EnemyAILava3, null, RegionFromId(254), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy AI (Nest)
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAINest_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueAddToFront);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(259))), c_orderQueueAddToFront);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyAINest_Init () {
    gt_EnemyAINest = TriggerCreate("gt_EnemyAINest_Func");
    TriggerAddEventUnitRegion(gt_EnemyAINest, null, RegionFromId(258), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Skill Response
//--------------------------------------------------------------------------------------------------
bool gt_EnemySkillResponse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnit()), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemySkillResponse_Init () {
    gt_EnemySkillResponse = TriggerCreate("gt_EnemySkillResponse_Func");
    TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[0].dragon"), AbilityCommand("Nova", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[1].dragon"), AbilityCommand("Nova", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[2].dragon"), AbilityCommand("Nova", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[3].dragon"), AbilityCommand("Nova", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[0].dragon"), AbilityCommand("Inferno", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[1].dragon"), AbilityCommand("Inferno", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[2].dragon"), AbilityCommand("Inferno", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[3].dragon"), AbilityCommand("Inferno", 0), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Zauberer's Favor
//--------------------------------------------------------------------------------------------------
bool gt_ZauberersFavor_Func (bool testConds, bool runActions) {
    string auto8B028ADB_val;
    // Variable Declarations
    int buffCount;
    int i;
    int j;
    
    string lv_deadUnit;
    int lv_unitIndex;
    // Variable Initialization
    lv_deadUnit = UnitGetType(EventUnit());
    // Conditions
    
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
       
        }
        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
           
return false;
        }
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(libNtve_gf_KillingUnit()))) {
        
 return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    i = 0;
    j = 0;
    auto8B028ADB_val = lv_deadUnit;
      
        
    if (auto8B028ADB_val == "SmallSheep") {
        lv_unitIndex = 0;
 
    }
    else if (auto8B028ADB_val == "Srepti") {
        lv_unitIndex = 1;
    }
    else if (auto8B028ADB_val == "Vogel") {
        lv_unitIndex = 2;
    }
    else if (auto8B028ADB_val == "CretonWarrior") {
        lv_unitIndex = 3;
    }
    else if (auto8B028ADB_val == "Karramarro") {
        lv_unitIndex = 4;
    }
    else if (auto8B028ADB_val == "CretonWatcher") {
        lv_unitIndex = 5;
    }
    else if (auto8B028ADB_val == "Alakdan") {
        lv_unitIndex = 6;
    }
    else if (auto8B028ADB_val == "Gagamba") {
        lv_unitIndex = 7;
    }
    else if (auto8B028ADB_val == "Odvratan") {
        lv_unitIndex = 8;
    }
    else if (auto8B028ADB_val == "Anguis") {
        lv_unitIndex = 9;
    }
    else if (auto8B028ADB_val == "Pervolo") {
        lv_unitIndex = 10;
    }
    else if (auto8B028ADB_val == "EliteCretonWarrior") {
        lv_unitIndex = 11;
    }
    else if (auto8B028ADB_val == "EliteCretonWatcher") {
        lv_unitIndex = 12;
    }
    else if (auto8B028ADB_val == "CretonWarMachine") {
        lv_unitIndex = 13;
    }
  else if (auto8B028ADB_val == "Impetus") {
        lv_unitIndex = 19;
    }
  else if (auto8B028ADB_val == "Mortuus") {
        lv_unitIndex = 20;
    }
    else {
    //UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("How did you call this?"));
    }
    if(gv_enemyDeathCounts[lv_unitIndex] <= 255){
       gv_enemyDeathCounts[lv_unitIndex] += 1;}
    UnitGroupLoopBegin(UnitGroup(UnitGetType(EventUnit()), 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
    
     for(i = UnitBehaviorCount(UnitGroupLoopCurrent(), "ZauberersFavor"); i <= gv_enemyDeathCounts[lv_unitIndex]; i +=1){
            UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "ZauberersFavor", 15, 1);
            //j += 1;
        }
    
       //Instead of removing all stacks and reappyling all stacks +1, see how many stacks each unit is short from what the buff is supposed to be at, and add that many.
       // UnitBehaviorRemovePlayer(UnitGroupLoopCurrent(), "ZauberersFavor", 15, c_unitBehaviorCountAll);
       // if(UnitBehaviorCount(UnitGroupLoopCurrent(), "ZauberersFavor") <= gv_enemyDeathCounts[lv_unitIndex]){
        //}
        //UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "ZauberersFavor", 15, 1);
  
    //DebugStuff UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(auto8B028ADB_val) +   StringToText(" is in slot ") + IntToText(lv_unitIndex) + StringToText(" which has this many stacks ") +  IntToText(gv_enemyDeathCounts[lv_unitIndex])+ StringToText(" and has called: ") + IntToText(j));
    }
    UnitGroupLoopEnd();
    
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ZauberersFavor_Init () {
    int i = 0;
    int j = 0;
    int positionInUnitTypeArray = 0;
    gt_ZauberersFavor = TriggerCreate("gt_ZauberersFavor_Func");
    TriggerAddEventUnitDied(gt_ZauberersFavor, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Count Unit Deaths
//--------------------------------------------------------------------------------------------------
bool gt_CountUnitDeaths_Func (bool testConds, bool runActions) {
    string auto5FB0BE3D_val;
    int i;
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    
    auto5FB0BE3D_val = UnitGetType(EventUnit());
    for (i = 0; i<=20; i +=1){
        if (auto5FB0BE3D_val == gv_enemyUnitTypes[i]) {
        gv_unitKills[i] += 1;
        break;
        } 
        else {
            }
    }
     //if (auto5FB0BE3D_val == gv_enemyUnitTypes[i]) {
     //   gv_unitKills[i] += 1;
   // }
    //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[1]) {
    //    gv_unitKills[1] += 1;
    //}
    //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[2]) {
   //     gv_unitKills[2] += 1;
   // }
   // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[3]) {
   //     gv_unitKills[3] += 1;
   // }
   // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[4]) {
   //     gv_unitKills[4] += 1;
   // }
    //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[5]) {
    //    gv_unitKills[5] += 1;
    //}
    //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[6]) {
    //    gv_unitKills[6] += 1;
   // }
   // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[7]) {
   //     gv_unitKills[7] += 1;
   // }
    //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[8]) {
    //    gv_unitKills[8] += 1;
   // }
    //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[9]) {
    //    gv_unitKills[9] += 1;
   // }
   // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[10]) {
   //     gv_unitKills[10] += 1;
   // }
   // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[11]) {
   //     gv_unitKills[11] += 1;
   // }
   // else {
   // }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CountUnitDeaths_Init () {
    int i = 0;
    gt_CountUnitDeaths = TriggerCreate("gt_CountUnitDeaths_Func");
    TriggerAddEventUnitDied(gt_CountUnitDeaths, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Elite Creton Warrior
//--------------------------------------------------------------------------------------------------
bool gt_EliteCretonWarrior_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 15) && (UnitGetType(EventUnit()) == gv_enemyUnitTypes[3]) && (gv_unitKills[3] == (25 * PlayerGroupCount(gv_humanPlayers)))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_unitKills[3] = 0;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1DFF29CC"));
    UnitCreate(1, "EliteCretonWarrior", 0, 15, RegionRandomPoint(RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0)), 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Angry", 0, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), libNtve_gf_KillingUnit()), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EliteCretonWarrior_Init () {
    gt_EliteCretonWarrior = TriggerCreate("gt_EliteCretonWarrior_Func");
    TriggerAddEventUnitDied(gt_EliteCretonWarrior, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Elite Creton Watcher
//--------------------------------------------------------------------------------------------------
bool gt_EliteCretonWatcher_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 15) && (UnitGetType(EventUnit()) == gv_enemyUnitTypes[5]) && (gv_unitKills[5] == (25 * PlayerGroupCount(gv_humanPlayers)))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_unitKills[5] = 0;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B3030916"));
    UnitCreate(1, "EliteCretonWatcher", 0, 15, RegionRandomPoint(RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0)), 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Angry", 0, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), libNtve_gf_KillingUnit()), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EliteCretonWatcher_Init () {
    gt_EliteCretonWatcher = TriggerCreate("gt_EliteCretonWatcher_Func");
    TriggerAddEventUnitDied(gt_EliteCretonWatcher, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Large Sheep
//--------------------------------------------------------------------------------------------------
bool gt_LargeSheep_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        
        if (!(((UnitGetOwner(EventUnit()) == 15) && gv_enemyUnitTypes[0] == "SmallSheep" && (UnitGetType(EventUnit()) == gv_enemyUnitTypes[0]) && (gv_unitKills[0] == (25 * PlayerGroupCount(gv_humanPlayers)))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
   
    gv_unitKills[0] = 0;
  
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/DECEF3FA"));
    UnitCreate(1, "LargeSheep", 0, 15, RegionRandomPoint(RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0)), 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Angry", 0, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), libNtve_gf_KillingUnit()), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LargeSheep_Init () {
    gt_LargeSheep = TriggerCreate("gt_LargeSheep_Func");
    TriggerAddEventUnitDied(gt_LargeSheep, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Alpha Srepti
//--------------------------------------------------------------------------------------------------
bool gt_AlphaSrepti_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 15) && (UnitGetType(EventUnit()) == gv_enemyUnitTypes[1]) && (gv_unitKills[1] == (25 * PlayerGroupCount(gv_humanPlayers)))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_unitKills[1] = 0;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5E035CF9"));
    UnitCreate(1, "AlphaSrepti", 0, 15, RegionRandomPoint(RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0)), 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Angry", 0, c_animTimeDefault);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), libNtve_gf_KillingUnit()), c_orderQueueReplace);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AlphaSrepti_Init () {
    gt_AlphaSrepti = TriggerCreate("gt_AlphaSrepti_Func");
    TriggerAddEventUnitDied(gt_AlphaSrepti, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Given Melee Damage Text Tag
//--------------------------------------------------------------------------------------------------
bool gt_GivenMeleeDamageTextTag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisTag;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(FixedToText(EventUnitDamageAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
    lv_thisTag = TextTagLastCreated();
    TextTagSetVelocity(lv_thisTag, 0.75, 75.0);
    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 100.00, 100.00));
    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GivenMeleeDamageTextTag_Init () {
    gt_GivenMeleeDamageTextTag = TriggerCreate("gt_GivenMeleeDamageTextTag_Func");
    TriggerAddEventUnitDamaged(gt_GivenMeleeDamageTextTag, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Recieved Melee Damage Text Tag
//--------------------------------------------------------------------------------------------------
bool gt_RecievedMeleeDamageTextTag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_thisTag;
    // Variable Initialization
    lv_thisTag = c_textTagNone;
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(FixedToText(EventUnitDamageAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
    lv_thisTag = TextTagLastCreated();
    TextTagSetVelocity(lv_thisTag, 0.75, 105.0);
    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RecievedMeleeDamageTextTag_Init () {
    gt_RecievedMeleeDamageTextTag = TriggerCreate("gt_RecievedMeleeDamageTextTag_Func");
    TriggerAddEventUnitDamaged(gt_RecievedMeleeDamageTextTag, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Zauberer's Minions Unit Types
//--------------------------------------------------------------------------------------------------
bool gt_SetZauberersMinionsUnitTypes_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_zauberersMinionsUnitTypes[0] = "DemonicSheep";
    gv_zauberersMinionsUnitTypes[1] = "DemonicSrepti";
    gv_zauberersMinionsUnitTypes[2] = "CretonWarlord";
    gv_zauberersMinionsUnitTypes[3] = "Stercore";
    gv_zauberersMinionsUnitTypes[4] = "Impetus";
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetZauberersMinionsUnitTypes_Init () {
    gt_SetZauberersMinionsUnitTypes = TriggerCreate("gt_SetZauberersMinionsUnitTypes_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Zauberer's Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetZauberersRegions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_zauberersRegions[0] = RegionFromId(203);
    gv_zauberersRegions[1] = RegionFromId(204);
    gv_zauberersRegions[2] = RegionFromId(205);
    gv_zauberersRegions[3] = RegionFromId(206);
    gv_zauberersRegions[4] = RegionFromId(207);
    gv_zauberersRegions[5] = RegionFromId(208);
    gv_zauberersRegions[6] = RegionFromId(209);
    gv_zauberersRegions[7] = RegionFromId(210);
    gv_zauberersRegions[8] = RegionFromId(213);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetZauberersRegions_Init () {
    gt_SetZauberersRegions = TriggerCreate("gt_SetZauberersRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zauberer's Minions
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZauberersMinions_Func (bool testConds, bool runActions) {
    fixed auto2FFAA3D0_ae;
    fixed auto2FFAA3D0_ai;
    fixed auto227D18B5_ae;
    fixed auto227D18B5_ai;
    // Variable Declarations
    fixed lv_numPlayers;
    int lv_randomSkill;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((gv_livingDragonsFightingZauberer1stForm >= 1) || (gv_livingDragonsFightingZauberer2ndForm >= 1)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    auto2FFAA3D0_ae = gv_livingDragonsFightingZauberer1stForm;
    auto2FFAA3D0_ai = 1.0;
    lv_numPlayers = 1.0;
    for ( ; ( (auto2FFAA3D0_ai >= 0 && lv_numPlayers <= auto2FFAA3D0_ae) || (auto2FFAA3D0_ai <= 0 && lv_numPlayers >= auto2FFAA3D0_ae) ) ; lv_numPlayers += auto2FFAA3D0_ai ) {
        UnitCreate(1, gv_zauberersMinionsUnitTypes[RandomInt(0, 4)], c_unitCreateIgnorePlacement, 15, RegionRandomPoint(gv_zauberersRegions[RandomInt(0, 8)]), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonInBattleWithZauberer1stForm, c_unitCountAlive)), c_orderQueueReplace);
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_zauberersMinions, UnitLastCreated());
    }
    auto227D18B5_ae = gv_livingDragonsFightingZauberer2ndForm;
    auto227D18B5_ai = 1.0;
    lv_numPlayers = 1.0;
    for ( ; ( (auto227D18B5_ai >= 0 && lv_numPlayers <= auto227D18B5_ae) || (auto227D18B5_ai <= 0 && lv_numPlayers >= auto227D18B5_ae) ) ; lv_numPlayers += auto227D18B5_ai ) {
        UnitCreate(1, gv_zauberersMinionsUnitTypes[RandomInt(0, 4)], c_unitCreateIgnorePlacement, 15, RegionRandomPoint(gv_zauberersRegions[RandomInt(0, 8)]), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonInBattleWithZauberer2ndForm, c_unitCountAlive)), c_orderQueueReplace);
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_zauberersMinions, UnitLastCreated());
        UnitCreate(1, gv_zauberersMinionsUnitTypes[RandomInt(0, 4)], c_unitCreateIgnorePlacement, 15, RegionRandomPoint(gv_zauberersRegions[RandomInt(0, 8)]), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonInBattleWithZauberer2ndForm, c_unitCountAlive)), c_orderQueueReplace);
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_zauberersMinions, UnitLastCreated());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnZauberersMinions_Init () {
    gt_SpawnZauberersMinions = TriggerCreate("gt_SpawnZauberersMinions_Func");
    TriggerEnable(gt_SpawnZauberersMinions, false);
    TriggerAddEventTimePeriodic(gt_SpawnZauberersMinions, 20.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dragon Dies in Zauberer 1
//--------------------------------------------------------------------------------------------------
bool gt_DragonDiesinZauberer1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_c;
    int lv_tPI;
    int lv_tP;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) != 16) && PlayerGroupHasPlayer(gv_playersInBattleWithZauberer1stForm, UnitGetOwner(EventUnit())) && UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_tPI = (UnitGetOwner(EventUnit()) - 1);
    lv_tP = UnitGetOwner(EventUnit());
    PlayerGroupRemove(gv_playersInBattleWithZauberer1stForm, lv_tP);
    CameraLockInput(lv_tP, false);
    SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryCombat, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryVoice, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategorySpell, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryAmbient, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryAmbient, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryUI, 100.0, 1.0);
    SoundtrackStop(PlayerGroupSingle(lv_tP), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupSingle(lv_tP), c_soundtrackCategoryMusic, "BiodomeTheme", c_soundtrackCueAny, 0, false);
    VisRevealerDestroy(gv_zauberer1stFormRevealer[lv_tPI]);
    gv_livingDragonsFightingZauberer1stForm -= 1;
    libNtve_gf_ShowHideBossBar(false, lv_tP);
    if ((gv_livingDragonsFightingZauberer1stForm <= 0)) {
        gv_livingDragonsFightingZauberer1stForm = 0;
        UnitRemove(gv_zauberer1stForm);
        TriggerEnable(gt_SpawnZauberersMinions, false);
        UnitCreate(1, "CrystalofVenadas", 0, 15, gv_zauberersCrystalLocation, 270.0);
        gv_zauberersCrystal = UnitLastCreated();
        UnitGroupLoopBegin(gv_zauberersMinions);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        TriggerEnable(gt_TeleporttoBioDome, true);
        TriggerEnable(gt_TeleporttoCreton, true);
    }
    gv_autosavePrevention[lv_tPI] = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DragonDiesinZauberer1_Init () {
    gt_DragonDiesinZauberer1 = TriggerCreate("gt_DragonDiesinZauberer1_Func");
    TriggerAddEventUnitDied(gt_DragonDiesinZauberer1, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dragon Dies in Zauberer 2
//--------------------------------------------------------------------------------------------------
bool gt_DragonDiesinZauberer2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_c;
    int lv_tPI;
    int lv_tP;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) != 16) && PlayerGroupHasPlayer(gv_playersInBattleWithZauberer2ndForm, UnitGetOwner(EventUnit())) && UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_tPI = (UnitGetOwner(EventUnit()) - 1);
    lv_tP = UnitGetOwner(EventUnit());
    PlayerGroupRemove(gv_playersInBattleWithZauberer2ndForm, lv_tP);
    CameraLockInput(lv_tP, false);
    SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryCombat, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryVoice, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategorySpell, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryAmbient, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryAmbient, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryUI, 100.0, 1.0);
    SoundtrackStop(PlayerGroupSingle(lv_tP), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupSingle(lv_tP), c_soundtrackCategoryMusic, "BiodomeTheme", c_soundtrackCueAny, 0, false);
    VisRevealerDestroy(gv_zauberer1stFormRevealer[lv_tPI]);
    gv_livingDragonsFightingZauberer2ndForm -= 1;
    libNtve_gf_ShowHideBossBar(false, lv_tP);
    if ((gv_livingDragonsFightingZauberer2ndForm <= 0)) {
        gv_livingDragonsFightingZauberer2ndForm = 0;
        UnitRemove(gv_zauberer2ndForm);
        TriggerEnable(gt_SpawnZauberersMinions, false);
        UnitCreate(1, "CrystalofVenadas", 0, 15, gv_zauberersCrystalLocation, 270.0);
        gv_zauberersCrystal = UnitLastCreated();
        UnitGroupLoopBegin(gv_zauberersMinions);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        TriggerEnable(gt_TeleporttoBioDome, true);
        TriggerEnable(gt_TeleporttoCreton, true);
        Wait(15.0, c_timeGame);
        UnitRemove(gv_MagicalDemonicSheep);
    }
    gv_autosavePrevention[lv_tPI] = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DragonDiesinZauberer2_Init () {
    gt_DragonDiesinZauberer2 = TriggerCreate("gt_DragonDiesinZauberer2_Func");
    TriggerAddEventUnitDied(gt_DragonDiesinZauberer2, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zauberer 1st Form
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZauberer1stForm_Func (bool testConds, bool runActions) {
    int autoAF98452D_val;
    int autoF7D1EF20_n;
    int autoF7D1EF20_i;
    // Variable Declarations
    int lv_pickedPlayerIndex;
    int lv_spawnPoint;
    int lv_numPlayers;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (gv_zaubererFirstFormAlreadyDead[(UnitGetOwner(libNtve_gf_KillingUnit()) - 1)]) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_TeleporttoBioDome, false);
    TriggerEnable(gt_TeleporttoCreton, false);
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(214)), 0.0, -1, 10, false);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        gv_inCinematic[lv_pickedPlayerIndex] = true;
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(214));
        gv_zauberer1stFormRevealer[lv_pickedPlayerIndex] = VisRevealerLastCreated();
        libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
        UnitGroupAdd(gv_dragonInBattleWithZauberer1stForm, gv_players[lv_pickedPlayerIndex].dragon);
        PlayerGroupAdd(gv_playersInBattleWithZauberer1stForm, PlayerGroupLoopCurrent());
        gv_livingDragonsFightingZauberer1stForm += 1;
        autoAF98452D_val = lv_spawnPoint;
        if (autoAF98452D_val == 0) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(205)), false);
        }
        else if (autoAF98452D_val == 1) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(210)), false);
        }
        else if (autoAF98452D_val == 2) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(207)), false);
        }
        else if (autoAF98452D_val == 3) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(213)), false);
        }
        else {
        }
        lv_spawnPoint += 1;
    }
    PlayerGroupLoopEnd();
    libNtve_gf_HideGameUI(false, gv_playersInBattleWithZauberer1stForm);
    PlayerGroupLoopBegin(gv_playersInBattleWithZauberer1stForm);
   // for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        //gv_autosavePrevention[(PlayerGroupLoopCurrent() - 1)] = true;
   // }
    PlayerGroupLoopEnd();
    TransmissionSend(gv_playersInBattleWithZauberer1stForm, TransmissionSourceFromModel("TassadarPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/5CE524CE"), StringExternal("Param/Value/881CE2C2"), 5.0, c_transmissionDurationSet, true);
    Wait(1.0, c_timeReal);
    autoF7D1EF20_n = 30;
    for (autoF7D1EF20_i = 1; autoF7D1EF20_i <= autoF7D1EF20_n; autoF7D1EF20_i += 1) {
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        Wait(0.1, c_timeReal);
    }
    libNtve_gf_UnitCreateFacingPoint(1, "Zauberer", 0, 15, RegionGetCenter(RegionFromId(203)), UnitGetPosition(libNtve_gf_KillingUnit()));
    gv_zauberer1stForm = UnitLastCreated();
    libNtve_gf_PauseUnit(gv_zauberer1stForm, true);
    PlayerGroupLoopBegin(gv_playersInBattleWithZauberer1stForm);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_DisplayBossBar(PlayerGroupLoopCurrent(), "Assets\\Textures\\tassadarportrait_static.dds", StringExternal("Param/Value/60280CA1"), 100, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        libNtve_gf_SetBossBarBoss(PlayerGroupLoopCurrent(), gv_zauberer1stForm, true);
        libNtve_gf_SetBossBarRace(PlayerGroupLoopCurrent(), libNtve_ge_BossBarRace_Protoss, true);
        libNtve_gf_MoveBossBar(PlayerGroupLoopCurrent(), c_anchorTop, 0, 125);
    }
    PlayerGroupLoopEnd();
    UnitGroupLoopBegin(gv_dragonInBattleWithZauberer1stForm);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(gv_playersInBattleWithZauberer1stForm);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        gv_inCinematic[lv_pickedPlayerIndex] = false;
        CameraLockInput(PlayerGroupLoopCurrent(), false);
    }
    PlayerGroupLoopEnd();
    libNtve_gf_PauseUnit(gv_zauberer1stForm, false);
    libNtve_gf_HideGameUI(true, gv_playersInBattleWithZauberer1stForm);
    SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategoryCombat, 10.0, 1.0);
    SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategoryVoice, 10.0, 1.0);
    SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategorySpell, 10.0, 1.0);
    SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategoryAmbient, 10.0, 1.0);
    SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategoryUI, 10.0, 1.0);
    SoundtrackStop(gv_playersInBattleWithZauberer1stForm, c_soundtrackCategoryMusic, true);
    SoundtrackPlay(gv_playersInBattleWithZauberer1stForm, c_soundtrackCategoryMusic, "ZauberersTheme", c_soundtrackCueAny, 0, false);
    TriggerEnable(gt_SpawnZauberersMinions, true);
    TriggerEnable(gt_Zauberer1stFormAI, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnZauberer1stForm_Init () {
    gt_SpawnZauberer1stForm = TriggerCreate("gt_SpawnZauberer1stForm_Func");
    TriggerAddEventUnitDied(gt_SpawnZauberer1stForm, UnitRefFromVariable("gv_zauberersCrystal"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Zauberer 1st Form Death
//--------------------------------------------------------------------------------------------------
bool gt_Zauberer1stFormDeath_Func (bool testConds, bool runActions) {
    int auto366A1295_val;
    int auto65FF19DA_n;
    int auto65FF19DA_i;
    // Variable Declarations
    int lv_pickedPlayerIndex;
    int lv_spawnPoint;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Zauberer"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_SpawnZauberersMinions, false);
    UnitGroupLoopBegin(gv_zauberersMinions);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_dragonInBattleWithZauberer1stForm);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 20);
        if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].state == 1)) {
            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].state = 2;
            BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, "SQ9", PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].state);
        }
    }
    UnitGroupLoopEnd();
    UnitGroupClear(gv_dragonInBattleWithZauberer1stForm);
    PlayerGroupClear(gv_playersInBattleWithZauberer1stForm);
    gv_livingDragonsFightingZauberer1stForm = 0;
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
       // gv_autosavePrevention[(PlayerGroupLoopCurrent() - 1)] = true;
        libNtve_gf_ShowHideBossBar(false, PlayerGroupLoopCurrent());
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
        auto366A1295_val = lv_spawnPoint;
        if (auto366A1295_val == 0) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(205)), false);
        }
        else if (auto366A1295_val == 1) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(210)), false);
        }
        else if (auto366A1295_val == 2) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(207)), false);
        }
        else if (auto366A1295_val == 3) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(213)), false);
        }
        else {
        }
        lv_spawnPoint += 1;
    }
    PlayerGroupLoopEnd();
    libNtve_gf_HideGameUI(false, gv_playersInBioDome);
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        gv_inCinematic[lv_pickedPlayerIndex] = true;
        CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(214)), 5.0, -1, 10, false);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
    }
    PlayerGroupLoopEnd();
    TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel("TassadarPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/3E75D4E4"), StringExternal("Param/Value/4BAB0F7C"), 5.0, c_transmissionDurationSet, false);
    auto65FF19DA_n = 80;
    for (auto65FF19DA_i = 1; auto65FF19DA_i <= auto65FF19DA_n; auto65FF19DA_i += 1) {
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        Wait(0.1, c_timeReal);
    }
    gv_zaubererFirstFormAlreadyDead[0] = true;
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_SpawnZauberer2ndFormNormalWay, true, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Zauberer1stFormDeath_Init () {
    gt_Zauberer1stFormDeath = TriggerCreate("gt_Zauberer1stFormDeath_Func");
    TriggerAddEventUnitDied(gt_Zauberer1stFormDeath, UnitRefFromVariable("gv_zauberer1stForm"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Zauberer 1st Form AI
//--------------------------------------------------------------------------------------------------
bool gt_Zauberer1stFormAI_Func (bool testConds, bool runActions) {
    int auto5D248BF3_val;
    // Variable Declarations
    int lv_randomSkill;
    unit lv_target;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomSkill = RandomInt(0, 2);
    lv_target = UnitGroupRandomUnit(gv_dragonInBattleWithZauberer1stForm, c_unitCountAlive);
    auto5D248BF3_val = lv_randomSkill;
    if (auto5D248BF3_val == 0) {
        UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand("ZaubererFireball", 0), lv_target), c_orderQueueReplace);
        UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
    }
    else if (auto5D248BF3_val == 1) {
        UnitIssueOrder(gv_zauberer1stForm, OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
        UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
    }
    else if (auto5D248BF3_val == 2) {
        UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand("HybridCPlasmaBlast", 0), lv_target), c_orderQueueReplace);
        UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Zauberer1stFormAI_Init () {
    gt_Zauberer1stFormAI = TriggerCreate("gt_Zauberer1stFormAI_Func");
    TriggerEnable(gt_Zauberer1stFormAI, false);
    TriggerAddEventTimePeriodic(gt_Zauberer1stFormAI, 10.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zauberer 2nd Form (Normal Way)
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZauberer2ndFormNormalWay_Func (bool testConds, bool runActions) {
    int autoE6D0D4FE_val;
    // Variable Declarations
    int lv_pickedPlayerIndex;
    int lv_spawnPoint;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        //gv_autosavePrevention[(PlayerGroupLoopCurrent() - 1)] = true;
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        UnitGroupAdd(gv_dragonInBattleWithZauberer2ndForm, gv_players[lv_pickedPlayerIndex].dragon);
        PlayerGroupAdd(gv_playersInBattleWithZauberer2ndForm, PlayerGroupLoopCurrent());
        gv_livingDragonsFightingZauberer2ndForm += 1;
        UnitSetPropertyFixed(gv_players[lv_pickedPlayerIndex].dragon, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(gv_players[lv_pickedPlayerIndex].dragon, c_unitPropEnergyPercent, 100.0);
        UnitSetPropertyFixed(gv_players[lv_pickedPlayerIndex].dragon, c_unitPropShieldsPercent, 100.0);
        autoE6D0D4FE_val = lv_spawnPoint;
        if (autoE6D0D4FE_val == 0) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(205)), false);
        }
        else if (autoE6D0D4FE_val == 1) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(210)), false);
        }
        else if (autoE6D0D4FE_val == 2) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(207)), false);
        }
        else if (autoE6D0D4FE_val == 3) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(213)), false);
        }
        else {
        }
        lv_spawnPoint += 1;
    }
    PlayerGroupLoopEnd();
    TransmissionSend(gv_playersInBattleWithZauberer2ndForm, TransmissionSourceFromModel("HybridProtossPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/56A8C6FF"), StringExternal("Param/Value/1B366F05"), 5.0, c_transmissionDurationSet, true);
    Wait(3.0, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Zauberer2", 0, 15, RegionGetCenter(RegionFromId(203)), UnitGetPosition(gv_zauberer2ndForm));
    gv_zauberer2ndForm = UnitLastCreated();
    libNtve_gf_PauseUnit(gv_zauberer2ndForm, true);
    PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_DisplayBossBar(PlayerGroupLoopCurrent(), "Assets\\Textures\\btn-unit-xelnaga-destroyer.dds", StringExternal("Param/Value/62B8B3DD"), 100, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        libNtve_gf_SetBossBarBoss(PlayerGroupLoopCurrent(), gv_zauberer2ndForm, true);
        libNtve_gf_SetBossBarRace(PlayerGroupLoopCurrent(), libNtve_ge_BossBarRace_Protoss, true);
        libNtve_gf_MoveBossBar(PlayerGroupLoopCurrent(), c_anchorTop, 0, 125);
    }
    PlayerGroupLoopEnd();
    UnitGroupLoopBegin(gv_dragonInBattleWithZauberer2ndForm);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
        gv_inCinematic[lv_pickedPlayerIndex] = false;
    }
    PlayerGroupLoopEnd();
    libNtve_gf_PauseUnit(gv_zauberer2ndForm, false);
    libNtve_gf_HideGameUI(true, gv_playersInBattleWithZauberer2ndForm);
    TriggerEnable(gt_SpawnZauberersMinions, true);
    TriggerEnable(gt_Zauberer2ndFormAI, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnZauberer2ndFormNormalWay_Init () {
    gt_SpawnZauberer2ndFormNormalWay = TriggerCreate("gt_SpawnZauberer2ndFormNormalWay_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zauberer 2nd Form (Special)
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZauberer2ndFormSpecial_Func (bool testConds, bool runActions) {
    int autoAE86F50E_val;
    int auto111DE31D_n;
    int auto111DE31D_i;
    // Variable Declarations
    int lv_pickedPlayerIndex;
    int lv_spawnPoint;
    int lv_numPlayers;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!gv_zaubererFirstFormAlreadyDead[(UnitGetOwner(libNtve_gf_KillingUnit()) - 1)]) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_TeleporttoBioDome, false);
    TriggerEnable(gt_TeleporttoCreton, false);
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        //gv_autosavePrevention[(PlayerGroupLoopCurrent() - 1)] = true;
        CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(214)), 5.0, -1, 10, false);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        gv_inCinematic[lv_pickedPlayerIndex] = true;
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(214));
        gv_zauberer1stFormRevealer[lv_pickedPlayerIndex] = VisRevealerLastCreated();
        libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
        UnitGroupAdd(gv_dragonInBattleWithZauberer2ndForm, gv_players[lv_pickedPlayerIndex].dragon);
        PlayerGroupAdd(gv_playersInBattleWithZauberer2ndForm, PlayerGroupLoopCurrent());
        gv_livingDragonsFightingZauberer2ndForm += 1;
        autoAE86F50E_val = lv_spawnPoint;
        if (autoAE86F50E_val == 0) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(205)), false);
        }
        else if (autoAE86F50E_val == 1) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(210)), false);
        }
        else if (autoAE86F50E_val == 2) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(207)), false);
        }
        else if (autoAE86F50E_val == 3) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(213)), false);
        }
        else {
        }
        lv_spawnPoint += 1;
    }
    PlayerGroupLoopEnd();
    libNtve_gf_HideGameUI(false, gv_playersInBattleWithZauberer2ndForm);
    TransmissionSend(gv_playersInBattleWithZauberer2ndForm, TransmissionSourceFromModel("HybridProtossPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/074636AE"), StringExternal("Param/Value/3C0A34BC"), 5.0, c_transmissionDurationSet, true);
    Wait(1.0, c_timeReal);
    auto111DE31D_n = 30;
    for (auto111DE31D_i = 1; auto111DE31D_i <= auto111DE31D_n; auto111DE31D_i += 1) {
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
        Wait(0.1, c_timeReal);
    }
    libNtve_gf_UnitCreateFacingPoint(1, "Zauberer2", 0, 15, RegionGetCenter(RegionFromId(203)), UnitGetPosition(libNtve_gf_KillingUnit()));
    gv_zauberer2ndForm = UnitLastCreated();
    libNtve_gf_PauseUnit(gv_zauberer2ndForm, true);
    PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_DisplayBossBar(PlayerGroupLoopCurrent(), "Assets\\Textures\\tassadarportrait_static.dds", StringExternal("Param/Value/A4EF394E"), 100, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        libNtve_gf_SetBossBarBoss(PlayerGroupLoopCurrent(), gv_zauberer2ndForm, true);
        libNtve_gf_SetBossBarRace(PlayerGroupLoopCurrent(), libNtve_ge_BossBarRace_Protoss, true);
        libNtve_gf_MoveBossBar(PlayerGroupLoopCurrent(), c_anchorTop, 0, 125);
    }
    PlayerGroupLoopEnd();
    UnitGroupLoopBegin(gv_dragonInBattleWithZauberer2ndForm);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        gv_inCinematic[lv_pickedPlayerIndex] = false;
        CameraLockInput(PlayerGroupLoopCurrent(), false);
    }
    PlayerGroupLoopEnd();
    libNtve_gf_PauseUnit(gv_zauberer2ndForm, false);
    libNtve_gf_HideGameUI(true, gv_playersInBattleWithZauberer2ndForm);
    SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategoryCombat, 10.0, 1.0);
    SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategoryVoice, 10.0, 1.0);
    SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategorySpell, 10.0, 1.0);
    SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategoryAmbient, 10.0, 1.0);
    SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategoryUI, 10.0, 1.0);
    SoundtrackStop(gv_playersInBattleWithZauberer2ndForm, c_soundtrackCategoryMusic, true);
    SoundtrackPlay(gv_playersInBattleWithZauberer2ndForm, c_soundtrackCategoryMusic, "ZauberersTheme", c_soundtrackCueAny, 0, false);
    TriggerEnable(gt_SpawnZauberersMinions, true);
    TriggerEnable(gt_Zauberer2ndFormAI, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnZauberer2ndFormSpecial_Init () {
    gt_SpawnZauberer2ndFormSpecial = TriggerCreate("gt_SpawnZauberer2ndFormSpecial_Func");
    TriggerAddEventUnitDied(gt_SpawnZauberer2ndFormSpecial, UnitRefFromVariable("gv_zauberersCrystal"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Zauberer 2nd Form Death
//--------------------------------------------------------------------------------------------------
bool gt_Zauberer2ndFormDeath_Func (bool testConds, bool runActions) {
    int auto157376FC_val;
    // Variable Declarations
    int lv_pickedPlayerIndex;
    int lv_spawnPoint;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Zauberer2"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_zaubererDead = true;
    PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        gv_inCinematic[lv_pickedPlayerIndex] = true;
        CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(214)), 5.0, -1, 10, false);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
    }
    PlayerGroupLoopEnd();
    TriggerEnable(gt_SpawnZauberersMinions, false);
    UnitGroupLoopBegin(gv_zauberersMinions);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerGroupAdd(gv_playersWhoHaveDefeatedZauberer, PlayerGroupLoopCurrent());
        PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 30);
        libNtve_gf_ShowHideBossBar(false, PlayerGroupLoopCurrent());
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
        if ((UnitLevel(gv_players[lv_pickedPlayerIndex].dragon) != 100)) {
            gf_AddExperience(gv_players[lv_pickedPlayerIndex].dragon, 23000.0);
        }
        auto157376FC_val = lv_spawnPoint;
        if (auto157376FC_val == 0) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(205)), false);
        }
        else if (auto157376FC_val == 1) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(210)), false);
        }
        else if (auto157376FC_val == 2) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(207)), false);
        }
        else if (auto157376FC_val == 3) {
            UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(213)), false);
        }
        else {
        }
        lv_spawnPoint += 1;
    }
    PlayerGroupLoopEnd();
    UnitGroupLoopBegin(gv_dragonInBattleWithZauberer2ndForm);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].state == 2)) {
            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].state = 3;
            ObjectiveSetState(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].objective, c_objectiveStateCompleted);
            ObjectiveDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].objective);
            BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, "SQ9", PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].state);
            PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].ping);
        }
    }
    UnitGroupLoopEnd();
    libNtve_gf_HideGameUI(false, gv_playersInBattleWithZauberer2ndForm);
    TransmissionSend(gv_playersInBattleWithZauberer2ndForm, TransmissionSourceFromModel("HybridProtossPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/8984FD5F"), StringExternal("Param/Value/C033FA05"), 5.0, c_transmissionDurationSet, true);
    UnitGroupLoopBegin(gv_dragonInBattleWithZauberer2ndForm);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        CameraLockInput(UnitGetOwner(UnitGroupLoopCurrent()), false);
    }
    UnitGroupLoopEnd();
    //UnitCreate(1, "gv_TimeWarpBot", 0, 15, gv_TimeWarpBotLocation, 270.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle,StringExternal("Param/Value/506A51FE"));
    UnitCreate(1, "MagicalDemonicSheep", c_unitCreateIgnorePlacement, 15, RegionRandomPoint(RegionFromName("Boss Fight Warp Out Zone")), 270);
    gv_MagicalDemonicSheep = UnitLastCreated();
    libNtve_gf_HideGameUI(true, gv_playersInBattleWithZauberer2ndForm);
    //TimerStart(gv_zaubererTimer, 15.0, false, c_timeReal);
   //TimerWindowCreate(gv_zaubererTimer, StringExternal("Param/Value/7035D573"), true, false);
   // gv_zaubererTimerWindow = TimerWindowLastCreated();
   // TimerWindowShow(gv_zaubererTimerWindow, PlayerGroupAll(), false);
   // TimerWindowShow(gv_zaubererTimerWindow, gv_playersInBioDome, true);
   // libNtve_gf_WaitForTimer(gv_zaubererTimer, 0.0, false);
   // TimerWindowDestroy(gv_zaubererTimerWindow);
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_playersInBioDome, gv_playerswatchingendingcinematic);
    //TriggerExecute(gt_EndingCinematic, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Zauberer2ndFormDeath_Init () {
    gt_Zauberer2ndFormDeath = TriggerCreate("gt_Zauberer2ndFormDeath_Func");
    TriggerAddEventUnitDied(gt_Zauberer2ndFormDeath, UnitRefFromVariable("gv_zauberer2ndForm"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Warp Out From Boss Arena(Ignore, look for Magical Demonic Sheep)
//--------------------------------------------------------------------------------------------------
bool gt_WarpOutFromBossArena_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
            return false;
        }
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    TriggerExecute(gt_DragonDiesinZauberer2, false, true);
    
    
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WarpOutFromBossArena_Init () {
    gt_WarpOutFromBossArena = TriggerCreate("gt_WarpOutFromBossArena_Func");
   TriggerAddEventUnitDied(gt_WarpOutFromBossArena, UnitRefFromVariable("gv_TimeWarpBot"));
   
}
//--------------------------------------------------------------------------------------------------
// Trigger: Zauberer 2nd Form AI
//--------------------------------------------------------------------------------------------------
bool gt_Zauberer2ndFormAI_Func (bool testConds, bool runActions) {
    int auto6D220EA7_val;
    // Variable Declarations
    int lv_randomSkill;
    unit lv_target;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomSkill = RandomInt(0, 4);
    lv_target = UnitGroupRandomUnit(gv_dragonInBattleWithZauberer2ndForm, c_unitCountAlive);
    auto6D220EA7_val = lv_randomSkill;
    if (auto6D220EA7_val == 0) {
        UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("ZaubererFireball", 0), lv_target), c_orderQueueReplace);
        UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
    }
    else if (auto6D220EA7_val == 1) {
        UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("FireClaws", 0), lv_target), c_orderQueueReplace);
        UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
    }
    else if (auto6D220EA7_val == 2) {
        UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("Inferno", 0), lv_target), c_orderQueueReplace);
        UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
    }
    else if (auto6D220EA7_val == 3) {
        UnitIssueOrder(gv_zauberer2ndForm, Order(AbilityCommand("Nova", 0)), c_orderQueueReplace);
        UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
    }
    else if (auto6D220EA7_val == 4) {
        UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingPoint(AbilityCommand("FlameEgg", 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
        UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Zauberer2ndFormAI_Init () {
    gt_Zauberer2ndFormAI = TriggerCreate("gt_Zauberer2ndFormAI_Func");
    TriggerEnable(gt_Zauberer2ndFormAI, false);
    TriggerAddEventTimePeriodic(gt_Zauberer2ndFormAI, 10.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam Set health
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamSethealth_Func (bool testConds, bool runActions) {
    // Actions
     int healthcap;
    if (!runActions) {
        return true;
    }
    healthcap = PlayerGroupCount(PlayerGroupActive());
    if (healthcap >3){
            healthcap = 3;
    }
    gv_machinaDePlagam = UnitFromId(1711);
    UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(healthcap)));
    UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropShieldsMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(PlayerGroupActive()))));
    UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropEnergyMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropEnergyMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(PlayerGroupActive()))));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamSethealth_Init () {
    int healthcap = 0;
    gt_MachinaDePlagamSethealth = TriggerCreate("gt_MachinaDePlagamSethealth_Func");
    TriggerAddEventTimeElapsed(gt_MachinaDePlagamSethealth, 5.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Machina De Plagam Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateMachinaDePlagamWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagDestroy(gv_machinaDePlagamWarning[(UnitGetOwner(EventUnit()) - 1)]);
    TextTagCreate(StringExternal("Param/Value/81DA56B8"), 24, PointFromId(2664), 1.0, true, true, PlayerGroupSingle(UnitGetOwner(EventUnit())));
    gv_machinaDePlagamWarning[(UnitGetOwner(EventUnit()) - 1)] = TextTagLastCreated();
    TextTagSetTime(gv_machinaDePlagamWarning[(UnitGetOwner(EventUnit()) - 1)], c_textTagTimeDuration, 524288.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateMachinaDePlagamWarning_Init () {
    gt_CreateMachinaDePlagamWarning = TriggerCreate("gt_CreateMachinaDePlagamWarning_Func");
    TriggerAddEventUnitRangePoint(gt_CreateMachinaDePlagamWarning, null, PointFromId(2664), 25.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Machina De Plagam Warning
//--------------------------------------------------------------------------------------------------
bool gt_DestroyMachinaDePlagamWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagDestroy(gv_machinaDePlagamWarning[(UnitGetOwner(EventUnit()) - 1)]);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DestroyMachinaDePlagamWarning_Init () {
    gt_DestroyMachinaDePlagamWarning = TriggerCreate("gt_DestroyMachinaDePlagamWarning_Func");
    TriggerAddEventUnitRangePoint(gt_DestroyMachinaDePlagamWarning, null, PointFromId(2664), 25.0, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero attacks Machina De Plagam
//--------------------------------------------------------------------------------------------------
bool gt_HeroattacksMachinaDePlagam_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (UnitGroupHasUnit(gv_unitsthatdidDamagetoMachinaDePlagam, EventUnitTarget())) {
            return false;
        }
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnitTarget()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupAdd(gv_unitsthatdidDamagetoMachinaDePlagam, EventUnitTarget());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroattacksMachinaDePlagam_Init () {
    gt_HeroattacksMachinaDePlagam = TriggerCreate("gt_HeroattacksMachinaDePlagam_Func");
    TriggerAddEventUnitAttacked2(gt_HeroattacksMachinaDePlagam, UnitRefFromVariable("gv_machinaDePlagam"), null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam Enter
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    if (!gv_machinaDePlagamisDead) {
        gv_inFightwithMachinaDePlagam[lv_triggeringPlayerIndex] = true;
        SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryCombat, 10.0, 1.0);
        SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, 10.0, 1.0);
        SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategorySpell, 10.0, 1.0);
        SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 10.0, 1.0);
        SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryUI, 10.0, 1.0);
        SoundtrackStop(PlayerGroupSingle(lv_triggeringPlayer), c_soundtrackCategoryMusic, false);
        SoundPlay(SoundLink("MachinaDePlagamTheme", -1), PlayerGroupSingle(lv_triggeringPlayer), 100.0, 0.0);
        gv_machinaDePlagamsTheme[lv_triggeringPlayerIndex] = SoundLastPlayed();
        libNtve_gf_DisplayBossBar(lv_triggeringPlayer, "Assets\\Textures\\colossusportrait_static.dds", StringExternal("Param/Value/72B4CF70"), 100, PlayerGroupSingle(lv_triggeringPlayer));
        libNtve_gf_SetBossBarBoss(lv_triggeringPlayer, gv_machinaDePlagam, true);
        libNtve_gf_SetBossBarRace(lv_triggeringPlayer, libNtve_ge_BossBarRace_Protoss, true);
        libNtve_gf_MoveBossBar(lv_triggeringPlayer, c_anchorTop, 0, 150);
    gv_locationString[lv_triggeringPlayerIndex] = "Machina De Plagam's Crater";
    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamEnter_Init () {
    gt_MachinaDePlagamEnter = TriggerCreate("gt_MachinaDePlagamEnter_Func");
    TriggerAddEventUnitRegion(gt_MachinaDePlagamEnter, UnitRefFromVariable("gv_players[0].dragon"), RegionFromId(227), true);
    TriggerAddEventUnitRegion(gt_MachinaDePlagamEnter, UnitRefFromVariable("gv_players[1].dragon"), RegionFromId(227), true);
    TriggerAddEventUnitRegion(gt_MachinaDePlagamEnter, UnitRefFromVariable("gv_players[2].dragon"), RegionFromId(227), true);
    TriggerAddEventUnitRegion(gt_MachinaDePlagamEnter, UnitRefFromVariable("gv_players[3].dragon"), RegionFromId(227), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam Leave
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamLeave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    gv_inFightwithMachinaDePlagam[lv_triggeringPlayerIndex] = false;
    UnitGroupRemove(gv_unitsthatdidDamagetoMachinaDePlagam, EventUnit());
    SoundStop(gv_machinaDePlagamsTheme[lv_triggeringPlayerIndex], true);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryCombat, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategorySpell, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryUI, 100.0, 1.0);
    SoundtrackStop(PlayerGroupSingle(lv_triggeringPlayerIndex), c_soundtrackCategoryMusic, false);
    libNtve_gf_ShowHideBossBar(false, lv_triggeringPlayer);
    gv_locationString[lv_triggeringPlayerIndex] = "Creton Trench";
    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamLeave_Init () {
    gt_MachinaDePlagamLeave = TriggerCreate("gt_MachinaDePlagamLeave_Func");
    TriggerAddEventUnitRegion(gt_MachinaDePlagamLeave, UnitRefFromVariable("gv_players[0].dragon"), RegionFromId(227), false);
    TriggerAddEventUnitRegion(gt_MachinaDePlagamLeave, UnitRefFromVariable("gv_players[1].dragon"), RegionFromId(227), false);
    TriggerAddEventUnitRegion(gt_MachinaDePlagamLeave, UnitRefFromVariable("gv_players[2].dragon"), RegionFromId(227), false);
    TriggerAddEventUnitRegion(gt_MachinaDePlagamLeave, UnitRefFromVariable("gv_players[3].dragon"), RegionFromId(227), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam Dragon Dies
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamDragonDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!gv_inFightwithMachinaDePlagam[(UnitGetOwner(EventUnit()) - 1)]) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    gv_inFightwithMachinaDePlagam[lv_triggeringPlayerIndex] = false;
    SoundStop(gv_machinaDePlagamsTheme[lv_triggeringPlayerIndex], true);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryCombat, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategorySpell, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryUI, 100.0, 1.0);
    SoundtrackStop(PlayerGroupSingle(lv_triggeringPlayerIndex), c_soundtrackCategoryMusic, false);
    libNtve_gf_ShowHideBossBar(false, lv_triggeringPlayer);
    UnitGroupRemove(gv_unitsthatdidDamagetoMachinaDePlagam, EventUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamDragonDies_Init () {
    gt_MachinaDePlagamDragonDies = TriggerCreate("gt_MachinaDePlagamDragonDies_Func");
    TriggerAddEventUnitDied(gt_MachinaDePlagamDragonDies, UnitRefFromVariable("gv_players[0].dragon"));
    TriggerAddEventUnitDied(gt_MachinaDePlagamDragonDies, UnitRefFromVariable("gv_players[1].dragon"));
    TriggerAddEventUnitDied(gt_MachinaDePlagamDragonDies, UnitRefFromVariable("gv_players[2].dragon"));
    TriggerAddEventUnitDied(gt_MachinaDePlagamDragonDies, UnitRefFromVariable("gv_players[3].dragon"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam Dies
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(EventUnit()));
    lv_triggeringPlayerIndex = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(libNtve_gf_KillingUnit());
    SoundStop(gv_machinaDePlagamsTheme[0], true);
    SoundStop(gv_machinaDePlagamsTheme[1], true);
    SoundStop(gv_machinaDePlagamsTheme[2], true);
    SoundStop(gv_machinaDePlagamsTheme[3], true);
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (gv_inFightwithMachinaDePlagam[(PlayerGroupLoopCurrent() - 1)]) {
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryCombat, 100.0, 1.0);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryVoice, 100.0, 1.0);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategorySpell, 100.0, 1.0);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryAmbient, 100.0, 1.0);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryAmbient, 100.0, 1.0);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryUI, 100.0, 1.0);
            gv_inFightwithMachinaDePlagam[(PlayerGroupLoopCurrent() - 1)] = false;
            libNtve_gf_ShowHideBossBar(false, PlayerGroupLoopCurrent());
        }
    }
    PlayerGroupLoopEnd();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B1865E9F"));
    UnitGroupLoopBegin(gv_machinaDePlagamsBackup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(UnitGroupLoopCurrent()));
    }
    UnitGroupLoopEnd();
    gv_machinaDePlagamisDead = true;
    TriggerEnable(gt_MachinaDePlagamRespawn, true);
    UnitGroupLoopBegin(gv_unitsthatdidDamagetoMachinaDePlagam);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_AddExperience(UnitGroupLoopCurrent(), 9000.0);
        PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 15);
        if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[7].state == 2)) {
            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[7].state = 3;
            ObjectiveSetName(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[7].objective, StringExternal("Param/Value/BDB7145A"));
            SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), 100.0, 0.0);
            BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, "SQ7", PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[7].state);
            TextTagCreate(StringExternal("Param/Value/836C72B8"), 72, UnitGetPosition(UnitFromId(2595)), 6.0, true, true, PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())));
            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[7].textTag = TextTagLastCreated();
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
            TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
            TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2595), 2.5);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
            PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[7].ping);
            PingCreate(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), "PingObjective", UnitGetPosition(UnitFromId(2595)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[7].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
        }
    }
    UnitGroupLoopEnd();
    UnitGroupClear(gv_unitsthatdidDamagetoMachinaDePlagam);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamDies_Init () {
    gt_MachinaDePlagamDies = TriggerCreate("gt_MachinaDePlagamDies_Func");
    TriggerAddEventUnitDied(gt_MachinaDePlagamDies, UnitRefFromVariable("gv_machinaDePlagam"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam Respawn
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamRespawn_Func (bool testConds, bool runActions) {
    // Conditions
    int healthcap;
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(227), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(227), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(227), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(227), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!gv_machinaDePlagamisDead) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/22DAF5ED"));
    UnitCreate(1, "MachinaDePlagam", 0, 15, RegionGetCenter(RegionFromId(227)), 270.0);
    gv_machinaDePlagam = UnitLastCreated();
    gv_machinaDePlagamisDead = false;
     
    healthcap = PlayerGroupCount(PlayerGroupActive());
    if (healthcap >3){
            healthcap = 3;
    }
    UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(healthcap)));
    UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropShieldsMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(PlayerGroupActive()))));
    UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropEnergyMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropEnergyMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(PlayerGroupActive()))));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamRespawn_Init () {
    int healthcap = 0;
    gt_MachinaDePlagamRespawn = TriggerCreate("gt_MachinaDePlagamRespawn_Func");
    TriggerEnable(gt_MachinaDePlagamRespawn, false);
    TriggerAddEventTimePeriodic(gt_MachinaDePlagamRespawn, 180.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam Backup
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamBackup_Func (bool testConds, bool runActions) {
    int autoB07D01D8_val;
    // Variable Declarations
    int lv_randomEnemy;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (gv_machinaDePlagamisDead) {
            return false;
        }
        if (!((gv_inFightwithMachinaDePlagam[0] || gv_inFightwithMachinaDePlagam[1] || gv_inFightwithMachinaDePlagam[2] || gv_inFightwithMachinaDePlagam[3]))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((PlayerGroupCount(gv_humanPlayers) == 1)) {
        lv_randomEnemy = RandomInt(0, 1);
    }
    else {
        if ((PlayerGroupCount(gv_humanPlayers) == 2)) {
            lv_randomEnemy = RandomInt(0, 3);
        }
        else {
            if ((PlayerGroupCount(gv_humanPlayers) == 3)) {
                lv_randomEnemy = RandomInt(0, 5);
            }
            else {
                if ((PlayerGroupCount(gv_humanPlayers) == 4)) {
                    lv_randomEnemy = RandomInt(0, 6);
                }
            }
        }
    }
    autoB07D01D8_val = lv_randomEnemy;
    if (autoB07D01D8_val == 0) {
        UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
    }
    else if (autoB07D01D8_val == 1) {
        UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
    }
    else if (autoB07D01D8_val == 2) {
        UnitCreate(1, "EliteCretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
    }
    else if (autoB07D01D8_val == 3) {
        UnitCreate(1, "EliteCretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
    }
    else if (autoB07D01D8_val == 4) {
        UnitCreate(1, "CretonWarMachine", 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
    }
    else if (autoB07D01D8_val == 5) {
        UnitCreate(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
    }
    else if (autoB07D01D8_val == 6) {
        UnitCreate(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
    }
    else {
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamBackup_Init () {
    gt_MachinaDePlagamBackup = TriggerCreate("gt_MachinaDePlagamBackup_Func");
    TriggerAddEventTimePeriodic(gt_MachinaDePlagamBackup, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unit attacks Sremagsi
//--------------------------------------------------------------------------------------------------
bool gt_UnitattacksSremagsi_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((!UnitGroupHasUnit(gv_unitsthatdidDamagetoSremagsi, EventUnitDamageSourceUnit()) && ((UnitGetOwner(EventUnitDamageSourceUnit()) == 1) || (UnitGetOwner(EventUnitDamageSourceUnit()) == 2) || (UnitGetOwner(EventUnitDamageSourceUnit()) == 3) || (UnitGetOwner(EventUnitDamageSourceUnit()) == 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupAdd(gv_unitsthatdidDamagetoSremagsi, EventUnitDamageSourceUnit());
    
    VisRevealerCreate(15, RegionFromId(228));
    VisRevealerCreate(15, RegionFromId(229));
    VisRevealerCreate(15, RegionFromId(230));
    if ((!libNtve_gf_UnitInRegion(EventUnitTarget(), RegionFromId(228)) && !libNtve_gf_UnitInRegion(EventUnitTarget(), RegionFromId(229)) && !libNtve_gf_UnitInRegion(EventUnitTarget(), RegionFromId(230)))) {
        UnitSetPosition(EventUnitTarget(), RegionRandomPoint(RegionFromId(241)), false);
        //CameraPan(UnitGetOwner(EventUnitTarget()), RegionGetCenter(RegionFromId(241)), 2.0, -1, 10.0, false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnitattacksSremagsi_Init () {
    gt_UnitattacksSremagsi = TriggerCreate("gt_UnitattacksSremagsi_Func");
    TriggerAddEventUnitDamaged(gt_UnitattacksSremagsi, UnitRefFromVariable("gv_sremagsi"), c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi set health
//--------------------------------------------------------------------------------------------------
bool gt_Sremagsisethealth_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetPropertyFixed(gv_sremagsi, c_unitPropLifeMax, (UnitGetPropertyFixed(UnitFromId(1151), c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
    UnitSetPropertyFixed(gv_sremagsi, c_unitPropLifePercent, 100.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Sremagsisethealth_Init () {
    gt_Sremagsisethealth = TriggerCreate("gt_Sremagsisethealth_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi Lair Enter
//--------------------------------------------------------------------------------------------------
bool gt_SremagsiLairEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    int lv_tP;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_tP = UnitGetOwner(EventUnit());
    lv_tPI = (UnitGetOwner(EventUnit()) - 1);
    if (!gv_sremagsiDead) {
        gv_inFightWithSremagsi[lv_tPI] = true;
        SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "SremagsisTheme", c_soundtrackCueAny, 0, false);
        libNtve_gf_DisplayBossBar(lv_tP, "Assets\\Textures\\btn-unit-zerg-leviathan.dds", StringExternal("Param/Value/6DD637A1"), 100, PlayerGroupSingle(lv_tP));
        libNtve_gf_SetBossBarBoss(lv_tP, gv_sremagsi, true);
        libNtve_gf_SetBossBarRace(lv_tP, libNtve_ge_BossBarRace_Zerg, true);
        libNtve_gf_MoveBossBar(lv_tP, c_anchorTop, 0, 150);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SremagsiLairEnter_Init () {
    gt_SremagsiLairEnter = TriggerCreate("gt_SremagsiLairEnter_Func");
    TriggerAddEventUnitRegion(gt_SremagsiLairEnter, UnitRefFromVariable("gv_players[0].dragon"), RegionFromId(212), true);
    TriggerAddEventUnitRegion(gt_SremagsiLairEnter, UnitRefFromVariable("gv_players[1].dragon"), RegionFromId(212), true);
    TriggerAddEventUnitRegion(gt_SremagsiLairEnter, UnitRefFromVariable("gv_players[2].dragon"), RegionFromId(212), true);
    TriggerAddEventUnitRegion(gt_SremagsiLairEnter, UnitRefFromVariable("gv_players[3].dragon"), RegionFromId(212), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi Lair Exit
//--------------------------------------------------------------------------------------------------
bool gt_SremagsiLairExit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    gv_inFightWithSremagsi[lv_triggeringPlayerIndex] = false;
    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "InfestationTheme", c_soundtrackCueAny, 0, false);
    libNtve_gf_ShowHideBossBar(false, lv_triggeringPlayer);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SremagsiLairExit_Init () {
    gt_SremagsiLairExit = TriggerCreate("gt_SremagsiLairExit_Func");
    TriggerAddEventUnitRegion(gt_SremagsiLairExit, UnitRefFromVariable("gv_players[0].dragon"), RegionFromId(211), true);
    TriggerAddEventUnitRegion(gt_SremagsiLairExit, UnitRefFromVariable("gv_players[1].dragon"), RegionFromId(211), true);
    TriggerAddEventUnitRegion(gt_SremagsiLairExit, UnitRefFromVariable("gv_players[2].dragon"), RegionFromId(211), true);
    TriggerAddEventUnitRegion(gt_SremagsiLairExit, UnitRefFromVariable("gv_players[3].dragon"), RegionFromId(211), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi Dragon Dies
//--------------------------------------------------------------------------------------------------
bool gt_SremagsiDragonDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!gv_inFightWithSremagsi[(UnitGetOwner(EventUnit()) - 1)]) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_inFightWithSremagsi[(UnitGetOwner(EventUnit()) - 1)] = false;
    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
    libNtve_gf_ShowHideBossBar(false, UnitGetOwner(EventUnit()));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SremagsiDragonDies_Init () {
    gt_SremagsiDragonDies = TriggerCreate("gt_SremagsiDragonDies_Func");
    TriggerAddEventUnitDied(gt_SremagsiDragonDies, UnitRefFromVariable("gv_players[0].dragon"));
    TriggerAddEventUnitDied(gt_SremagsiDragonDies, UnitRefFromVariable("gv_players[1].dragon"));
    TriggerAddEventUnitDied(gt_SremagsiDragonDies, UnitRefFromVariable("gv_players[2].dragon"));
    TriggerAddEventUnitDied(gt_SremagsiDragonDies, UnitRefFromVariable("gv_players[3].dragon"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi Dies
//--------------------------------------------------------------------------------------------------
bool gt_SremagsiDies_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7BA0B288"));
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (gv_inFightWithSremagsi[(PlayerGroupLoopCurrent() - 1)]) {
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryCombat, 100.0, 1.0);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryVoice, 100.0, 1.0);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategorySpell, 100.0, 1.0);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryAmbient, 100.0, 1.0);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryUI, 100.0, 1.0);
            SoundtrackStop(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryMusic, true);
            SoundtrackPlay(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryMusic, "InfestationTheme", c_soundtrackCueAny, 0, false);
            libNtve_gf_ShowHideBossBar(false, PlayerGroupLoopCurrent());
            
        }
    }
    PlayerGroupLoopEnd();
    UnitGroupLoopBegin(gv_unitsthatdidDamagetoSremagsi);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_AddExperience(UnitGroupLoopCurrent(), 5000.0);
        PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 10);
        if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[5].state == 2)) {
            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[5].state = 3;
            BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, "SQ5", PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[5].state);
            ObjectiveSetName(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[5].objective, StringExternal("Param/Value/A62D176F"));
            PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[5].ping);
            PingCreate(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), "PingObjective", RegionGetCenter(RegionFromId(224)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[5].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
            SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), 100.0, 0.0);
            TextTagCreate(StringExternal("Param/Value/F1D75D0F"), 72, UnitGetPosition(UnitFromId(1597)), 6.0, true, true, PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())));
            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[5].textTag = TextTagLastCreated();
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
            TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
            TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1597), 5.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestedEgg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestedEgg2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Carcinode", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitKill(UnitFromId(2640));
    gv_inFightWithSremagsi[0] = false;
    gv_inFightWithSremagsi[1] = false;
    gv_inFightWithSremagsi[2] = false;
    gv_inFightWithSremagsi[3] = false;
    gv_sremagsiDead = true;
    TriggerEnable(gt_SremagsiRespawn, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SremagsiDies_Init () {
    gt_SremagsiDies = TriggerCreate("gt_SremagsiDies_Func");
    TriggerAddEventUnitDied(gt_SremagsiDies, UnitRefFromVariable("gv_sremagsi"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi Respawn
//--------------------------------------------------------------------------------------------------
bool gt_SremagsiRespawn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(228), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(229), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(230), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(228), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(229), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(230), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(228), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(229), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(230), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(228), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(229), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(230), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!gv_sremagsiDead) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/ACB85EF4"));
    UnitCreate(1, "Sremagsi", 0, 15, PointFromId(2665), 270.0);
    gv_sremagsi = UnitLastCreated();
    gv_sremagsiDead = false;
    UnitSetPropertyFixed(gv_sremagsi, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_sremagsi, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
    UnitSetPropertyFixed(gv_sremagsi, c_unitPropLifePercent, 100.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SremagsiRespawn_Init () {
    gt_SremagsiRespawn = TriggerCreate("gt_SremagsiRespawn_Func");
    TriggerEnable(gt_SremagsiRespawn, false);
    TriggerAddEventTimePeriodic(gt_SremagsiRespawn, 180.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Count Players Greater than 25
//--------------------------------------------------------------------------------------------------
bool gt_CountPlayersGreaterthan25_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetPropertyFixed(gv_players[0].dragon, c_unitPropLevel, c_unitPropCurrent) >= 25.0)) {
        gv_numPlayersHigherThan25 += 1;
    }
    if ((UnitGetPropertyFixed(gv_players[1].dragon, c_unitPropLevel, c_unitPropCurrent) >= 25.0)) {
        gv_numPlayersHigherThan25 += 1;
    }
    if ((UnitGetPropertyFixed(gv_players[2].dragon, c_unitPropLevel, c_unitPropCurrent) >= 25.0)) {
        gv_numPlayersHigherThan25 += 1;
    }
    if ((UnitGetPropertyFixed(gv_players[3].dragon, c_unitPropLevel, c_unitPropCurrent) >= 25.0)) {
        gv_numPlayersHigherThan25 += 1;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CountPlayersGreaterthan25_Init () {
    gt_CountPlayersGreaterthan25 = TriggerCreate("gt_CountPlayersGreaterthan25_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Guardian Spawn
//--------------------------------------------------------------------------------------------------
bool gt_GuardianSpawn_Func (bool testConds, bool runActions) {
    int auto6BC8ADC5_ae;
    int auto6BC8ADC5_ai;
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    int lv_c;
    int lv_d;
    // Variable Initialization
    // Actions
    statueSpawned = false;
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic)) {
            if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state == 2)) {
                ObjectiveSetName(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].objective, StringExternal("Param/Value/7BD4D7A8"));
                SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), 100.0, 0.0);
                PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping);
                PingCreate(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), "PingBoss", RegionGetCenter(RegionFromId(17)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.5);
            }
        }
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_CountPlayersGreaterthan25, false, true);
    if (libNtve_gf_UnitInRegion(gv_players[0].dragon, RegionFromId(17))) {
        VisRevealerCreate(1, RegionFromId(17));
        gv_guardianRevealers[0] = VisRevealerLastCreated();
        libNtve_gf_PauseUnit(gv_players[0].dragon, true);
        UnitGroupAdd(gv_dragonsInBattleWithGuardians, gv_players[0].dragon);
        PlayerGroupAdd(gv_playersinBattlewithGuardians, 1);
        CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 1), true);
        CameraPan(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 1), RegionGetCenter(RegionFromId(48)), 5.0, -1, 10, false);
        gv_inFightWithGaurdians[0] = true;
        UnitSetPosition(gv_players[0].dragon, RegionGetCenter(RegionFromId(48)), false);
        gv_livingDragonsinGaurdian += 1;
    }
    if (libNtve_gf_UnitInRegion(gv_players[1].dragon, RegionFromId(17))) {
        VisRevealerCreate(2, RegionFromId(17));
        gv_guardianRevealers[1] = VisRevealerLastCreated();
        libNtve_gf_PauseUnit(gv_players[1].dragon, true);
        UnitGroupAdd(gv_dragonsInBattleWithGuardians, gv_players[1].dragon);
        PlayerGroupAdd(gv_playersinBattlewithGuardians, 2);
        CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 2), true);
        CameraPan(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 2), RegionGetCenter(RegionFromId(48)), 5.0, -1, 10, false);
        gv_inFightWithGaurdians[1] = true;
        UnitSetPosition(gv_players[1].dragon, RegionGetCenter(RegionFromId(48)), false);
        gv_livingDragonsinGaurdian += 1;
    }
    if (libNtve_gf_UnitInRegion(gv_players[2].dragon, RegionFromId(17))) {
        VisRevealerCreate(3, RegionFromId(17));
        gv_guardianRevealers[2] = VisRevealerLastCreated();
        libNtve_gf_PauseUnit(gv_players[2].dragon, true);
        UnitGroupAdd(gv_dragonsInBattleWithGuardians, gv_players[2].dragon);
        PlayerGroupAdd(gv_playersinBattlewithGuardians, 3);
        CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 3), true);
        CameraPan(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 3), RegionGetCenter(RegionFromId(48)), 5.0, -1, 10, false);
        gv_inFightWithGaurdians[2] = true;
        UnitSetPosition(gv_players[2].dragon, RegionGetCenter(RegionFromId(48)), false);
        gv_livingDragonsinGaurdian += 1;
    }
    if (libNtve_gf_UnitInRegion(gv_players[3].dragon, RegionFromId(17))) {
        VisRevealerCreate(4, RegionFromId(17));
        gv_guardianRevealers[3] = VisRevealerLastCreated();
        libNtve_gf_PauseUnit(gv_players[3].dragon, true);
        UnitGroupAdd(gv_dragonsInBattleWithGuardians, gv_players[3].dragon);
        PlayerGroupAdd(gv_playersinBattlewithGuardians, 4);
        CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 4), true);
        CameraPan(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 4), RegionGetCenter(RegionFromId(48)), 5.0, -1, 10, false);
        gv_inFightWithGaurdians[3] = true;
        UnitSetPosition(gv_players[3].dragon, RegionGetCenter(RegionFromId(48)), false);
        gv_livingDragonsinGaurdian += 1;
    }
    libNtve_gf_CreateModelAtPoint("TimeWarpLaunch", RegionGetCenter(RegionFromId(48)));
    Wait(1.7, c_timeReal);
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionGetCenter(RegionFromId(26)));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionGetCenter(RegionFromId(45)));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionGetCenter(RegionFromId(46)));
    Wait(0.7, c_timeReal);
    auto6BC8ADC5_ae = 8;
    auto6BC8ADC5_ai = 1;
    lv_c = 1;
    for ( ; ( (auto6BC8ADC5_ai >= 0 && lv_c <= auto6BC8ADC5_ae) || (auto6BC8ADC5_ai <= 0 && lv_c >= auto6BC8ADC5_ae) ) ; lv_c += auto6BC8ADC5_ai ) {
        UnitCreate(1, "MineralField", 0, 0, RegionGetCenter(RegionFromId(47)), 270.0);
        gv_mineralBlocks[lv_c] = UnitLastCreated();
    }
    libNtve_gf_UnitCreateFacingPoint(1, "Korlic", 0, 15, RegionGetCenter(RegionFromId(26)), UnitGetPosition(libNtve_gf_KillingUnit()));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
    gv_korlic = UnitLastCreated();
    UnitGroupAdd(gv_guardians, gv_korlic);
    libNtve_gf_PauseUnit(gv_korlic, true);
    libNtve_gf_UnitCreateFacingPoint(1, "Madawc", 0, 15, RegionGetCenter(RegionFromId(45)), UnitGetPosition(libNtve_gf_KillingUnit()));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
    gv_madawc = UnitLastCreated();
    UnitGroupAdd(gv_guardians, gv_madawc);
    libNtve_gf_PauseUnit(gv_madawc, true);
    libNtve_gf_UnitCreateFacingPoint(1, "Tolic", 0, 15, RegionGetCenter(RegionFromId(46)), UnitGetPosition(libNtve_gf_KillingUnit()));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
    gv_tolic = UnitLastCreated();
    UnitGroupAdd(gv_guardians, gv_tolic);
    libNtve_gf_PauseUnit(gv_tolic, true);
    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryCombat, 75.0, 1.0);
    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryVoice, 10.0, 1.0);
    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategorySpell, 75.0, 1.0);
    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 10.0, 1.0);
    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryUI, 10.0, 1.0);
    SoundtrackStop(gv_playersinBattlewithGuardians, c_soundtrackCategoryMusic, false);
    SoundPlay(SoundLink("GuardiansTheme", -1), gv_playersinBattlewithGuardians, 100.0, 0.0);
    gv_guardiansTheme = SoundLastPlayed();
    gv_numGaurdiansDead = 0;
    PlayerGroupLoopBegin(gv_playersinBattlewithGuardians);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_DisplayBossBar((PlayerGroupLoopCurrent() + 0), "Assets\\Textures\\zealotportrait_static.dds", StringExternal("Param/Value/0FC70240"), 100, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        libNtve_gf_SetBossBarBoss((PlayerGroupLoopCurrent() + 0), gv_tolic, true);
        libNtve_gf_SetBossBarRace((PlayerGroupLoopCurrent() + 0), libNtve_ge_BossBarRace_Protoss, true);
        libNtve_gf_MoveBossBar((PlayerGroupLoopCurrent() + 0), c_anchorTop, 0, 125);
        libNtve_gf_DisplayBossBar((PlayerGroupLoopCurrent() + 4), "Assets\\Textures\\darktemplarportrait_static.dds", StringExternal("Param/Value/AD8A41AB"), 100, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        libNtve_gf_SetBossBarBoss((PlayerGroupLoopCurrent() + 4), gv_korlic, true);
        libNtve_gf_SetBossBarRace((PlayerGroupLoopCurrent() + 4), libNtve_ge_BossBarRace_Protoss, true);
        libNtve_gf_MoveBossBar((PlayerGroupLoopCurrent() + 4), c_anchorTop, -500, 125);
        libNtve_gf_DisplayBossBar((PlayerGroupLoopCurrent() + 8), "Assets\\Textures\\hightemplarportrait_static.dds", StringExternal("Param/Value/931C43C1"), 100, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        libNtve_gf_SetBossBarBoss((PlayerGroupLoopCurrent() + 8), gv_madawc, true);
        libNtve_gf_SetBossBarRace((PlayerGroupLoopCurrent() + 8), libNtve_ge_BossBarRace_Protoss, true);
        libNtve_gf_MoveBossBar((PlayerGroupLoopCurrent() + 8), c_anchorTop, 500, 125);
    }
    PlayerGroupLoopEnd();
    if (libNtve_gf_UnitInRegion(gv_players[0].dragon, RegionFromId(17))) {
        libNtve_gf_PauseUnit(gv_players[0].dragon, false);
        CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 1), false);
    }
    if (libNtve_gf_UnitInRegion(gv_players[1].dragon, RegionFromId(17))) {
        libNtve_gf_PauseUnit(gv_players[1].dragon, false);
        CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 2), false);
    }
    if (libNtve_gf_UnitInRegion(gv_players[2].dragon, RegionFromId(17))) {
        libNtve_gf_PauseUnit(gv_players[2].dragon, false);
        CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 3), false);
    }
    if (libNtve_gf_UnitInRegion(gv_players[3].dragon, RegionFromId(17))) {
        libNtve_gf_PauseUnit(gv_players[3].dragon, false);
        CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 4), false);
    }
    libNtve_gf_PauseUnit(gv_korlic, false);
    UnitIssueOrder(gv_korlic, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(47))), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_madawc, false);
    UnitIssueOrder(gv_madawc, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(47))), c_orderQueueReplace);
    libNtve_gf_PauseUnit(gv_tolic, false);
    UnitIssueOrder(gv_tolic, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(47))), c_orderQueueReplace);
    gv_guardiansDead = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GuardianSpawn_Init () {
    gt_GuardianSpawn = TriggerCreate("gt_GuardianSpawn_Func");
    TriggerAddEventUnitDied(gt_GuardianSpawn, UnitRefFromVariable("gv_zauberersStatue"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Korlic Dies
//--------------------------------------------------------------------------------------------------
bool gt_KorlicDies_Func (bool testConds, bool runActions) {
    int autoF042D0AF_ae;
    int autoF042D0AF_ai;
    // Variable Declarations
    int lv_u;
    int lv_c;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideBossBar(false, (UnitGetOwner(UnitGroupLoopCurrent()) + 4));
    }
    UnitGroupLoopEnd();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D0262864"));
    libNtve_gf_CreateModelAtPoint("MothershipTeleportOut", UnitGetPosition(EventUnit()));
    gv_numGaurdiansDead += 1;
    if ((gv_numGaurdiansDead == 3)) {
        UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitLevel(UnitGroupLoopCurrent()) != 100)) {
                gf_AddExperience(UnitGroupLoopCurrent(), 1500.0);
            }
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 5);
            if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state == 2)) {
                gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state = 3;
                ObjectiveSetDescription(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].objective, StringExternal("Param/Value/A3560FB6"));
                ObjectiveSetName(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].objective, StringExternal("Param/Value/7ED2B133"));
                SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), 100.0, 0.0);
                BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, "SQ4", PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state);
                TextTagCreate(StringExternal("Param/Value/EB4B3E34"), 72, UnitGetPosition(UnitFromId(1976)), 6.0, true, true, PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())));
                gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].textTag = TextTagLastCreated();
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
                TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1976), 5.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping);
                PingCreate(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), "PingObjective", RegionGetCenter(RegionFromId(225)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.5);
            }
        }
        UnitGroupLoopEnd();
        VisRevealerDestroy(gv_guardianRevealers[0]);
        VisRevealerDestroy(gv_guardianRevealers[1]);
        VisRevealerDestroy(gv_guardianRevealers[2]);
        VisRevealerDestroy(gv_guardianRevealers[3]);
        SoundStop(gv_guardiansTheme, true);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryCombat, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryVoice, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategorySpell, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryUI, 100.0, 1.0);
        SoundtrackPlay(gv_playersinBattlewithGuardians, c_soundtrackCategoryMusic, "RelamyCaveTheme", c_soundtrackCueAny, 0, false);
        gv_inFightWithGaurdians[0] = false;
        gv_inFightWithGaurdians[1] = false;
        gv_inFightWithGaurdians[2] = false;
        gv_inFightWithGaurdians[3] = false;
        UnitGroupClear(gv_dragonsInBattleWithGuardians);
        PlayerGroupClear(gv_playersinBattlewithGuardians);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5FC4FC56"));
        gv_guardiansDead = true;
        autoF042D0AF_ae = 8;
        autoF042D0AF_ai = 1;
        lv_c = 1;
        for ( ; ( (autoF042D0AF_ai >= 0 && lv_c <= autoF042D0AF_ae) || (autoF042D0AF_ai <= 0 && lv_c >= autoF042D0AF_ae) ) ; lv_c += autoF042D0AF_ai ) {
            UnitRemove(gv_mineralBlocks[lv_c]);
        }
        TriggerEnable(gt_GuardianRespawn, true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_KorlicDies_Init () {
    gt_KorlicDies = TriggerCreate("gt_KorlicDies_Func");
    TriggerAddEventUnitDied(gt_KorlicDies, UnitRefFromVariable("gv_korlic"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tolic Dies
//--------------------------------------------------------------------------------------------------
bool gt_TolicDies_Func (bool testConds, bool runActions) {
    int auto7DC75DFB_ae;
    int auto7DC75DFB_ai;
    // Variable Declarations
    int lv_u;
    int lv_c;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideBossBar(false, (UnitGetOwner(UnitGroupLoopCurrent()) + 0));
    }
    UnitGroupLoopEnd();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/75DA4E32"));
    libNtve_gf_CreateModelAtPoint("MothershipTeleportOut", UnitGetPosition(EventUnit()));
    gv_numGaurdiansDead += 1;
    if ((gv_numGaurdiansDead == 3)) {
        UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitLevel(UnitGroupLoopCurrent()) != 100)) {
                gf_AddExperience(UnitGroupLoopCurrent(), 3000.0);
            }
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 5);
            if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state == 2)) {
                gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state = 3;
                ObjectiveSetDescription(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].objective, StringExternal("Param/Value/648B2509"));
                ObjectiveSetName(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].objective, StringExternal("Param/Value/627202CB"));
                SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), 100.0, 0.0);
                BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, "SQ4", PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state);
                TextTagCreate(StringExternal("Param/Value/CB9B21A6"), 72, UnitGetPosition(UnitFromId(1976)), 6.0, true, true, PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())));
                gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].textTag = TextTagLastCreated();
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
                TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1976), 5.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping);
                PingCreate(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), "PingObjective", RegionGetCenter(RegionFromId(225)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.5);
            }
        }
        UnitGroupLoopEnd();
        VisRevealerDestroy(gv_guardianRevealers[0]);
        VisRevealerDestroy(gv_guardianRevealers[1]);
        VisRevealerDestroy(gv_guardianRevealers[2]);
        VisRevealerDestroy(gv_guardianRevealers[3]);
        SoundStop(gv_guardiansTheme, true);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryCombat, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryVoice, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategorySpell, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryUI, 100.0, 1.0);
        SoundtrackPlay(gv_playersinBattlewithGuardians, c_soundtrackCategoryMusic, "RelamyCaveTheme", c_soundtrackCueAny, 0, false);
        gv_inFightWithGaurdians[0] = false;
        gv_inFightWithGaurdians[1] = false;
        gv_inFightWithGaurdians[2] = false;
        gv_inFightWithGaurdians[3] = false;
        UnitGroupClear(gv_dragonsInBattleWithGuardians);
        PlayerGroupClear(gv_playersinBattlewithGuardians);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/289CA76C"));
        gv_guardiansDead = true;
        TriggerEnable(gt_GuardianRespawn, true);
        auto7DC75DFB_ae = 8;
        auto7DC75DFB_ai = 1;
        lv_c = 1;
        for ( ; ( (auto7DC75DFB_ai >= 0 && lv_c <= auto7DC75DFB_ae) || (auto7DC75DFB_ai <= 0 && lv_c >= auto7DC75DFB_ae) ) ; lv_c += auto7DC75DFB_ai ) {
            UnitRemove(gv_mineralBlocks[lv_c]);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TolicDies_Init () {
    gt_TolicDies = TriggerCreate("gt_TolicDies_Func");
    TriggerAddEventUnitDied(gt_TolicDies, UnitRefFromVariable("gv_tolic"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Madawc Dies
//--------------------------------------------------------------------------------------------------
bool gt_MadawcDies_Func (bool testConds, bool runActions) {
    int auto0CF0135C_ae;
    int auto0CF0135C_ai;
    // Variable Declarations
    int lv_u;
    int lv_c;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideBossBar(false, (UnitGetOwner(UnitGroupLoopCurrent()) + 8));
    }
    UnitGroupLoopEnd();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E1F8BA32"));
    libNtve_gf_CreateModelAtPoint("MothershipTeleportOut", UnitGetPosition(EventUnit()));
    gv_numGaurdiansDead += 1;
    if ((gv_numGaurdiansDead == 3)) {
        UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitLevel(UnitGroupLoopCurrent()) != 100)) {
                gf_AddExperience(UnitGroupLoopCurrent(), 3000.0);
            }
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 5);
            if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state == 2)) {
                gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state = 3;
                ObjectiveSetDescription(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].objective, StringExternal("Param/Value/144AD99C"));
                ObjectiveSetName(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].objective, StringExternal("Param/Value/0A386C3E"));
                SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), 100.0, 0.0);
                BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, "SQ4", PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state);
                TextTagCreate(StringExternal("Param/Value/7FB42C35"), 72, UnitGetPosition(UnitFromId(1976)), 6.0, true, true, PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())));
                gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].textTag = TextTagLastCreated();
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
                TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1976), 5.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping);
                PingCreate(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), "PingObjective", RegionGetCenter(RegionFromId(225)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.5);
            }
        }
        UnitGroupLoopEnd();
        VisRevealerDestroy(gv_guardianRevealers[0]);
        VisRevealerDestroy(gv_guardianRevealers[1]);
        VisRevealerDestroy(gv_guardianRevealers[2]);
        VisRevealerDestroy(gv_guardianRevealers[3]);
        SoundStop(gv_guardiansTheme, true);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryCombat, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryVoice, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategorySpell, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
        SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryUI, 100.0, 1.0);
        SoundtrackPlay(gv_playersinBattlewithGuardians, c_soundtrackCategoryMusic, "RelamyCaveTheme", c_soundtrackCueAny, 0, false);
        gv_inFightWithGaurdians[0] = false;
        gv_inFightWithGaurdians[1] = false;
        gv_inFightWithGaurdians[2] = false;
        gv_inFightWithGaurdians[3] = false;
        UnitGroupClear(gv_dragonsInBattleWithGuardians);
        PlayerGroupClear(gv_playersinBattlewithGuardians);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/66537BB6"));
        gv_guardiansDead = true;
        TriggerEnable(gt_GuardianRespawn, true);
        auto0CF0135C_ae = 8;
        auto0CF0135C_ai = 1;
        lv_c = 1;
        for ( ; ( (auto0CF0135C_ai >= 0 && lv_c <= auto0CF0135C_ae) || (auto0CF0135C_ai <= 0 && lv_c >= auto0CF0135C_ae) ) ; lv_c += auto0CF0135C_ai ) {
            UnitRemove(gv_mineralBlocks[lv_c]);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MadawcDies_Init () {
    gt_MadawcDies = TriggerCreate("gt_MadawcDies_Func");
    TriggerAddEventUnitDied(gt_MadawcDies, UnitRefFromVariable("gv_madawc"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: No Dragons in Gaurdian
//--------------------------------------------------------------------------------------------------
bool gt_NoDragonsinGaurdian_Func (bool testConds, bool runActions) {
    int autoB2DE0A59_ae;
    int autoB2DE0A59_ai;
    // Variable Declarations
    int lv_c;
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) != 16) && UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) && gv_inFightWithGaurdians[(UnitGetOwner(EventUnit()) - 1)]))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    gv_inFightWithGaurdians[lv_triggeringPlayerIndex] = false;
    UnitGroupRemove(gv_dragonsInBattleWithGuardians, EventUnit());
    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryCombat, 100.0, 1.0);
    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryVoice, 100.0, 1.0);
    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategorySpell, 100.0, 1.0);
    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryUI, 100.0, 1.0);
    libNtve_gf_ShowHideBossBar(false, (lv_triggeringPlayer + 0));
    libNtve_gf_ShowHideBossBar(false, (lv_triggeringPlayer + 4));
    libNtve_gf_ShowHideBossBar(false, (lv_triggeringPlayer + 8));
    VisRevealerDestroy(gv_guardianRevealers[lv_triggeringPlayerIndex]);
    gv_livingDragonsinGaurdian -= 1;
    if (((gv_livingDragonsinGaurdian <= 0))) {
        gv_livingDragonsinGaurdian = 0;
        gv_numGaurdiansDead = 0;
        UnitRemove(gv_korlic);
        UnitRemove(gv_madawc);
        UnitRemove(gv_tolic);
        autoB2DE0A59_ae = 8;
        autoB2DE0A59_ai = 1;
        lv_c = 1;
        for ( ; ( (autoB2DE0A59_ai >= 0 && lv_c <= autoB2DE0A59_ae) || (autoB2DE0A59_ai <= 0 && lv_c >= autoB2DE0A59_ae) ) ; lv_c += autoB2DE0A59_ai ) {
            UnitRemove(gv_mineralBlocks[lv_c]);
        }
        libNtve_gf_UnitCreateFacingPoint(1, "ZauberersStatue", 0, 0, RegionGetCenter(RegionFromId(48)), RegionGetCenter(RegionFromId(47)));
        gv_zauberersStatue = UnitLastCreated();
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_NoDragonsinGaurdian_Init () {
    gt_NoDragonsinGaurdian = TriggerCreate("gt_NoDragonsinGaurdian_Func");
    TriggerAddEventUnitDied(gt_NoDragonsinGaurdian, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Guardian Respawn
//--------------------------------------------------------------------------------------------------
bool gt_GuardianRespawn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!gv_guardiansDead) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2292C61E"));
    libNtve_gf_UnitCreateFacingPoint(1, "ZauberersStatue", 0, 0, RegionGetCenter(RegionFromId(48)), RegionGetCenter(RegionFromId(47)));
    gv_zauberersStatue = UnitLastCreated();
    statueSpawned = true;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GuardianRespawn_Init () {
    gt_GuardianRespawn = TriggerCreate("gt_GuardianRespawn_Func");
    TriggerEnable(gt_GuardianRespawn, false);
    TriggerAddEventTimePeriodic(gt_GuardianRespawn, 180.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unit attacks Syrital
//--------------------------------------------------------------------------------------------------
bool gt_UnitattacksSyrital_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((!UnitGroupHasUnit(gv_unitsthatdidDamagetoSyrital, EventUnitDamageSourceUnit()) && ((UnitGetOwner(EventUnitDamageSourceUnit()) == 1) || (UnitGetOwner(EventUnitDamageSourceUnit()) == 2) || (UnitGetOwner(EventUnitDamageSourceUnit()) == 3) || (UnitGetOwner(EventUnitDamageSourceUnit()) == 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupAdd(gv_unitsthatdidDamagetoSyrital, EventUnitDamageSourceUnit());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnitattacksSyrital_Init () {
    gt_UnitattacksSyrital = TriggerCreate("gt_UnitattacksSyrital_Func");
    TriggerAddEventUnitDamaged(gt_UnitattacksSyrital, UnitRefFromVariable("gv_syrital"), c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Syrital Health
//--------------------------------------------------------------------------------------------------
bool gt_SetSyritalHealth_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetPropertyFixed(gv_syrital, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_syrital, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetSyritalHealth_Init () {
    gt_SetSyritalHealth = TriggerCreate("gt_SetSyritalHealth_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Syrital Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateSyritalWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/0959DEC6"), 24, PointFromId(302), 1.0, true, true, PlayerGroupAll());
    gv_syritalWarning = TextTagLastCreated();
    TextTagSetTime(gv_syritalWarning, c_textTagTimeDuration, 524288.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateSyritalWarning_Init () {
    gt_CreateSyritalWarning = TriggerCreate("gt_CreateSyritalWarning_Func");
    TriggerAddEventUnitRangePoint(gt_CreateSyritalWarning, null, PointFromId(302), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Syrital Enter
//--------------------------------------------------------------------------------------------------
bool gt_SyritalEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 16))) {
            return false;
        }
        if (!UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic)) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    if (!gv_syritalDead) {
        gv_inFightwithSyrital[lv_triggeringPlayerIndex] = true;
        SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryCombat, 10.0, 1.0);
        SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, 10.0, 1.0);
        SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategorySpell, 10.0, 1.0);
        SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 10.0, 1.0);
        SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryUI, 10.0, 1.0);
        SoundtrackStop(PlayerGroupSingle(lv_triggeringPlayer), c_soundtrackCategoryMusic, false);
        SoundPlay(SoundLink("SyritalBattleTheme", -1), PlayerGroupSingle(lv_triggeringPlayer), 100.0, 0.0);
        gv_syritalsTheme[lv_triggeringPlayerIndex] = SoundLastPlayed();
        libNtve_gf_DisplayBossBar(lv_triggeringPlayer, "Assets\\Textures\\btn-unit-zerg-queen.dds", StringExternal("Param/Value/9DDB595D"), 100, PlayerGroupSingle(lv_triggeringPlayer));
        libNtve_gf_SetBossBarBoss(lv_triggeringPlayer, gv_syrital, true);
        libNtve_gf_SetBossBarRace(lv_triggeringPlayer, libNtve_ge_BossBarRace_Zerg, true);
        libNtve_gf_MoveBossBar(lv_triggeringPlayer, c_anchorTop, 0, 150);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyritalEnter_Init () {
    gt_SyritalEnter = TriggerCreate("gt_SyritalEnter_Func");
    TriggerAddEventUnitRegion(gt_SyritalEnter, null, RegionFromId(5), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Syrital Leave
//--------------------------------------------------------------------------------------------------
bool gt_SyritalLeave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 16))) {
            return false;
        }
        if (!UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic)) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    gv_inFightwithSyrital[lv_triggeringPlayerIndex] = false;
    SoundStop(gv_syritalsTheme[lv_triggeringPlayerIndex], true);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryCombat, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategorySpell, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryUI, 100.0, 1.0);
    SoundtrackStop(PlayerGroupSingle(lv_triggeringPlayerIndex), c_soundtrackCategoryMusic, false);
    libNtve_gf_ShowHideBossBar(false, lv_triggeringPlayer);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyritalLeave_Init () {
    gt_SyritalLeave = TriggerCreate("gt_SyritalLeave_Func");
    TriggerAddEventUnitRegion(gt_SyritalLeave, null, RegionFromId(5), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Syrital Dragon Dies
//--------------------------------------------------------------------------------------------------
bool gt_SyritalDragonDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic)) {
            return false;
        }
        if (!gv_inFightwithSyrital[(UnitGetOwner(EventUnit()) - 1)]) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(EventUnit());
    gv_inFightwithSyrital[lv_triggeringPlayerIndex] = false;
    SoundStop(gv_syritalsTheme[lv_triggeringPlayerIndex], true);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryCombat, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategorySpell, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryUI, 100.0, 1.0);
    SoundtrackStop(PlayerGroupSingle(lv_triggeringPlayerIndex), c_soundtrackCategoryMusic, false);
    libNtve_gf_ShowHideBossBar(false, lv_triggeringPlayer);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyritalDragonDies_Init () {
    gt_SyritalDragonDies = TriggerCreate("gt_SyritalDragonDies_Func");
    TriggerAddEventUnitDied(gt_SyritalDragonDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Syrital Dies
//--------------------------------------------------------------------------------------------------
bool gt_SyritalDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
    lv_triggeringPlayer = UnitGetOwner(libNtve_gf_KillingUnit());
    SoundStop(gv_syritalsTheme[0], true);
    SoundStop(gv_syritalsTheme[1], true);
    SoundStop(gv_syritalsTheme[2], true);
    SoundStop(gv_syritalsTheme[3], true);
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (gv_inFightwithSyrital[(PlayerGroupLoopCurrent() - 1)]) {
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryCombat, 100.0, 1.0);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryVoice, 100.0, 1.0);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategorySpell, 100.0, 1.0);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryAmbient, 100.0, 1.0);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryAmbient, 100.0, 1.0);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryUI, 100.0, 1.0);
            gv_inFightwithSyrital[(PlayerGroupLoopCurrent() - 1)] = false;
            libNtve_gf_ShowHideBossBar(false, PlayerGroupLoopCurrent());
        }
    }
    PlayerGroupLoopEnd();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D94B490A"));
    gv_syritalDead = true;
    TriggerEnable(gt_SyritalRespawn, true);
    UnitGroupLoopBegin(gv_unitsthatdidDamagetoSyrital);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_AddExperience(UnitGroupLoopCurrent(), 500.0);
        PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 1);
        if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].state == 1)) {
            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].state = 2;
            ObjectiveSetDescription(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].objective, StringExternal("Param/Value/31DF3212"));
            ObjectiveSetName(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].objective, StringExternal("Param/Value/05FD217C"));
            SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), 100.0, 0.0);
            BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, "SQ1", PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].state);
            TextTagCreate(StringExternal("Param/Value/3A58ACB6"), 72, UnitGetPosition(UnitFromId(2511)), 6.0, true, true, PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())));
            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].textTag = TextTagLastCreated();
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
            TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
            TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2511), 5.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
            PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].ping);
            PingCreate(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), "PingObjective", RegionGetCenter(RegionFromId(216)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
        }
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyritalDies_Init () {
    gt_SyritalDies = TriggerCreate("gt_SyritalDies_Func");
    TriggerAddEventUnitDied(gt_SyritalDies, UnitRefFromVariable("gv_syrital"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Syrital Respawn
//--------------------------------------------------------------------------------------------------
bool gt_SyritalRespawn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
            return false;
        }
        if (!gv_syritalDead) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5743AE9F"));
    UnitCreate(1, "Syrital", 0, 15, RegionGetCenter(RegionFromId(5)), 270.0);
    gv_syrital = UnitLastCreated();
    UnitSetPropertyFixed(gv_syrital, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_syrital, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
    UnitSetPropertyFixed(gv_syrital, c_unitPropLifePercent, 100.0);
    gv_syritalDead = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyritalRespawn_Init () {
    gt_SyritalRespawn = TriggerCreate("gt_SyritalRespawn_Func");
    TriggerEnable(gt_SyritalRespawn, false);
    TriggerAddEventTimePeriodic(gt_SyritalRespawn, 180.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tempradon;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    UnitCreate(1, "Srepti", 0, 15, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[0], UnitLastCreated());
    UnitCreate(1, "Srepti", 0, 15, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[0], UnitLastCreated());
    UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[0], UnitLastCreated());
    UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[0], UnitLastCreated());
    UnitCreate(1, "Srepti", 0, 15, RegionRandomPoint(RegionFromId(2)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[1], UnitLastCreated());
    UnitCreate(1, "Srepti", 0, 15, RegionRandomPoint(RegionFromId(2)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[1], UnitLastCreated());
    UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(2)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[1], UnitLastCreated());
    UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(2)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[1], UnitLastCreated());
    UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[2], UnitLastCreated());
    UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[2], UnitLastCreated());
    UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[2], UnitLastCreated());
    UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(49)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[3], UnitLastCreated());
    UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(49)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[3], UnitLastCreated());
    UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(50)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[4], UnitLastCreated());
    UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(50)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[4], UnitLastCreated());
    UnitCreate(1, "Vogel", 0, 15, RegionRandomPoint(RegionFromId(18)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyPassUnits[1], UnitLastCreated());
    UnitCreate(1, "Vogel", 0, 15, RegionRandomPoint(RegionFromId(19)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyPassUnits[2], UnitLastCreated());
    UnitCreate(1, "Vogel", 0, 15, RegionRandomPoint(RegionFromId(20)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyPassUnits[3], UnitLastCreated());
    UnitCreate(1, "Vogel", 0, 15, RegionRandomPoint(RegionFromId(268)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyGorgeUnits[0], UnitLastCreated());
    UnitCreate(1, "Vogel", 0, 15, RegionRandomPoint(RegionFromId(21)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyGorgeUnits[1], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(27)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyGorgeUnits[2], UnitLastCreated());
    UnitCreate(1, "Vogel", 0, 15, RegionRandomPoint(RegionFromId(28)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyGorgeUnits[3], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(29)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyGorgeUnits[4], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(265)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyGorgeUnits[5], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(266)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyGorgeUnits[6], UnitLastCreated());
    UnitCreate(1, "Srepti", 0, 15, RegionRandomPoint(RegionFromId(267)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyGorgeUnits[7], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(7)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[0], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(7)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[0], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(7)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[0], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(9)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[1], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(9)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[1], UnitLastCreated());
    UnitCreate(1, "Karramarro", 0, 15, RegionRandomPoint(RegionFromId(9)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[1], UnitLastCreated());
    UnitCreate(1, "Karramarro", 0, 15, RegionRandomPoint(RegionFromId(9)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[1], UnitLastCreated());
    UnitCreate(1, "Karramarro", 0, 15, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[2], UnitLastCreated());
    UnitCreate(1, "Karramarro", 0, 15, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[2], UnitLastCreated());
    UnitCreate(1, "Karramarro", 0, 15, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[2], UnitLastCreated());
    UnitCreate(1, "Karramarro", 0, 15, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[2], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(11)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[3], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(11)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[3], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(11)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[3], UnitLastCreated());
    UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(12)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[0], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(12)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[0], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(12)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[0], UnitLastCreated());
    UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(13)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[1], UnitLastCreated());
    UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(13)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[1], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(13)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[1], UnitLastCreated());
    UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(14)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[2], UnitLastCreated());
    UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(14)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[2], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(14)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[2], UnitLastCreated());
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(14)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[2], UnitLastCreated());
    UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(15)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[3], UnitLastCreated());
    UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(15)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[3], UnitLastCreated());
    UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(15)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[3], UnitLastCreated());
    UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(16)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[4], UnitLastCreated());
    UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(16)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[4], UnitLastCreated());
    UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(16)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[4], UnitLastCreated());
    UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(16)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[4], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(51)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[0], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(51)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[0], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(51)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[0], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(51)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[0], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(52)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[1], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(52)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[1], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(52)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[1], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(53)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[2], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(53)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[2], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(53)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[2], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[3], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[3], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[3], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(55)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[4], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(55)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[4], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(57)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[6], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(57)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[6], UnitLastCreated());
    UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(57)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[6], UnitLastCreated());
    UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[0]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_undergroundForestUnits[0], UnitLastCreated());
    UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[1]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_undergroundForestUnits[1], UnitLastCreated());
    UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[2]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_undergroundForestUnits[2], UnitLastCreated());
    UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[3]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_undergroundForestUnits[3], UnitLastCreated());
    UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[4]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_undergroundForestUnits[4], UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemies_Init () {
    gt_SpawnEnemies = TriggerCreate("gt_SpawnEnemies_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set up Bio Dome Wasteland Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetupBioDomeWastelandRegions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_bioDomeWastelandRegions[0] = RegionFromId(151);
    gv_bioDomeWastelandRegions[1] = RegionFromId(152);
    gv_bioDomeWastelandRegions[2] = RegionFromId(153);
    gv_bioDomeWastelandRegions[3] = RegionFromId(154);
    gv_bioDomeWastelandRegions[4] = RegionFromId(155);
    gv_bioDomeWastelandRegions[5] = RegionFromId(156);
    gv_bioDomeWastelandRegions[6] = RegionFromId(157);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupBioDomeWastelandRegions_Init () {
    gt_SetupBioDomeWastelandRegions = TriggerCreate("gt_SetupBioDomeWastelandRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies Bio Dome Wasteland
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemiesBioDomeWasteland_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitTypeNum;
    int lv_locationNum;
    int lv_numunitstospawn;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    while ((lv_numunitstospawn <= (7 + PlayerGroupCount(gv_playersInBioDome)))) {
        lv_unitTypeNum = RandomInt(12, 13);
        lv_locationNum = RandomInt(0, 6);
        UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_bioDomeWastelandRegions[lv_locationNum]), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_bioDomeWastelandUnits[lv_locationNum], UnitLastCreated());
        lv_numunitstospawn += 1;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemiesBioDomeWasteland_Init () {
    gt_SpawnEnemiesBioDomeWasteland = TriggerCreate("gt_SpawnEnemiesBioDomeWasteland_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Bio Dome Wasteland
//--------------------------------------------------------------------------------------------------
bool gt_RespawnBioDomeWasteland_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomRegion;
    int lv_randomUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_bioDomeWastelandUnits[0], EventUnit()) || UnitGroupHasUnit(gv_bioDomeWastelandUnits[1], EventUnit()) || UnitGroupHasUnit(gv_bioDomeWastelandUnits[2], EventUnit()) || UnitGroupHasUnit(gv_bioDomeWastelandUnits[3], EventUnit()) || UnitGroupHasUnit(gv_bioDomeWastelandUnits[4], EventUnit()) || UnitGroupHasUnit(gv_bioDomeWastelandUnits[5], EventUnit()) || UnitGroupHasUnit(gv_bioDomeWastelandUnits[6], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_randomRegion = RandomInt(0, 6);
    lv_randomUnit = RandomInt(12, 13);
    UnitRemove(EventUnit());
    UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_bioDomeWastelandRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnBioDomeWasteland_Init () {
    gt_RespawnBioDomeWasteland = TriggerCreate("gt_RespawnBioDomeWasteland_Func");
    TriggerAddEventUnitDied(gt_RespawnBioDomeWasteland, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set up Creton Tranch Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetupCretonTranchRegions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_cretonTrenchRegions[0] = RegionFromId(136);
    gv_cretonTrenchRegions[1] = RegionFromId(137);
    gv_cretonTrenchRegions[2] = RegionFromId(138);
    gv_cretonTrenchRegions[3] = RegionFromId(139);
    gv_cretonTrenchRegions[4] = RegionFromId(131);
    gv_cretonTrenchRegions[5] = RegionFromId(132);
    gv_cretonTrenchRegions[6] = RegionFromId(140);
    gv_cretonTrenchRegions[7] = RegionFromId(141);
    gv_cretonTrenchRegions[8] = RegionFromId(143);
    gv_cretonTrenchRegions[9] = RegionFromId(144);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupCretonTranchRegions_Init () {
    gt_SetupCretonTranchRegions = TriggerCreate("gt_SetupCretonTranchRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies Creton Trench
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemiesCretonTrench_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitTypeNum;
    int lv_locationNum;
    int lv_numunitstospawn;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    while ((lv_numunitstospawn <= 10)) {
        lv_unitTypeNum = 11;
        lv_locationNum = RandomInt(0, 9);
        UnitCreate(1, "CretonWarMachine", 0, 15, RegionRandomPoint(gv_cretonTrenchRegions[lv_locationNum]), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cretonTrenchUnits[lv_locationNum], UnitLastCreated());
        lv_numunitstospawn += 1;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemiesCretonTrench_Init () {
    gt_SpawnEnemiesCretonTrench = TriggerCreate("gt_SpawnEnemiesCretonTrench_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Creton Trench
//--------------------------------------------------------------------------------------------------
bool gt_RespawnCretonTrench_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomRegion;
    int lv_randomUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_cretonTrenchUnits[0], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[1], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[2], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[3], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[4], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[5], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[6], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[7], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[8], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[9], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(10.0, c_timeReal);
    lv_randomRegion = RandomInt(0, 9);
    lv_randomUnit = RandomInt(11, 11);
    UnitRemove(EventUnit());
    UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_cretonTrenchRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_cretonTrenchUnits[lv_randomRegion], UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnCretonTrench_Init () {
    gt_RespawnCretonTrench = TriggerCreate("gt_RespawnCretonTrench_Func");
    TriggerAddEventUnitDied(gt_RespawnCretonTrench, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set up Creton Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetupCretonRegions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_cretonRegions[0] = RegionFromId(82);
    gv_cretonRegions[1] = RegionFromId(83);
    gv_cretonRegions[2] = RegionFromId(92);
    gv_cretonRegions[3] = RegionFromId(93);
    gv_cretonRegions[4] = RegionFromId(94);
    gv_cretonRegions[5] = RegionFromId(95);
    gv_cretonRegions[6] = RegionFromId(96);
    gv_cretonRegions[7] = RegionFromId(97);
    gv_cretonRegions[8] = RegionFromId(106);
    gv_cretonRegions[9] = RegionFromId(107);
    gv_cretonRegions[10] = RegionFromId(108);
    gv_cretonRegions[11] = RegionFromId(109);
    gv_cretonRegions[12] = RegionFromId(110);
    gv_cretonRegions[13] = RegionFromId(111);
    gv_cretonRegions[14] = RegionFromId(112);
    gv_cretonRegions[15] = RegionFromId(113);
    gv_cretonRegions[16] = RegionFromId(114);
    gv_cretonRegions[17] = RegionFromId(115);
    gv_cretonRegions[18] = RegionFromId(116);
    gv_cretonRegions[19] = RegionFromId(117);
    gv_cretonRegions[20] = RegionFromId(118);
    gv_cretonRegions[21] = RegionFromId(119);
    gv_cretonRegions[22] = RegionFromId(120);
    gv_cretonRegions[23] = RegionFromId(99);
    gv_cretonRegions[24] = RegionFromId(100);
    gv_cretonRegions[25] = RegionFromId(101);
    gv_cretonRegions[26] = RegionFromId(102);
    gv_cretonRegions[27] = RegionFromId(103);
    gv_cretonRegions[28] = RegionFromId(104);
    gv_cretonRegions[29] = RegionFromId(105);
    gv_cretonRegions[30] = RegionFromId(84);
    gv_cretonRegions[31] = RegionFromId(85);
    gv_cretonRegions[32] = RegionFromId(86);
    gv_cretonRegions[33] = RegionFromId(87);
    gv_cretonRegions[34] = RegionFromId(88);
    gv_cretonRegions[35] = RegionFromId(89);
    gv_cretonRegions[36] = RegionFromId(90);
    gv_cretonRegions[37] = RegionFromId(91);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupCretonRegions_Init () {
    gt_SetupCretonRegions = TriggerCreate("gt_SetupCretonRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies Creton
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemiesCreton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitTypeNum;
    int lv_locationNum;
    int lv_numunitstospawn;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4)) && !gv_cretonSpawned))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gv_cretonSpawned = true;
    while ((lv_numunitstospawn <= (gv_ofHumanPlayers * 15))) {
        lv_unitTypeNum = RandomInt(9, 11);
        lv_locationNum = RandomInt(0, 37);
        UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_cretonRegions[lv_locationNum]), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_cretonUnits[lv_locationNum], UnitLastCreated());
        lv_numunitstospawn += 1;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemiesCreton_Init () {
    gt_SpawnEnemiesCreton = TriggerCreate("gt_SpawnEnemiesCreton_Func");
    TriggerAddEventUnitRegion(gt_SpawnEnemiesCreton, null, RegionFromId(98), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Creton
//--------------------------------------------------------------------------------------------------
bool gt_RespawnCreton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomRegion;
    int lv_randomUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_cretonUnits[0], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[1], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[2], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[3], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[4], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[5], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[6], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[7], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[8], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[9], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[10], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[11], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[12], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[13], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[14], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[15], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[16], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[17], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[18], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[19], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[20], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[21], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[22], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[23], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[24], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[25], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[26], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[27], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[28], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[29], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[30], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[31], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[32], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[33], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[34], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[35], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[37], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(10.0, c_timeReal);
    lv_randomRegion = RandomInt(0, 37);
    lv_randomUnit = RandomInt(9, 11);
    UnitRemove(EventUnit());
    UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_cretonRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_cretonUnits[lv_randomRegion], UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnCreton_Init () {
    gt_RespawnCreton = TriggerCreate("gt_RespawnCreton_Func");
    TriggerAddEventUnitDied(gt_RespawnCreton, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Verboten Infestation Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetVerbotenInfestationRegions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_verbotenInfestationsRegions[0] = RegionFromId(65);
    gv_verbotenInfestationsRegions[1] = RegionFromId(66);
    gv_verbotenInfestationsRegions[2] = RegionFromId(67);
    gv_verbotenInfestationsRegions[3] = RegionFromId(68);
    gv_verbotenInfestationsRegions[4] = RegionFromId(69);
    gv_verbotenInfestationsRegions[5] = RegionFromId(70);
    gv_verbotenInfestationsRegions[6] = RegionFromId(71);
    gv_verbotenInfestationsRegions[7] = RegionFromId(72);
    gv_verbotenInfestationsRegions[8] = RegionFromId(73);
    gv_verbotenInfestationsRegions[9] = RegionFromId(74);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetVerbotenInfestationRegions_Init () {
    gt_SetVerbotenInfestationRegions = TriggerCreate("gt_SetVerbotenInfestationRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies Verboten Infestation Player 1
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemiesVerbotenInfestationPlayer1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitTypeNum;
    int lv_locationNum;
    int maxAreaSpawns;
    // Variable Initialization
        lv_locationNum = 0;
        maxAreaSpawns = 0;
    // Conditions
    if (testConds) {
        if (gv_verbotenInfestationSpawned[0]) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
        
    //Spawns enemies in areas 0 -> 9, spawns twice in each, and changes the enemy type every 2 regions
    for(maxAreaSpawns = 0; maxAreaSpawns <= 20; maxAreaSpawns +=1){
        if(maxAreaSpawns % 2 == 0){
        lv_unitTypeNum = RandomInt(16, 18);
    
            if(maxAreaSpawns != 0) {
                lv_locationNum += 1;
                lv_locationNum %= 12;
            }
        }
     UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
     UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    
    }
    maxAreaSpawns = 0;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
   // lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemiesVerbotenInfestationPlayer1_Init () {
    int maxAreaSpawns = 0;
    gt_SpawnEnemiesVerbotenInfestationPlayer1 = TriggerCreate("gt_SpawnEnemiesVerbotenInfestationPlayer1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies Verboten Infestation Player 2
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemiesVerbotenInfestationPlayer2_Func (bool testConds, bool runActions) {
     // Variable Declarations
    int lv_unitTypeNum;
    int lv_locationNum;
    int maxAreaSpawns;
    // Variable Initialization
        lv_locationNum = 0;
        maxAreaSpawns = 0;
    // Conditions
    if (testConds) {
        if (gv_verbotenInfestationSpawned[1]) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    //Spawns enemies in areas 0 -> 9, spawns twice in each, and changes the enemy type every 2 regions
    for(maxAreaSpawns = 0; maxAreaSpawns <= 20; maxAreaSpawns +=1){
        if(maxAreaSpawns % 2 == 0){
        lv_unitTypeNum = RandomInt(16, 18);
    
            if(maxAreaSpawns != 0) {
                lv_locationNum += 1;
                lv_locationNum %= 12;
            }
        }
     UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
     UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    
    }
    maxAreaSpawns = 0;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
   // lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemiesVerbotenInfestationPlayer2_Init () {
    int maxAreaSpawns = 0;
    gt_SpawnEnemiesVerbotenInfestationPlayer2 = TriggerCreate("gt_SpawnEnemiesVerbotenInfestationPlayer2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies Verboten Infestation Player 3
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemiesVerbotenInfestationPlayer3_Func (bool testConds, bool runActions) {
   // Variable Declarations
    int lv_unitTypeNum;
    int lv_locationNum;
    int maxAreaSpawns;
    // Variable Initialization
        lv_locationNum = 0;
        maxAreaSpawns = 0;
    // Conditions
    if (testConds) {
        if (gv_verbotenInfestationSpawned[2]) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    //Spawns enemies in areas 0 -> 9, spawns twice in each, and changes the enemy type every 2 regions
    for(maxAreaSpawns = 0; maxAreaSpawns <= 20; maxAreaSpawns +=1){
        if(maxAreaSpawns % 2 == 0){
        lv_unitTypeNum = RandomInt(16, 18);
    
            if(maxAreaSpawns != 0) {
                lv_locationNum += 1;
                lv_locationNum %= 12;
            }
        }
     UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
     UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    
    }
    maxAreaSpawns = 0;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
   // lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemiesVerbotenInfestationPlayer3_Init () {
    int maxAreaSpawns = 0;
    gt_SpawnEnemiesVerbotenInfestationPlayer3 = TriggerCreate("gt_SpawnEnemiesVerbotenInfestationPlayer3_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies Verboten Infestation Player 4
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemiesVerbotenInfestationPlayer4_Func (bool testConds, bool runActions) {
   // Variable Declarations
    int lv_unitTypeNum;
    int lv_locationNum;
    int maxAreaSpawns;
    // Variable Initialization
        lv_locationNum = 0;
        maxAreaSpawns = 0;
    // Conditions
    if (testConds) {
        if (gv_verbotenInfestationSpawned[3]) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    //Spawns enemies in areas 0 -> 9, spawns twice in each, and changes the enemy type every 2 regions
    for(maxAreaSpawns = 0; maxAreaSpawns <= 20; maxAreaSpawns +=1){
        if(maxAreaSpawns % 2 == 0){
        lv_unitTypeNum = RandomInt(16, 18);
    
            if(maxAreaSpawns != 0) {
                lv_locationNum += 1;
                lv_locationNum %= 12;
            }
        }
     UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
     UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    
    }
    maxAreaSpawns = 0;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
   // lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    //lv_locationNum += 1;
    //lv_unitTypeNum = RandomInt(16, 18);
    //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemiesVerbotenInfestationPlayer4_Init () {
    int maxAreaSpawns = 0;
    gt_SpawnEnemiesVerbotenInfestationPlayer4 = TriggerCreate("gt_SpawnEnemiesVerbotenInfestationPlayer4_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Verboten Infestation
//--------------------------------------------------------------------------------------------------
bool gt_RespawnVerbotenInfestation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomRegion;
    int lv_randomUnit;
    int lv_randomUnitAmount;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_verbotenInfestationUnits[0], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[1], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[2], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[3], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[4], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[5], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[6], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[7], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[8], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[9], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(10.0, c_timeReal);
    lv_randomRegion = RandomInt(0, 9);
    lv_randomUnit = RandomInt(16, 18);
    lv_randomUnitAmount = RandomInt(1,2);
    UnitRemove(EventUnit());
    UnitCreate(lv_randomUnitAmount, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenInfestationUnits[lv_randomRegion], UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnVerbotenInfestation_Init () {
    int lv_randomUnitAmount = 0;
    gt_RespawnVerbotenInfestation = TriggerCreate("gt_RespawnVerbotenInfestation_Func");
    TriggerAddEventUnitDied(gt_RespawnVerbotenInfestation, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Verboten Forest Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetVerbotenForestRegions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_verbotenForestRegions[0] = RegionFromId(51);
    gv_verbotenForestRegions[1] = RegionFromId(52);
    gv_verbotenForestRegions[2] = RegionFromId(53);
    gv_verbotenForestRegions[3] = RegionFromId(54);
    gv_verbotenForestRegions[4] = RegionFromId(55);
    gv_verbotenForestRegions[5] = RegionFromId(56);
    gv_verbotenForestRegions[6] = RegionFromId(57);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetVerbotenForestRegions_Init () {
    gt_SetVerbotenForestRegions = TriggerCreate("gt_SetVerbotenForestRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Verboten Forest
//--------------------------------------------------------------------------------------------------
bool gt_RespawnVerbotenForest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomRegion;
    int lv_randomUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_verbotenForestUnits[0], EventUnit()) || UnitGroupHasUnit(gv_verbotenForestUnits[1], EventUnit()) || UnitGroupHasUnit(gv_verbotenForestUnits[2], EventUnit()) || UnitGroupHasUnit(gv_verbotenForestUnits[3], EventUnit()) || UnitGroupHasUnit(gv_verbotenForestUnits[4], EventUnit()) || UnitGroupHasUnit(gv_verbotenForestUnits[5], EventUnit()) || UnitGroupHasUnit(gv_verbotenForestUnits[6], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(10.0, c_timeReal);
    UnitRemove(EventUnit());
    lv_randomRegion = RandomInt(0, 6);
    lv_randomUnit = RandomInt(6, 8);
    UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_verbotenForestRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_verbotenForestUnits[lv_randomRegion], UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnVerbotenForest_Init () {
    gt_RespawnVerbotenForest = TriggerCreate("gt_RespawnVerbotenForest_Func");
    TriggerAddEventUnitDied(gt_RespawnVerbotenForest, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Wasteland Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetWastelandRegions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_wastelandRegions[0] = RegionFromId(1);
    gv_wastelandRegions[1] = RegionFromId(2);
    gv_wastelandRegions[2] = RegionFromId(4);
    gv_wastelandRegions[3] = RegionFromId(49);
    gv_wastelandRegions[4] = RegionFromId(50);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetWastelandRegions_Init () {
    gt_SetWastelandRegions = TriggerCreate("gt_SetWastelandRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Wasteland
//--------------------------------------------------------------------------------------------------
bool gt_RespawnWasteland_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomRegion;
    int lv_randomUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_wastelandUnitGroups[0], EventUnit()) || UnitGroupHasUnit(gv_wastelandUnitGroups[1], EventUnit()) || UnitGroupHasUnit(gv_wastelandUnitGroups[2], EventUnit()) || UnitGroupHasUnit(gv_wastelandUnitGroups[3], EventUnit()) || UnitGroupHasUnit(gv_wastelandUnitGroups[4], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(10.0, c_timeReal);
    lv_randomRegion = RandomInt(0, 4);
    lv_randomUnit = RandomInt(0, 1);
    UnitRemove(EventUnit());
    UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_wastelandRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_wastelandUnitGroups[lv_randomRegion], UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnWasteland_Init () {
    gt_RespawnWasteland = TriggerCreate("gt_RespawnWasteland_Func");
    TriggerAddEventUnitDied(gt_RespawnWasteland, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Relamy Pass Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetRelamyPassRegions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_relamyPassRegions[0] = RegionFromId(8);
    gv_relamyPassRegions[1] = RegionFromId(18);
    gv_relamyPassRegions[2] = RegionFromId(19);
    gv_relamyPassRegions[3] = RegionFromId(20);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRelamyPassRegions_Init () {
    gt_SetRelamyPassRegions = TriggerCreate("gt_SetRelamyPassRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Relamy Pass
//--------------------------------------------------------------------------------------------------
bool gt_RespawnRelamyPass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomRegion;
    int lv_randomUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_relamyPassUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyPassUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyPassUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyPassUnits[3], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(10.0, c_timeReal);
    UnitRemove(EventUnit());
    lv_randomRegion = RandomInt(0, 3);
    lv_randomUnit = RandomInt(1, 2);
    UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_relamyPassRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyPassUnits[lv_randomRegion], UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnRelamyPass_Init () {
    gt_RespawnRelamyPass = TriggerCreate("gt_RespawnRelamyPass_Func");
    TriggerAddEventUnitDied(gt_RespawnRelamyPass, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Relamy Gorge Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetRelamyGorgeRegions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_relamyGorgeRegions[0] = RegionFromId(268);
    gv_relamyGorgeRegions[1] = RegionFromId(21);
    gv_relamyGorgeRegions[2] = RegionFromId(27);
    gv_relamyGorgeRegions[3] = RegionFromId(28);
    gv_relamyGorgeRegions[4] = RegionFromId(29);
    gv_relamyGorgeRegions[5] = RegionFromId(265);
    gv_relamyGorgeRegions[6] = RegionFromId(266);
    gv_relamyGorgeRegions[7] = RegionFromId(267);
    gv_relamyGorgeUnitTypes[0] = "Vogel";
    gv_relamyGorgeUnitTypes[1] = "Nepa";
    gv_relamyGorgeUnitTypes[2] = "CretonWarrior";
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRelamyGorgeRegions_Init () {
    gt_SetRelamyGorgeRegions = TriggerCreate("gt_SetRelamyGorgeRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Relamy Gorge
//--------------------------------------------------------------------------------------------------
bool gt_RespawnRelamyGorge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomRegion;
    int lv_randomUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_relamyGorgeUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[3], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[4], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[5], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[6], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[7], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(10.0, c_timeReal);
    UnitRemove(EventUnit());
    lv_randomRegion = RandomInt(0, 7);
    lv_randomUnit = RandomInt(0, 2);
    UnitCreate(1, gv_relamyGorgeUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_relamyGorgeRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyGorgeUnits[lv_randomRegion], UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnRelamyGorge_Init () {
    gt_RespawnRelamyGorge = TriggerCreate("gt_RespawnRelamyGorge_Func");
    TriggerAddEventUnitDied(gt_RespawnRelamyGorge, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Relamy Canyon Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetRelamyCanyonRegions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_relamyCanyonRegions[0] = RegionFromId(7);
    gv_relamyCanyonRegions[1] = RegionFromId(9);
    gv_relamyCanyonRegions[2] = RegionFromId(10);
    gv_relamyCanyonRegions[3] = RegionFromId(11);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRelamyCanyonRegions_Init () {
    gt_SetRelamyCanyonRegions = TriggerCreate("gt_SetRelamyCanyonRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Relamy Canyon
//--------------------------------------------------------------------------------------------------
bool gt_RespawnRelamyCanyon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomRegion;
    int lv_randomUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_relamyCanyonUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyCanyonUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyCanyonUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyCanyonUnits[3], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(10.0, c_timeReal);
    UnitRemove(EventUnit());
    lv_randomRegion = RandomInt(0, 3);
    lv_randomUnit = RandomInt(3, 4);
    UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_relamyCanyonRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyCanyonUnits[lv_randomRegion], UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnRelamyCanyon_Init () {
    gt_RespawnRelamyCanyon = TriggerCreate("gt_RespawnRelamyCanyon_Func");
    TriggerAddEventUnitDied(gt_RespawnRelamyCanyon, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Relamy Hills Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetRelamyHillsRegions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_relamyHillsRegions[0] = RegionFromId(12);
    gv_relamyHillsRegions[1] = RegionFromId(13);
    gv_relamyHillsRegions[2] = RegionFromId(14);
    gv_relamyHillsRegions[3] = RegionFromId(15);
    gv_relamyHillsRegions[4] = RegionFromId(16);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRelamyHillsRegions_Init () {
    gt_SetRelamyHillsRegions = TriggerCreate("gt_SetRelamyHillsRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Relamy Hills
//--------------------------------------------------------------------------------------------------
bool gt_RespawnRelamyHills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomRegion;
    int lv_randomUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_relamyHillsUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[3], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[4], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(10.0, c_timeReal);
    UnitRemove(EventUnit());
    lv_randomRegion = RandomInt(0, 4);
    lv_randomUnit = RandomInt(3, 5);
    UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_relamyHillsRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_relamyHillsUnits[lv_randomRegion], UnitLastCreated());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnRelamyHills_Init () {
    gt_RespawnRelamyHills = TriggerCreate("gt_RespawnRelamyHills_Func");
    TriggerAddEventUnitDied(gt_RespawnRelamyHills, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Underground Forest Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetUndergroundForestRegions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_undergroundForestRegions[0] = RegionFromId(275);
    gv_undergroundForestRegions[1] = RegionFromId(276);
    gv_undergroundForestRegions[2] = RegionFromId(277);
    gv_undergroundForestRegions[3] = RegionFromId(278);
    gv_undergroundForestRegions[4] = RegionFromId(279);
    gv_undergroundForestRegions[5] = RegionFromId(280);
    gv_undergroundForestRegions[6] = RegionFromId(281);
    gv_undergroundForestRegions[7] = RegionFromId(282);
    gv_undergroundForestUnitTypes[0] = "Veneno";
    gv_undergroundForestUnitTypes[1] = "Teredo";
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetUndergroundForestRegions_Init () {
    gt_SetUndergroundForestRegions = TriggerCreate("gt_SetUndergroundForestRegions_Func");
    TriggerAddEventMapInit(gt_SetUndergroundForestRegions);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Underground Forest
//--------------------------------------------------------------------------------------------------
bool gt_RespawnUndergroundForest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomRegion;
    int lv_randomUnit;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_undergroundForestUnits[0], EventUnit()) || UnitGroupHasUnit(gv_undergroundForestUnits[1], EventUnit()) || UnitGroupHasUnit(gv_undergroundForestUnits[2], EventUnit()) || UnitGroupHasUnit(gv_undergroundForestUnits[3], EventUnit()) || UnitGroupHasUnit(gv_undergroundForestUnits[4], EventUnit()) || UnitGroupHasUnit(gv_undergroundForestUnits[5], EventUnit()) || UnitGroupHasUnit(gv_undergroundForestUnits[6], EventUnit()) || UnitGroupHasUnit(gv_undergroundForestUnits[7], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(10.0, c_timeReal);
    UnitRemove(EventUnit());
    lv_randomRegion = RandomInt(0, 7);
    lv_randomUnit = RandomInt(0, 1);
    UnitGroupAdd(gv_undergroundForestUnits[lv_randomRegion], UnitLastCreated());
    UnitCreate(1, gv_undergroundForestUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnUndergroundForest_Init () {
    gt_RespawnUndergroundForest = TriggerCreate("gt_RespawnUndergroundForest_Func");
    TriggerAddEventUnitDied(gt_RespawnUndergroundForest, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Wasteland Wander Control
//--------------------------------------------------------------------------------------------------
bool gt_WastelandWanderControl_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 15) && (UnitGroupHasUnit(gv_wastelandUnitGroups[0], EventUnit()) || UnitGroupHasUnit(gv_wastelandUnitGroups[1], EventUnit()) || UnitGroupHasUnit(gv_wastelandUnitGroups[2], EventUnit()) )))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (UnitGroupHasUnit(gv_wastelandUnitGroups[0], EventUnit())) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(1))), c_orderQueueReplace);
    }
    else {
        if (UnitGroupHasUnit(gv_wastelandUnitGroups[1], EventUnit())) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(2))), c_orderQueueReplace);
        }
        else {
            if (UnitGroupHasUnit(gv_wastelandUnitGroups[2], EventUnit())) {
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(4))), c_orderQueueReplace);
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WastelandWanderControl_Init () {
    gt_WastelandWanderControl = TriggerCreate("gt_WastelandWanderControl_Func");
    TriggerAddEventUnitRegion(gt_WastelandWanderControl, null, RegionFromId(32), true);
    TriggerAddEventUnitRegion(gt_WastelandWanderControl, null, RegionFromId(36), true);
    TriggerAddEventUnitRegion(gt_WastelandWanderControl, null, RegionFromId(37), true);
    TriggerAddEventUnitRegion(gt_WastelandWanderControl, null, RegionFromId(41), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Pass Wander Control
//--------------------------------------------------------------------------------------------------
bool gt_RelamyPassWanderControl_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15) && ((UnitGroupHasUnit(gv_relamyPassUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyPassUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyPassUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyPassUnits[3], EventUnit()))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (UnitGroupHasUnit(gv_relamyPassUnits[0], EventUnit())) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(8))), c_orderQueueReplace);
    }
    else {
        if (UnitGroupHasUnit(gv_relamyPassUnits[1], EventUnit())) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(18))), c_orderQueueReplace);
        }
        else {
            if (UnitGroupHasUnit(gv_relamyPassUnits[2], EventUnit())) {
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(19))), c_orderQueueReplace);
            }
            else {
                if (UnitGroupHasUnit(gv_relamyPassUnits[3], EventUnit())) {
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueReplace);
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyPassWanderControl_Init () {
    gt_RelamyPassWanderControl = TriggerCreate("gt_RelamyPassWanderControl_Func");
    TriggerAddEventUnitRegion(gt_RelamyPassWanderControl, null, RegionFromId(31), true);
    TriggerAddEventUnitRegion(gt_RelamyPassWanderControl, null, RegionFromId(33), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Gorge Wander Control
//--------------------------------------------------------------------------------------------------
bool gt_RelamyGorgeWanderControl_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 15) && (UnitGroupHasUnit(gv_relamyGorgeUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[3], EventUnit()))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (UnitGroupHasUnit(gv_relamyGorgeUnits[0], EventUnit())) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(21))), c_orderQueueReplace);
    }
    else {
        if (UnitGroupHasUnit(gv_relamyGorgeUnits[1], EventUnit())) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(27))), c_orderQueueReplace);
        }
        else {
            if (UnitGroupHasUnit(gv_relamyGorgeUnits[2], EventUnit())) {
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(28))), c_orderQueueReplace);
            }
            else {
                if (UnitGroupHasUnit(gv_relamyGorgeUnits[3], EventUnit())) {
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(29))), c_orderQueueReplace);
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyGorgeWanderControl_Init () {
    gt_RelamyGorgeWanderControl = TriggerCreate("gt_RelamyGorgeWanderControl_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Canyon Wander Control
//--------------------------------------------------------------------------------------------------
bool gt_RelamyCanyonWanderControl_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 15) && (UnitGroupHasUnit(gv_relamyCanyonUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyCanyonUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyCanyonUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyCanyonUnits[3], EventUnit()))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (UnitGroupHasUnit(gv_relamyCanyonUnits[0], EventUnit())) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
    }
    else {
        if (UnitGroupHasUnit(gv_relamyCanyonUnits[1], EventUnit())) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(9))), c_orderQueueReplace);
        }
        else {
            if (UnitGroupHasUnit(gv_relamyCanyonUnits[2], EventUnit())) {
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(10))), c_orderQueueReplace);
            }
            else {
                if (UnitGroupHasUnit(gv_relamyCanyonUnits[3], EventUnit())) {
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(11))), c_orderQueueReplace);
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyCanyonWanderControl_Init () {
    gt_RelamyCanyonWanderControl = TriggerCreate("gt_RelamyCanyonWanderControl_Func");
    TriggerAddEventUnitRegion(gt_RelamyCanyonWanderControl, null, RegionFromId(34), true);
    TriggerAddEventUnitRegion(gt_RelamyCanyonWanderControl, null, RegionFromId(40), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Hills Wander Control
//--------------------------------------------------------------------------------------------------
bool gt_RelamyHillsWanderControl_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 15) && (UnitGroupHasUnit(gv_relamyHillsUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[3], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[4], EventUnit()))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (UnitGroupHasUnit(gv_relamyHillsUnits[0], EventUnit())) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
    }
    else {
        if (UnitGroupHasUnit(gv_relamyHillsUnits[1], EventUnit())) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(13))), c_orderQueueReplace);
        }
        else {
            if (UnitGroupHasUnit(gv_relamyHillsUnits[2], EventUnit())) {
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueReplace);
            }
            else {
                if (UnitGroupHasUnit(gv_relamyHillsUnits[3], EventUnit())) {
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
                }
                else {
                    if (UnitGroupHasUnit(gv_relamyHillsUnits[4], EventUnit())) {
                        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(16))), c_orderQueueReplace);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyHillsWanderControl_Init () {
    gt_RelamyHillsWanderControl = TriggerCreate("gt_RelamyHillsWanderControl_Func");
    TriggerAddEventUnitRegion(gt_RelamyHillsWanderControl, null, RegionFromId(35), true);
    TriggerAddEventUnitRegion(gt_RelamyHillsWanderControl, null, RegionFromId(47), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Waypoint Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateWaypointDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    DialogCreate(260, 400, c_anchorCenter, 250, 0, true);
    gv_waypointDialog = DialogLastCreated();
    DialogSetTitle(gv_waypointDialog, StringExternal("Param/Value/0ECE1424"));
    libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 75, StringExternal("Param/Value/B7FA03F5"), StringExternal("Param/Value/BD18A03E"), "");
    gv_wastelandDialogButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 125, StringExternal("Param/Value/4DDEC3F1"), StringExternal("Param/Value/513D3FB6"), "");
    gv_ballanDialogButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 175, StringExternal("Param/Value/1785397A"), StringExternal("Param/Value/401F8A01"), "");
    gv_relamyDialogButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 225, StringExternal("Param/Value/52F3119C"), StringExternal("Param/Value/5978C91C"), "");
    gv_verbotenDialogButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 275, StringExternal("Param/Value/66E7D47B"), StringExternal("Param/Value/4F3939B7"), "");
    gv_cretonDialogButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 100, 50, c_anchorTop, 0, 325, StringExternal("Param/Value/9B2E411E"), StringExternal("Param/Value/1F3BFF86"), "");
    gv_closeWaypointDialogButton = DialogControlLastCreated();
    DialogControlSetVisible(gv_ballanDialogButton, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_cretonDialogButton, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_relamyDialogButton, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_verbotenDialogButton, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_wastelandDialogButton, PlayerGroupAll(), false);
    DialogSetVisible(gv_waypointDialog, PlayerGroupAll(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateWaypointDialog_Init () {
    gt_CreateWaypointDialog = TriggerCreate("gt_CreateWaypointDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Load Waypoints
//--------------------------------------------------------------------------------------------------
bool gt_LoadWaypoints_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ppi;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_ppi = (PlayerGroupLoopCurrent() - 1);
        gv_unlockedWaypoints[lv_ppi][0] = BankValueGetAsFlag(gv_players[lv_ppi].banks.dragonBank, "WP0", PlayerHandle(PlayerGroupLoopCurrent()));
        gv_unlockedWaypoints[lv_ppi][1] = BankValueGetAsFlag(gv_players[lv_ppi].banks.dragonBank, "WP1", PlayerHandle(PlayerGroupLoopCurrent()));
        gv_unlockedWaypoints[lv_ppi][2] = BankValueGetAsFlag(gv_players[lv_ppi].banks.dragonBank, "WP2", PlayerHandle(PlayerGroupLoopCurrent()));
        gv_unlockedWaypoints[lv_ppi][3] = BankValueGetAsFlag(gv_players[lv_ppi].banks.dragonBank, "WP3", PlayerHandle(PlayerGroupLoopCurrent()));
        gv_unlockedWaypoints[lv_ppi][4] = BankValueGetAsFlag(gv_players[lv_ppi].banks.dragonBank, "WP4", PlayerHandle(PlayerGroupLoopCurrent()));
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LoadWaypoints_Init () {
    gt_LoadWaypoints = TriggerCreate("gt_LoadWaypoints_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Selects Waypoint
//--------------------------------------------------------------------------------------------------
bool gt_PlayerSelectsWaypoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSelect(EventUnit(), EventPlayer(), false);
    if (libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(EventUnit()), 2.0))) {
        gf_ShowWaypointDialog(EventPlayer());
    }
    UnitSelect(gv_players[lv_tPI].dragon, EventPlayer(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerSelectsWaypoint_Init () {
    gt_PlayerSelectsWaypoint = TriggerCreate("gt_PlayerSelectsWaypoint_Func");
    TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(1199)), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(1201)), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(607)), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(798)), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(797)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Waypoint
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeavesWaypoint_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_HideWaypointDialog(UnitGetOwner(EventUnit()));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerLeavesWaypoint_Init () {
    gt_PlayerLeavesWaypoint = TriggerCreate("gt_PlayerLeavesWaypoint_Func");
    TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(124), false);
    TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(125), false);
    TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(123), false);
    TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(121), false);
    TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(122), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Waypoint Dialog Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_WaypointDialogButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tPI;
    // Variable Initialization
    lv_tPI = (EventPlayer() - 1);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventDialogControl() == gv_wastelandDialogButton)) {
        gf_WaypointTeleport(EventPlayer(), RegionFromId(124));
    }
    if ((EventDialogControl() == gv_ballanDialogButton)) {
        gf_WaypointTeleport(EventPlayer(), RegionFromId(125));
    }
    if ((EventDialogControl() == gv_relamyDialogButton)) {
        gf_WaypointTeleport(EventPlayer(), RegionFromId(123));
    }
    if ((EventDialogControl() == gv_verbotenDialogButton)) {
        gf_WaypointTeleport(EventPlayer(), RegionFromId(121));
    }
    if ((EventDialogControl() == gv_cretonDialogButton)) {
        gf_WaypointTeleport(EventPlayer(), RegionFromId(122));
    }
    if ((EventDialogControl() == gv_closeWaypointDialogButton)) {
        gf_HideWaypointDialog(EventPlayer());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WaypointDialogButtonClicked_Init () {
    gt_WaypointDialogButtonClicked = TriggerCreate("gt_WaypointDialogButtonClicked_Func");
    TriggerAddEventDialogControl(gt_WaypointDialogButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dragon Enters Waypoint
//--------------------------------------------------------------------------------------------------
bool gt_DragonEntersWaypoint_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetOwner(EventUnit()) == 15)) {
    }
    else {
        if ((UnitGetOwner(EventUnit()) == 14)) {
        }
        else {
            if (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
                UnitBehaviorAddPlayer(EventUnit(), "WaypointProtection", UnitGetOwner(EventUnit()), 1);
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DragonEntersWaypoint_Init () {
    gt_DragonEntersWaypoint = TriggerCreate("gt_DragonEntersWaypoint_Func");
    TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(124), true);
    TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(125), true);
    TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(123), true);
    TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(121), true);
    TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(122), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dragon Leaves Waypoint
//--------------------------------------------------------------------------------------------------
bool gt_DragonLeavesWaypoint_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetOwner(EventUnit()) == 15)) {
    }
    else {
        if ((UnitGetOwner(EventUnit()) == 14)) {
        }
        else {
            if (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
                UnitBehaviorRemovePlayer(EventUnit(), "WaypointProtection", UnitGetOwner(EventUnit()), 1);
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DragonLeavesWaypoint_Init () {
    gt_DragonLeavesWaypoint = TriggerCreate("gt_DragonLeavesWaypoint_Func");
    TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(124), false);
    TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(125), false);
    TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(123), false);
    TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(121), false);
    TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(122), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Zombie Unit Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BDZombieUnitSpawn_Func (bool testConds, bool runActions) {
    playergroup autoEC5DC403_g;
    int autoEC5DC403_p;
    int auto5496C851_ae;
    int auto5496C851_ai;
    int auto94E9BE90_ae;
    int auto94E9BE90_ai;
    int autoDBD8D618_ae;
    int autoDBD8D618_ai;
    int autoAD357D0D_ae;
    int autoAD357D0D_ai;
    int autoBD8BC908_ae;
    int autoBD8BC908_ai;
    int auto6E2C36A2_ae;
    int auto6E2C36A2_ai;
    int autoC09E8C4F_ae;
    int autoC09E8C4F_ai;
    int auto8E01EDCE_ae;
    int auto8E01EDCE_ai;
    int auto84D98F35_ae;
    int auto84D98F35_ai;
    int auto6350FE7C_ae;
    int auto6350FE7C_ai;
    int auto1183017F_ae;
    int auto1183017F_ai;
    // Variable Declarations
    int lv_pickedPlayerIndex;
    int lv_player;
    int lv_numKills;
    int lv_killCount;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_TeleporttoBioDome, false);
    TriggerEnable(gt_TeleporttoCreton, false);
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        gv_inCinematic[lv_pickedPlayerIndex] = true;
        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, UnitGetPosition(EventUnit()), false);
        CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
        CameraSave(PlayerGroupLoopCurrent());
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2500), 2.0, -1, 10, true);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
        libNtve_gf_HideGameUI(false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
    }
    PlayerGroupLoopEnd();
    Wait(2.0, c_timeGame);
    TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel("TassadarPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/75E8294A"), StringExternal("Param/Value/059953E4"), 5.0, c_transmissionDurationSet, true);
    autoEC5DC403_g = gv_playersInBioDome; 
    autoEC5DC403_p = 1;
    for ( ; autoEC5DC403_p <= PlayerGroupCount(autoEC5DC403_g) ; autoEC5DC403_p += BoolToInt(lv_player == PlayerGroupPlayer(autoEC5DC403_g, autoEC5DC403_p)) ) {
        lv_player = PlayerGroupPlayer(autoEC5DC403_g, autoEC5DC403_p);
        lv_numKills = libNtve_gf_UnitGetPropertyKills(gv_players[(lv_player - 1)].dragon, c_unitPropCurrent);
        if ((lv_numKills > 75)) {
            lv_numKills = 75;
        }
        auto5496C851_ae = (lv_numKills / 11);
        auto5496C851_ai = 1;
        lv_killCount = 1;
        for ( ; ( (auto5496C851_ai >= 0 && lv_killCount <= auto5496C851_ae) || (auto5496C851_ai <= 0 && lv_killCount >= auto5496C851_ae) ) ; lv_killCount += auto5496C851_ai ) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mortuus", 0, 15, RegionRandomPoint(RegionFromId(176)), UnitGetPosition(EventUnit()));
            libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
            UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            Wait(0.1, c_timeGame);
        }
        auto94E9BE90_ae = (lv_numKills / 11);
        auto94E9BE90_ai = 1;
        lv_killCount = 1;
        for ( ; ( (auto94E9BE90_ai >= 0 && lv_killCount <= auto94E9BE90_ae) || (auto94E9BE90_ai <= 0 && lv_killCount >= auto94E9BE90_ae) ) ; lv_killCount += auto94E9BE90_ai ) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mortuus", 0, 15, RegionRandomPoint(RegionFromId(177)), UnitGetPosition(EventUnit()));
            libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
            UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            Wait(0.1, c_timeGame);
        }
        autoDBD8D618_ae = (lv_numKills / 11);
        autoDBD8D618_ai = 1;
        lv_killCount = 1;
        for ( ; ( (autoDBD8D618_ai >= 0 && lv_killCount <= autoDBD8D618_ae) || (autoDBD8D618_ai <= 0 && lv_killCount >= autoDBD8D618_ae) ) ; lv_killCount += autoDBD8D618_ai ) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mortuus", 0, 15, RegionRandomPoint(RegionFromId(178)), UnitGetPosition(EventUnit()));
            libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
            UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            Wait(0.1, c_timeGame);
        }
        autoAD357D0D_ae = (lv_numKills / 11);
        autoAD357D0D_ai = 1;
        lv_killCount = 1;
        for ( ; ( (autoAD357D0D_ai >= 0 && lv_killCount <= autoAD357D0D_ae) || (autoAD357D0D_ai <= 0 && lv_killCount >= autoAD357D0D_ae) ) ; lv_killCount += autoAD357D0D_ai ) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mortuus", 0, 15, RegionRandomPoint(RegionFromId(179)), UnitGetPosition(EventUnit()));
            libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
            UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            Wait(0.1, c_timeGame);
        }
        autoBD8BC908_ae = (lv_numKills / 11);
        autoBD8BC908_ai = 1;
        lv_killCount = 1;
        for ( ; ( (autoBD8BC908_ai >= 0 && lv_killCount <= autoBD8BC908_ae) || (autoBD8BC908_ai <= 0 && lv_killCount >= autoBD8BC908_ae) ) ; lv_killCount += autoBD8BC908_ai ) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mortuus", 0, 15, RegionRandomPoint(RegionFromId(180)), UnitGetPosition(EventUnit()));
            libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
            UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            Wait(0.1, c_timeGame);
        }
        auto6E2C36A2_ae = (lv_numKills / 11);
        auto6E2C36A2_ai = 1;
        lv_killCount = 1;
        for ( ; ( (auto6E2C36A2_ai >= 0 && lv_killCount <= auto6E2C36A2_ae) || (auto6E2C36A2_ai <= 0 && lv_killCount >= auto6E2C36A2_ae) ) ; lv_killCount += auto6E2C36A2_ai ) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mortuus", 0, 15, RegionRandomPoint(RegionFromId(181)), UnitGetPosition(EventUnit()));
            libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
            UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            Wait(0.1, c_timeGame);
        }
        autoC09E8C4F_ae = (lv_numKills / 11);
        autoC09E8C4F_ai = 1;
        lv_killCount = 1;
        for ( ; ( (autoC09E8C4F_ai >= 0 && lv_killCount <= autoC09E8C4F_ae) || (autoC09E8C4F_ai <= 0 && lv_killCount >= autoC09E8C4F_ae) ) ; lv_killCount += autoC09E8C4F_ai ) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mortuus", 0, 15, RegionRandomPoint(RegionFromId(182)), UnitGetPosition(EventUnit()));
            libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
            UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            Wait(0.1, c_timeGame);
        }
        auto8E01EDCE_ae = (lv_numKills / 11);
        auto8E01EDCE_ai = 1;
        lv_killCount = 1;
        for ( ; ( (auto8E01EDCE_ai >= 0 && lv_killCount <= auto8E01EDCE_ae) || (auto8E01EDCE_ai <= 0 && lv_killCount >= auto8E01EDCE_ae) ) ; lv_killCount += auto8E01EDCE_ai ) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mortuus", 0, 15, RegionRandomPoint(RegionFromId(183)), UnitGetPosition(EventUnit()));
            libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
            UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            Wait(0.1, c_timeGame);
        }
        auto84D98F35_ae = (lv_numKills / 11);
        auto84D98F35_ai = 1;
        lv_killCount = 1;
        for ( ; ( (auto84D98F35_ai >= 0 && lv_killCount <= auto84D98F35_ae) || (auto84D98F35_ai <= 0 && lv_killCount >= auto84D98F35_ae) ) ; lv_killCount += auto84D98F35_ai ) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mortuus", 0, 15, RegionRandomPoint(RegionFromId(184)), UnitGetPosition(EventUnit()));
            libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
            UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            Wait(0.1, c_timeGame);
        }
        auto6350FE7C_ae = (lv_numKills / 11);
        auto6350FE7C_ai = 1;
        lv_killCount = 1;
        for ( ; ( (auto6350FE7C_ai >= 0 && lv_killCount <= auto6350FE7C_ae) || (auto6350FE7C_ai <= 0 && lv_killCount >= auto6350FE7C_ae) ) ; lv_killCount += auto6350FE7C_ai ) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mortuus", 0, 15, RegionRandomPoint(RegionFromId(185)), UnitGetPosition(EventUnit()));
            libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
            UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            Wait(0.1, c_timeGame);
        }
        auto1183017F_ae = (lv_numKills / 11);
        auto1183017F_ai = 1;
        lv_killCount = 1;
        for ( ; ( (auto1183017F_ai >= 0 && lv_killCount <= auto1183017F_ae) || (auto1183017F_ai <= 0 && lv_killCount >= auto1183017F_ae) ) ; lv_killCount += auto1183017F_ai ) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mortuus", 0, 15, RegionRandomPoint(RegionFromId(186)), UnitGetPosition(EventUnit()));
            libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
            UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
            libNtve_gf_PauseUnit(UnitLastCreated(), true);
            Wait(0.1, c_timeGame);
        }
    }
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        CameraRestore(PlayerGroupLoopCurrent(), 2.0, -1, 10);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, false);
        libNtve_gf_HideGameUI(true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        gv_inCinematic[lv_pickedPlayerIndex] = false;
    }
    PlayerGroupLoopEnd();
    Wait(2.5, c_timeGame);
    UnitGroupLoopBegin(gv_bDZombieUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_BDZombieUnitDeath, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDZombieUnitSpawn_Init () {
    gt_BDZombieUnitSpawn = TriggerCreate("gt_BDZombieUnitSpawn_Func");
    TriggerAddEventUnitDied(gt_BDZombieUnitSpawn, UnitRefFromUnit(UnitFromId(1884)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Zombie Unit Death
//--------------------------------------------------------------------------------------------------
bool gt_BDZombieUnitDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!UnitGroupHasUnit(gv_bDZombieUnits, EventUnit())) {
            return false;
        }
        if (!((UnitGroupCount(gv_bDZombieUnits, c_unitCountAlive) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_TeleporttoBioDome, true);
    TriggerEnable(gt_TeleporttoCreton, true);
    UnitRemove(UnitFromId(1877));
    UnitRemove(UnitFromId(1878));
    UnitRemove(UnitFromId(1879));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDZombieUnitDeath_Init () {
    gt_BDZombieUnitDeath = TriggerCreate("gt_BDZombieUnitDeath_Func");
    TriggerEnable(gt_BDZombieUnitDeath, false);
    TriggerAddEventUnitDied(gt_BDZombieUnitDeath, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Creton Unit Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BDCretonUnitSpawn_Func (bool testConds, bool runActions) {
    playergroup auto1C36C49D_g;
    int auto1C36C49D_p;
    // Variable Declarations
    int lv_pickedPlayerIndex;
    int lv_player;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_TeleporttoBioDome, false);
    TriggerEnable(gt_TeleporttoCreton, false);
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        gv_inCinematic[lv_pickedPlayerIndex] = true;
        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, UnitGetPosition(EventUnit()), false);
        CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
        CameraSave(PlayerGroupLoopCurrent());
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2486), 2.0, -1, 10, true);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
        libNtve_gf_HideGameUI(false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(169));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(170));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(171));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(172));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(173));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(174));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(175));
    }
    PlayerGroupLoopEnd();
    Wait(2.0, c_timeGame);
    TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel("TassadarPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/8011068F"), StringExternal("Param/Value/86CE4109"), 4.0, c_transmissionDurationSet, true);
    auto1C36C49D_g = gv_playersInBioDome; 
    auto1C36C49D_p = 1;
    for ( ; auto1C36C49D_p <= PlayerGroupCount(auto1C36C49D_g) ; auto1C36C49D_p += BoolToInt(lv_player == PlayerGroupPlayer(auto1C36C49D_g, auto1C36C49D_p)) ) {
        lv_player = PlayerGroupPlayer(auto1C36C49D_g, auto1C36C49D_p);
        libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(169)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(170)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(171)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(172)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(173)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(174)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(175)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
    }
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        CameraRestore(PlayerGroupLoopCurrent(), 2.0, -1, 10);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, false);
        libNtve_gf_HideGameUI(true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        gv_inCinematic[lv_pickedPlayerIndex] = false;
    }
    PlayerGroupLoopEnd();
    Wait(2.5, c_timeGame);
    UnitGroupLoopBegin(gv_bDCretonUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_BDCretonUnitDeath, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDCretonUnitSpawn_Init () {
    gt_BDCretonUnitSpawn = TriggerCreate("gt_BDCretonUnitSpawn_Func");
    TriggerAddEventUnitDied(gt_BDCretonUnitSpawn, UnitRefFromUnit(UnitFromId(1883)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Creton Unit Death
//--------------------------------------------------------------------------------------------------
bool gt_BDCretonUnitDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!UnitGroupHasUnit(gv_bDCretonUnits, EventUnit())) {
            return false;
        }
        if (!((UnitGroupCount(gv_bDCretonUnits, c_unitCountAlive) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_TeleporttoBioDome, true);
    TriggerEnable(gt_TeleporttoCreton, true);
    UnitRemove(UnitFromId(1875));
    UnitRemove(UnitFromId(1876));
    UnitRemove(UnitFromId(1874));
    UnitRemove(UnitFromId(1873));
    UnitRemove(UnitFromId(1872));
    UnitRemove(UnitFromId(1871));
    UnitRemove(UnitFromId(1870));
    UnitRemove(UnitFromId(1869));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDCretonUnitDeath_Init () {
    gt_BDCretonUnitDeath = TriggerCreate("gt_BDCretonUnitDeath_Func");
    TriggerEnable(gt_BDCretonUnitDeath, false);
    TriggerAddEventUnitDied(gt_BDCretonUnitDeath, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Verboten Unit Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BDVerbotenUnitSpawn_Func (bool testConds, bool runActions) {
    playergroup auto35D816A8_g;
    int auto35D816A8_p;
    // Variable Declarations
    int lv_pickedPlayerIndex;
    int lv_player;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_TeleporttoBioDome, false);
    TriggerEnable(gt_TeleporttoCreton, false);
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        gv_inCinematic[lv_pickedPlayerIndex] = true;
        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, UnitGetPosition(EventUnit()), false);
        CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
        CameraSave(PlayerGroupLoopCurrent());
        CameraLockInput(PlayerGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
        libNtve_gf_HideGameUI(false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(163));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(164));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(165));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(166));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(167));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(168));
    }
    PlayerGroupLoopEnd();
    Wait(2.0, c_timeGame);
    TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel("TassadarPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/95602A96"), StringExternal("Param/Value/C228B6E1"), 4.0, c_transmissionDurationSet, true);
    auto35D816A8_g = gv_playersInBioDome; 
    auto35D816A8_p = 1;
    for ( ; auto35D816A8_p <= PlayerGroupCount(auto35D816A8_g) ; auto35D816A8_p += BoolToInt(lv_player == PlayerGroupPlayer(auto35D816A8_g, auto35D816A8_p)) ) {
        lv_player = PlayerGroupPlayer(auto35D816A8_g, auto35D816A8_p);
        libNtve_gf_UnitCreateFacingPoint(1, "Stercore", 0, 15, RegionRandomPoint(RegionFromId(163)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Stercore", 0, 15, RegionRandomPoint(RegionFromId(164)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Stercore", 0, 15, RegionRandomPoint(RegionFromId(165)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Stercore", 0, 15, RegionRandomPoint(RegionFromId(166)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Stercore", 0, 15, RegionRandomPoint(RegionFromId(167)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Stercore", 0, 15, RegionRandomPoint(RegionFromId(168)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
    }
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        CameraRestore(PlayerGroupLoopCurrent(), 2.0, -1, 10);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, false);
        libNtve_gf_HideGameUI(true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        gv_inCinematic[lv_pickedPlayerIndex] = false;
    }
    PlayerGroupLoopEnd();
    Wait(1.0, c_timeGame);
    UnitGroupLoopBegin(gv_bDVerbotenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_BDVerbotenUnitDeath, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDVerbotenUnitSpawn_Init () {
    gt_BDVerbotenUnitSpawn = TriggerCreate("gt_BDVerbotenUnitSpawn_Func");
    TriggerAddEventUnitDied(gt_BDVerbotenUnitSpawn, UnitRefFromUnit(UnitFromId(1882)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Verboten Unit Death 
//--------------------------------------------------------------------------------------------------
bool gt_BDVerbotenUnitDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!UnitGroupHasUnit(gv_bDVerbotenUnits, EventUnit())) {
            return false;
        }
        if (!((UnitGroupCount(gv_bDVerbotenUnits, c_unitCountAlive) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_TeleporttoBioDome, true);
    TriggerEnable(gt_TeleporttoCreton, true);
    UnitRemove(UnitFromId(1867));
    UnitRemove(UnitFromId(1868));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDVerbotenUnitDeath_Init () {
    gt_BDVerbotenUnitDeath = TriggerCreate("gt_BDVerbotenUnitDeath_Func");
    TriggerEnable(gt_BDVerbotenUnitDeath, false);
    TriggerAddEventUnitDied(gt_BDVerbotenUnitDeath, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Relamy Unit Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BDRelamyUnitSpawn_Func (bool testConds, bool runActions) {
    playergroup autoF7F51D84_g;
    int autoF7F51D84_p;
    // Variable Declarations
    int lv_pickedPlayerIndex;
    int lv_player;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_TeleporttoBioDome, false);
    TriggerEnable(gt_TeleporttoCreton, false);
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        gv_inCinematic[lv_pickedPlayerIndex] = true;
        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, UnitGetPosition(EventUnit()), false);
        CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
        CameraSave(PlayerGroupLoopCurrent());
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2455), 2.0, -1, 10, true);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
        libNtve_gf_HideGameUI(false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(142));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(145));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(158));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(159));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(160));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(161));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(162));
    }
    PlayerGroupLoopEnd();
    Wait(2.0, c_timeGame);
    TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel("TassadarPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/9C04FD77"), StringExternal("Param/Value/13ABBF17"), 3.0, c_transmissionDurationSet, true);
    autoF7F51D84_g = gv_playersInBioDome; 
    autoF7F51D84_p = 1;
    for ( ; autoF7F51D84_p <= PlayerGroupCount(autoF7F51D84_g) ; autoF7F51D84_p += BoolToInt(lv_player == PlayerGroupPlayer(autoF7F51D84_g, autoF7F51D84_p)) ) {
        lv_player = PlayerGroupPlayer(autoF7F51D84_g, autoF7F51D84_p);
        libNtve_gf_UnitCreateFacingPoint(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(142)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(145)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(158)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(159)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(160)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(161)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(162)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
    }
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        CameraRestore(PlayerGroupLoopCurrent(), 2.0, -1, 10);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, false);
        libNtve_gf_HideGameUI(true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        gv_inCinematic[lv_pickedPlayerIndex] = false;
    }
    PlayerGroupLoopEnd();
    Wait(1.0, c_timeGame);
    UnitGroupLoopBegin(gv_bDRelamyUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_BDRelamyUnitDeath, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDRelamyUnitSpawn_Init () {
    gt_BDRelamyUnitSpawn = TriggerCreate("gt_BDRelamyUnitSpawn_Func");
    TriggerAddEventUnitDied(gt_BDRelamyUnitSpawn, UnitRefFromUnit(UnitFromId(1881)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Relamy Unit Death
//--------------------------------------------------------------------------------------------------
bool gt_BDRelamyUnitDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!UnitGroupHasUnit(gv_bDRelamyUnits, EventUnit())) {
            return false;
        }
        if (!((UnitGroupCount(gv_bDRelamyUnits, c_unitCountAlive) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_TeleporttoBioDome, true);
    TriggerEnable(gt_TeleporttoCreton, true);
    UnitRemove(UnitFromId(2456));
    UnitRemove(UnitFromId(1866));
    UnitRemove(UnitFromId(1865));
    UnitRemove(UnitFromId(1864));
    UnitRemove(UnitFromId(1863));
    UnitRemove(UnitFromId(2457));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDRelamyUnitDeath_Init () {
    gt_BDRelamyUnitDeath = TriggerCreate("gt_BDRelamyUnitDeath_Func");
    TriggerEnable(gt_BDRelamyUnitDeath, false);
    TriggerAddEventUnitDied(gt_BDRelamyUnitDeath, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Wasteland Unit Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BDWastelandUnitSpawn_Func (bool testConds, bool runActions) {
    playergroup autoBF081BB1_g;
    int autoBF081BB1_p;
    // Variable Declarations
    int lv_pickedPlayerIndex;
    int lv_player;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_TeleporttoBioDome, false);
    TriggerEnable(gt_TeleporttoCreton, false);
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        gv_inCinematic[lv_pickedPlayerIndex] = true;
        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, UnitGetPosition(EventUnit()), false);
        CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
        CameraSave(PlayerGroupLoopCurrent());
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(1977), 2.0, -1, 10, true);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
        libNtve_gf_HideGameUI(false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(151));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(152));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(153));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(154));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(155));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(156));
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(157));
    }
    PlayerGroupLoopEnd();
    Wait(2.0, c_timeGame);
    TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel("TassadarPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/7D37A0AD"), StringExternal("Param/Value/600FD038"), 4.0, c_transmissionDurationSet, true);
    autoBF081BB1_g = gv_playersInBioDome; 
    autoBF081BB1_p = 1;
    for ( ; autoBF081BB1_p <= PlayerGroupCount(autoBF081BB1_g) ; autoBF081BB1_p += BoolToInt(lv_player == PlayerGroupPlayer(autoBF081BB1_g, autoBF081BB1_p)) ) {
        lv_player = PlayerGroupPlayer(autoBF081BB1_g, autoBF081BB1_p);
        libNtve_gf_UnitCreateFacingPoint(1, "DemonicSheep", 0, 15, RegionRandomPoint(RegionFromId(151)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "DemonicSheep", 0, 15, RegionRandomPoint(RegionFromId(152)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "DemonicSheep", 0, 15, RegionRandomPoint(RegionFromId(153)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "DemonicSrepti", 0, 15, RegionRandomPoint(RegionFromId(154)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "DemonicSheep", 0, 15, RegionRandomPoint(RegionFromId(155)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "DemonicSheep", 0, 15, RegionRandomPoint(RegionFromId(155)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "DemonicSrepti", 0, 15, RegionRandomPoint(RegionFromId(156)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
        Wait(0.5, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "DemonicSheep", 0, 15, RegionRandomPoint(RegionFromId(157)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
    }
    PlayerGroupLoopBegin(gv_playersInBioDome);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
        CameraRestore(PlayerGroupLoopCurrent(), 2.0, -1, 10);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, false);
        libNtve_gf_HideGameUI(true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
        gv_inCinematic[lv_pickedPlayerIndex] = false;
    }
    PlayerGroupLoopEnd();
    Wait(1.0, c_timeGame);
    UnitGroupLoopBegin(gv_bDWastelandUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_BDWastelandUnitDeath, true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDWastelandUnitSpawn_Init () {
    gt_BDWastelandUnitSpawn = TriggerCreate("gt_BDWastelandUnitSpawn_Func");
    TriggerAddEventUnitDied(gt_BDWastelandUnitSpawn, UnitRefFromUnit(UnitFromId(1880)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Wasteland Unit Death
//--------------------------------------------------------------------------------------------------
bool gt_BDWastelandUnitDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!UnitGroupHasUnit(gv_bDWastelandUnits, EventUnit())) {
            return false;
        }
        if (!((UnitGroupCount(gv_bDWastelandUnits, c_unitCountAlive) == 0))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_TeleporttoBioDome, true);
    TriggerEnable(gt_TeleporttoCreton, true);
    UnitGroupLoopBegin(UnitGroup("MineralField", 0, RegionFromId(146), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_SpawnEnemiesBioDomeWasteland, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDWastelandUnitDeath_Init () {
    gt_BDWastelandUnitDeath = TriggerCreate("gt_BDWastelandUnitDeath_Func");
    TriggerEnable(gt_BDWastelandUnitDeath, false);
    TriggerAddEventUnitDied(gt_BDWastelandUnitDeath, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Teleport to Bio Dome
//--------------------------------------------------------------------------------------------------
bool gt_TeleporttoBioDome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
        if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[8].state >= 1)) {
        SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "BiodomeTheme", c_soundtrackCueAny, 0, false);
        CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(189)), 0.0, -1, 10, false);
        lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
        UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(189)), false);
        gv_locationText[lv_triggeringPlayerIndex] = "Bio Dome";
        libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        gv_respawnPoint[lv_triggeringPlayerIndex] = RegionGetCenter(RegionFromId(188));
        PlayerGroupAdd(gv_playersInBioDome, UnitGetOwner(EventUnit()));
        UnitGroupAdd(gv_dragonsInBioDome, gv_players[lv_triggeringPlayerIndex].dragon);
    }
    else {
        if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].state == 1)) {
            ObjectiveSetState(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].objective, c_objectiveStateFailed);
            ObjectiveDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].objective);
            gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].state = 2;
            BankValueSetFromInt(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, "SQ6", PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].state);
            PingDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].ping);
            gf_SQ7Setup(UnitGetOwner(EventUnit()));
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TeleporttoBioDome_Init () {
    gt_TeleporttoBioDome = TriggerCreate("gt_TeleporttoBioDome_Func");
    TriggerAddEventUnitRegion(gt_TeleporttoBioDome, null, RegionFromId(187), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Teleport to Creton
//--------------------------------------------------------------------------------------------------
bool gt_TeleporttoCreton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
        if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "CretonTheme", c_soundtrackCueAny, 0, false);
    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
    UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(190)), false);
    CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(190)), 0.0, -1, 10, false);
    gv_locationText[lv_triggeringPlayerIndex] = "Creton Trench";
    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    gv_respawnPoint[lv_triggeringPlayerIndex] = RegionGetCenter(RegionFromId(190));
    PlayerGroupRemove(gv_playersInBioDome, UnitGetOwner(EventUnit()));
    UnitGroupRemove(gv_dragonsInBioDome, gv_players[lv_triggeringPlayerIndex].dragon);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TeleporttoCreton_Init () {
    gt_TeleporttoCreton = TriggerCreate("gt_TeleporttoCreton_Func");
    TriggerAddEventUnitRegion(gt_TeleporttoCreton, null, RegionFromId(188), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set RP to Wastelands
//--------------------------------------------------------------------------------------------------
bool gt_SetRPtoWastelands_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
        if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/7BE07EBD"));
    gv_respawnPoint[(UnitGetOwner(EventUnit()) - 1)] = RegionGetCenter(RegionFromId(124));
    gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][0] = true;
    BankValueSetFromFlag(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, "WP0", PlayerHandle(UnitGetOwner(EventUnit())), gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][0]);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRPtoWastelands_Init () {
    gt_SetRPtoWastelands = TriggerCreate("gt_SetRPtoWastelands_Func");
    TriggerAddEventUnitRegion(gt_SetRPtoWastelands, null, RegionFromId(124), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set RP to Ballan
//--------------------------------------------------------------------------------------------------
bool gt_SetRPtoBallan_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
        if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/F2677025"));
    gv_respawnPoint[(UnitGetOwner(EventUnit()) - 1)] = RegionGetCenter(RegionFromId(125));
    gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][1] = true;
    BankValueSetFromFlag(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, "WP1", PlayerHandle(UnitGetOwner(EventUnit())), gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][1]);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRPtoBallan_Init () {
    gt_SetRPtoBallan = TriggerCreate("gt_SetRPtoBallan_Func");
    TriggerAddEventUnitRegion(gt_SetRPtoBallan, null, RegionFromId(125), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set RP to Relamy
//--------------------------------------------------------------------------------------------------
bool gt_SetRPtoRelamy_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
        if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/9E82069B"));
    gv_respawnPoint[(UnitGetOwner(EventUnit()) - 1)] = RegionGetCenter(RegionFromId(123));
    gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][2] = true;
    BankValueSetFromFlag(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, "WP2", PlayerHandle(UnitGetOwner(EventUnit())), gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][2]);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRPtoRelamy_Init () {
    gt_SetRPtoRelamy = TriggerCreate("gt_SetRPtoRelamy_Func");
    TriggerAddEventUnitRegion(gt_SetRPtoRelamy, null, RegionFromId(123), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set RP to Verboten Forest Waypoint
//--------------------------------------------------------------------------------------------------
bool gt_SetRPtoVerbotenForestWaypoint_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
        if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/58C10116"));
    gv_respawnPoint[(UnitGetOwner(EventUnit()) - 1)] = RegionGetCenter(RegionFromId(121));
    gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][3] = true;
    BankValueSetFromFlag(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, "WP3", PlayerHandle(UnitGetOwner(EventUnit())), gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][3]);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRPtoVerbotenForestWaypoint_Init () {
    gt_SetRPtoVerbotenForestWaypoint = TriggerCreate("gt_SetRPtoVerbotenForestWaypoint_Func");
    TriggerAddEventUnitRegion(gt_SetRPtoVerbotenForestWaypoint, null, RegionFromId(121), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set RP to Creton
//--------------------------------------------------------------------------------------------------
bool gt_SetRPtoCreton_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
            return false;
        }
        if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/21B16D01"));
    gv_respawnPoint[(UnitGetOwner(EventUnit()) - 1)] = RegionGetCenter(RegionFromId(122));
    gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][4] = true;
    BankValueSetFromFlag(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, "WP4", PlayerHandle(UnitGetOwner(EventUnit())), gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][4]);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRPtoCreton_Init () {
    gt_SetRPtoCreton = TriggerCreate("gt_SetRPtoCreton_Func");
    TriggerAddEventUnitRegion(gt_SetRPtoCreton, null, RegionFromId(122), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Dragons Nest Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateDragonsNestWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/85D0040F"), 24, PointFromId(624), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateDragonsNestWarning_Init () {
    gt_CreateDragonsNestWarning = TriggerCreate("gt_CreateDragonsNestWarning_Func");
    TriggerAddEventUnitRangePoint(gt_CreateDragonsNestWarning, null, PointFromId(624), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Relamy Pass Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateRelamyPassWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/904E3199"), 24, PointFromId(616), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateRelamyPassWarning_Init () {
    gt_CreateRelamyPassWarning = TriggerCreate("gt_CreateRelamyPassWarning_Func");
    TriggerAddEventUnitRangePoint(gt_CreateRelamyPassWarning, null, PointFromId(616), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Relamy Canyon Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateRelamyCanyonWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/9E8D5C69"), 24, PointFromId(619), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateRelamyCanyonWarning_Init () {
    gt_CreateRelamyCanyonWarning = TriggerCreate("gt_CreateRelamyCanyonWarning_Func");
    TriggerAddEventUnitRangePoint(gt_CreateRelamyCanyonWarning, null, PointFromId(619), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Relamy Hills Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateRelamyHillsWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/7A4BEC0C"), 24, PointFromId(620), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateRelamyHillsWarning_Init () {
    gt_CreateRelamyHillsWarning = TriggerCreate("gt_CreateRelamyHillsWarning_Func");
    TriggerAddEventUnitRangePoint(gt_CreateRelamyHillsWarning, null, PointFromId(620), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Relamy Gorge Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateRelamyGorgeWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/C7072A64"), 24, PointFromId(709), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateRelamyGorgeWarning_Init () {
    gt_CreateRelamyGorgeWarning = TriggerCreate("gt_CreateRelamyGorgeWarning_Func");
    TriggerAddEventUnitRangePoint(gt_CreateRelamyGorgeWarning, null, PointFromId(709), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Lava Pass Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateLavaPassWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/C17B2598"), 24, PointFromId(205), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateLavaPassWarning_Init () {
    gt_CreateLavaPassWarning = TriggerCreate("gt_CreateLavaPassWarning_Func");
    TriggerAddEventUnitRangePoint(gt_CreateLavaPassWarning, null, PointFromId(205), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Verboten Forest Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateVerbotenForestWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/302FEAEA"), 24, PointFromId(837), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateVerbotenForestWarning_Init () {
    gt_CreateVerbotenForestWarning = TriggerCreate("gt_CreateVerbotenForestWarning_Func");
    TriggerAddEventUnitRangePoint(gt_CreateVerbotenForestWarning, null, PointFromId(837), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Verboten Infestation Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateVerbotenInfestationWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/00FFE1AB"), 24, PointFromId(1095), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateVerbotenInfestationWarning_Init () {
    gt_CreateVerbotenInfestationWarning = TriggerCreate("gt_CreateVerbotenInfestationWarning_Func");
    TriggerAddEventUnitRangePoint(gt_CreateVerbotenInfestationWarning, null, PointFromId(1095), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Road To Ballan Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateRoadToBallanWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/F802674B"), 24, PointFromId(239), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateRoadToBallanWarning_Init () {
    gt_CreateRoadToBallanWarning = TriggerCreate("gt_CreateRoadToBallanWarning_Func");
    TriggerAddEventUnitRangePoint(gt_CreateRoadToBallanWarning, null, PointFromId(239), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Creton Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateCretonWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/26DDFA9D"), 24, PointFromId(1186), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateCretonWarning_Init () {
    gt_CreateCretonWarning = TriggerCreate("gt_CreateCretonWarning_Func");
    TriggerAddEventUnitRangePoint(gt_CreateCretonWarning, null, PointFromId(1186), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Sragmasi Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateSragmasiWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TextTagCreate(StringExternal("Param/Value/4C8936F2"), 24, PointFromId(2502), 1.0, true, true, PlayerGroupAll());
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateSragmasiWarning_Init () {
    gt_CreateSragmasiWarning = TriggerCreate("gt_CreateSragmasiWarning_Func");
    TriggerAddEventUnitRangePoint(gt_CreateSragmasiWarning, null, PointFromId(2502), 30.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Up Location Dialog
//--------------------------------------------------------------------------------------------------
bool gt_SetUpLocationDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    DialogCreate(200, 100, c_anchorTop, 0, 40, true);
    gv_players[0].locationDialog.state = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_players[0].locationDialog.state, 200, 50, c_anchorTop, 55, 25, StringExternal("Param/Value/A87E682D"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_players[0].locationDialog.state, 200, 50, c_anchorBottom, ((StringLength(gv_locationText[0]) * 2) + 4), 0, StringToText(gv_locationText[0]), Color(28*100/255,167*100/255,234*100/255), true, 2.0);
    gv_players[0].locationDialog.textBox = DialogControlLastCreated();
    DialogSetVisible(gv_players[0].locationDialog.state, PlayerGroupSingle(1), true);
    DialogCreate(200, 100, c_anchorTop, 0, 40, true);
    gv_players[1].locationDialog.state = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_players[1].locationDialog.state, 200, 50, c_anchorTop, 55, 25, StringExternal("Param/Value/A9E23210"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_players[1].locationDialog.state, 200, 50, c_anchorBottom, ((StringLength(gv_locationText[0]) * 2) + 4), 0, StringToText(gv_locationText[1]), Color(28*100/255,167*100/255,234*100/255), true, 2.0);
    gv_players[1].locationDialog.textBox = DialogControlLastCreated();
    DialogSetVisible(gv_players[1].locationDialog.state, PlayerGroupSingle(2), true);
    DialogCreate(200, 100, c_anchorTop, 0, 40, true);
    gv_players[2].locationDialog.state = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_players[2].locationDialog.state, 200, 50, c_anchorTop, 55, 25, StringExternal("Param/Value/CDDD8377"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_players[2].locationDialog.state, 200, 50, c_anchorBottom, ((StringLength(gv_locationText[0]) * 2) + 4), 0, StringToText(gv_locationText[2]), Color(28*100/255,167*100/255,234*100/255), true, 2.0);
    gv_players[2].locationDialog.textBox = DialogControlLastCreated();
    DialogSetVisible(gv_players[2].locationDialog.state, PlayerGroupSingle(3), true);
    DialogCreate(200, 100, c_anchorTop, 0, 40, true);
    gv_players[3].locationDialog.state = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_players[3].locationDialog.state, 200, 50, c_anchorTop, 55, 25, StringExternal("Param/Value/01F92455"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_players[3].locationDialog.state, 200, 50, c_anchorBottom, ((StringLength(gv_locationText[0]) * 2) + 4), 0, StringToText(gv_locationText[3]), Color(28*100/255,167*100/255,234*100/255), true, 2.0);
    gv_players[3].locationDialog.textBox = DialogControlLastCreated();
    DialogSetVisible(gv_players[3].locationDialog.state, PlayerGroupSingle(4), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetUpLocationDialog_Init () {
    gt_SetUpLocationDialog = TriggerCreate("gt_SetUpLocationDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Wasteland
//--------------------------------------------------------------------------------------------------
bool gt_LocationWasteland_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Wasteland", c_stringCase)) {
        UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
        lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
        SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "WastelandTheme", c_soundtrackCueAny, 0, false);
        gv_locationString[lv_triggeringPlayerIndex] = "Wasteland";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
        libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationWasteland_Init () {
    gt_LocationWasteland = TriggerCreate("gt_LocationWasteland_Func");
    TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(32), true);
    TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(36), true);
    TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(37), true);
    TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(41), true);
    TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(124), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Dragon's Nest
//--------------------------------------------------------------------------------------------------
bool gt_LocationDragonsNest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Dragon's Nest", c_stringCase)) {
        UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
        lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
        gv_locationString[lv_triggeringPlayerIndex] = "Dragon's Nest";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
        libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationDragonsNest_Init () {
    gt_LocationDragonsNest = TriggerCreate("gt_LocationDragonsNest_Func");
    TriggerAddEventUnitRegion(gt_LocationDragonsNest, null, RegionFromId(3), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Syrital's Lair
//--------------------------------------------------------------------------------------------------
bool gt_LocationSyritalsLair_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Syrital's Lair", c_stringCase)) {
        UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
        lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
        gv_locationString[lv_triggeringPlayerIndex] = "Syrital's Lair";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
        libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationSyritalsLair_Init () {
    gt_LocationSyritalsLair = TriggerCreate("gt_LocationSyritalsLair_Func");
    TriggerAddEventUnitRegion(gt_LocationSyritalsLair, null, RegionFromId(6), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Relamy Pass
//--------------------------------------------------------------------------------------------------
bool gt_LocationRelamyPass_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Pass", c_stringCase)) {
        if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Pass", c_stringCase) && !StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Gorge", c_stringCase) && !StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Canyon", c_stringCase) && !StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Hills", c_stringCase)) {
            UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
            SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
            SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "RelamyCaveTheme", c_soundtrackCueAny, 0, false);
        }
        lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
        gv_locationString[lv_triggeringPlayerIndex] = "Relamy Pass";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
        libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationRelamyPass_Init () {
    gt_LocationRelamyPass = TriggerCreate("gt_LocationRelamyPass_Func");
    TriggerAddEventUnitRegion(gt_LocationRelamyPass, null, RegionFromId(31), true);
    TriggerAddEventUnitRegion(gt_LocationRelamyPass, null, RegionFromId(33), true);
    TriggerAddEventUnitRegion(gt_LocationRelamyPass, null, RegionFromId(19), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Relamy Canyon
//--------------------------------------------------------------------------------------------------
bool gt_LocationRelamyCanyon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Canyon", c_stringCase)) {
        if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Pass", c_stringCase) && !StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Gorge", c_stringCase) && !StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Canyon", c_stringCase) && !StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Hills", c_stringCase)) {
            UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
            SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
            SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "RelamyCaveTheme", c_soundtrackCueAny, 0, false);
        }
        lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
        gv_locationString[lv_triggeringPlayerIndex] = "Relamy Canyon";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
        libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationRelamyCanyon_Init () {
    gt_LocationRelamyCanyon = TriggerCreate("gt_LocationRelamyCanyon_Func");
    TriggerAddEventUnitRegion(gt_LocationRelamyCanyon, null, RegionFromId(34), true);
    TriggerAddEventUnitRegion(gt_LocationRelamyCanyon, null, RegionFromId(40), true);
    TriggerAddEventUnitRegion(gt_LocationRelamyCanyon, null, RegionFromId(59), true);
    TriggerAddEventUnitRegion(gt_LocationRelamyCanyon, null, RegionFromId(123), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Relamy Hills
//--------------------------------------------------------------------------------------------------
bool gt_LocationRelamyHills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Hills", c_stringCase)) {
        if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Pass", c_stringCase) && !StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Gorge", c_stringCase) && !StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Canyon", c_stringCase) && !StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Relamy Hills", c_stringCase)) {
            UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
            SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
            SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "RelamyCaveTheme", c_soundtrackCueAny, 0, false);
        }
        lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
        gv_locationString[lv_triggeringPlayerIndex] = "Relamy Hills";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
        libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationRelamyHills_Init () {
    gt_LocationRelamyHills = TriggerCreate("gt_LocationRelamyHills_Func");
    TriggerAddEventUnitRegion(gt_LocationRelamyHills, null, RegionFromId(35), true);
    TriggerAddEventUnitRegion(gt_LocationRelamyHills, null, RegionFromId(13), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Verboten Forest
//--------------------------------------------------------------------------------------------------
bool gt_LocationVerbotenForest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Verboten Forest", c_stringCase)) {
        UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
        SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "VerbotenTheme", c_soundtrackCueAny, 0, false);
        lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
        gv_locationString[lv_triggeringPlayerIndex] = "Verboten Forest";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
        libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationVerbotenForest_Init () {
    gt_LocationVerbotenForest = TriggerCreate("gt_LocationVerbotenForest_Func");
    TriggerAddEventUnitRegion(gt_LocationVerbotenForest, null, RegionFromId(58), true);
    TriggerAddEventUnitRegion(gt_LocationVerbotenForest, null, RegionFromId(121), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Creton
//--------------------------------------------------------------------------------------------------
bool gt_LocationCreton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Creton", c_stringCase)) {
        if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Creton", c_stringCase) && !StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Creton Trench", c_stringCase)) {
            UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
            SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
            SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "CretonTheme", c_soundtrackCueAny, 0, false);
        }
        lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
        gv_locationString[lv_triggeringPlayerIndex] = "Creton";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
        libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationCreton_Init () {
    gt_LocationCreton = TriggerCreate("gt_LocationCreton_Func");
    TriggerAddEventUnitRegion(gt_LocationCreton, null, RegionFromId(98), true);
    TriggerAddEventUnitRegion(gt_LocationCreton, null, RegionFromId(135), true);
    TriggerAddEventUnitRegion(gt_LocationCreton, null, RegionFromId(122), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Creton Trench
//--------------------------------------------------------------------------------------------------
bool gt_LocationCretonTrench_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Creton Trench", c_stringCase) && !StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Creton", c_stringCase)) {
        if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Creton", c_stringCase) && !StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Creton", c_stringCase)) {
            UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
            SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
            SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "CretonTheme", c_soundtrackCueAny, 0, false);
        }
        lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
        gv_locationString[lv_triggeringPlayerIndex] = "Creton Trench";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
        libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationCretonTrench_Init () {
    gt_LocationCretonTrench = TriggerCreate("gt_LocationCretonTrench_Func");
    TriggerAddEventUnitRegion(gt_LocationCretonTrench, null, RegionFromId(134), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Road to Ballan
//--------------------------------------------------------------------------------------------------
bool gt_LocationRoadtoBallan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Road to Ballan", c_stringCase)) {
        UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
        lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
        gv_locationString[lv_triggeringPlayerIndex] = "Road to Ballan";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
        libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationRoadtoBallan_Init () {
    gt_LocationRoadtoBallan = TriggerCreate("gt_LocationRoadtoBallan_Func");
    TriggerAddEventUnitRegion(gt_LocationRoadtoBallan, null, RegionFromId(38), true);
    TriggerAddEventUnitRegion(gt_LocationRoadtoBallan, null, RegionFromId(39), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Ballan
//--------------------------------------------------------------------------------------------------
bool gt_LocationBallan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (!StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], "Ballan", c_stringCase)) {
        UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
        SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, "BiodomeTheme2", c_soundtrackCueAny, 0, false);
        lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
        gv_locationString[lv_triggeringPlayerIndex] = "Ballan";
        gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
        libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationBallan_Init () {
    gt_LocationBallan = TriggerCreate("gt_LocationBallan_Func");
    TriggerAddEventUnitRegion(gt_LocationBallan, null, RegionFromId(76), true);
    TriggerAddEventUnitRegion(gt_LocationBallan, null, RegionFromId(125), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Wasteland Healing Water Enter
//--------------------------------------------------------------------------------------------------
bool gt_WastelandHealingWaterEnter_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAdd(EventUnit(), "HealingWaters", EventUnit(), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WastelandHealingWaterEnter_Init () {
    gt_WastelandHealingWaterEnter = TriggerCreate("gt_WastelandHealingWaterEnter_Func");
    TriggerAddEventUnitRegion(gt_WastelandHealingWaterEnter, null, RegionFromId(42), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Wasteland Healing Water Leave
//--------------------------------------------------------------------------------------------------
bool gt_WastelandHealingWaterLeave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorRemove(EventUnit(), "HealingWaters", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WastelandHealingWaterLeave_Init () {
    gt_WastelandHealingWaterLeave = TriggerCreate("gt_WastelandHealingWaterLeave_Func");
    TriggerAddEventUnitRegion(gt_WastelandHealingWaterLeave, null, RegionFromId(42), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Pass Healing Water Enter
//--------------------------------------------------------------------------------------------------
bool gt_RelamyPassHealingWaterEnter_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAdd(EventUnit(), "HealingWaters", EventUnit(), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyPassHealingWaterEnter_Init () {
    gt_RelamyPassHealingWaterEnter = TriggerCreate("gt_RelamyPassHealingWaterEnter_Func");
    TriggerAddEventUnitRegion(gt_RelamyPassHealingWaterEnter, null, RegionFromId(43), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Pass Healing Water Leave
//--------------------------------------------------------------------------------------------------
bool gt_RelamyPassHealingWaterLeave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorRemove(EventUnit(), "HealingWaters", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyPassHealingWaterLeave_Init () {
    gt_RelamyPassHealingWaterLeave = TriggerCreate("gt_RelamyPassHealingWaterLeave_Func");
    TriggerAddEventUnitRegion(gt_RelamyPassHealingWaterLeave, null, RegionFromId(43), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Canyon Healing Water Enter
//--------------------------------------------------------------------------------------------------
bool gt_RelamyCanyonHealingWaterEnter_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAdd(EventUnit(), "HealingWaters", EventUnit(), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyCanyonHealingWaterEnter_Init () {
    gt_RelamyCanyonHealingWaterEnter = TriggerCreate("gt_RelamyCanyonHealingWaterEnter_Func");
    TriggerAddEventUnitRegion(gt_RelamyCanyonHealingWaterEnter, null, RegionFromId(60), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Canyon Healing Water Leave
//--------------------------------------------------------------------------------------------------
bool gt_RelamyCanyonHealingWaterLeave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorRemove(EventUnit(), "HealingWaters", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyCanyonHealingWaterLeave_Init () {
    gt_RelamyCanyonHealingWaterLeave = TriggerCreate("gt_RelamyCanyonHealingWaterLeave_Func");
    TriggerAddEventUnitRegion(gt_RelamyCanyonHealingWaterLeave, null, RegionFromId(60), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Verboten Forest Healing Water Enter
//--------------------------------------------------------------------------------------------------
bool gt_VerbotenForestHealingWaterEnter_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorAdd(EventUnit(), "HealingWaters", EventUnit(), 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VerbotenForestHealingWaterEnter_Init () {
    gt_VerbotenForestHealingWaterEnter = TriggerCreate("gt_VerbotenForestHealingWaterEnter_Func");
    TriggerAddEventUnitRegion(gt_VerbotenForestHealingWaterEnter, null, RegionFromId(133), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Verboten Forest Healing Water Leave
//--------------------------------------------------------------------------------------------------
bool gt_VerbotenForestHealingWaterLeave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorRemove(EventUnit(), "HealingWaters", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VerbotenForestHealingWaterLeave_Init () {
    gt_VerbotenForestHealingWaterLeave = TriggerCreate("gt_VerbotenForestHealingWaterLeave_Func");
    TriggerAddEventUnitRegion(gt_VerbotenForestHealingWaterLeave, null, RegionFromId(133), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Lava Enter
//--------------------------------------------------------------------------------------------------
bool gt_LavaEnter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (libNtve_gf_UnitIsInvulnerable(EventUnit())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((UnitGetOwner(EventUnit()) == 15)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(EventUnit())) + RandomFixed(-10.0, 10.0)), (PointGetY(UnitGetPosition(EventUnit())) + RandomFixed(-10.0, 10.0)))), c_orderQueueReplace);
    }
    if ((UnitGetOwner(EventUnit()) == 1)) {
        if (gv_fireSkin[0]) {
        }
        else {
            UnitBehaviorAdd(EventUnit(), "InLava", EventUnit(), 1);
        }
    }
    else {
        if ((UnitGetOwner(EventUnit()) == 2)) {
            if (gv_fireSkin[1]) {
            }
            else {
                UnitBehaviorAdd(EventUnit(), "InLava", EventUnit(), 1);
            }
        }
        else {
            if ((UnitGetOwner(EventUnit()) == 3)) {
                if (gv_fireSkin[2]) {
                }
                else {
                    UnitBehaviorAdd(EventUnit(), "InLava", EventUnit(), 1);
                }
            }
            else {
                if ((UnitGetOwner(EventUnit()) == 4)) {
                    if (gv_fireSkin[3]) {
                    }
                    else {
                        UnitBehaviorAdd(EventUnit(), "InLava", EventUnit(), 1);
                    }
                }
                else {
                    if ((UnitGetType(EventUnit()) == "Syrital")) {
                    }
                    else {
                        UnitBehaviorAdd(EventUnit(), "InLava", EventUnit(), 1);
                    }
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LavaEnter_Init () {
    gt_LavaEnter = TriggerCreate("gt_LavaEnter_Func");
    TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(22), true);
    TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(23), true);
    TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(24), true);
    TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(25), true);
    TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(126), true);
    TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(127), true);
    TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(128), true);
    TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(129), true);
    TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(130), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Lava Exit
//--------------------------------------------------------------------------------------------------
bool gt_LavaExit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitBehaviorRemove(EventUnit(), "InLava", 1);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LavaExit_Init () {
    gt_LavaExit = TriggerCreate("gt_LavaExit_Func");
    TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(22), false);
    TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(23), false);
    TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(24), false);
    TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(25), false);
    TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(126), false);
    TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(127), false);
    TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(128), false);
    TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(129), false);
    TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(130), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Chaos
//--------------------------------------------------------------------------------------------------
bool gt_Chaos_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if(gv_mortuusKillCount == 0){
    gv_mortuusKillCountStacks = 0;
    }
    if(gv_mortuusKillCount <= 255){
    gv_mortuusKillCountStacks = gv_mortuusKillCount;
    }
    if ((UnitGetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLevel, c_unitPropCurrent) == 100.0)) {
        if ((UnitGetType(EventUnit()) != "Mortuus")) {
            UnitCreate(1, "Mortuus", c_unitCreateIgnorePlacement, 15, UnitGetPosition(EventUnit()), libNtve_gf_RandomAngle());
            UnitBehaviorAdd(UnitLastCreated(), "ChaosMode", UnitLastCreated(), gv_mortuusKillCountStacks);
        }
        else {
            TextTagCreate(IntToText(gv_mortuusKillCount), 72, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
            TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, ColorWithAlpha(RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0)));
            gv_mortuusKillCount += 1;
            if ((gv_mortuusKillCount % 256 == 0)) {
                UnitCreate(1, "Nosferatu", 0, 15, UnitGetPosition(EventUnit()), 270.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4A9BE0A1"));
                //gv_mortuusKillCount = 0;
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Chaos_Init () {
    gt_Chaos = TriggerCreate("gt_Chaos_Func");
    TriggerEnable(gt_Chaos, false);
    TriggerAddEventUnitDied(gt_Chaos, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Chaos Hack
//--------------------------------------------------------------------------------------------------
bool gt_ChaosHack_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerEnable(gt_Chaos, true);
    TriggerExecute(gt_ChaosUnitTypes, false, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChaosHack_Init () {
    gt_ChaosHack = TriggerCreate("gt_ChaosHack_Func");
    TriggerAddEventChatMessage(gt_ChaosHack, c_playerAny, "-Chaos Mode", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reveal Map
//--------------------------------------------------------------------------------------------------
bool gt_RevealMap_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    VisRevealerCreate(EventPlayer(), RegionEntireMap());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RevealMap_Init () {
    gt_RevealMap = TriggerCreate("gt_RevealMap_Func");
    TriggerAddEventChatMessage(gt_RevealMap, c_playerAny, "-Reveal Map", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Devil's Flamethrower
//--------------------------------------------------------------------------------------------------
bool gt_DevilsFlamethrower_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer()) && !(PlayerHandle(EventPlayer()) != "1-S2-1-2755172")) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, "DevilsFlamethrower");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DevilsFlamethrower_Init () {
    gt_DevilsFlamethrower = TriggerCreate("gt_DevilsFlamethrower_Func");
    TriggerAddEventChatMessage(gt_DevilsFlamethrower, c_playerAny, "-Devil's Flamethrower", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Wing Claws
//--------------------------------------------------------------------------------------------------
bool gt_WingClaws_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer()) && PlayerHandle(EventPlayer()) != "" && PlayerName(EventPlayer()) != StringToText("Wingcrafter")) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, "WingClaws");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WingClaws_Init () {
    gt_WingClaws = TriggerCreate("gt_WingClaws_Func");
    TriggerAddEventChatMessage(gt_WingClaws, c_playerAny, "-Wing Claws", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Teleport Infestation
//--------------------------------------------------------------------------------------------------
bool gt_TeleportInfestation_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetPosition(gv_players[(EventPlayer() - 1)].dragon, RegionGetCenter(RegionFromId(65)), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TeleportInfestation_Init () {
    gt_TeleportInfestation = TriggerCreate("gt_TeleportInfestation_Func");
    TriggerAddEventChatMessage(gt_TeleportInfestation, c_playerAny, "-Infestation", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Island of Woe cheat
//--------------------------------------------------------------------------------------------------
bool gt_IslandofWoecheat_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetPosition(gv_players[(EventPlayer() - 1)].dragon, RegionGetCenter(RegionFromId(193)), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_IslandofWoecheat_Init () {
    gt_IslandofWoecheat = TriggerCreate("gt_IslandofWoecheat_Func");
    TriggerAddEventChatMessage(gt_IslandofWoecheat, c_playerAny, "-Island of Woe", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: VT Count
//--------------------------------------------------------------------------------------------------
bool gt_VTCount_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/F4A2B359") + IntToText(UnitBehaviorCount(gv_players[(EventPlayer() - 1)].dragon, "VampiricTendencies"))));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/F6C42C62") + IntToText(lib1_gv_vampiricTendenciesCount[(EventPlayer() - 1)])));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VTCount_Init () {
    gt_VTCount = TriggerCreate("gt_VTCount_Func");
    TriggerAddEventChatMessage(gt_VTCount, c_playerAny, "-VT", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location
//--------------------------------------------------------------------------------------------------
bool gt_Location_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText(gv_locationString[(EventPlayer() - 1)]));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText(gv_locationText[(EventPlayer() - 1)]));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Location_Init () {
    gt_Location = TriggerCreate("gt_Location_Func");
    TriggerAddEventChatMessage(gt_Location, c_playerAny, "-Location", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reset Quest
//--------------------------------------------------------------------------------------------------
bool gt_ResetQuest_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    ObjectiveDestroyAll(PlayerGroupSingle(EventPlayer()));
    PingDestroy(gv_players[EventPlayer()].quests.storyQuests[0].ping);
    PingDestroy(gv_players[EventPlayer()].quests.storyQuests[1].ping);
    PingDestroy(gv_players[EventPlayer()].quests.storyQuests[2].ping);
    PingDestroy(gv_players[EventPlayer()].quests.storyQuests[3].ping);
    PingDestroy(gv_players[EventPlayer()].quests.storyQuests[4].ping);
    PingDestroy(gv_players[EventPlayer()].quests.storyQuests[5].ping);
    PingDestroy(gv_players[EventPlayer()].quests.storyQuests[6].ping);
    PingDestroy(gv_players[EventPlayer()].quests.storyQuests[7].ping);
    PingDestroy(gv_players[EventPlayer()].quests.storyQuests[8].ping);
    PingDestroy(gv_players[EventPlayer()].quests.storyQuests[9].ping);
    gf_SQ0Setup(EventPlayer());
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/57E33316"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ResetQuest_Init () {
    gt_ResetQuest = TriggerCreate("gt_ResetQuest_Func");
    TriggerAddEventChatMessage(gt_ResetQuest, c_playerAny, "-Reset Quests", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Teleport Bio Dome
//--------------------------------------------------------------------------------------------------
bool gt_TeleportBioDome_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetPosition(gv_players[(EventPlayer() - 1)].dragon, RegionGetCenter(RegionFromId(187)), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TeleportBioDome_Init () {
    gt_TeleportBioDome = TriggerCreate("gt_TeleportBioDome_Func");
    TriggerAddEventChatMessage(gt_TeleportBioDome, c_playerAny, "-Bio Dome", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Teleport to Spawn
//--------------------------------------------------------------------------------------------------
bool gt_TeleporttoSpawn_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetPosition(gv_players[(EventPlayer() - 1)].dragon, RegionGetCenter(RegionFromId(3)), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TeleporttoSpawn_Init () {
    gt_TeleporttoSpawn = TriggerCreate("gt_TeleporttoSpawn_Func");
    TriggerAddEventChatMessage(gt_TeleporttoSpawn, c_playerAny, "-Spawn", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Debug Tele Zauberer
//--------------------------------------------------------------------------------------------------
bool gt_DebugTeleZauberer_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupAdd(gv_playersInBioDome, EventPlayer());
    UnitSetPosition(gv_players[(EventPlayer() - 1)].dragon, UnitGetPosition(UnitFromId(2501)), false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DebugTeleZauberer_Init () {
    gt_DebugTeleZauberer = TriggerCreate("gt_DebugTeleZauberer_Func");
    TriggerAddEventChatMessage(gt_DebugTeleZauberer, c_playerAny, "-Zauberer", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Invincibility
//--------------------------------------------------------------------------------------------------
bool gt_Invincibility_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLifeRegen, 50000.0);
    UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropShieldsRegen, 50000.0);
    UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropEnergyRegen, 50000.0);
    UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLifeMax, 500000.0);
    UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropShieldsMax, 500000.0);
    UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropEnergyMax, 500000.0);
    UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropShields, 500000.0);
    UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLife, 500000.0);
    UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropEnergy, 500000.0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Invincibility_Init () {
    gt_Invincibility = TriggerCreate("gt_Invincibility_Func");
    TriggerAddEventChatMessage(gt_Invincibility, c_playerAny, "-GOD", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Suit Up
//--------------------------------------------------------------------------------------------------
bool gt_SuitUp_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, "ModArmor");
    UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, "GodlyClaws");
    UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, "FluxCapacitor");
    UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, "FluxCapacitor");
    UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, "FluxCapacitor");
    UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, "FluxCapacitor");
    UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, "FluxCapacitor");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SuitUp_Init () {
    gt_SuitUp = TriggerCreate("gt_SuitUp_Func");
    TriggerAddEventChatMessage(gt_SuitUp, c_playerAny, "-Suit Up", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Level Debug
//--------------------------------------------------------------------------------------------------
bool gt_LevelDebug_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if (!gv_evolving[(EventPlayer() - 1)]) {
        UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLevel, (UnitGetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLevel, c_unitPropCurrent) + 1.0));
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LevelDebug_Init () {
    gt_LevelDebug = TriggerCreate("gt_LevelDebug_Func");
    TriggerAddEventChatMessage(gt_LevelDebug, c_playerAny, "-level", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Get Handle
//--------------------------------------------------------------------------------------------------
bool gt_GetHandle_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (PlayerName(1) + (StringExternal("Param/Value/86DAF636") + StringToText(PlayerHandle(1)))));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (PlayerName(2) + (StringExternal("Param/Value/120F225F") + StringToText(PlayerHandle(2)))));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (PlayerName(3) + (StringExternal("Param/Value/209E9C9C") + StringToText(PlayerHandle(3)))));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (PlayerName(4) + (StringExternal("Param/Value/E2AE18A4") + StringToText(PlayerHandle(4)))));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GetHandle_Init () {
    gt_GetHandle = TriggerCreate("gt_GetHandle_Func");
    TriggerAddEventChatMessage(gt_GetHandle, c_playerAny, "-Handle", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Number of Unit Deaths
//--------------------------------------------------------------------------------------------------
bool gt_NumberofUnitDeaths_Func (bool testConds, bool runActions) {
    // Actions
    int slot;
    if (!runActions) {
        return true;
    }
   // slot = RegionFromId(241);
    //for(slot = 0; slot <=11; slot +=1){
   // UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaAll, (StringExternal("Param/Value/CCBC876F") + StringToText(" slot: ") + IntToText(slot) +StringToText(" is ") + IntToText(gv_unitKills[slot])));
   // }
  //UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/CCBC876F") + IntToText(gv_unitKills[1])));
   //UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/506A51FE") + IntToText(gv_unitKills[3])));
   //UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal(slot));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_NumberofUnitDeaths_Init () {
    int slot = 0;
    gt_NumberofUnitDeaths = TriggerCreate("gt_NumberofUnitDeaths_Func");
    TriggerAddEventChatMessage(gt_NumberofUnitDeaths, c_playerAny, "-kills", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Weapons
//--------------------------------------------------------------------------------------------------
bool gt_Weapons_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, IntToText(UnitWeaponCount(gv_players[(EventPlayer() - 1)].dragon)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Weapons_Init () {
    gt_Weapons = TriggerCreate("gt_Weapons_Func");
    TriggerAddEventChatMessage(gt_Weapons, c_playerAny, "-wp", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Get Money
//--------------------------------------------------------------------------------------------------
bool gt_GetMoney_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 1000000);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GetMoney_Init () {
    gt_GetMoney = TriggerCreate("gt_GetMoney_Func");
    TriggerAddEventChatMessage(gt_GetMoney, c_playerAny, "-Minerals", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: View Ending
//--------------------------------------------------------------------------------------------------
bool gt_ViewEnding_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupAdd(gv_playerswatchingendingcinematic, EventPlayer());
    TriggerExecute(gt_EndingCinematic, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ViewEnding_Init () {
    gt_ViewEnding = TriggerCreate("gt_ViewEnding_Func");
    TriggerAddEventChatMessage(gt_ViewEnding, c_playerAny, "-Ending", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: 50 Shades of Gray
//--------------------------------------------------------------------------------------------------
bool gt__50ShadesofGray_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3C95F15D"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt__50ShadesofGray_Init () {
    gt__50ShadesofGray = TriggerCreate("gt__50ShadesofGray_Func");
    TriggerAddEventChatMessage(gt__50ShadesofGray, c_playerAny, "50 Shades", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Get Money 2
//--------------------------------------------------------------------------------------------------
bool gt_GetMoney2_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 1000);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GetMoney2_Init () {
    gt_GetMoney2 = TriggerCreate("gt_GetMoney2_Func");
    TriggerAddEventChatMessage(gt_GetMoney2, c_playerAny, "-Vespene", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Get Money 3
//--------------------------------------------------------------------------------------------------
bool gt_GetMoney3_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 1000);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GetMoney3_Init () {
    gt_GetMoney3 = TriggerCreate("gt_GetMoney3_Func");
    TriggerAddEventChatMessage(gt_GetMoney3, c_playerAny, "-Shards", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Fastest
//--------------------------------------------------------------------------------------------------
bool gt_Fastest_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    GameSetSpeedValue(c_gameSpeedFaster);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Fastest_Init () {
    gt_Fastest = TriggerCreate("gt_Fastest_Func");
    TriggerAddEventChatMessage(gt_Fastest, c_playerAny, "-Fastest", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Max Stats
//--------------------------------------------------------------------------------------------------
bool gt_MaxStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tempAgility;
    int lv_tempDexterity;
    int lv_tempIntelligence;
    int lv_tempStrength;
    int lv_tempVitality;
    int lv_tempReborn;
    int lv_triggeringPlayerIndex;
    int lv_triggeringPlayer;
    
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (EventPlayer() - 1);
    lv_triggeringPlayer = EventPlayer();
    gv_players[(EventPlayer() - 1)].stats.agility = 100;
    gv_players[(EventPlayer() - 1)].stats.intelligence = 500;
    gv_players[(EventPlayer() - 1)].stats.dexterity = 500;
    gv_players[(EventPlayer() - 1)].stats.strength = 500;
    gv_players[(EventPlayer() - 1)].stats.vitality = 500;
    gv_players[(EventPlayer() - 1)].stats.attributePoints = 0.0;
    lv_tempVitality = gv_players[lv_triggeringPlayerIndex].stats.vitality;
    lv_tempStrength = gv_players[lv_triggeringPlayerIndex].stats.strength;
    lv_tempIntelligence = gv_players[lv_triggeringPlayerIndex].stats.intelligence;
    lv_tempDexterity = gv_players[lv_triggeringPlayerIndex].stats.dexterity;
    lv_tempAgility = gv_players[lv_triggeringPlayerIndex].stats.agility;
    while ((lv_tempVitality > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_triggeringPlayerIndex].dragon, "AddVitality", lv_triggeringPlayer, 1);
        lv_tempVitality = (lv_tempVitality - 1);
    }
    while ((lv_tempStrength > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_triggeringPlayerIndex].dragon, "AddStrength", lv_triggeringPlayer, 1);
        lv_tempStrength = (lv_tempStrength - 1);
    }
    while ((lv_tempIntelligence > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_triggeringPlayerIndex].dragon, "AddIntelligence", lv_triggeringPlayer, 1);
        lv_tempIntelligence = (lv_tempIntelligence - 1);
    }
    while ((lv_tempDexterity > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_triggeringPlayerIndex].dragon, "AddDexterity", lv_triggeringPlayer, 1);
        lv_tempDexterity = (lv_tempDexterity - 1);
    }
    while ((lv_tempAgility > 0)) {
        UnitBehaviorAddPlayer(gv_players[lv_triggeringPlayerIndex].dragon, "AddAgility", lv_triggeringPlayer, 1);
        lv_tempAgility = (lv_tempAgility - 1);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MaxStats_Init () {
    gt_MaxStats = TriggerCreate("gt_MaxStats_Func");
    TriggerAddEventChatMessage(gt_MaxStats, c_playerAny, "Adonis DNA", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Drop All
//--------------------------------------------------------------------------------------------------
bool gt_DropAll_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitGroupLoopBegin(UnitInventoryGroup(gv_players[(EventPlayer() - 1)].dragon));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCreate(1, UnitGetType(UnitGroupLoopCurrent()), 0, EventPlayer(), UnitGetPosition(gv_players[(EventPlayer() - 1)].dragon), libNtve_gf_RandomAngle());
        UnitInventoryRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DropAll_Init () {
    gt_DropAll = TriggerCreate("gt_DropAll_Func");
    TriggerAddEventChatMessage(gt_DropAll, c_playerAny, "-Drop All", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Unit
//--------------------------------------------------------------------------------------------------
bool gt_SpawnUnit_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_UnitCreateFacingPoint(1, (StringSub(EventChatMessage(false), 8, StringLength(EventChatMessage(false)))), 0, EventPlayer(), UnitGetPosition(gv_players[(EventPlayer() - 1)].dragon), UnitGetPosition(gv_players[(EventPlayer() - 1)].dragon));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/FAA40E97") + StringToText(StringSub(EventChatMessage(false), 8, StringLength(EventChatMessage(false))))));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnUnit_Init () {
    gt_SpawnUnit = TriggerCreate("gt_SpawnUnit_Func");
    TriggerAddEventChatMessage(gt_SpawnUnit, c_playerAny, "-Spawn", false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemy Unit
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemyUnit_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_UnitCreateFacingPoint(1, (StringSub(EventChatMessage(false), 9, StringLength(EventChatMessage(false)))), 0, 15, UnitGetPosition(gv_players[(EventPlayer() - 1)].dragon), UnitGetPosition(gv_players[(EventPlayer() - 1)].dragon));
    if ((UnitGetType(UnitLastCreated()) == "Nosferatu")) {
        gv_nosferatu = UnitLastCreated();
        MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_nosferatu), 10.0, Color(25.10, 0.00, 0.00));
        TriggerEnable(gt_NosferatusLogic, true);
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/392CAE58") + StringToText(StringSub(EventChatMessage(false), 8, StringLength(EventChatMessage(false))))));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemyUnit_Init () {
    gt_SpawnEnemyUnit = TriggerCreate("gt_SpawnEnemyUnit_Func");
    TriggerAddEventChatMessage(gt_SpawnEnemyUnit, c_playerAny, "-ESpawn", false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Mass Enemy Unit
//--------------------------------------------------------------------------------------------------
bool gt_SpawnMassEnemyUnit_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_UnitCreateFacingPoint(50, (StringSub(EventChatMessage(false), 10, StringLength(EventChatMessage(false)))), c_unitCreateIgnorePlacement, 15, UnitGetPosition(gv_players[(EventPlayer() - 1)].dragon), UnitGetPosition(gv_players[(EventPlayer() - 1)].dragon));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnMassEnemyUnit_Init () {
    gt_SpawnMassEnemyUnit = TriggerCreate("gt_SpawnMassEnemyUnit_Func");
    TriggerAddEventChatMessage(gt_SpawnMassEnemyUnit, c_playerAny, "-MESpawn", false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Item
//--------------------------------------------------------------------------------------------------
bool gt_SpawnItem_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, (StringSub(EventChatMessage(false), 9, StringLength(EventChatMessage(false)))));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnItem_Init () {
    gt_SpawnItem = TriggerCreate("gt_SpawnItem_Func");
    TriggerAddEventChatMessage(gt_SpawnItem, c_playerAny, "-Aquire ", false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Melee Buff Stacks
//--------------------------------------------------------------------------------------------------
bool gt_MeleeBuffStacks_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/C2477670") + IntToText(UnitBehaviorCount(gv_players[(EventPlayer() - 1)].dragon, "StrengthoftheDragon"))));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/98095420") + IntToText(UnitBehaviorCount(gv_players[(EventPlayer() - 1)].dragon, "Zeal"))));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/EBE16544") + IntToText(UnitBehaviorCount(gv_players[(EventPlayer() - 1)].dragon, "VampiricTendencies"))));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/711767EF") + IntToText(UnitBehaviorCount(gv_players[(EventPlayer() - 1)].dragon, "CriticalCrepitus"))));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MeleeBuffStacks_Init () {
    gt_MeleeBuffStacks = TriggerCreate("gt_MeleeBuffStacks_Func");
    TriggerAddEventChatMessage(gt_MeleeBuffStacks, c_playerAny, "-Melee Buff Stacks", false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Num Buffs
//--------------------------------------------------------------------------------------------------
bool gt_NumBuffs_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, IntToText(UnitBehaviorCountAll(gv_players[(EventPlayer() - 1)].dragon)));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_NumBuffs_Init () {
    gt_NumBuffs = TriggerCreate("gt_NumBuffs_Func");
    TriggerAddEventChatMessage(gt_NumBuffs, c_playerAny, "-Num Buffs", false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: 999 Talents
//--------------------------------------------------------------------------------------------------
bool gt__999Talents_Func (bool testConds, bool runActions) {
    
    // Conditions
    if (testConds) {
        if (!gf_IsAdmin(EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lib1_gf_GrantTalentPoints(999, EventPlayer());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt__999Talents_Init () {
    gt__999Talents = TriggerCreate("gt__999Talents_Func");
    TriggerAddEventChatMessage(gt__999Talents, c_playerAny, "-999 Talents", false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayerIndex;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_triggeringPlayerIndex = (EventPlayer() - 1);
    PlayerGroupRemove(gv_humanPlayers, EventPlayer());
    UnitRemove(gv_players[lv_triggeringPlayerIndex].dragon);
    PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, 1, false);
    PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, 2, false);
    PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, 3, false);
    PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, 4, false);
    PlayerSetAlliance(1, c_allianceIdSpend, EventPlayer(), false);
    PlayerSetAlliance(2, c_allianceIdSpend, EventPlayer(), false);
    PlayerSetAlliance(3, c_allianceIdSpend, EventPlayer(), false);
    PlayerSetAlliance(4, c_allianceIdSpend, EventPlayer(), false);
    libNtve_gf_SetAlliance(EventPlayer(), 1, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(EventPlayer(), 2, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(EventPlayer(), 3, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(EventPlayer(), 4, libNtve_ge_AllianceSetting_Enemy);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 0);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaves_Init () {
    gt_PlayerLeaves = TriggerCreate("gt_PlayerLeaves_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeaves, c_playerAny, c_gameResultUndecided);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Open Talent Menu
//--------------------------------------------------------------------------------------------------
bool gt_OpenTalentMenu_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    lib1_gf_ShowHideTalentTree(EventPlayer());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OpenTalentMenu_Init () {
    gt_OpenTalentMenu = TriggerCreate("gt_OpenTalentMenu_Func");
    TriggerAddEventUnitAbility(gt_OpenTalentMenu, null, AbilityCommand("Talents", 0), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reset Talent Build
//--------------------------------------------------------------------------------------------------
bool gt_ResetTalentBuild_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gf_ResetTalentBuildandVariables(EventPlayer());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ResetTalentBuild_Init () {
    gt_ResetTalentBuild = TriggerCreate("gt_ResetTalentBuild_Func");
    TriggerAddEventChatMessage(gt_ResetTalentBuild, c_playerAny, "-Reset Talents", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Inventory Tip
//--------------------------------------------------------------------------------------------------
bool gt_InventoryTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/E9037991"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/60A9CAEA"), StringExternal("Param/Value/538D899A"), "Dragon Songs\\btn-ability-protoss-phaseshift-color.dds");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InventoryTip_Init () {
    gt_InventoryTip = TriggerCreate("gt_InventoryTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Weapon Tip
//--------------------------------------------------------------------------------------------------
bool gt_WeaponTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/D6E95134"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/FA962EAC"), StringExternal("Param/Value/2A26AE67"), "Assets\\Textures\\btn-ability-protoss-phasemine-zeratul.dds");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WeaponTip_Init () {
    gt_WeaponTip = TriggerCreate("gt_WeaponTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dragon's Nest Tip
//--------------------------------------------------------------------------------------------------
bool gt_DragonsNestTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/AE58E1B5"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/B044177A"), StringExternal("Param/Value/66753AD2"), "Dragon Songs\\btn-ability-zerg-consume-red.dds");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DragonsNestTip_Init () {
    gt_DragonsNestTip = TriggerCreate("gt_DragonsNestTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reset Stats Tip
//--------------------------------------------------------------------------------------------------
bool gt_ResetStatsTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/41120C2F"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/DED3B997"), StringExternal("Param/Value/A3EAD122"), "Assets\\Textures\\btn-ability-terran-heal.dds");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ResetStatsTip_Init () {
    gt_ResetStatsTip = TriggerCreate("gt_ResetStatsTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reset Talents Tip
//--------------------------------------------------------------------------------------------------
bool gt_ResetTalentsTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/4C6B4127"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/569516A0"), StringExternal("Param/Value/8E5585ED"), "Assets\\Textures\\btn-research-zerg-regenerativebio-steel.dds");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ResetTalentsTip_Init () {
    gt_ResetTalentsTip = TriggerCreate("gt_ResetTalentsTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reset Quests Tip
//--------------------------------------------------------------------------------------------------
bool gt_ResetQuestsTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/DF29FD45"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/EBA3B130"), StringExternal("Param/Value/9B2FC085"), "Assets\\Textures\\ui_objectives_checkmark.dds");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ResetQuestsTip_Init () {
    gt_ResetQuestsTip = TriggerCreate("gt_ResetQuestsTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Healing Water Tip
//--------------------------------------------------------------------------------------------------
bool gt_HealingWaterTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/E3BD2BD0"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/A26AEC4D"), StringExternal("Param/Value/10D8A151"), "Assets\\Textures\\defaultwater37.dds");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HealingWaterTip_Init () {
    gt_HealingWaterTip = TriggerCreate("gt_HealingWaterTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Vespene Gas Tip
//--------------------------------------------------------------------------------------------------
bool gt_VespeneGasTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/5AE1DD5C"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/20CF433A"), StringExternal("Param/Value/45B8D629"), "Assets\\Textures\\wireframe-general-vespenegeyser.dds");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VespeneGasTip_Init () {
    gt_VespeneGasTip = TriggerCreate("gt_VespeneGasTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Evolutions Tip
//--------------------------------------------------------------------------------------------------
bool gt_EvolutionsTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/EA2E6B2A"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/A6FEB956"), StringExternal("Param/Value/7A9A7981"), "Assets\\Textures\\hybridzergportrait_static.dds");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EvolutionsTip_Init () {
    gt_EvolutionsTip = TriggerCreate("gt_EvolutionsTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Armor Tip
//--------------------------------------------------------------------------------------------------
bool gt_ArmorTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/8683FADF"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/55A4A235"), StringExternal("Param/Value/180EC142"), "Assets\\Textures\\btn-upgrade-zerg-buildingarmor.dds");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ArmorTip_Init () {
    gt_ArmorTip = TriggerCreate("gt_ArmorTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Saving/Loading Tip
//--------------------------------------------------------------------------------------------------
bool gt_SavingLoadingTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/F902E69D"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/C9ED1F57"), StringExternal("Param/Value/3908211E"), "Assets\\Textures\\ui-editoricon-triggercategories_bank.dds");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SavingLoadingTip_Init () {
    gt_SavingLoadingTip = TriggerCreate("gt_SavingLoadingTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Music Credits Tip
//--------------------------------------------------------------------------------------------------
bool gt_MusicCreditsTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/9F4902CB"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/4A2C06AE"), StringExternal("Param/Value/3D31D0A2"), "Assets\\Textures\\ui-editoricon-data_types_soundtracks.dds");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MusicCreditsTip_Init () {
    gt_MusicCreditsTip = TriggerCreate("gt_MusicCreditsTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Awesome People Tip
//--------------------------------------------------------------------------------------------------
bool gt_AwesomePeopleTip_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/B3A3FC2B"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/84E73369"), StringExternal("Param/Value/5EE14777"), "Assets\\Textures\\btn-unit-protoss-archon.dds");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AwesomePeopleTip_Init () {
    gt_AwesomePeopleTip = TriggerCreate("gt_AwesomePeopleTip_Func");
    TriggerAddEventMapInit(gt_AwesomePeopleTip);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Stash Location Setup
//--------------------------------------------------------------------------------------------------
bool gt_StashLocationSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_stashLocation[0] = PointFromId(4835);
    gv_stashLocation[1] = PointFromId(4836);
    gv_stashLocation[2] = PointFromId(4837);
    gv_stashLocation[3] = PointFromId(4838);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StashLocationSetup_Init () {
    gt_StashLocationSetup = TriggerCreate("gt_StashLocationSetup_Func");
    TriggerAddEventMapInit(gt_StashLocationSetup);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Load Shards
//--------------------------------------------------------------------------------------------------
bool gt_LoadShards_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if ((PlayerStatus(1) == c_playerStatusActive)) {
        while (gv_players[0].banks.accessing) {
            Wait(1.0, c_timeGame);
        }
        gv_players[0].banks.accessing = true;
        gv_shards[0] = (BankValueGetAsInt(gv_players[0].banks.dragonBank, "Shards", PlayerHandle(1)) / 1);
        PlayerModifyPropertyInt(1, c_playerPropCustom, c_playerPropOperSetTo, gv_shards[0]);
        gv_players[0].banks.accessing = false;
    }
    if ((PlayerStatus(2) == c_playerStatusActive)) {
        while (gv_players[1].banks.accessing) {
            Wait(1.0, c_timeGame);
        }
        gv_players[1].banks.accessing = true;
        gv_shards[1] = (BankValueGetAsInt(gv_players[1].banks.dragonBank, "Shards", PlayerHandle(2)) / 1);
        PlayerModifyPropertyInt(2, c_playerPropCustom, c_playerPropOperSetTo, gv_shards[1]);
        gv_players[1].banks.accessing = false;
    }
    if ((PlayerStatus(3) == c_playerStatusActive)) {
        while (gv_players[2].banks.accessing) {
            Wait(1.0, c_timeGame);
        }
        gv_players[2].banks.accessing = true;
        gv_shards[2] = (BankValueGetAsInt(gv_players[2].banks.dragonBank, "Shards", PlayerHandle(3)) / 1);
        PlayerModifyPropertyInt(3, c_playerPropCustom, c_playerPropOperSetTo, gv_shards[2]);
        gv_players[2].banks.accessing = false;
    }
    if ((PlayerStatus(4) == c_playerStatusActive)) {
        while (gv_players[3].banks.accessing) {
            Wait(1.0, c_timeGame);
        }
        gv_players[3].banks.accessing = true;
        gv_shards[3] = (BankValueGetAsInt(gv_players[3].banks.dragonBank, "Shards", PlayerHandle(4)) / 1);
        PlayerModifyPropertyInt(4, c_playerPropCustom, c_playerPropOperSetTo, gv_shards[3]);
        gv_players[3].banks.accessing = false;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LoadShards_Init () {
    gt_LoadShards = TriggerCreate("gt_LoadShards_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Time of day Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateTimeofdayDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    DialogCreate(200, 75, c_anchorTop, 0, 0, true);
    gv_timeofDayDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_timeofDayDialog, 75, 50, c_anchorLeft, 40, 20, StringExternal("Param/Value/0FFF5ADF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_timeofDayDialog, 75, 50, c_anchorLeft, 100, 20, StringExternal("Param/Value/DBCFC935"), Color(RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0)), false, 2.0);
    gv_timeofDayDialogLabel = DialogControlLastCreated();
    DialogSetVisible(gv_timeofDayDialog, PlayerGroupAll(), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateTimeofdayDialog_Init () {
    gt_CreateTimeofdayDialog = TriggerCreate("gt_CreateTimeofdayDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Time of Day Tick
//--------------------------------------------------------------------------------------------------
bool gt_TimeofDayTick_Func (bool testConds, bool runActions) {
    int autoEF6FEC5D_val;
    // Actions
    if (!runActions) {
        return true;
    }
    gv_minutes += 1;
    if ((gv_minutes >= 60)) {
        PlayerGroupLoopBegin(gv_humanPlayers);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "TimePenalty", PlayerGroupLoopCurrent(), 1);
            }
            UnitGroupLoopEnd();
        }
        PlayerGroupLoopEnd();
        gv_minutes = 0;
        autoEF6FEC5D_val = gv_hours;
        if (autoEF6FEC5D_val == 0) {
            GameTimeOfDaySet("00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 1) {
            GameTimeOfDaySet("01:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 2) {
            GameTimeOfDaySet("02:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 3) {
            GameTimeOfDaySet("03:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 4) {
            GameTimeOfDaySet("04:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 5) {
            GameTimeOfDaySet("05:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 6) {
            GameTimeOfDaySet("06:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 7) {
            GameTimeOfDaySet("07:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 8) {
            GameTimeOfDaySet("08:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 9) {
            GameTimeOfDaySet("09:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 10) {
            GameTimeOfDaySet("10:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 11) {
            GameTimeOfDaySet("11:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 12) {
            GameTimeOfDaySet("12:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 13) {
            GameTimeOfDaySet("13:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 14) {
            GameTimeOfDaySet("14:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 15) {
            GameTimeOfDaySet("15:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 16) {
            GameTimeOfDaySet("16:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 17) {
            GameTimeOfDaySet("17:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 18) {
            GameTimeOfDaySet("18:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 19) {
            GameTimeOfDaySet("19:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 20) {
            GameTimeOfDaySet("20:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 21) {
            GameTimeOfDaySet("21:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 22) {
            GameTimeOfDaySet("22:00:00");
            gv_hours += 1;
        }
        else if (autoEF6FEC5D_val == 23) {
            GameTimeOfDaySet("23:00:00");
            gv_hours = 0;
            gv_days += 1;
        }
        else {
            GameTimeOfDaySet("00");
            gv_hours = 0;
        }
    }
    if ((gv_minutes < 10)) {
        gv_timeofDayDialogLabelText = (IntToText(gv_hours) + (StringExternal("Param/Value/A5CB9737") + IntToText(gv_minutes)));
    }
    else {
        gv_timeofDayDialogLabelText = (IntToText(gv_hours) + (StringExternal("Param/Value/74673B04") + IntToText(gv_minutes)));
    }
    libNtve_gf_SetDialogItemText(gv_timeofDayDialogLabel, gv_timeofDayDialogLabelText, PlayerGroupAll());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TimeofDayTick_Init () {
    gt_TimeofDayTick = TriggerCreate("gt_TimeofDayTick_Func");
    TriggerAddEventTimePeriodic(gt_TimeofDayTick, 1.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Up Players
//--------------------------------------------------------------------------------------------------
bool gt_SetUpPlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tempAgility;
    int lv_tempDexterity;
    int lv_tempIntelligence;
    int lv_tempStrength;
    int lv_tempVitality;
    gv_playersWhoHaveDefeatedZauberer = PlayerGroupEmpty();
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerQueueEnter();
    gf_InitializeOne();
    gf_InitializePlayers();
    gf_InitializeTwo();
    TriggerQueueExit();
    Wait(1.0, c_timeGame);
    TriggerQueueEnter();
    gf_InitializeThree();
    TriggerExecute(gt_IntroCinematic, false, true);
    TextTagCreate(StringExternal("Param/Value/6FCB7651"), 24, RegionGetCenter(RegionFromId(187)), 1.0, true, true, PlayerGroupAll());
    TextTagCreate(StringExternal("Param/Value/4ACD68FC"), 24, RegionGetCenter(RegionFromId(188)), 1.0, true, true, PlayerGroupAll());
    TriggerQueueExit();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetUpPlayers_Init () {
    gt_SetUpPlayers = TriggerCreate("gt_SetUpPlayers_Func");
    TriggerAddEventTimeElapsed(gt_SetUpPlayers, 0.01, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set up Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetupRegions_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_SetWastelandRegions, true, false);
    TriggerExecute(gt_SetupCretonTranchRegions, true, false);
    TriggerExecute(gt_SetupCretonRegions, true, false);
    TriggerExecute(gt_SetVerbotenForestRegions, true, false);
    TriggerExecute(gt_SetVerbotenInfestationRegions, true, false);
    TriggerExecute(gt_SetWastelandRegions, true, false);
    TriggerExecute(gt_SetRelamyCanyonRegions, true, false);
    TriggerExecute(gt_SetRelamyGorgeRegions, true, false);
    TriggerExecute(gt_SetRelamyHillsRegions, true, false);
    TriggerExecute(gt_SetRelamyPassRegions, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupRegions_Init () {
    gt_SetupRegions = TriggerCreate("gt_SetupRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set up Tips
//--------------------------------------------------------------------------------------------------
bool gt_SetupTips_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    TriggerExecute(gt_ArmorTip, true, false);
    TriggerExecute(gt_DragonsNestTip, true, false);
    TriggerExecute(gt_EvolutionsTip, true, false);
    TriggerExecute(gt_HealingWaterTip, true, false);
    TriggerExecute(gt_InventoryTip, true, false);
    TriggerExecute(gt_ResetQuestsTip, true, false);
    TriggerExecute(gt_ResetStatsTip, true, false);
    TriggerExecute(gt_ResetTalentsTip, true, false);
    TriggerExecute(gt_VespeneGasTip, true, false);
    TriggerExecute(gt_WeaponTip, true, false);
    TriggerExecute(gt_SavingLoadingTip, true, false);
    TriggerExecute(gt_MusicCreditsTip, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupTips_Init () {
    gt_SetupTips = TriggerCreate("gt_SetupTips_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Up Talent Tree
//--------------------------------------------------------------------------------------------------
bool gt_SetUpTalentTree_Func (bool testConds, bool runActions) {
    string autoB3189529_val;
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        autoB3189529_val = GameAttributePlayerValue("1", PlayerGroupLoopCurrent());
        if (autoB3189529_val == "0001") {
            lib1_gf_CreateTalentTree(PlayerGroupLoopCurrent(), StringExternal("Param/Value/0379B895"), lib1_ge_ColorScheme_Red, 3, "Defensive,General,Offensive", 3, 4, lib1_ge_PointsPerTier__5);
        }
        else if (autoB3189529_val == "0002") {
            lib1_gf_CreateTalentTree(PlayerGroupLoopCurrent(), StringExternal("Param/Value/C001C4C0"), lib1_ge_ColorScheme_Blue, 3, "Defensive,General,Offensive", 3, 4, lib1_ge_PointsPerTier__5);
        }
        else {
        }
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 1, 1, lib1_ge_TalentPrerequisite_None, "HeartoftheDragon", lib1_ge_TalentType_Passive, StringExternal("Param/Value/D7FEAC29"), 10, "Assets\\Textures\\sm_hml_heartbeat_diff.dds", StringExternal("Param/Value/1C4A2F4D"), 10.0, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 2, 1, lib1_ge_TalentPrerequisite_None, "IronScales", lib1_ge_TalentType_Passive, StringExternal("Param/Value/314749A3"), 10, "Assets\\Textures\\btn-upgrade-zerg-groundcarapace-level1.dds", StringExternal("Param/Value/7174AC2B"), 0.5, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 3, 1, lib1_ge_TalentPrerequisite_None, "SpiritoftheDragon", lib1_ge_TalentType_Passive, StringExternal("Param/Value/9B6ADBAE"), 10, "Assets\\Textures\\btn-tips-crystal.dds", StringExternal("Param/Value/1A784046"), 10.0, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 1, 2, lib1_ge_TalentPrerequisite_Up, "InternalRegeneration", lib1_ge_TalentType_Passive, StringExternal("Param/Value/7F798500"), 10, "Assets\\Textures\\btn-upgrade-zerg-enduringcorruption.dds", StringExternal("Param/Value/4C774E83"), 0.1, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 2, 2, lib1_ge_TalentPrerequisite_Up, "ActiveArmor", lib1_ge_TalentType_Passive, StringExternal("Param/Value/AB2A4C29"), 10, "Assets\\Textures\\btn-ability-protoss-feedback-color.dds", StringExternal("Param/Value/00C54C9E"), 10.0, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 3, 2, lib1_ge_TalentPrerequisite_Up, "MetabolicProcessing", lib1_ge_TalentType_Passive, StringExternal("Param/Value/4C468C11"), 10, "Assets\\Textures\\btn-tips-biosample.dds", StringExternal("Param/Value/4E41B165"), 0.1, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 2, 3, lib1_ge_TalentPrerequisite_Up, "SpikedScales", lib1_ge_TalentType_Passive, StringExternal("Param/Value/9086A585"), 10, "Assets\\Textures\\btn-upgrade-zerg-groovedspines.dds", StringExternal("Param/Value/DA98CBA1"), 0.5, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 3, 3, lib1_ge_TalentPrerequisite_Up, "AbsorbMana", lib1_ge_TalentType_Passive, StringExternal("Param/Value/AFB08C57"), 10, "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel3.dds", StringExternal("Param/Value/80AC0CB7"), 1.0, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 2, 4, lib1_ge_TalentPrerequisite_Up, "Retaliation", lib1_ge_TalentType_Passive, StringExternal("Param/Value/F954CA1E"), 10, "Assets\\Textures\\btn-ability-protoss-gravitonbeam-color.dds", StringExternal("Param/Value/F53F5A37"), 1.0, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 3, 4, lib1_ge_TalentPrerequisite_Up, "RealmSwitch", lib1_ge_TalentType_Passive, StringExternal("Param/Value/44A74CF3"), 10, "Dragon Songs\\btn-ability-protoss-blink-improved-color.dds", StringExternal("Param/Value/E2CCFAE5"), 0.5, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 2, 1, 1, lib1_ge_TalentPrerequisite_None, "EagleEyes", lib1_ge_TalentType_Passive, StringExternal("Param/Value/28BE5039"), 10, "Assets\\Textures\\zergdroneeyesemmisive.dds", StringExternal("Param/Value/85A14F42"), 0.2, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 2, 2, 1, lib1_ge_TalentPrerequisite_None, "GreedisGood", lib1_ge_TalentType_Passive, StringExternal("Param/Value/08D78300"), 10, "Dragon Songs\\btn-custom-treasure.dds", StringExternal("Param/Value/47238D0C"), 5.0, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 2, 3, 1, lib1_ge_TalentPrerequisite_None, "MuscleEnhancement", lib1_ge_TalentType_Passive, StringExternal("Param/Value/E1B1A405"), 10, "Assets\\Textures\\btn-ability-protoss-charge-color.dds", StringExternal("Param/Value/58E4D210"), 0.1, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 2, 1, 2, lib1_ge_TalentPrerequisite_Up, "Foresight", lib1_ge_TalentType_Passive, StringExternal("Param/Value/CD32BD07"), 10, "Assets\\Textures\\btn-tips-counter.dds", StringExternal("Param/Value/A462C35B"), 0.6, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 2, 2, 2, lib1_ge_TalentPrerequisite_Up, "QuickLearner", lib1_ge_TalentType_Passive, StringExternal("Param/Value/C9AA280D"), 10, "Dragon Songs\\btn-ability-zerg-domination-color.dds", StringExternal("Param/Value/21824BCC"), 0.5, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 1, 1, lib1_ge_TalentPrerequisite_None, "StrengthoftheDragon", lib1_ge_TalentType_Passive, StringExternal("Param/Value/FDB7A558"), 10, "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-leve3.dds", StringExternal("Param/Value/36A2C19B"), 1.0, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 2, 1, lib1_ge_TalentPrerequisite_None, "Headshot", lib1_ge_TalentType_Passive, StringExternal("Param/Value/D567090E"), 10, "Dragon Songs\\btn-ability-zerg-plague-color.dds", StringExternal("Param/Value/3E74CB2C"), 1.0, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 3, 1, lib1_ge_TalentPrerequisite_None, "MindoftheDragon", lib1_ge_TalentType_Passive, StringExternal("Param/Value/8C4A7447"), 10, "Assets\\Textures\\btn-upgrade-zerg-pathogenglands.dds", StringExternal("Param/Value/AAA060AC"), 1.0, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 1, 2, lib1_ge_TalentPrerequisite_Up, "Zeal", lib1_ge_TalentType_Passive, StringExternal("Param/Value/1300303A"), 10, "Assets\\Textures\\btn-upgrade-zerg-anabolicsynthesis.dds", StringExternal("Param/Value/73406C8B"), 1.0, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 2, 2, lib1_ge_TalentPrerequisite_Up, "ElevatedAccuracy", lib1_ge_TalentType_Passive, StringExternal("Param/Value/AAC9DC9E"), 10, "Dragon Songs\\btn-ability-protoss-sightofadun.dds", StringExternal("Param/Value/DE4DF04F"), 5.0, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 3, 2, lib1_ge_TalentPrerequisite_Up, "Rage", lib1_ge_TalentType_Passive, StringExternal("Param/Value/1C7BBA70"), 10, "Assets\\Textures\\btn-upgrade-zerg-peristalsis.dds", StringExternal("Param/Value/649D4370"), 0.25, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 1, 3, lib1_ge_TalentPrerequisite_Up, "VampiricTendencies", lib1_ge_TalentType_Passive, StringExternal("Param/Value/92BC9977"), 10, "Assets\\Textures\\btn-ability-zerg-corruption-color.dds", StringExternal("Param/Value/FF85D4A6"), 0.1, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 2, 3, lib1_ge_TalentPrerequisite_Up, "StickyShot", lib1_ge_TalentType_Passive, StringExternal("Param/Value/D8F2835B"), 10, "Assets\\Textures\\btn-ability-zerg-generatecreepstop-color.dds", StringExternal("Param/Value/D1B87C73"), 0.5, 5.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 3, 3, lib1_ge_TalentPrerequisite_Up, "PowerOverwhelming", lib1_ge_TalentType_Passive, StringExternal("Param/Value/9961216D"), 10, "Dragon Songs\\btn-ability-terran-psidisruption-color.dds", StringExternal("Param/Value/52E05A55"), 0.1, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 1, 4, lib1_ge_TalentPrerequisite_Up, "CriticalCrepitus", lib1_ge_TalentType_Passive, StringExternal("Param/Value/B83D31A3"), 10, "Assets\\Textures\\btn-ability-zerg-explode-color.dds", StringExternal("Param/Value/9572BF6F"), 5.0, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 2, 4, lib1_ge_TalentPrerequisite_Up, "DuelWield", lib1_ge_TalentType_Passive, StringExternal("Param/Value/FA2CE968"), 10, "Assets\\Textures\\btn-ability-zerg-contaminate-color.dds", StringExternal("Param/Value/E3059D1E"), 0.5, 0.0, null, null);
        lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 3, 4, lib1_ge_TalentPrerequisite_Up, "DarkDissulto", lib1_ge_TalentType_Passive, StringExternal("Param/Value/645D301F"), 10, "Assets\\Textures\\btn-ability-zerg-generatecreep-color.dds", StringExternal("Param/Value/3E5A2871"), 2.5, 0.0, null, null);
        lib1_gf_GrantTalentPoints(gv_players[(PlayerGroupLoopCurrent() - 1)].stats.level, PlayerGroupLoopCurrent());
        if ((GameAttributePlayerValue("1", PlayerGroupLoopCurrent()) == "0001")) {
            lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Load, 1, "Fire Dragon", PlayerGroupLoopCurrent());
        }
        if ((GameAttributePlayerValue("1", PlayerGroupLoopCurrent()) == "0002")) {
            lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Load, 1, "Ice Dragon", PlayerGroupLoopCurrent());
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetUpTalentTree_Init () {
    gt_SetUpTalentTree = TriggerCreate("gt_SetUpTalentTree_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Make Player 14 an Ally
//--------------------------------------------------------------------------------------------------
bool gt_MakePlayer14anAlly_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_SetAlliance(15, 14, libNtve_ge_AllianceSetting_Enemy);
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 14, libNtve_ge_AllianceSetting_Ally);
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MakePlayer14anAlly_Init () {
    gt_MakePlayer14anAlly = TriggerCreate("gt_MakePlayer14anAlly_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Up Unit Types
//--------------------------------------------------------------------------------------------------
bool gt_SetUpUnitTypes_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    gv_enemyUnitTypes[0] = "SmallSheep";
    gv_enemyUnitTypes[1] = "Srepti";
    gv_enemyUnitTypes[2] = "Vogel";
    gv_enemyUnitTypes[3] = "CretonWarrior";
    gv_enemyUnitTypes[4] = "Karramarro";
    gv_enemyUnitTypes[5] = "CretonWatcher";
    gv_enemyUnitTypes[6] = "Alakdan";
    gv_enemyUnitTypes[7] = "Gagamba";
    gv_enemyUnitTypes[8] = "Odvratan";
    gv_enemyUnitTypes[9] = "EliteCretonWarrior";
    gv_enemyUnitTypes[10] = "EliteCretonWatcher";
    gv_enemyUnitTypes[11] = "CretonWarMachine";
    gv_enemyUnitTypes[12] = "DemonicSheep";
    gv_enemyUnitTypes[13] = "DemonicSrepti";
    gv_enemyUnitTypes[14] = "CretonWarlord";
    gv_enemyUnitTypes[15] = "Stercore";
    gv_enemyUnitTypes[16] = "Odvratan";
    gv_enemyUnitTypes[17] = "Anguis";
    gv_enemyUnitTypes[18] = "Pervolo";
    gv_enemyUnitTypes[19] = "Impetus";
    gv_enemyUnitTypes[20] = "Mortuus";
    gv_enemyUnitTypes[21] = "TimeWarpBot";
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetUpUnitTypes_Init () {
    gt_SetUpUnitTypes = TriggerCreate("gt_SetUpUnitTypes_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hide Useless UI
//--------------------------------------------------------------------------------------------------
bool gt_HideUselessUI_Func (bool testConds, bool runActions) {
    
    // Actions
    if (!runActions) {
        return true;
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCreditsPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeErrorDisplayPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMercenaryPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePlanetPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePylonButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResearchPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeRoomPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechGlossaryPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechTreePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, false);
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (gf_IsAdmin(PlayerGroupLoopCurrent())) {
            UISetFrameVisible(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_syncFrameTypeErrorDisplayPanel, true);
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HideUselessUI_Init () {
    gt_HideUselessUI = TriggerCreate("gt_HideUselessUI_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enter Dragon's Nest
//--------------------------------------------------------------------------------------------------
bool gt_EnterDragonsNest_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
        UnitBehaviorAdd(EventUnit(), "DragonsNest", EventUnit(), 1);
        gv_dragonLocation[(UnitGetOwner(EventUnit()) - 1)] = RegionFromId(3);
    }
    if ((UnitGetOwner(EventUnit()) == 15)) {
        UnitBehaviorAdd(EventUnit(), "DragonsNestEnemy", EventUnit(), 1);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnterDragonsNest_Init () {
    gt_EnterDragonsNest = TriggerCreate("gt_EnterDragonsNest_Func");
    TriggerAddEventUnitRegion(gt_EnterDragonsNest, null, RegionFromId(3), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Leave Dragon's Nest
//--------------------------------------------------------------------------------------------------
bool gt_LeaveDragonsNest_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if (PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
        UnitBehaviorRemove(EventUnit(), "DragonsNest", 1);
    }
    if ((UnitGetOwner(EventUnit()) == 15)) {
        UnitBehaviorRemove(EventUnit(), "DragonsNestEnemy", 1);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LeaveDragonsNest_Init () {
    gt_LeaveDragonsNest = TriggerCreate("gt_LeaveDragonsNest_Func");
    TriggerAddEventUnitRegion(gt_LeaveDragonsNest, null, RegionFromId(3), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Check Stats
//--------------------------------------------------------------------------------------------------
bool gt_CheckStats_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_StatCheck(PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CheckStats_Init () {
    gt_CheckStats = TriggerCreate("gt_CheckStats_Func");
    TriggerAddEventTimePeriodic(gt_CheckStats, 10.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reset Stats
//--------------------------------------------------------------------------------------------------
bool gt_ResetStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lazyPlayer;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!UnitIsAlive(gv_players[(EventPlayer() - 1)].dragon)) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_lazyPlayer = (EventPlayer() - 1);
    gv_players[lv_lazyPlayer].stats.attributePoints = (UnitGetPropertyFixed(gv_players[lv_lazyPlayer].dragon, c_unitPropLevel, c_unitPropCurrent) * 5.0);
    gv_attributeText[lv_lazyPlayer] = FixedToString(gv_players[lv_lazyPlayer].stats.attributePoints, 0);
    libNtve_gf_SetDialogItemText(gv_players[lv_lazyPlayer].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_lazyPlayer]), PlayerGroupSingle(EventPlayer()));
    BankValueSetFromFixed(gv_players[lv_lazyPlayer].banks.dragonBank, "AP", PlayerHandle(EventPlayer()), gv_players[lv_lazyPlayer].stats.attributePoints);
    UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayer].dragon, "AddAgility", (lv_lazyPlayer + 1), gv_players[lv_lazyPlayer].stats.agility);
    gv_players[lv_lazyPlayer].stats.agility = 0;
    BankValueSetFromInt(gv_players[lv_lazyPlayer].banks.dragonBank, "Ag", PlayerHandle(EventPlayer()), gv_players[lv_lazyPlayer].stats.agility);
    UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayer].dragon, "AddDexterity", (lv_lazyPlayer + 1), gv_players[lv_lazyPlayer].stats.dexterity);
    gv_players[lv_lazyPlayer].stats.dexterity = 0;
    BankValueSetFromInt(gv_players[lv_lazyPlayer].banks.dragonBank, "De", PlayerHandle(EventPlayer()), gv_players[lv_lazyPlayer].stats.dexterity);
    UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayer].dragon, "AddIntelligence", (lv_lazyPlayer + 1), gv_players[lv_lazyPlayer].stats.intelligence);
    gv_players[lv_lazyPlayer].stats.intelligence = 0;
    BankValueSetFromInt(gv_players[lv_lazyPlayer].banks.dragonBank, "Int", PlayerHandle(EventPlayer()), gv_players[lv_lazyPlayer].stats.intelligence);
    UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayer].dragon, "AddStrength", (lv_lazyPlayer + 1), gv_players[lv_lazyPlayer].stats.strength);
    gv_players[lv_lazyPlayer].stats.strength = 0;
    BankValueSetFromInt(gv_players[lv_lazyPlayer].banks.dragonBank, "Str", PlayerHandle(EventPlayer()), gv_players[lv_lazyPlayer].stats.strength);
    UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayer].dragon, "AddVitality", (lv_lazyPlayer + 1), gv_players[lv_lazyPlayer].stats.vitality);
    gv_players[lv_lazyPlayer].stats.vitality = 0;
    BankValueSetFromInt(gv_players[lv_lazyPlayer].banks.dragonBank, "Vi", PlayerHandle(EventPlayer()), gv_players[lv_lazyPlayer].stats.vitality);
    UnitAbilityShow(gv_players[lv_lazyPlayer].dragon, "Agility1", true);
    UnitAbilityShow(gv_players[lv_lazyPlayer].dragon, "Dexterity1", true);
    UnitAbilityShow(gv_players[lv_lazyPlayer].dragon, "Intelligence1", true);
    UnitAbilityShow(gv_players[lv_lazyPlayer].dragon, "Strength1", true);
    UnitAbilityShow(gv_players[lv_lazyPlayer].dragon, "Vitality1", true);
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/DFF4F8BA"));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ResetStats_Init () {
    gt_ResetStats = TriggerCreate("gt_ResetStats_Func");
    TriggerAddEventChatMessage(gt_ResetStats, c_playerAny, "-Reset Stats", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Basic Claws
//--------------------------------------------------------------------------------------------------
bool gt_BasicClaws_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lazyPlayer;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, "BasicClaws");
    UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, "BasicSpines");
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BasicClaws_Init () {
    gt_BasicClaws = TriggerCreate("gt_BasicClaws_Func");
    TriggerAddEventChatMessage(gt_BasicClaws, c_playerAny, "-Weapon", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (!gv_playerhasseenIntro[(PlayerGroupLoopCurrent() - 1)]) {
            PlayerGroupAdd(gv_playerswatchingintrocinematic, PlayerGroupLoopCurrent());
        }
        else {
            libNtve_gf_PauseUnit(gv_players[(PlayerGroupLoopCurrent() - 1)].dragon, false);
        }
    }
    PlayerGroupLoopEnd();
    libNtve_gf_HideGameUI(false, gv_playerswatchingintrocinematic);
    PlayerGroupLoopBegin(gv_playerswatchingintrocinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraLockInput(PlayerGroupLoopCurrent(), true);
        UISetSelectionTypeEnabled(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_localSelectionTypeUnknown, false);
        DialogSetVisible(gv_players[(PlayerGroupLoopCurrent() - 1)].stats.attributeDialog.state, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        DialogSetVisible(gv_players[(PlayerGroupLoopCurrent() - 1)].locationDialog.state, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 1, false);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 2, false);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 3, false);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 4, false);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 13, true);
        PlayerSetAlliance(13, c_allianceIdVision, PlayerGroupLoopCurrent(), true);
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2544), 0.0, -1, 10.0, true);
        VisExploreArea(PlayerGroupLoopCurrent(), RegionEntireMap(), true, false);
    }
    PlayerGroupLoopEnd();
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/79955B8C"), 0.1, 99.0, SoundLink("30SecondSilence", -1));
    Wait(3.8, c_timeReal);
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/899DC0A4"), 0.1, 99.0, SoundLink("30SecondSilence", -1));
    Wait(3.9, c_timeReal);
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/23D9D53E"), 0.1, 99.0, SoundLink("30SecondSilence", -1));
    TriggerSkippableBegin(gv_playerswatchingintrocinematic, 0, gt_IntroCinematicReturntoNormal, true, false);
    Wait(3.3, c_timeReal);
    PlayerGroupLoopBegin(gv_playerswatchingintrocinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2543), 0.0, -1, 10.0, true);
    }
    PlayerGroupLoopEnd();
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/4A1EAB0C"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(3.0, c_timeReal);
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/2E645223"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(5.0, c_timeReal);
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/254CD7D6"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(5.0, c_timeReal);
    PlayerGroupLoopBegin(gv_playerswatchingintrocinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2542), 0.0, -1, 10.0, true);
    }
    PlayerGroupLoopEnd();
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/69C20D42"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(7.5, c_timeReal);
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/6352165E"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(8.0, c_timeReal);
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/33664132"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(7.0, c_timeReal);
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/49A1771E"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(6.5, c_timeReal);
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/B9589CEA"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(7.0, c_timeReal);
    libNtve_gf_CreateModelAtPoint("ArtifactFullyCharged", RegionGetCenter(RegionFromId(220)));
    Wait(0.1, c_timeGame);
    UnitCreate(1, "Zauberer", 0, 13, RegionGetCenter(RegionFromId(220)), 330.0);
    gv_introCinematicZauberer = UnitLastCreated();
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/02BCF170"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(6.5, c_timeReal);
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/F0714A87"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    UnitIssueOrder(gv_introCinematicZauberer, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(219))), c_orderQueueReplace);
    while (!libNtve_gf_UnitInRegion(gv_introCinematicZauberer, RegionFromId(219))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateModelAtPoint("TTychus05ArtifactActivated", RegionGetCenter(RegionFromId(218)));
    Wait(3.0, c_timeGame);
    libNtve_gf_CreateModelAtPoint("ProtossLargeUnitDeath", RegionGetCenter(RegionFromId(218)));
    UnitRemove(UnitFromId(2513));
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/C4709064"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    UnitIssueOrder(gv_introCinematicZauberer, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(221))), c_orderQueueReplace);
    while (!libNtve_gf_UnitInRegion(gv_introCinematicZauberer, RegionFromId(221))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateModelAtPoint("ArtifactFullyCharged", RegionGetCenter(RegionFromId(221)));
    Wait(0.1, c_timeGame);
    UnitRemove(gv_introCinematicZauberer);
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/5E3A1B4B"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(8.0, c_timeReal);
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/FC90239D"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_IntroCinematicReturntoNormal, true, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic - Return to Normal
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicReturntoNormal_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    UnitRemove(UnitFromId(2513));
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringToText(""), 0.05, 0.0, SoundLink("30SecondSilence", -1));
    PlayerGroupLoopBegin(gv_playerswatchingintrocinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoDefault(), 0.0, -1, 10.0, false);
        CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(3)), 0.0, -1, 10.0, false);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_playerswatchingintrocinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 1, true);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 2, true);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 3, true);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 4, true);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 13, false);
        PlayerSetAlliance(13, c_allianceIdVision, PlayerGroupLoopCurrent(), false);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
        UISetSelectionTypeEnabled(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_localSelectionTypeUnknown, true);
        DialogSetVisible(gv_players[(PlayerGroupLoopCurrent() - 1)].stats.attributeDialog.state, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        DialogSetVisible(gv_players[(PlayerGroupLoopCurrent() - 1)].locationDialog.state, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
    }
    PlayerGroupLoopEnd();
    libNtve_gf_HideGameUI(true, gv_playerswatchingintrocinematic);
    PlayerGroupLoopBegin(gv_playerswatchingintrocinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisExploreArea(PlayerGroupLoopCurrent(), RegionEntireMap(), false, false);
        gv_playerhasseenIntro[(PlayerGroupLoopCurrent() - 1)] = true;
        BankValueSetFromFlag(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, "Intro", PlayerHandle(PlayerGroupLoopCurrent()), gv_playerhasseenIntro[(PlayerGroupLoopCurrent() - 1)]);
        UnitSelect(gv_players[(PlayerGroupLoopCurrent() - 1)].dragon, PlayerGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(gv_players[(PlayerGroupLoopCurrent() - 1)].dragon, false);
        PlayerGroupRemove(gv_playerswatchingintrocinematic, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    UnitRemove(gv_introCinematicZauberer);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicReturntoNormal_Init () {
    gt_IntroCinematicReturntoNormal = TriggerCreate("gt_IntroCinematicReturntoNormal_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Play Intro Theme
//--------------------------------------------------------------------------------------------------
bool gt_PlayIntroTheme_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, 0, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, 0.0);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((GameAttributePlayerValue("1", PlayerGroupLoopCurrent()) == "0001")) {
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMusic, 0.0, 0.0);
            SoundtrackPlay(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryMusic, "IntroTheme", c_soundtrackCueAny, 0, false);
            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMusic, 100.0, 9.6);
        }
        else {
            if ((GameAttributePlayerValue("1", PlayerGroupLoopCurrent()) == "0002")) {
                SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMusic, 0.0, 0.0);
                SoundtrackPlay(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryMusic, "IceDragonTheme", c_soundtrackCueAny, 0, false);
                SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMusic, 100.0, 3.69);
            }
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayIntroTheme_Init () {
    gt_PlayIntroTheme = TriggerCreate("gt_PlayIntroTheme_Func");
    TriggerAddEventTimeElapsed(gt_PlayIntroTheme, 0.1, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ending Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_EndingCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    libNtve_gf_HideGameUI(false, gv_playerswatchingendingcinematic);
    PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        //UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, PlayerName(PlayerGroupLoopCurrent()));
        SoundtrackStop(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryMusic, "EndingTheme", c_soundtrackCueAny, 0, false);
        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMusic, 100.0, 0.0);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryAlert, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryAmbient, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryBuild, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryCombat, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryDeath, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryDialogue, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryDoodad, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryFlames, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryFoley, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryGather, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMission, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMovement, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMovie, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryReady, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategorySAmbient, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategorySEmitters, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategorySPieces, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategorySpell, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryTV, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryUI, true);
        SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryVoice, true);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
        UISetSelectionTypeEnabled(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_localSelectionTypeUnknown, false);
        DialogSetVisible(gv_players[(PlayerGroupLoopCurrent() - 1)].stats.attributeDialog.state, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        DialogSetVisible(gv_players[(PlayerGroupLoopCurrent() - 1)].locationDialog.state, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        //gv_autosavePrevention[(PlayerGroupLoopCurrent() - 1)] = true;
        PlayerSetAlliance(1, c_allianceIdVision, PlayerGroupLoopCurrent(), false);
        PlayerSetAlliance(2, c_allianceIdVision, PlayerGroupLoopCurrent(), false);
        PlayerSetAlliance(3, c_allianceIdVision, PlayerGroupLoopCurrent(), false);
        PlayerSetAlliance(4, c_allianceIdVision, PlayerGroupLoopCurrent(), false);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 1, false);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 2, false);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 3, false);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 4, false);
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2779), 5.0, -1, 10.0, true);
        VisExploreArea(PlayerGroupLoopCurrent(), RegionEntireMap(), true, false);
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionEntireMap());
    }
    PlayerGroupLoopEnd();
    if (PlayerGroupHasPlayer(gv_playerswatchingendingcinematic, 1)) {
        if (gv_gameBeat[0]) {
            TriggerSkippableBegin(PlayerGroupSingle(1), 0, gt_EndingCinematicSaveExitSpecialP1, true, false);
            UIShowCinematicText(PlayerGroupSingle(1), StringExternal("Param/Value/4C1C5C7E"), 0.1, 5.8, SoundLink("30SecondSilence", -1));
        }
        else {
            UIShowCinematicText(PlayerGroupSingle(1), StringExternal("Param/Value/2FF83803"), 0.1, 4.8, SoundLink("30SecondSilence", -1));
        }
    }
    if (PlayerGroupHasPlayer(gv_playerswatchingendingcinematic, 2)) {
        if (gv_gameBeat[1]) {
            TriggerSkippableBegin(PlayerGroupSingle(2), 0, gt_EndingCinematicSaveExitSpecialP2, true, false);
            UIShowCinematicText(PlayerGroupSingle(2), StringExternal("Param/Value/84C9CF79"), 0.1, 5.8, SoundLink("30SecondSilence", -1));
        }
        else {
            UIShowCinematicText(PlayerGroupSingle(2), StringExternal("Param/Value/EF723C2C"), 0.1, 4.8, SoundLink("30SecondSilence", -1));
        }
    }
    if (PlayerGroupHasPlayer(gv_playerswatchingendingcinematic, 3)) {
        if (gv_gameBeat[2]) {
            TriggerSkippableBegin(PlayerGroupSingle(3), 0, gt_EndingCinematicSaveExitSpecialP3, true, false);
            UIShowCinematicText(PlayerGroupSingle(3), StringExternal("Param/Value/5E3610F6"), 0.1, 5.8, SoundLink("30SecondSilence", -1));
        }
        else {
            UIShowCinematicText(PlayerGroupSingle(3), StringExternal("Param/Value/F2688FE5"), 0.1, 4.8, SoundLink("30SecondSilence", -1));
        }
    }
    if (PlayerGroupHasPlayer(gv_playerswatchingendingcinematic, 4)) {
        if (gv_gameBeat[3]) {
            TriggerSkippableBegin(PlayerGroupSingle(4), 0, gt_EndingCinematicSaveExitSpecialP4, true, false);
            UIShowCinematicText(PlayerGroupSingle(4), StringExternal("Param/Value/A4C19533"), 0.1, 5.8, SoundLink("30SecondSilence", -1));
        }
        else {
            UIShowCinematicText(PlayerGroupSingle(4), StringExternal("Param/Value/4DA1CDE4"), 0.1, 4.8, SoundLink("30SecondSilence", -1));
        }
    }
    Wait(5.8, c_timeGame);
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/259E7C04"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
    Wait(8, c_timeGame);
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/C384B428"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
    Wait(8, c_timeGame);
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/A8723B18"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
    Wait(8, c_timeGame);
    PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2544), 5.0, -1, 10.0, true);
    }
    PlayerGroupLoopEnd();
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/3F968A1C"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
    Wait(8.0, c_timeGame);
    PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2780), 5.0, -1, 10.0, true);
    }
    PlayerGroupLoopEnd();
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/9B251C63"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
    Wait(8.0, c_timeReal);
    PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2781), 5.0, -1, 10.0, true);
    }
    PlayerGroupLoopEnd();
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/31B1C81A"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
    Wait(8.0, c_timeGame);
    PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(1710), 5.0, -1, 10.0, true);
    }
    PlayerGroupLoopEnd();
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/C6C9A251"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
    Wait(8.0, c_timeGame);
    PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2782), 5.0, -1, 10.0, true);
    }
    PlayerGroupLoopEnd();
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/F078F471"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
    Wait(8.0, c_timeGame);
    PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2783), 5.0, -1, 10.0, true);
    }
    PlayerGroupLoopEnd();
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/D608B6EF"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
    Wait(8.0, c_timeGame);
    PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2784), 5.0, -1, 10.0, true);
    }
    PlayerGroupLoopEnd();
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/5B3E7D77"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(3.0, c_timeGame);
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/42C6933B"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(3.0, c_timeGame);
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/D541CFBE"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(3.0, c_timeGame);
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/45BCF748"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(3.0, c_timeGame);
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/CB5DCFB6"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
    Wait(3.0, c_timeGame);
    PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2785), 5.0, -1, 10.0, true);
    }
    PlayerGroupLoopEnd();
    //if(UnitTUnitInRegion(RegionFromName("View Credits")) != "Null"){
    UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("And thank you!"), 0.2, 99.0, SoundLink("30SecondSilence", -1));
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_EndingCinematicSaveExitNormal, true, false);
    
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EndingCinematic_Init () {
    gt_EndingCinematic = TriggerCreate("gt_EndingCinematic_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ending Cinematic - Save/Exit (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_EndingCinematicSaveExitNormal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    UIShowCinematicText(gv_playerswatchingintrocinematic, StringToText(""), 0.05, 0.0, SoundLink("30SecondSilence", -1));
    PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        gv_isSavingExiting[(PlayerGroupLoopCurrent() - 1)] = true;
        gf_SaveStackCounts(PlayerGroupLoopCurrent());
        gf_SaveHero(PlayerGroupLoopCurrent());
        gf_SaveStash(PlayerGroupLoopCurrent());
        gf_SaveSkills(PlayerGroupLoopCurrent());
        gf_SaveHPC(PlayerGroupLoopCurrent());
        gf_SaveHRC(PlayerGroupLoopCurrent());
        BankValueSetFromFlag(gv_players[lv_pPI].banks.dragonBank, "GB", PlayerHandle(PlayerGroupLoopCurrent()), true);
        BankSave(gv_players[lv_pPI].banks.dragonBank);
        if ((GameAttributePlayerValue("1", PlayerGroupLoopCurrent()) == "0001")) {
            lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, "Fire Dragon", PlayerGroupLoopCurrent());
        }
        if ((GameAttributePlayerValue("1", PlayerGroupLoopCurrent()) == "0002")) {
            lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, "Ice Dragon", PlayerGroupLoopCurrent());
        }
        GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, false, true);
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EndingCinematicSaveExitNormal_Init () {
    gt_EndingCinematicSaveExitNormal = TriggerCreate("gt_EndingCinematicSaveExitNormal_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ending Cinematic - Save/Exit (Special) P1
//--------------------------------------------------------------------------------------------------
bool gt_EndingCinematicSaveExitSpecialP1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(PlayerGroupSingle(1));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        gv_isSavingExiting[(PlayerGroupLoopCurrent() - 1)] = true;
        gf_SaveStackCounts(PlayerGroupLoopCurrent());
        gf_SaveHero(PlayerGroupLoopCurrent());
        gf_SaveStash(PlayerGroupLoopCurrent());
        gf_SaveSkills(PlayerGroupLoopCurrent());
        gf_SaveHPC(PlayerGroupLoopCurrent());
        gf_SaveHRC(PlayerGroupLoopCurrent());
        BankValueSetFromFlag(gv_players[lv_pPI].banks.dragonBank, "GB", PlayerHandle(PlayerGroupLoopCurrent()), true);
        BankSave(gv_players[lv_pPI].banks.dragonBank);
        if ((GameAttributePlayerValue("1", PlayerGroupLoopCurrent()) == "0001")) {
            lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, "Fire Dragon", PlayerGroupLoopCurrent());
        }
        if ((GameAttributePlayerValue("1", PlayerGroupLoopCurrent()) == "0002")) {
            lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, "Ice Dragon", PlayerGroupLoopCurrent());
        }
        GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, false, true);
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EndingCinematicSaveExitSpecialP1_Init () {
    gt_EndingCinematicSaveExitSpecialP1 = TriggerCreate("gt_EndingCinematicSaveExitSpecialP1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ending Cinematic - Save/Exit (Special) P2
//--------------------------------------------------------------------------------------------------
bool gt_EndingCinematicSaveExitSpecialP2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(PlayerGroupSingle(2));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        gv_isSavingExiting[(PlayerGroupLoopCurrent() - 1)] = true;
        gf_SaveStackCounts(PlayerGroupLoopCurrent());
        gf_SaveHero(PlayerGroupLoopCurrent());
        gf_SaveStash(PlayerGroupLoopCurrent());
        gf_SaveSkills(PlayerGroupLoopCurrent());
        gf_SaveHPC(PlayerGroupLoopCurrent());
        gf_SaveHRC(PlayerGroupLoopCurrent());
        BankValueSetFromFlag(gv_players[lv_pPI].banks.dragonBank, "GB", PlayerHandle(PlayerGroupLoopCurrent()), true);
        BankSave(gv_players[lv_pPI].banks.dragonBank);
        if ((GameAttributePlayerValue("1", PlayerGroupLoopCurrent()) == "0001")) {
            lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, "Fire Dragon", PlayerGroupLoopCurrent());
        }
        if ((GameAttributePlayerValue("1", PlayerGroupLoopCurrent()) == "0002")) {
            lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, "Ice Dragon", PlayerGroupLoopCurrent());
        }
        GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, false, true);
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EndingCinematicSaveExitSpecialP2_Init () {
    gt_EndingCinematicSaveExitSpecialP2 = TriggerCreate("gt_EndingCinematicSaveExitSpecialP2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ending Cinematic - Save/Exit (Special) P3
//--------------------------------------------------------------------------------------------------
bool gt_EndingCinematicSaveExitSpecialP3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(PlayerGroupSingle(3));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        gv_isSavingExiting[(PlayerGroupLoopCurrent() - 1)] = true;
        gf_SaveStackCounts(PlayerGroupLoopCurrent());
        gf_SaveHero(PlayerGroupLoopCurrent());
        gf_SaveStash(PlayerGroupLoopCurrent());
        gf_SaveSkills(PlayerGroupLoopCurrent());
        gf_SaveHPC(PlayerGroupLoopCurrent());
        gf_SaveHRC(PlayerGroupLoopCurrent());
        BankValueSetFromFlag(gv_players[lv_pPI].banks.dragonBank, "GB", PlayerHandle(PlayerGroupLoopCurrent()), true);
        BankSave(gv_players[lv_pPI].banks.dragonBank);
        if ((GameAttributePlayerValue("1", PlayerGroupLoopCurrent()) == "0001")) {
            lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, "Fire Dragon", PlayerGroupLoopCurrent());
        }
        if ((GameAttributePlayerValue("1", PlayerGroupLoopCurrent()) == "0002")) {
            lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, "Ice Dragon", PlayerGroupLoopCurrent());
        }
        GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, false, true);
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EndingCinematicSaveExitSpecialP3_Init () {
    gt_EndingCinematicSaveExitSpecialP3 = TriggerCreate("gt_EndingCinematicSaveExitSpecialP3_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ending Cinematic - Save/Exit (Special) P4
//--------------------------------------------------------------------------------------------------
bool gt_EndingCinematicSaveExitSpecialP4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pPI;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(PlayerGroupSingle(4));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pPI = (PlayerGroupLoopCurrent() - 1);
        gv_isSavingExiting[(PlayerGroupLoopCurrent() - 1)] = true;
        gf_SaveStackCounts(PlayerGroupLoopCurrent());
        gf_SaveHero(PlayerGroupLoopCurrent());
        gf_SaveStash(PlayerGroupLoopCurrent());
        gf_SaveSkills(PlayerGroupLoopCurrent());
        gf_SaveHPC(PlayerGroupLoopCurrent());
        gf_SaveHRC(PlayerGroupLoopCurrent());
        BankValueSetFromFlag(gv_players[lv_pPI].banks.dragonBank, "GB", PlayerHandle(PlayerGroupLoopCurrent()), true);
        BankSave(gv_players[lv_pPI].banks.dragonBank);
        if ((GameAttributePlayerValue("1", PlayerGroupLoopCurrent()) == "0001")) {
            lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, "Fire Dragon", PlayerGroupLoopCurrent());
        }
        if ((GameAttributePlayerValue("1", PlayerGroupLoopCurrent()) == "0002")) {
            lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, "Ice Dragon", PlayerGroupLoopCurrent());
        }
        GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, false, true);
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EndingCinematicSaveExitSpecialP4_Init () {
    gt_EndingCinematicSaveExitSpecialP4 = TriggerCreate("gt_EndingCinematicSaveExitSpecialP4_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Periodically Save
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicallySave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gf_Save(PlayerGroupLoopCurrent());
        }
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PeriodicallySave_Init () {
    gt_PeriodicallySave = TriggerCreate("gt_PeriodicallySave_Func");
    TriggerAddEventTimePeriodic(gt_PeriodicallySave, 1.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ice Reborn
//--------------------------------------------------------------------------------------------------
bool gt_IceReborn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempDragon;
    int lv_importantPlayerIndex;
    int lv_importantPlayer;
    int lv_n;
    
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((GameAttributePlayerValue("1", EventPlayer()) == "0002"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_importantPlayer = EventPlayer();
    lv_importantPlayerIndex = (EventPlayer() - 1);
    if ((gv_gameBeat[(EventPlayer() - 1)] != true)) {
        UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/11E08D7B"));
    }
    if ((UnitGetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLevel, c_unitPropCurrent) != 100.0)) {
        UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/14A626B1"));
    }
    if ((gf_IsAdmin(EventPlayer()) || ((UnitGetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLevel, c_unitPropCurrent) == 100.0)))){// && gv_gameBeat[(EventPlayer() - 1)]))) {
        TriggerEnable(gt_SaveStackCountsOnInventoryEdit, false);
        TriggerEnable(gt_SaveStackCountsPeriodically, false);
        lv_importantPlayer = EventPlayer();
        lv_importantPlayerIndex = (EventPlayer() - 1);
        gv_evolving[lv_importantPlayerIndex] = true;
        lv_tempDragon = gv_players[lv_importantPlayerIndex].dragon;
        gv_players[lv_importantPlayerIndex].stats.reborn.count = (gv_players[lv_importantPlayerIndex].stats.reborn.count + 1);
        UnitGroupRemove(gv_unitsthatdidDamagetoSyrital, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_unitsthatdidDamagetoSremagsi, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_unitsthatdidDamagetoMachinaDePlagam, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_dragonsInBioDome, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_dragonsInBattleWithGuardians, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_dragonInBattleWithZauberer2ndForm, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_dragonInBattleWithZauberer1stForm, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_contestant2Group, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_contestant1Group, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_contestant1Group, gv_players[lv_importantPlayerIndex].dragon);
        UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/881B6E1C"));
        gf_FillInventory(lv_importantPlayer);
        gf_SaveStackCounts(lv_importantPlayer);
        UnitRemove(lv_tempDragon);
        UnitCreate(1, "BabyIceDragon", 0, lv_importantPlayer, PointFromId(1), libNtve_gf_RandomAngle());
        gv_players[lv_importantPlayerIndex].dragon = UnitLastCreated();
        CameraPan(lv_importantPlayer, RegionGetCenter(RegionFromId(3)), 2.0, -1, 10.0, false);
        gv_players[lv_importantPlayerIndex].stats.reborn.points += 10;
        libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/A3FF6AEC") + IntToText(gv_players[lv_importantPlayerIndex].stats.reborn.points)), PlayerGroupSingle(lv_importantPlayer));
        gf_ApplyRebornStats(lv_importantPlayer);
        gf_PutInventoryinInventory(lv_importantPlayer);
        gf_LoadStackCounts(lv_importantPlayer);
        UnitSelect(gv_players[lv_importantPlayerIndex].dragon, lv_importantPlayer, true);
        BankValueSetFromUnit(gv_players[lv_importantPlayerIndex].banks.dragonBank, "Dragon", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].dragon);
        lib1_gf_ResetTalentBuild(lv_importantPlayer, 1);
        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, "DQRPGTalentLibraryBank", lv_importantPlayer);
        gv_players[lv_importantPlayerIndex].stats.level = 0;
        gv_players[lv_importantPlayerIndex].stats.strength = 0;
        gv_players[lv_importantPlayerIndex].stats.vitality = 0;
        gv_players[lv_importantPlayerIndex].stats.dexterity = 0;
        gv_players[lv_importantPlayerIndex].stats.intelligence = 0;
        gv_players[lv_importantPlayerIndex].stats.agility = 0;
        gv_players[lv_importantPlayerIndex].stats.attributePoints = 5.0;
        gv_attributeText[lv_importantPlayerIndex] = FixedToString(gv_players[lv_importantPlayerIndex].stats.attributePoints, 0);
        gv_fireSkin[lv_importantPlayerIndex] = false;
        gv_allSeeingEye[lv_importantPlayerIndex] = false;
        gv_players[lv_importantPlayerIndex].skills.subzero = 0;
        gv_players[lv_importantPlayerIndex].skills.nova = 0;
        gv_players[lv_importantPlayerIndex].skills.inferno = 0;
        gv_players[lv_importantPlayerIndex].skills.frostSpike = 0;
        gv_players[lv_importantPlayerIndex].skills.flameEgg = 0;
        gv_players[lv_importantPlayerIndex].skills.fireClaw = 0;
        gv_players[lv_importantPlayerIndex].skills.fireball = 0;
        gv_players[lv_importantPlayerIndex].skills.blizzard = 0;
        gf_SaveSkills(lv_importantPlayer);
        gf_ResetTalentBuildandVariables(lv_importantPlayer);
        libNtve_gf_SetDialogItemText(gv_players[lv_importantPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_importantPlayerIndex]), PlayerGroupSingle(lv_importantPlayer));
        BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, "Ag", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.agility);
        BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, "De", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.dexterity);
        BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, "Int", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.intelligence);
        BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, "Str", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.strength);
        BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, "Vi", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.vitality);
        BankValueSetFromFixed(gv_players[lv_importantPlayerIndex].banks.dragonBank, "AP", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.attributePoints);
        BankValueSetFromFlag(gv_players[lv_importantPlayerIndex].banks.dragonBank, "FS", PlayerHandle(lv_importantPlayer), gv_fireSkin[lv_importantPlayerIndex]);
        BankValueSetFromFlag(gv_players[lv_importantPlayerIndex].banks.dragonBank, "ASE", PlayerHandle(lv_importantPlayer), gv_allSeeingEye[lv_importantPlayerIndex]);
        gv_gameBeat[lv_importantPlayerIndex] = false;
        BankValueSetFromFlag(gv_players[lv_importantPlayerIndex].banks.dragonBank, "GB", PlayerHandle(lv_importantPlayer), gv_gameBeat[lv_importantPlayerIndex]);
        ObjectiveDestroyAll(PlayerGroupSingle(lv_importantPlayer));
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[0].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[0].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[1].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[1].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[2].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[2].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[3].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[3].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[4].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[4].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[5].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[5].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[6].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[6].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[7].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[7].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[8].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[8].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[9].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[9].state = 0;
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ1");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ2");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ3");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ4");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ5");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ6");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ7");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ8");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ9");
        gf_SQ0Setup(lv_importantPlayer);
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Mana0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Mana1-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Mana2-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Mana3-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Mana4-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Mana5-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Base0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Malin0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Oleum0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Seryn0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Altoss0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Madeleine0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-SergeantLister0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Detsefni0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Greed0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Amp0-0");
        gv_unlockedWaypoints[lv_importantPlayerIndex][0] = false;
        gv_unlockedWaypoints[lv_importantPlayerIndex][1] = false;
        gv_unlockedWaypoints[lv_importantPlayerIndex][2] = false;
        gv_unlockedWaypoints[lv_importantPlayerIndex][3] = false;
        gv_unlockedWaypoints[lv_importantPlayerIndex][4] = false;
        gv_respawnPoint[lv_importantPlayerIndex] = PointFromId(1);
        gv_players[lv_importantPlayerIndex].stats.level = 1;
        gv_evolving[lv_importantPlayerIndex] = false;
        gf_StatCheck(lv_importantPlayer);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_IceReborn_Init () {
    gt_IceReborn = TriggerCreate("gt_IceReborn_Func");
    TriggerAddEventChatMessage(gt_IceReborn, c_playerAny, "-Reborn", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Fire Reborn
//--------------------------------------------------------------------------------------------------
bool gt_FireReborn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tempDragon;
    int lv_importantPlayerIndex;
    int lv_importantPlayer;
    int lv_n;
    
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((GameAttributePlayerValue("1", EventPlayer()) == "0001"))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_importantPlayer = EventPlayer();
    lv_importantPlayerIndex = (EventPlayer() - 1);
    if ((gv_gameBeat[(EventPlayer() - 1)] != true)) {
        UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/5DD4D756"));
    }
    if ((UnitGetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLevel, c_unitPropCurrent) != 100.0)) {
        UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/5DBA9E25"));
    }
    if ((gf_IsAdmin(EventPlayer()) || ((UnitGetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLevel, c_unitPropCurrent) == 100.0)))){ //&& gv_gameBeat[(EventPlayer() - 1)]))) {
        TriggerEnable(gt_SaveStackCountsOnInventoryEdit, false);
        TriggerEnable(gt_SaveStackCountsPeriodically, false);
        lv_importantPlayer = EventPlayer();
        lv_importantPlayerIndex = (EventPlayer() - 1);
        gv_evolving[lv_importantPlayerIndex] = true;
        lv_tempDragon = gv_players[lv_importantPlayerIndex].dragon;
        gv_players[lv_importantPlayerIndex].stats.reborn.count = (gv_players[lv_importantPlayerIndex].stats.reborn.count + 1);
        UnitGroupRemove(gv_unitsthatdidDamagetoSyrital, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_unitsthatdidDamagetoSremagsi, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_unitsthatdidDamagetoMachinaDePlagam, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_dragonsInBioDome, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_dragonsInBattleWithGuardians, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_dragonInBattleWithZauberer2ndForm, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_dragonInBattleWithZauberer1stForm, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_contestant2Group, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_contestant1Group, gv_players[lv_importantPlayerIndex].dragon);
        UnitGroupRemove(gv_contestant1Group, gv_players[lv_importantPlayerIndex].dragon);
        UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/FE4D7D27"));
        gf_FillInventory(lv_importantPlayer);
        gf_SaveStackCounts(lv_importantPlayer);
        UnitRemove(lv_tempDragon);
        UnitCreate(1, "BabyDragon", 0, lv_importantPlayer, PointFromId(1), libNtve_gf_RandomAngle());
        gv_players[lv_importantPlayerIndex].dragon = UnitLastCreated();
        CameraPan(lv_importantPlayer, RegionGetCenter(RegionFromId(3)), 2.0, -1, 10.0, false);
        gv_players[lv_importantPlayerIndex].stats.reborn.points += 10;
        libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/7D0AD6CC") + IntToText(gv_players[lv_importantPlayerIndex].stats.reborn.points)), PlayerGroupSingle(lv_importantPlayer));
        gf_ApplyRebornStats(lv_importantPlayer);
        gf_PutInventoryinInventory(lv_importantPlayer);
        gf_LoadStackCounts(lv_importantPlayer);
        UnitSelect(gv_players[lv_importantPlayerIndex].dragon, lv_importantPlayer, true);
        BankValueSetFromUnit(gv_players[lv_importantPlayerIndex].banks.dragonBank, "Dragon", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].dragon);
        lib1_gf_ResetTalentBuild(lv_importantPlayer, 1);
        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, "DQRPGTalentLibraryBank", lv_importantPlayer);
        gv_players[lv_importantPlayerIndex].stats.level = 0;
        gv_players[lv_importantPlayerIndex].stats.strength = 0;
        gv_players[lv_importantPlayerIndex].stats.vitality = 0;
        gv_players[lv_importantPlayerIndex].stats.dexterity = 0;
        gv_players[lv_importantPlayerIndex].stats.intelligence = 0;
        gv_players[lv_importantPlayerIndex].stats.agility = 0;
        gv_players[lv_importantPlayerIndex].stats.attributePoints = 5.0;
        gv_attributeText[lv_importantPlayerIndex] = FixedToString(gv_players[lv_importantPlayerIndex].stats.attributePoints, 0);
        gv_fireSkin[lv_importantPlayerIndex] = false;
        gv_allSeeingEye[lv_importantPlayerIndex] = false;
        gv_players[lv_importantPlayerIndex].skills.subzero = 0;
        gv_players[lv_importantPlayerIndex].skills.nova = 0;
        gv_players[lv_importantPlayerIndex].skills.inferno = 0;
        gv_players[lv_importantPlayerIndex].skills.frostSpike = 0;
        gv_players[lv_importantPlayerIndex].skills.flameEgg = 0;
        gv_players[lv_importantPlayerIndex].skills.fireClaw = 0;
        gv_players[lv_importantPlayerIndex].skills.fireball = 0;
        gv_players[lv_importantPlayerIndex].skills.blizzard = 0;
        gf_SaveSkills(lv_importantPlayer);
        gf_ResetTalentBuildandVariables(lv_importantPlayer);
        libNtve_gf_SetDialogItemText(gv_players[lv_importantPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_importantPlayerIndex]), PlayerGroupSingle(lv_importantPlayer));
        BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, "Ag", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.agility);
        BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, "De", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.dexterity);
        BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, "Int", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.intelligence);
        BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, "Str", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.strength);
        BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, "Vi", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.vitality);
        BankValueSetFromFixed(gv_players[lv_importantPlayerIndex].banks.dragonBank, "AP", PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.attributePoints);
        BankValueSetFromFlag(gv_players[lv_importantPlayerIndex].banks.dragonBank, "FS", PlayerHandle(lv_importantPlayer), gv_fireSkin[lv_importantPlayerIndex]);
        BankValueSetFromFlag(gv_players[lv_importantPlayerIndex].banks.dragonBank, "ASE", PlayerHandle(lv_importantPlayer), gv_allSeeingEye[lv_importantPlayerIndex]);
        gv_gameBeat[lv_importantPlayerIndex] = false;
        BankValueSetFromFlag(gv_players[lv_importantPlayerIndex].banks.dragonBank, "GB", PlayerHandle(lv_importantPlayer), gv_gameBeat[lv_importantPlayerIndex]);
        ObjectiveDestroyAll(PlayerGroupSingle(lv_importantPlayer));
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[0].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[0].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[1].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[1].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[2].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[2].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[3].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[3].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[4].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[4].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[5].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[5].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[6].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[6].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[7].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[7].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[8].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[8].state = 0;
        PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[9].ping);
        gv_players[lv_importantPlayerIndex].quests.storyQuests[9].state = 0;
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ1");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ2");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ3");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ4");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ5");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ6");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ7");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ8");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ9");
        gf_SQ0Setup(lv_importantPlayer);
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Mana0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Mana1-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Mana2-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Mana3-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Mana4-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Mana5-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Base0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Malin0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Oleum0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Seryn0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Altoss0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Madeleine0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-SergeantLister0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Detsefni0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Greed0-0");
        BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, "SQ-Amp0-0");
        gv_unlockedWaypoints[lv_importantPlayerIndex][0] = false;
        gv_unlockedWaypoints[lv_importantPlayerIndex][1] = false;
        gv_unlockedWaypoints[lv_importantPlayerIndex][2] = false;
        gv_unlockedWaypoints[lv_importantPlayerIndex][3] = false;
        gv_unlockedWaypoints[lv_importantPlayerIndex][4] = false;
        gv_respawnPoint[lv_importantPlayerIndex] = PointFromId(1);
        gv_players[lv_importantPlayerIndex].stats.level = 1;
        gv_evolving[lv_importantPlayerIndex] = false;
        gf_StatCheck(lv_importantPlayer);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FireReborn_Init () {
    gt_FireReborn = TriggerCreate("gt_FireReborn_Func");
    TriggerAddEventChatMessage(gt_FireReborn, c_playerAny, "-Reborn", true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Reborn Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateRebornDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogWidth;
    int lv_dialogHeight;
    int lv_labelWidth;
    int lv_labelHeight;
    int lv_pointWidth;
    int lv_pointHeight;
    int lv_buttonHeight;
    int lv_buttonWidth;
    int lv_xSkip;
    int lv_xSpace;
    int lv_pP;
    int lv_pPI;
    // Variable Initialization
    lv_dialogWidth = 500;
    lv_dialogHeight = 410;
    lv_labelWidth = 250;
    lv_labelHeight = 30;
    lv_pointWidth = 130;
    lv_pointHeight = 30;
    lv_buttonHeight = 30;
    lv_buttonWidth = 30;
    lv_xSkip = 30;
    lv_xSpace = 30;
    // Actions
    if (!runActions) {
        return true;
    }
    PlayerGroupLoopBegin(gv_humanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_pP = PlayerGroupLoopCurrent();
        lv_pPI = (lv_pP - 1);
        DialogCreate(lv_dialogWidth, lv_dialogHeight, c_anchorTopRight, 0, 75, true);
        gv_players[lv_pPI].stats.reborn.dialog.state = DialogLastCreated();
        DialogSetVisible(gv_players[lv_pPI].stats.reborn.dialog.state, PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth / 1), lv_labelHeight, c_anchorTopLeft, 0, (lv_labelHeight * 1), (StringExternal("Param/Value/EC103F81") + IntToText(gv_players[lv_pPI].stats.reborn.points)), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", PlayerGroupSingle(lv_pP));
        gv_rebornDialogRebornPointLabel = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 1) + (lv_labelHeight / 3)), StringExternal("Param/Value/9AFDF832"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 2), StringExternal("Param/Value/13E7657A"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_pP, false)), true, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 2) + (lv_labelHeight / 3)), StringExternal("Param/Value/21429FA4"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 3), StringExternal("Param/Value/0C74DDDD"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 3) + (lv_labelHeight / 3)), StringExternal("Param/Value/158C7C9C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 4), StringExternal("Param/Value/754A8049"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 4) + (lv_labelHeight / 3)), StringExternal("Param/Value/18D938D0"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 5), StringExternal("Param/Value/40D5A933"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 5) + (lv_labelHeight / 3)), StringExternal("Param/Value/C5911693"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 6), StringExternal("Param/Value/565F98A7"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 6) + (lv_labelHeight / 3)), StringExternal("Param/Value/6263C6BE"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 7), StringExternal("Param/Value/85DF1CEC"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 7) + (lv_labelHeight / 3)), StringExternal("Param/Value/4BFFB9E8"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 8), StringExternal("Param/Value/2C49892B"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 8) + (lv_labelHeight / 3)), StringExternal("Param/Value/A912FAE1"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 9), StringExternal("Param/Value/E70F7CE6"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 9) + (lv_labelHeight / 3)), StringExternal("Param/Value/A11D0EBB"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 10), StringExternal("Param/Value/E2E4F016"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 10) + (lv_labelHeight / 3)), StringExternal("Param/Value/4AAEB9F0"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 11), StringExternal("Param/Value/FCBA9AC6"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 11) + (lv_labelHeight / 3)), StringExternal("Param/Value/4BC38369"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 12), StringExternal("Param/Value/9A39BA08"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 12) + (lv_labelHeight / 3)), StringExternal("Param/Value/44A5FE59"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 3), (StringExternal("Param/Value/3F8C3E6C") + (IntToText(gv_players[lv_pPI].stats.reborn.maxHP) + (StringExternal("Param/Value/3C40C931") + StringExternal("Param/Value/19C87255")))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", PlayerGroupSingle(lv_pP));
        gv_players[lv_pPI].stats.reborn.dialog.pointLabel[0] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 4), (StringExternal("Param/Value/73FE3461") + (IntToText(gv_players[lv_pPI].stats.reborn.maxMP) + (StringExternal("Param/Value/9649BE76") + StringExternal("Param/Value/161A3F27")))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", PlayerGroupSingle(lv_pP));
        gv_players[lv_pPI].stats.reborn.dialog.pointLabel[1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 5), (StringExternal("Param/Value/0154B2DE") + (IntToText(gv_players[lv_pPI].stats.reborn.defense) + (StringExternal("Param/Value/4366ED00") + StringExternal("Param/Value/A5AD37C7")))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", PlayerGroupSingle(lv_pP));
        gv_players[lv_pPI].stats.reborn.dialog.pointLabel[2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 6), (StringExternal("Param/Value/2422077E") + (IntToText(gv_players[lv_pPI].stats.reborn.movementSpeed) + (StringExternal("Param/Value/21416A9C") + StringExternal("Param/Value/B7CAA415")))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", PlayerGroupSingle(lv_pP));
        gv_players[lv_pPI].stats.reborn.dialog.pointLabel[3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 7), (StringExternal("Param/Value/A575EF6C") + (IntToText(gv_players[lv_pPI].stats.reborn.attackSpeed) + (StringExternal("Param/Value/5C1A1A21") + StringExternal("Param/Value/DFF0F56F")))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", PlayerGroupSingle(lv_pP));
        gv_players[lv_pPI].stats.reborn.dialog.pointLabel[4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 8), (StringExternal("Param/Value/F60085E0") + (IntToText(gv_players[lv_pPI].stats.reborn.dodge) + (StringExternal("Param/Value/3E12AE8D") + StringExternal("Param/Value/BA7E44FE")))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", PlayerGroupSingle(lv_pP));
        gv_players[lv_pPI].stats.reborn.dialog.pointLabel[5] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 9), (StringExternal("Param/Value/6BCC1DD7") + (IntToText(gv_players[lv_pPI].stats.reborn.miss) + (StringExternal("Param/Value/D945F4DA") + StringExternal("Param/Value/52F1E42D")))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", PlayerGroupSingle(lv_pP));
        gv_players[lv_pPI].stats.reborn.dialog.pointLabel[6] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 10), (StringExternal("Param/Value/F133BEB5") + (IntToText(gv_players[lv_pPI].stats.reborn.goldDrop) + (StringExternal("Param/Value/927D5541") + StringExternal("Param/Value/E55819A4")))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", PlayerGroupSingle(lv_pP));
        gv_players[lv_pPI].stats.reborn.dialog.pointLabel[7] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 11), (StringExternal("Param/Value/A464F39D") + (IntToText(gv_players[lv_pPI].stats.reborn.itemDrop) + (StringExternal("Param/Value/1627BE88") + StringExternal("Param/Value/FA36656D")))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", PlayerGroupSingle(lv_pP));
        gv_players[lv_pPI].stats.reborn.dialog.pointLabel[8] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 12), (StringExternal("Param/Value/F179BF9B") + (IntToText(gv_players[lv_pPI].stats.reborn.regen) + (StringExternal("Param/Value/53A204C7") + StringExternal("Param/Value/4FF47C38")))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", PlayerGroupSingle(lv_pP));
        gv_players[lv_pPI].stats.reborn.dialog.pointLabel[9] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 3) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/EF0BD040"), (""));
        gv_players[lv_pPI].stats.reborn.dialog.pointButton[0] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 4) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/79C912B8"), (""));
        gv_players[lv_pPI].stats.reborn.dialog.pointButton[1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 5) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/F63238DB"), (""));
        gv_players[lv_pPI].stats.reborn.dialog.pointButton[2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 6) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/21386B3C"), (""));
        gv_players[lv_pPI].stats.reborn.dialog.pointButton[3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 7) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/E51B7529"), (""));
        gv_players[lv_pPI].stats.reborn.dialog.pointButton[4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 8) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/A59B0230"), (""));
        gv_players[lv_pPI].stats.reborn.dialog.pointButton[5] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 9) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/C4C98683"), (""));
        gv_players[lv_pPI].stats.reborn.dialog.pointButton[6] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 10) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/75B2568C"), (""));
        gv_players[lv_pPI].stats.reborn.dialog.pointButton[7] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 11) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/F26350EA"), (""));
        gv_players[lv_pPI].stats.reborn.dialog.pointButton[8] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 12) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/2894924B"), (""));
        gv_players[lv_pPI].stats.reborn.dialog.pointButton[9] = DialogControlLastCreated();
    }
    PlayerGroupLoopEnd();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateRebornDialog_Init () {
    gt_CreateRebornDialog = TriggerCreate("gt_CreateRebornDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Reborn Dialog Visibility
//--------------------------------------------------------------------------------------------------
bool gt_ToggleRebornDialogVisibility_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    if (DialogIsVisible(gv_players[(EventPlayer() - 1)].stats.reborn.dialog.state, EventPlayer())) {
        DialogSetVisible(gv_players[(EventPlayer() - 1)].stats.reborn.dialog.state, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_players[(EventPlayer() - 1)].stats.reborn.dialog.state, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ToggleRebornDialogVisibility_Init () {
    gt_ToggleRebornDialogVisibility = TriggerCreate("gt_ToggleRebornDialogVisibility_Func");
    TriggerAddEventButtonPressed(gt_ToggleRebornDialogVisibility, c_playerAny, "RebornMenu");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reborn Stats
//--------------------------------------------------------------------------------------------------
bool gt_RebornStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tP;
    int lv_tPI;
    // Variable Initialization
    lv_tP = EventPlayer();
    lv_tPI = (EventPlayer() - 1);
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_players[lv_tPI].stats.reborn.points > 0)) {
        if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[0])) {
            gv_players[lv_tPI].stats.reborn.points -= 1;
            libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/0C4B8F0E") + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
            gv_players[lv_tPI].stats.reborn.maxHP += 1;
            libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[0], (StringExternal("Param/Value/04B4A828") + (IntToText(gv_players[lv_tPI].stats.reborn.maxHP) + StringExternal("Param/Value/AF8C6C06"))), PlayerGroupSingle(lv_tP));
        }
        else {
            if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[1])) {
                gv_players[lv_tPI].stats.reborn.points -= 1;
                libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/34512CAB") + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                gv_players[lv_tPI].stats.reborn.maxMP += 1;
                libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[1], (StringExternal("Param/Value/96A7A695") + (IntToText(gv_players[lv_tPI].stats.reborn.maxMP) + StringExternal("Param/Value/DE089EDD"))), PlayerGroupSingle(lv_tP));
            }
            else {
                if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[2])) {
                    gv_players[lv_tPI].stats.reborn.points -= 1;
                    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/E3D1284E") + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                    gv_players[lv_tPI].stats.reborn.defense += 1;
                    libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[2], (StringExternal("Param/Value/C824D379") + (IntToText(gv_players[lv_tPI].stats.reborn.defense) + StringExternal("Param/Value/F00A522E"))), PlayerGroupSingle(lv_tP));
                }
                else {
                    if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[3])) {
                        gv_players[lv_tPI].stats.reborn.points -= 1;
                        libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/840FE8D9") + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                        gv_players[lv_tPI].stats.reborn.movementSpeed += 1;
                        libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[3], (StringExternal("Param/Value/04CC0597") + (IntToText(gv_players[lv_tPI].stats.reborn.movementSpeed) + StringExternal("Param/Value/D55AF90E"))), PlayerGroupSingle(lv_tP));
                    }
                    else {
                        if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[4])) {
                            gv_players[lv_tPI].stats.reborn.points -= 1;
                            libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/1F4CF73C") + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                            gv_players[lv_tPI].stats.reborn.attackSpeed += 1;
                            libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[4], (StringExternal("Param/Value/298476B7") + (IntToText(gv_players[lv_tPI].stats.reborn.attackSpeed) + StringExternal("Param/Value/75DB64C6"))), PlayerGroupSingle(lv_tP));
                        }
                        else {
                            if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[5])) {
                                gv_players[lv_tPI].stats.reborn.points -= 1;
                                libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/E4CED221") + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                                gv_players[lv_tPI].stats.reborn.dodge += 1;
                                libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[5], (StringExternal("Param/Value/DAA59A61") + (IntToText(gv_players[lv_tPI].stats.reborn.dodge) + StringExternal("Param/Value/1DA52D0B"))), PlayerGroupSingle(lv_tP));
                            }
                            else {
                                if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[6])) {
                                    gv_players[lv_tPI].stats.reborn.points -= 1;
                                    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/901B3634") + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                                    gv_players[lv_tPI].stats.reborn.miss += 1;
                                    libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[6], (StringExternal("Param/Value/42E6E47A") + (IntToText(gv_players[lv_tPI].stats.reborn.miss) + StringExternal("Param/Value/D70A2D38"))), PlayerGroupSingle(lv_tP));
                                }
                                else {
                                    if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[7])) {
                                        gv_players[lv_tPI].stats.reborn.points -= 1;
                                        libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/78EEA6FF") + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                                        gv_players[lv_tPI].stats.reborn.goldDrop += 1;
                                        libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[7], (StringExternal("Param/Value/1CE95B32") + (IntToText(gv_players[lv_tPI].stats.reborn.goldDrop) + StringExternal("Param/Value/1A84F8DC"))), PlayerGroupSingle(lv_tP));
                                    }
                                    else {
                                        if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[8])) {
                                            gv_players[lv_tPI].stats.reborn.points -= 1;
                                            libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/72001932") + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                                            gv_players[lv_tPI].stats.reborn.itemDrop += 1;
                                            libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[8], (StringExternal("Param/Value/8B65544B") + (IntToText(gv_players[lv_tPI].stats.reborn.itemDrop) + StringExternal("Param/Value/54C69C21"))), PlayerGroupSingle(lv_tP));
                                        }
                                        else {
                                            if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[9])) {
                                                gv_players[lv_tPI].stats.reborn.points -= 1;
                                                libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/3E802633") + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                                                gv_players[lv_tPI].stats.reborn.regen += 1;
                                                libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[9], (StringExternal("Param/Value/6C18F48D") + (IntToText(gv_players[lv_tPI].stats.reborn.regen) + StringExternal("Param/Value/D00FC4C3"))), PlayerGroupSingle(lv_tP));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        gf_ApplyRebornStats(lv_tP);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RebornStats_Init () {
    gt_RebornStats = TriggerCreate("gt_RebornStats_Func");
    TriggerAddEventDialogControl(gt_RebornStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Region View Creditis Plays Ending
//--------------------------------------------------------------------------------------------------
bool gt_MakeEndingPlay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    // Variable Initialization
    
    // Conditions
    if (!(testConds)) {
    //UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Got here :/1"));  
       return false;
    }
    // Actions
    if (!runActions) {
        return true;
    }
     if (gv_zaubererDead) {
           //UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) &&
   // UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Got here2 :/"));    
    TriggerExecute(gt_EndingCinematic, true, false);
    return true;
    } else{
       // UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Got here3 :/"));  
    return true;
    }
}
//--------------------------------------------------------------------------------------------------
void gt_MakeEndingPlay_Init () {
    gt_MakeEndingPlay = TriggerCreate("gt_MakeEndingPlay_Func");
    TriggerAddEventUnitRegion(gt_MakeEndingPlay, null, RegionFromName("View Credits"), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void FakeInitTriggers() {
    gt_CreateQuestDialog_Init();
    gt_CreateTalkDialog_Init();
    gt_CreateRewardDialog_Init();
    gt_QuestDecline_Init();
    gt_TalkDialogClosed_Init();
    gt_RunStoryQuestSetups_Init();
    gt_SQ0PlayerEntersSQ0Region1_Init();
    gt_SQ1PlayerTalkstoFelix_Init();
    gt_SQ2PlayerEntersSQ2Region1_Init();
    gt_SQ3PlayerTalkstoPetrose_Init();
    gt_SQ3PlayerEntersVerbotenForest_Init();
    gt_SQ4PlayerTalkstoRisdak_Init();
    gt_SQ5PlayerEntersInfestation_Init();
    gt_SQ5PlayerTalkstoPetrose_Init();
    gt_SQ6PlayerEntersTeleporttoBiodome_Init();
    gt_SQ7PlayerTalkstoLanae_Init();
    gt_SQ8BiodomeEntered_Init();
    gt_SQ8Crystal1Destroyed_Init();
    gt_SQ8Crystal2Destroyed_Init();
    gt_SQ8Crystal3Destroyed_Init();
    gt_SQ8Crystal4Destroyed_Init();
    gt_SQ8Crystal5Destroyed_Init();
    gt_SQ8Crystal6Destroyed_Init();
    gt_LoadSideQuests_Init();
    gt_ManaQuest0TalktoMana_Init();
    gt_ManaQuest0QuestAccept_Init();
    gt_ManaQuest0EquipArmorP1_Init();
    gt_ManaQuest0RewardAccept_Init();
    gt_ManaQuest1TalktoMana_Init();
    gt_ManaQuest1QuestAccept_Init();
    gt_ManaQuest1KillSheep_Init();
    gt_ManaQuest1RewardAccept_Init();
    gt_ManaQuest2TalktoMana_Init();
    gt_ManaQuest2QuestAccept_Init();
    gt_ManaQuest2EnterWastelandWater_Init();
    gt_ManaQuest2RewardAccept_Init();
    gt_ManaQuest3TalktoMana_Init();
    gt_ManaQuest3QuestAccept_Init();
    gt_ManaQuest3KillSrepti_Init();
    gt_ManaQuest3RewardAccept_Init();
    gt_ManaQuest4TalktoMana_Init();
    gt_ManaQuest4QuestAccept_Init();
    gt_ManaQuest4RewardAccept_Init();
    gt_ManaQuest4PurchasePotion_Init();
    gt_ManaQuest5TalktoMana_Init();
    gt_ManaQuest5QuestAccept_Init();
    gt_ManaQuest5KillAlphaSrepti_Init();
    gt_ManaQuest5RewardAccept_Init();
    gt_BaseQuest0TalktoBase_Init();
    gt_BaseQuest0QuestAccept_Init();
    gt_BaseQuest0SetRespawnPointatWasteland_Init();
    gt_BaseQuest0RewardAccept_Init();
    gt_BaseQuest1TalktoBase_Init();
    gt_BaseQuest1QuestAccept_Init();
    gt_BaseQuest1ActivateBallanWaypoint_Init();
    gt_BaseQuest2UseBallanWaypointtoWasteland_Init();
    gt_BaseQuest1RewardAccept_Init();
    gt_DetsefniQuest0TalktoDetsefni_Init();
    gt_DetsefniQuest0QuestAccept_Init();
    gt_DetsefniQuest0Kill25Sreptis_Init();
    gt_DetsefniQuest0RewardAccept_Init();
    gt_SergeantListerQuest0TalktoSergeantLister_Init();
    gt_SergeantListeriQuest0QuestAccept_Init();
    gt_SergeantListerQuest0Kill10CretonWarriors_Init();
    gt_SergeantListerQuest0RewardAccept_Init();
    gt_GreedQuest0TalktoGreed_Init();
    gt_GreedQuest0QuestAccept_Init();
    gt_GreedQuest0FindMisterScruffers_Init();
    gt_GreedQuest0RewardAccept_Init();
    gt_MadeleineQuest0TalktoMadeleine_Init();
    gt_MadeleineQuest0QuestAccept_Init();
    gt_MadeleineQuest0Kill30Karramarros_Init();
    gt_MadeleineQuest0RewardAccept_Init();
    gt_MalinQuest0TalktoMalin_Init();
    gt_MalinQuest0QuestAccept_Init();
    gt_MalinQuest0KillRobus_Init();
    gt_MalinQuest0RewardAccept_Init();
    gt_AmpQuest0TalktoAmp_Init();
    gt_AmpQuest0QuestAccept_Init();
    gt_AmpQuest0KillanEliteCretonWarrior_Init();
    gt_AmpQuest0RewardAccept_Init();
    gt_AltossQuest0TalktoAltoss_Init();
    gt_AltossQuest0QuestAccept_Init();
    gt_AltossQuest0Kill15Odvratans_Init();
    gt_AltossQuest0RewardAccept_Init();
    gt_IllisusLocustSpawn_Init();
    gt_OleumQuest0TalktoOleum_Init();
    gt_OleumQuest0QuestAccept_Init();
    gt_OleumQuest0FindCrew137_Init();
    gt_OleumQuest0KillIllisus_Init();
    gt_OleumQuest0RewardAccept_Init();
    gt_SerynQuest0TalktoSeryn_Init();
    gt_SerynQuest0QuestAccept_Init();
    gt_SerynQuest0KillSerynsShadow_Init();
    gt_SerynQuest0RewardAccept_Init();
    gt_ChaosUnitTypes_Init();
    gt_SyritalsHatch_Init();
    gt_GuardiansHatch_Init();
    gt_SremagsisHatch_Init();
    gt_MachinaDePlagamsHatch_Init();
    gt_ZauberersHatch_Init();
    gt_SpawnArenaText1_Init();
    gt_SpawnArenaText2_Init();
    gt_HeroLeavesArena1_Init();
    gt_HeroLeavesArena2_Init();
    gt_HeroEntersArena1_Init();
    gt_HeroEntersArena2_Init();
    gt_Contestant1Dies_Init();
    gt_Contestant2Dies_Init();
    gt_OpenInventorywhenclickonstash_Init();
    gt_Dropstuffnotunlockedyet_Init();
    gt_PotionHotkeyP1_Init();
    gt_PotionHotkeyP2_Init();
    gt_PotionHotkeyP3_Init();
    gt_PotionHotkeyP4_Init();
    gt_GrandOrbofAngerCounter_Init();
    gt_GrandOrbofAngerEffectP1_Init();
    gt_GrandOrbofAngerEffectP2_Init();
    gt_GrandOrbofAngerEffectP3_Init();
    gt_GrandOrbofAngerEffectP4_Init();
    gt_Player1BuysOcculusofWarning_Init();
    gt_Player2BuysOcculusofWarning_Init();
    gt_Player3BuysOcculusofWarning_Init();
    gt_Player4BuysOcculusofWarning_Init();
    gt_OcculusPingPlayer1_Init();
    gt_OcculusPingPlayer2_Init();
    gt_OcculusPingPlayer3_Init();
    gt_OcculusPingPlayer4_Init();
    gt_PlayerBuysFacetofRevenge_Init();
    gt_PlayerBuysCrystalofRebirth_Init();
    gt_PlayerBuysJewelofReturn_Init();
    gt_PlayerBuysStoneofProtection_Init();
    gt_PlayerBuysRingofQuickening_Init();
    gt_TolicsFireOrbDamageResponse_Init();
    gt_SetStackChargeNames_Init();
    gt_SaveStackCountsOnInventoryEdit_Init();
    gt_SaveStackCountsPeriodically_Init();
    gt_TownPortal_Init();
    gt_Unitdropsitem_Init();
    gt_Unitgainsitem_Init();
    gt_ShieldCheck_Init();
    gt_WeaponCheck_Init();
    gt_SellingSystemRedux_Init();
    gt_DisplayArmorShopTextTag_Init();
    gt_DisplayWeaponShopTextTag_Init();
    gt_DisplayOrbShopTextTag_Init();
    gt_DisplayShardShopTextTag_Init();
    gt_DisplayStashTextTagP1_Init();
    gt_DisplayStashTextTagP2_Init();
    gt_DisplayStashTextTagP3_Init();
    gt_DisplayStashTextTagP4_Init();
    gt_UndergroundForestEnter_Init();
    gt_UndergroundForestExit_Init();
    gt_RelamyGorgeEnter_Init();
    gt_RelamyGorgeExit_Init();
    gt_RelamyCaveEnter_Init();
    gt_RelamyCaveExit_Init();
    gt_SetInfestationSpawnTrigger_Init();
    gt_VerbotenInfestationEnter_Init();
    gt_VerbotenInfestationExit_Init();
    gt_BlizzardFreezeChance_Init();
    gt_LearnFireball_Init();
    gt_LearnFireclaws_Init();
    gt_LearnFlameegg_Init();
    gt_LearnInferno_Init();
    gt_LearnNova_Init();
    gt_LearnFrostspike_Init();
    gt_LearnBlizzard_Init();
    gt_LearnSubzero_Init();
    gt_LearnFrozenarmor_Init();
    gt_CheckPlayerisnoteveolved_Init();
    gt_DummyDies_Init();
    gt_ReviveDragonNormal_Init();
    gt_ReviveDragonPvP_Init();
    gt_SetUpAttributeDialog_Init();
    gt_Level0Check_Init();
    gt_LevelUp_Init();
    gt_EvolutionCheck_Init();
    gt_Agility1_Init();
    gt_Dexterity1_Init();
    gt_Intelligence1_Init();
    gt_Strength1_Init();
    gt_Vitality1_Init();
    gt_UpdateBuffs_Init();
    gt_ShowTalents_Init();
    gt_SetisIdleOn_Init();
    gt_SetisIdleOff_Init();
    gt_DefendYourself_Init();
    gt_FrostSpike_Init();
    gt_SyritalTalonsBurning_Init();
    gt_RobusSpawnAllies_Init();
    gt_RobusCarrionNeedlesPoison_Init();
    gt_SremagsiTentacleDisorientation_Init();
    gt_HeroCarrionNeedlesPoison_Init();
    gt_HeroSremagsisTentaclesDisorientated_Init();
    gt_NosferatusLogic_Init();
    gt_NosferatuDies_Init();
    gt_Nosferatudeathcount_Init();
    gt_GreedisGood_Init();
    gt_QuickLearner_Init();
    gt_Herotakesmeleedamage_Init();
    gt_Herotakesrangeddamage_Init();
    gt_Herotakesspelldamage_Init();
    gt_Herotakessplashdamage_Init();
    gt_HeroMissranged_Init();
    gt_HeroMissmelee_Init();
    gt_HeroMissmelee1Shot_Init();
    gt_Herogivesrangeddamage_Init();
    gt_DarkDissulto_Init();
    gt_EnemyAIAttacked_Init();
    gt_EnemyAILava1_Init();
    gt_EnemyAILava2_Init();
    gt_EnemyAILava3_Init();
    gt_EnemyAINest_Init();
    gt_EnemySkillResponse_Init();
    gt_ZauberersFavor_Init();
    gt_CountUnitDeaths_Init();
    gt_EliteCretonWarrior_Init();
    gt_EliteCretonWatcher_Init();
    gt_LargeSheep_Init();
    gt_AlphaSrepti_Init();
    gt_GivenMeleeDamageTextTag_Init();
    gt_RecievedMeleeDamageTextTag_Init();
    gt_SetZauberersMinionsUnitTypes_Init();
    gt_SetZauberersRegions_Init();
    gt_SpawnZauberersMinions_Init();
    gt_DragonDiesinZauberer1_Init();
    gt_DragonDiesinZauberer2_Init();
    gt_SpawnZauberer1stForm_Init();
    gt_Zauberer1stFormDeath_Init();
    gt_Zauberer1stFormAI_Init();
    gt_SpawnZauberer2ndFormNormalWay_Init();
    gt_SpawnZauberer2ndFormSpecial_Init();
    gt_Zauberer2ndFormDeath_Init();
    gt_WarpOutFromBossArena_Init();
    gt_Zauberer2ndFormAI_Init();
    gt_MachinaDePlagamSethealth_Init();
    gt_CreateMachinaDePlagamWarning_Init();
    gt_DestroyMachinaDePlagamWarning_Init();
    gt_HeroattacksMachinaDePlagam_Init();
    gt_MachinaDePlagamEnter_Init();
    gt_MachinaDePlagamLeave_Init();
    gt_MachinaDePlagamDragonDies_Init();
    gt_MachinaDePlagamDies_Init();
    gt_MachinaDePlagamRespawn_Init();
    gt_MachinaDePlagamBackup_Init();
    gt_UnitattacksSremagsi_Init();
    gt_Sremagsisethealth_Init();
    gt_SremagsiLairEnter_Init();
    gt_SremagsiLairExit_Init();
    gt_SremagsiDragonDies_Init();
    gt_SremagsiDies_Init();
    gt_SremagsiRespawn_Init();
    gt_CountPlayersGreaterthan25_Init();
    gt_GuardianSpawn_Init();
    gt_KorlicDies_Init();
    gt_TolicDies_Init();
    gt_MadawcDies_Init();
    gt_NoDragonsinGaurdian_Init();
    gt_GuardianRespawn_Init();
    gt_UnitattacksSyrital_Init();
    gt_SetSyritalHealth_Init();
    gt_CreateSyritalWarning_Init();
    gt_SyritalEnter_Init();
    gt_SyritalLeave_Init();
    gt_SyritalDragonDies_Init();
    gt_SyritalDies_Init();
    gt_SyritalRespawn_Init();
    gt_SpawnEnemies_Init();
    gt_SetupBioDomeWastelandRegions_Init();
    gt_SpawnEnemiesBioDomeWasteland_Init();
    gt_RespawnBioDomeWasteland_Init();
    gt_SetupCretonTranchRegions_Init();
    gt_SpawnEnemiesCretonTrench_Init();
    gt_RespawnCretonTrench_Init();
    gt_SetupCretonRegions_Init();
    gt_SpawnEnemiesCreton_Init();
    gt_RespawnCreton_Init();
    gt_SetVerbotenInfestationRegions_Init();
    gt_SpawnEnemiesVerbotenInfestationPlayer1_Init();
    gt_SpawnEnemiesVerbotenInfestationPlayer2_Init();
    gt_SpawnEnemiesVerbotenInfestationPlayer3_Init();
    gt_SpawnEnemiesVerbotenInfestationPlayer4_Init();
    gt_RespawnVerbotenInfestation_Init();
    gt_SetVerbotenForestRegions_Init();
    gt_RespawnVerbotenForest_Init();
    gt_SetWastelandRegions_Init();
    gt_RespawnWasteland_Init();
    gt_SetRelamyPassRegions_Init();
    gt_RespawnRelamyPass_Init();
    gt_SetRelamyGorgeRegions_Init();
    gt_RespawnRelamyGorge_Init();
    gt_SetRelamyCanyonRegions_Init();
    gt_RespawnRelamyCanyon_Init();
    gt_SetRelamyHillsRegions_Init();
    gt_RespawnRelamyHills_Init();
    gt_SetUndergroundForestRegions_Init();
    gt_RespawnUndergroundForest_Init();
    gt_WastelandWanderControl_Init();
    gt_RelamyPassWanderControl_Init();
    gt_RelamyGorgeWanderControl_Init();
    gt_RelamyCanyonWanderControl_Init();
    gt_RelamyHillsWanderControl_Init();
    gt_CreateWaypointDialog_Init();
    gt_LoadWaypoints_Init();
    gt_PlayerSelectsWaypoint_Init();
    gt_PlayerLeavesWaypoint_Init();
    gt_WaypointDialogButtonClicked_Init();
    gt_DragonEntersWaypoint_Init();
    gt_DragonLeavesWaypoint_Init();
    gt_BDZombieUnitSpawn_Init();
    gt_BDZombieUnitDeath_Init();
    gt_BDCretonUnitSpawn_Init();
    gt_BDCretonUnitDeath_Init();
    gt_BDVerbotenUnitSpawn_Init();
    gt_BDVerbotenUnitDeath_Init();
    gt_BDRelamyUnitSpawn_Init();
    gt_BDRelamyUnitDeath_Init();
    gt_BDWastelandUnitSpawn_Init();
    gt_BDWastelandUnitDeath_Init();
    gt_TeleporttoBioDome_Init();
    gt_TeleporttoCreton_Init();
    gt_SetRPtoWastelands_Init();
    gt_SetRPtoBallan_Init();
    gt_SetRPtoRelamy_Init();
    gt_SetRPtoVerbotenForestWaypoint_Init();
    gt_SetRPtoCreton_Init();
    gt_CreateDragonsNestWarning_Init();
    gt_CreateRelamyPassWarning_Init();
    gt_CreateRelamyCanyonWarning_Init();
    gt_CreateRelamyHillsWarning_Init();
    gt_CreateRelamyGorgeWarning_Init();
    gt_CreateLavaPassWarning_Init();
    gt_CreateVerbotenForestWarning_Init();
    gt_CreateVerbotenInfestationWarning_Init();
    gt_CreateRoadToBallanWarning_Init();
    gt_CreateCretonWarning_Init();
    gt_CreateSragmasiWarning_Init();
    gt_SetUpLocationDialog_Init();
    gt_LocationWasteland_Init();
    gt_LocationDragonsNest_Init();
    gt_LocationSyritalsLair_Init();
    gt_LocationRelamyPass_Init();
    gt_LocationRelamyCanyon_Init();
    gt_LocationRelamyHills_Init();
    gt_LocationVerbotenForest_Init();
    gt_LocationCreton_Init();
    gt_LocationCretonTrench_Init();
    gt_LocationRoadtoBallan_Init();
    gt_LocationBallan_Init();
    gt_WastelandHealingWaterEnter_Init();
    gt_WastelandHealingWaterLeave_Init();
    gt_RelamyPassHealingWaterEnter_Init();
    gt_RelamyPassHealingWaterLeave_Init();
    gt_RelamyCanyonHealingWaterEnter_Init();
    gt_RelamyCanyonHealingWaterLeave_Init();
    gt_VerbotenForestHealingWaterEnter_Init();
    gt_VerbotenForestHealingWaterLeave_Init();
    gt_LavaEnter_Init();
    gt_LavaExit_Init();
    gt_Chaos_Init();
    gt_ChaosHack_Init();
    gt_RevealMap_Init();
    gt_DevilsFlamethrower_Init();
    gt_WingClaws_Init();
    gt_TeleportInfestation_Init();
    gt_IslandofWoecheat_Init();
    gt_VTCount_Init();
    gt_Location_Init();
    gt_ResetQuest_Init();
    gt_TeleportBioDome_Init();
    gt_TeleporttoSpawn_Init();
    gt_DebugTeleZauberer_Init();
    gt_Invincibility_Init();
    gt_SuitUp_Init();
    gt_LevelDebug_Init();
    gt_GetHandle_Init();
    gt_NumberofUnitDeaths_Init();
    gt_Weapons_Init();
    gt_GetMoney_Init();
    gt_ViewEnding_Init();
    gt__50ShadesofGray_Init();
    gt_GetMoney2_Init();
    gt_GetMoney3_Init();
    gt_Fastest_Init();
    gt_MaxStats_Init();
    gt_DropAll_Init();
    gt_SpawnUnit_Init();
    gt_SpawnEnemyUnit_Init();
    gt_SpawnMassEnemyUnit_Init();
    gt_SpawnItem_Init();
    gt_MeleeBuffStacks_Init();
    gt_NumBuffs_Init();
    gt__999Talents_Init();
    gt_PlayerLeaves_Init();
    gt_OpenTalentMenu_Init();
    gt_ResetTalentBuild_Init();
    gt_InventoryTip_Init();
    gt_WeaponTip_Init();
    gt_DragonsNestTip_Init();
    gt_ResetStatsTip_Init();
    gt_ResetTalentsTip_Init();
    gt_ResetQuestsTip_Init();
    gt_HealingWaterTip_Init();
    gt_VespeneGasTip_Init();
    gt_EvolutionsTip_Init();
    gt_ArmorTip_Init();
    gt_SavingLoadingTip_Init();
    gt_MusicCreditsTip_Init();
    gt_AwesomePeopleTip_Init();
    gt_StashLocationSetup_Init();
    gt_LoadShards_Init();
    gt_CreateTimeofdayDialog_Init();
    gt_TimeofDayTick_Init();
    gt_SetUpPlayers_Init();
    gt_SetupRegions_Init();
    gt_SetupTips_Init();
    gt_SetUpTalentTree_Init();
    gt_MakePlayer14anAlly_Init();
    gt_SetUpUnitTypes_Init();
    gt_HideUselessUI_Init();
    gt_EnterDragonsNest_Init();
    gt_LeaveDragonsNest_Init();
    gt_CheckStats_Init();
    gt_ResetStats_Init();
    gt_BasicClaws_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicReturntoNormal_Init();
    gt_PlayIntroTheme_Init();
    gt_EndingCinematic_Init();
    gt_EndingCinematicSaveExitNormal_Init();
    gt_EndingCinematicSaveExitSpecialP1_Init();
    gt_EndingCinematicSaveExitSpecialP2_Init();
    gt_EndingCinematicSaveExitSpecialP3_Init();
    gt_EndingCinematicSaveExitSpecialP4_Init();
    gt_PeriodicallySave_Init();
    gt_IceReborn_Init();
    gt_FireReborn_Init();
    gt_CreateRebornDialog_Init();
    gt_ToggleRebornDialogVisibility_Init();
    gt_RebornStats_Init();
    gt_MakeEndingPlay_Init();
}
// --------------------------------------
void gf_SetupPlayer(int p) {
    int lv_tempAgility;
    int lv_tempDexterity;
    int lv_tempIntelligence;
    int lv_tempStrength;
    int lv_tempVitality;
    int lv_tempReborn;
    int type;
    int i = p-1;
    if ((GameAttributePlayerValue("1", p) == "0001")) {
        type = 0;
    } else if (GameAttributePlayerValue("1", p) == "0002") {
        type = 1;
    }
    // Load banks
    BankLoad("DragonRPGStashBank", p);
    gv_players[i].banks.stashBank = BankLastCreated();
    BankWait(gv_players[i].banks.stashBank);
    BankLoad("DragonRPGCurrencyBank", p);
    gv_players[i].banks.currencyBank = BankLastCreated();
    BankWait(gv_players[i].banks.currencyBank);
    BankLoad("DragonRPGRebornBank", p);
    gv_players[i].banks.rebornBank = BankLastCreated();
    BankWait(gv_players[i].banks.rebornBank);
    CameraPan(p, PointFromId(1), 0.0, -1, 0, false);
    gv_ofHumanPlayers = (gv_ofHumanPlayers + 1);
    if (type == 0) {
        BankLoad("DragonRPGFireBank", p);
    } else if (type == 1) {
        BankLoad("DragonRPGIceBank", p);
    }
    gv_players[i].banks.dragonBank = BankLastCreated();
    BankWait(gv_players[i].banks.dragonBank);
    gv_players[i].verification.dragon = false;
    if (BankKeyExists(gv_players[i].banks.dragonBank, "Dragon", PlayerHandle(p))) {
        TipAlertPanelClear(PlayerGroupSingle(p));
        TechTreeRequirementsEnable(p, false);
        BankValueGetAsUnit(gv_players[i].banks.dragonBank, "Dragon", PlayerHandle(p), p, PointFromId(1), 0.0);
        UnitSelect(BankLastRestoredUnit(), p, true);
        gv_players[i].dragon = BankLastRestoredUnit();
        lib1_gf_SetHeros(p, gv_players[i].dragon);
        gv_players[i].stats.level = FixedToInt(UnitGetPropertyFixed(gv_players[i].dragon, c_unitPropLevel, c_unitPropCurrent));
        gv_players[i].stats.reborn.count = BankValueGetAsInt(gv_players[i].banks.dragonBank, "Reborn Count", PlayerHandle(p));
        lv_tempReborn = BankValueGetAsInt(gv_players[i].banks.dragonBank, "Reborn Count", PlayerHandle(p));
        gv_players[i].stats.attributePoints = BankValueGetAsFixed(gv_players[i].banks.dragonBank, "AP", PlayerHandle(p));
        lv_tempVitality = BankValueGetAsInt(gv_players[i].banks.dragonBank, "Vi", PlayerHandle(p));
        lv_tempStrength = BankValueGetAsInt(gv_players[i].banks.dragonBank, "Str", PlayerHandle(p));
        lv_tempIntelligence = BankValueGetAsInt(gv_players[i].banks.dragonBank, "Int", PlayerHandle(p));
        lv_tempDexterity = BankValueGetAsInt(gv_players[i].banks.dragonBank, "De", PlayerHandle(p));
        lv_tempAgility = BankValueGetAsInt(gv_players[i].banks.dragonBank, "Ag", PlayerHandle(p));
        gv_fireSkin[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, "FS", PlayerHandle(p));
        gv_allSeeingEye[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, "ASE", PlayerHandle(p));
        gv_gameBeat[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, "GB", PlayerHandle(p));
        gv_playerhasseenIntro[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, "Intro", PlayerHandle(p));
        gv_occulusofWarning[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, "OOW", PlayerHandle(p));
        gv_facetofRevenge[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, "FOR", PlayerHandle(p));
        gv_crystalofRebirth[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, "COR", PlayerHandle(p));
        gv_jewelofReturn[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, "JOR", PlayerHandle(p));
        gv_stoneofProtection[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, "SOR", PlayerHandle(p));
        gv_ringofQuickening[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, "ROQ", PlayerHandle(p));
        if (gv_occulusofWarning[i]) {
            if (p == 1) {
                TriggerEnable(gt_OcculusPingPlayer1, true);
            } else if (p == 2) {
                TriggerEnable(gt_OcculusPingPlayer2, true);
            } else if (p == 3) {
                TriggerEnable(gt_OcculusPingPlayer3, true);
            } else if (p == 4) {
                TriggerEnable(gt_OcculusPingPlayer4, true);
            }
        }
        if (gv_fireSkin[i]) {
            UnitBehaviorAddPlayer(gv_players[i].dragon, "FireSkin", p, 1);
        }
        if (gv_allSeeingEye[i]) {
            UnitBehaviorAddPlayer(gv_players[i].dragon, "AllSeeingEye", p, 1);
        }
        while ((lv_tempVitality > 0)) {
            UnitBehaviorAddPlayer(gv_players[i].dragon, "AddVitality", p, 1);
            gv_players[i].stats.vitality = (gv_players[i].stats.vitality + 1);
            lv_tempVitality = (lv_tempVitality - 1);
        }
        while ((lv_tempStrength > 0)) {
            UnitBehaviorAddPlayer(gv_players[i].dragon, "AddStrength", p, 1);
            gv_players[i].stats.strength = (gv_players[i].stats.strength + 1);
            lv_tempStrength = (lv_tempStrength - 1);
        }
        while ((lv_tempIntelligence > 0)) {
            UnitBehaviorAddPlayer(gv_players[i].dragon, "AddIntelligence", p, 1);
            gv_players[i].stats.intelligence = (gv_players[i].stats.intelligence + 1);
            lv_tempIntelligence = (lv_tempIntelligence - 1);
        }
        while ((lv_tempDexterity > 0)) {
            UnitBehaviorAddPlayer(gv_players[i].dragon, "AddDexterity", p, 1);
            gv_players[i].stats.dexterity = (gv_players[i].stats.dexterity + 1);
            lv_tempDexterity = (lv_tempDexterity - 1);
        }
        while ((lv_tempAgility > 0)) {
            UnitBehaviorAddPlayer(gv_players[i].dragon, "AddAgility", p, 1);
            gv_players[i].stats.agility = (gv_players[i].stats.agility + 1);
            lv_tempAgility = (lv_tempAgility - 1);
        }
        while ((lv_tempReborn > 0)) {
            UnitBehaviorAddPlayer(gv_players[i].dragon, "BlessingofDrache", p, 1);
            lv_tempReborn = (lv_tempReborn - 1);
        }
        if ((gv_players[i].stats.attributePoints == 0.0)) {
            UnitAbilityShow(gv_players[i].dragon, "Agility1", false);
            UnitAbilityShow(gv_players[i].dragon, "Dexterity1", false);
            UnitAbilityShow(gv_players[i].dragon, "Intelligence1", false);
            UnitAbilityShow(gv_players[i].dragon, "Strength1", false);
            UnitAbilityShow(gv_players[i].dragon, "Vitality1", false);
        }
        else {
            gv_attributeText[i] = FixedToString(gv_players[i].stats.attributePoints, 0);
            libNtve_gf_SetDialogItemText(gv_players[i].stats.attributeDialog.textBox, StringToText(gv_attributeText[i]), PlayerGroupSingle(p));
        }
        UnitSetPropertyFixed(gv_players[i].dragon, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(gv_players[i].dragon, c_unitPropEnergyPercent, 100.0);
        UnitSetPropertyFixed(gv_players[i].dragon, c_unitPropShieldsPercent, 100.0);
        BankValueSetFromUnit(gv_players[i].banks.dragonBank, "Dragon", PlayerHandle(p), gv_players[i].dragon);
        BankSectionRemove(gv_players[i].banks.dragonBank, "Minerals");
        BankSectionRemove(gv_players[i].banks.dragonBank, "Minerals2");
        BankSectionRemove(gv_players[i].banks.dragonBank, "Vespene");
        TechTreeRequirementsEnable(p, true);
    } else {
        if (type == 0) {
            UnitCreate(1, "BabyDragon", 0, p, PointFromId(1), 270.0);
        } else if (type == 1) {
            UnitCreate(1, "BabyIceDragon", 0, p, PointFromId(1), 270.0);
        }
        UnitSelect(UnitLastCreated(), p, true);
        gv_players[i].dragon = UnitLastCreated();
        BankValueSetFromUnit(gv_players[i].banks.dragonBank, "Dragon", PlayerHandle(p), gv_players[i].dragon);
        gv_players[i].stats.level = FixedToInt(UnitGetPropertyFixed(gv_players[i].dragon, c_unitPropLevel, c_unitPropCurrent));
        gv_players[i].stats.agility = 0;
        BankValueSetFromInt(gv_players[i].banks.dragonBank, "Ag", PlayerHandle(p), gv_players[i].stats.agility);
        gv_players[i].stats.dexterity = 0;
        BankValueSetFromInt(gv_players[i].banks.dragonBank, "De", PlayerHandle(p), gv_players[i].stats.dexterity);
        gv_players[i].stats.intelligence = 0;
        BankValueSetFromInt(gv_players[i].banks.dragonBank, "Int", PlayerHandle(p), gv_players[i].stats.intelligence);
        gv_players[i].stats.strength = 0;
        BankValueSetFromInt(gv_players[i].banks.dragonBank, "Str", PlayerHandle(p), gv_players[i].stats.strength);
        gv_players[i].stats.vitality = 0;
        BankValueSetFromInt(gv_players[i].banks.dragonBank, "Vi", PlayerHandle(p), gv_players[i].stats.vitality);
        gv_players[i].stats.attributePoints = 5.0;
        BankValueSetFromFixed(gv_players[i].banks.dragonBank, "AP", PlayerHandle(p), gv_players[i].stats.attributePoints);
        // DSN
        gv_players[i].verification.dragon = true;
        UnitInventoryCreate(gv_players[i].dragon, "BasicClaws");
        UnitInventoryCreate(gv_players[i].dragon, "BasicSpines");
    }
    PlayerGroupAdd(gv_humanPlayers, p);
    UnitGroupAdd(gv_dragons, gv_players[i].dragon);
    UnitControlGroupAddUnit(p, 1, gv_players[i].dragon);
    if ((UnitGetPropertyFixed(gv_players[i].dragon, c_unitPropLevel, c_unitPropCurrent) == 100.0) && gv_gameBeat[i] ) {
        UnitXPGainEnable(gv_players[i].dragon, null, false);
        HelpPanelAddTip(PlayerGroupSingle(p), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/95517AFD"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/BC7D2081"), StringExternal("Param/Value/FC8D3D85"), "Dragon Songs\\btn-ability-zerg-consume-red.dds");
    }
}
// ------------------------------------------------------------
void gf_InitializePlayers () {
    int p=1;
    int o;
    // Loops through all players to initialize each one.
    for (;p<=4;p+=1) {
        if ((PlayerStatus(p) == c_playerStatusActive) && (PlayerType(p) == c_playerTypeUser)) {
            // Temporary until I handle setup of player.
            gf_SetupPlayer(p);
            libNtve_gf_PauseUnit(gv_players[p-1].dragon, true);
            MeleeSetOption(p, c_meleeOptionSplitResources, false);
            PlayerSetState(p, c_playerStateDisplayGameResult, false);
            // Loop through all players to set ally values for other players.
            o = 1;
            for (;o<=4;o+=1) {
                // Only set ally value if player isn't other.
                if (p != o) {
                    PlayerSetAlliance(p, c_allianceIdTrade, o, false);
                }
            }
            libNtve_gf_SetAlliance(p, 15, libNtve_ge_AllianceSetting_Enemy);
            gf_StatCheck(p);
            gf_LoadStackCounts(p);
            gf_ReapplyBuffs(p);
            gf_ChangeItemsOwner(p);
            gf_LoadSkills(p);
            gf_LoadStash(p);
            UnitSelect(gv_players[p-1].dragon, p, true);
            gv_players[p-1].stats.arena.wins = BankValueGetAsInt(gv_players[p-1].banks.dragonBank, "Wins", PlayerHandle(p));
            gv_players[p-1].stats.arena.losses = BankValueGetAsInt(gv_players[p-1].banks.dragonBank, "Losses", PlayerHandle(p));
        }
    }
}
// ---------------------------------------------------------------
void gf_OcculusPingPlayer(int p) {
    int i = p-1;
    UnitGroupLoopBegin(UnitGroupAlliance(p, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[i].dragon), 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1000));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(p), "PingNumeric0", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
        PingSetScale(PingLastCreated(), 0.2);
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
}
// ----------------------------------------------------------------
bool gf_IsAdmin(int p) {
    int i=0;
    string playerHandle = PlayerHandle(p);
    for (;i<adminCount;i+=1) {
        if (playerHandle == gv_adminHandles[i]) {
            return true;
        }
    }
    return false;
}
// --------------------------------------------------------------
void initMapScript () {
    FakeInitLibs();
    FakeInitGlobals();
    FakeInitCustomAI();
    FakeInitTriggers();
}
// --------------------------------------------------------------
void gf_LoadDragonCheck (int p) {
    // Variable Declarations
    int lv__Bank;
    int lv__Manual;
    int lv_pi;
    // Variable Initialization
    lv_pi = (p - 1);
    // Implementation
    if (!gv_players[lv_pi].verification.dragon) {
        lv__Manual = ((1193 + UnitLevel(gv_players[lv_pi].dragon)) + (ModI(FixedToInt(UnitGetPropertyFixed(gv_players[lv_pi].dragon, c_unitPropXP, c_unitPropCurrent)), 1000) + 1193));
        lv__Bank = BankValueGetAsInt(gv_players[lv_pi].banks.dragonBank, "DSN", PlayerHandle(p));
        BankWait(gv_players[lv_pi].banks.rebornBank);
        if ((lv__Bank != lv__Manual)) {
            
            UIDisplayMessage(PlayerGroupSingle(p), c_messageAreaSubtitle, StringExternal("Param/Value/E00252DC") + IntToText(ModI(FixedToInt(UnitGetPropertyFixed(gv_players[lv_pi].dragon, c_unitPropXP, c_unitPropCurrent)), 1000)));
            //GameOver(p, c_gameOverDefeat, true, true);
            UIDisplayMessage(PlayerGroupSingle(p), c_messageAreaSubtitle, StringExternal("Please let offline know!,  Bypassing security check."));
            gv_players[lv_pi].verification.dragon = true;
        }
        else {
            gv_players[lv_pi].verification.dragon = true;
        }
    }
}