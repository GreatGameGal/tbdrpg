<?xml version="1.0" encoding="utf-8"?>
<TriggerData>
    <Root>
        <Item Type="CustomScript" Id="7782C823"/>
        <Item Type="CustomScript" Id="80BB3487"/>
        <Item Type="CustomScript" Id="520E0FF9"/>
        <Item Type="Category" Id="4FD05F37"/>
    </Root>
    <Element Type="CustomScript" Id="7782C823">
        <ScriptCode>
            //==================================================================================================
            // 
            // Generated AI Script
            // 
            // AI Name: Quest Givers
            // 
            //==================================================================================================
            include &quot;TriggerLibs/natives&quot;
            include &quot;TriggerLibs/AI&quot;
            include &quot;TriggerLibs/Computer&quot;
            //--------------------------------------------------------------------------------------------------
            // Globals
            //--------------------------------------------------------------------------------------------------
            point[17] aiDF9A5388_defGather;
            string[17] aiDF9A5388_customData;
            wave[17] aiDF9A5388_lastWave;
            //--------------------------------------------------------------------------------------------------
            // Attack Wave Wrappers
            //--------------------------------------------------------------------------------------------------
            void aiDF9A5388_wave_enable (int w, int p, bool val) {
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDF9A5388_wave_isEnabled (int w, int p) {
                return false;
            }
            //--------------------------------------------------------------------------------------------------
            unitgroup aiDF9A5388_wave_createdUnits (int w, int p) {
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave aiDF9A5388_wave_createdWave (int w, int p) {
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void aiDF9A5388_wave_run (int w, int p, playergroup target, bool wait) {
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave Sequence
            //--------------------------------------------------------------------------------------------------
            trigger aiDF9A5388_waves_trigger = null;
            int aiDF9A5388_waves_runPlayer;
            playergroup aiDF9A5388_waves_runTarget;
            //--------------------------------------------------------------------------------------------------
            void aiDF9A5388_waves_init () {
                aiDF9A5388_waves_trigger = TriggerCreate(&quot;aiDF9A5388_waves_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            bool aiDF9A5388_waves_runFunc (bool c, bool a) {
                int p = aiDF9A5388_waves_runPlayer;
                playergroup target = aiDF9A5388_waves_runTarget;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void aiDF9A5388_waves_run (int p, playergroup target) {
                aiDF9A5388_waves_runPlayer = p;
                aiDF9A5388_waves_runTarget = PlayerGroupCopy(target);
                TriggerExecute(aiDF9A5388_waves_trigger, false, false);
            }
            //--------------------------------------------------------------------------------------------------
            void aiDF9A5388_waves_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
            }
            //--------------------------------------------------------------------------------------------------
            void aiDF9A5388_waves_stop () {
                TriggerStop(aiDF9A5388_waves_trigger);
            }
            //--------------------------------------------------------------------------------------------------
            // Configuration
            //--------------------------------------------------------------------------------------------------
            void aiDF9A5388_setDefGather (int p, point val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                aiDF9A5388_defGather[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            string aiDF9A5388_getCustomData (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiDF9A5388_customData[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave aiDF9A5388_getLastWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return aiDF9A5388_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            // Start
            //--------------------------------------------------------------------------------------------------
            bool aiDF9A5388_initialized = false;
            //--------------------------------------------------------------------------------------------------
            void aiDF9A5388_start (int p) {
                int init_i;
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (!aiDF9A5388_initialized) {
                    aiDF9A5388_waves_init();
                    for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                        aiDF9A5388_defGather[init_i] = PointFromId(0);
                    }
                    aiDF9A5388_initialized = true;
                }
                AICampaignStart(p);
            }
        </ScriptCode>
        <InitFunc>aiDF9A5388_waves_init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="80BB3487">
        <ScriptCode>
            //==================================================================================================
            // 
            // Generated AI Script
            // 
            // AI Name: Cinematic
            // 
            //==================================================================================================
            include &quot;TriggerLibs/natives&quot;
            include &quot;TriggerLibs/AI&quot;
            include &quot;TriggerLibs/Computer&quot;
            //--------------------------------------------------------------------------------------------------
            // Globals
            //--------------------------------------------------------------------------------------------------
            point[17] ai665651A4_defGather;
            string[17] ai665651A4_customData;
            wave[17] ai665651A4_lastWave;
            //--------------------------------------------------------------------------------------------------
            // Attack Wave Wrappers
            //--------------------------------------------------------------------------------------------------
            void ai665651A4_wave_enable (int w, int p, bool val) {
            }
            //--------------------------------------------------------------------------------------------------
            bool ai665651A4_wave_isEnabled (int w, int p) {
                return false;
            }
            //--------------------------------------------------------------------------------------------------
            unitgroup ai665651A4_wave_createdUnits (int w, int p) {
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave ai665651A4_wave_createdWave (int w, int p) {
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void ai665651A4_wave_run (int w, int p, playergroup target, bool wait) {
            }
            //--------------------------------------------------------------------------------------------------
            // Attack Wave Sequence
            //--------------------------------------------------------------------------------------------------
            trigger ai665651A4_waves_trigger = null;
            int ai665651A4_waves_runPlayer;
            playergroup ai665651A4_waves_runTarget;
            //--------------------------------------------------------------------------------------------------
            void ai665651A4_waves_init () {
                ai665651A4_waves_trigger = TriggerCreate(&quot;ai665651A4_waves_runFunc&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            bool ai665651A4_waves_runFunc (bool c, bool a) {
                int p = ai665651A4_waves_runPlayer;
                playergroup target = ai665651A4_waves_runTarget;
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void ai665651A4_waves_run (int p, playergroup target) {
                ai665651A4_waves_runPlayer = p;
                ai665651A4_waves_runTarget = PlayerGroupCopy(target);
                TriggerExecute(ai665651A4_waves_trigger, false, false);
            }
            //--------------------------------------------------------------------------------------------------
            void ai665651A4_waves_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
            }
            //--------------------------------------------------------------------------------------------------
            void ai665651A4_waves_stop () {
                TriggerStop(ai665651A4_waves_trigger);
            }
            //--------------------------------------------------------------------------------------------------
            // Configuration
            //--------------------------------------------------------------------------------------------------
            void ai665651A4_setDefGather (int p, point val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                ai665651A4_defGather[p] = val;
            }
            //--------------------------------------------------------------------------------------------------
            string ai665651A4_getCustomData (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return ai665651A4_customData[p];
            }
            //--------------------------------------------------------------------------------------------------
            wave ai665651A4_getLastWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                return ai665651A4_lastWave[p];
            }
            //--------------------------------------------------------------------------------------------------
            // Start
            //--------------------------------------------------------------------------------------------------
            bool ai665651A4_initialized = false;
            //--------------------------------------------------------------------------------------------------
            void ai665651A4_start (int p) {
                int init_i;
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (!ai665651A4_initialized) {
                    ai665651A4_waves_init();
                    for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                        ai665651A4_defGather[init_i] = PointFromId(0);
                    }
                    ai665651A4_initialized = true;
                }
                AICampaignStart(p);
            }
        </ScriptCode>
        <InitFunc>ai665651A4_waves_init</InitFunc>
    </Element>
    <Element Type="CustomScript" Id="520E0FF9">
        <ScriptCode>
            //==================================================================================================
            // 
            // Generated Map Script
            // 
            // Name:   Dragon RPG
            // 
            //==================================================================================================
            include &quot;TriggerLibs/NativeLib&quot;
            // \[([a-zA-Z0-9_\(\) \-\+]+)\]
            const int lib1_ge_ColorScheme_Blue = 0;
            const int lib1_ge_ColorScheme_Green = 1;
            const int lib1_ge_ColorScheme_Red = 2;
            const int lib1_ge_PointsPerTier__5 = 0;
            const int lib1_ge_PointsPerTier__10 = 1;
            const int lib1_ge_TalentPrerequisite_None = 0;
            const int lib1_ge_TalentPrerequisite_Left = 1;
            const int lib1_ge_TalentPrerequisite_Up = 2;
            const int lib1_ge_TalentPrerequisite_Right = 3;
            const int lib1_ge_TalentType_Passive = 0;
            const int lib1_ge_TalentType_Ability = 1;
            const int lib1_ge_SaveLoad_Save = 0;
            const int lib1_ge_SaveLoad_Load = 1;
            const int adminCount = 9;
            bool statueSpawned = true;
            bool firstTimeInRelamyCave = true;
            string[adminCount] gv_adminHandles;
            unit[5] gv_manaQuest0Armor;
            unit gv_robus;
            unit gv_illisus;
            unit gv_shadowSeryn;
            int gv_waypointDialog;
            int gv_wastelandDialogButton;
            int gv_relamyDialogButton;
            int gv_verbotenDialogButton;
            int gv_cretonDialogButton;
            int gv_ballanDialogButton;
            int gv_closeWaypointDialogButton;
            int gv_timeofDayDialog;
            int gv_timeofDayDialogLabel;
            text gv_timeofDayDialogLabelText;
            int gv_rebornDialogRebornPointLabel;
            // My manual Definitions
            struct arenaData {
                int wins;
                int losses;
            };
            struct dialogObj {
                // Standard dialogs
                int state;
                int textBox;
                int reward;
                int recommendedLevel;
                int accept;
                int decline;
                string textVal;
                // Reborn dialog
                int[11] pointLabel;
                int[11] pointButton;
                // Talent Dialog
                int button;
            };
            struct rebornData {
                int count;
                int maxHP;
                int maxMP;
                int defense;
                int movementSpeed;
                int attackSpeed;
                int dodge;
                int miss;
                int goldDrop;
                int itemDrop;
                int regen;
                int points;
                dialogObj dialog;
                dialogObj buttonDialog;
            };
            struct questObj {
                int state;
                int objective;
                int kills;
                int progress;
                int textTag;
                int ping;
            };
            struct questData {
                bool talking;
                dialogObj questDialog;
                dialogObj talkDialog;
                dialogObj rewardDialog;
                
                questObj[10] storyQuests;
                questObj[6] manaQuests;
                questObj[2] baseQuests;
                questObj[1] detsefniQuests;
                questObj[1] sergeantListerQuests;
                questObj[1] greedQuests;
                questObj[1] madelineQuests;
                questObj[1] malinQuests;
                questObj[1] ampQuests;
                questObj[1] altossQuests;
                questObj[1] oleumQuests;
                questObj[1] serynQuests;
            };
            struct statData {
                int level;
                int agility;
                int dexterity;
                int intelligence;
                int strength;
                int vitality;
                fixed attributePoints;
                arenaData arena;
                rebornData reborn;
                dialogObj attributeDialog;
            };
            struct skillData {
                int frostSpike;
                int blizzard;
                int subzero;
                int frozenArmour;
                int fireball;
                int fireClaw;
                int flameEgg;
                int inferno;
                int nova;
                bool fireSkin;
                bool allSeeingEye;
                bool warningOcculus;
                bool revengeFacet;
                bool rebithCrystal;
                bool returnJewel;
                bool protectionStone;
                bool quickeningRing;
            };
            struct talentData {
                bool locked;
                bool adding;
                dialogObj talentDialog;
            };
            struct bankData {
                bank stashBank;
                bank rebornBank;
                bank currencyBank;
                bank talentBank;
                bank dragonBank;
                bool accessing;
            };
            struct verificationData {
                bool hrc;
                bool hpc;
                bool dragon;
            };
            struct playerData {
                questData quests;
                statData stats;
                skillData skills;
                bankData banks;
                talentData talents;
                verificationData verification;
                unit dragon;
                bool beatGame;
                bool seenIntro;
                dialogObj locationDialog;
            };
            playerData[5] gv_players;
            //--------------------------------------------------------------------------------------------------
            // Library: Talent Library
            //--------------------------------------------------------------------------------------------------
            // Variable Declarations
            int[17] lib1_gv_buttonIndex;
            int[101][17] lib1_gv_talentTreeButton;
            int[4][5][9][17] lib1_gv_talentTreeButtonIndexTreeColumnRow;
            int[101][17] lib1_gv_talentButtonGlow;
            int[101][17] lib1_gv_talentButtonLabelBackground;
            int[101][17] lib1_gv_talentButtonLabel;
            text[101][17] lib1_gv_tooltipDescriptionRaw;
            int[4][17] lib1_gv_pointsSpentinTree;
            int[101][17] lib1_gv_currentRank;
            int[101][17] lib1_gv_maxRank;
            string[101][17] lib1_gv_talentUpgrade;
            int[101][17] lib1_gv_tree;
            int[101][17] lib1_gv_column;
            int[101][17] lib1_gv_row;
            int[101][17] lib1_gv_talentType;
            text[101][17] lib1_gv_talentName;
            fixed[3][101][17] lib1_gv_multiplier;
            string[101][17] lib1_gv_abilityLink;
            string[101][17] lib1_gv_buttonLink;
            bool[101][17] lib1_gv_prerequisiteComplete;
            int[101][17] lib1_gv_hasPrerequisite;
            int[101][17] lib1_gv_isPrerequisite;
            int[17] lib1_gv_mainTalentDialog;
            int[4][17] lib1_gv_subTalentDialog;
            string[17] lib1_gv_colorScheme;
            int[17] lib1_gv_ofTrees;
            int[17] lib1_gv_ofColumns;
            int[17] lib1_gv_ofRows;
            int[17] lib1_gv_pointsPerTier;
            text[4][17] lib1_gv_talentTreeNames;
            int[17] lib1_gv_spentTalentPoints;
            int[17] lib1_gv_availableTalentPoints;
            int[17] lib1_gv_availablePointsLabel;
            int[17] lib1_gv_availablePointsDialog;
            int[17] lib1_gv_closeTalentTreeButton;
            string[11][17] lib1_gv_talentBuildString;
            unit[5] lib1_gv_heros;
            int[5] lib1_gv_strengthoftheDragonCount;
            int[5] lib1_gv_mindoftheDragonCount;
            int[5] lib1_gv_powerOverwhelmingCount;
            int[5] lib1_gv_rageCount;
            int[5] lib1_gv_vampiricTendenciesCount;
            int[5] lib1_gv_zealCount;
            int[5] lib1_gv_criticalCrepitusCount;
            int[5] lib1_gv_darkDissultoCount;
            int[5] lib1_gv_spikedScalesCount;
            int[5] lib1_gv_retaliationCount;
            int[5] lib1_gv_headshotCount;
            int[5] lib1_gv_stickyShotCount;
            int[5] lib1_gv_dualWieldCount;
            int[5] lib1_gv_greedisGoodCount;
            int[5] lib1_gv_quickLearnerCount;
            int[5] lib1_gv_absorbManaCount;
            int[5] lib1_gv_realmSwitchCount;
            // Function Declarations
            bool lib1_gf_IsTalentButton (int lp_player, int lp_dialogItem);
            bool lib1_gf_TalentTreeisOpen (int lp_player);
            void lib1_gf_UpdateAbilityButtonTooltip (int lp_player, int lp_button, int lp_buttonIndex, int lp_requiredPoints, int lp_tree, string lp_abilityLink, string lp_buttonLink);
            void lib1_gf_UpdatePassiveButtonTooltip (int lp_player, int lp_button, int lp_buttonIndex, int lp_requiredPoints, int lp_tree, text lp_name, text lp_descriptionRaw, int lp_currentRank, fixed lp_multiplier1, fixed lp_multiplier2);
            void lib1_gf_UnlockTalentButton (int lp_player, int lp_tree, int lp_column, int lp_row);
            void lib1_gf_UnlockTalentTier (int lp_player, int lp_tree, int lp_tier);
            void lib1_gf_CreateTalentTree (int lp_player, text lp_title, int lp_colorScheme, int lp_trees, string lp_treeNames, int lp_columns, int lp_rows, int lp_pointsPerTier);
            void lib1_gf_CreateTalentButton (int lp_player, int lp_tree, int lp_column, int lp_row, int lp_talentPrerequisite, string lp_upgradeLink, int lp_talentType, text lp_namePassive, int lp_maxRankPassive, string lp_imagePassive, text lp_tooltipTextPassive, fixed lp_multiplier1Passive, fixed lp_multiplier2Passive, string lp_abilityLinkAbility, string lp_buttonLinkAbility);
            void lib1_gf_ShowHideTalentTree (int lp_player);
            void lib1_gf_GrantTalentPoints (int lp_talentPoints, int lp_player);
            void lib1_gf_DestroyTalentTree (int lp_player);
            void lib1_gf_SaveLoadTalentBuild (int lp_saveLoad, int lp_buildIndex, string lp_bankName, int lp_player);
            void lib1_gf_ResetTalentBuild (int lp_player, int lp_resetto);
            void lib1_gf_SetHeros (int lp_player, unit lp_hero);
            // Trigger Declarations
            trigger lib1_gt_PickTalent;
            trigger lib1_gt_CloseTalent;
            trigger lib1_gt_LoadTalentBank;
            // Library Initialization
            void lib1_InitVariables ();
            //--------------------------------------------------------------------------------------------------
            // Library: Talent Library
            //--------------------------------------------------------------------------------------------------
            // External Library Initialization
            void lib1_InitLibraries () {
                libNtve_InitVariables();
            }
            // Variable Initialization
            bool lib1_InitVariables_completed = false;
            void lib1_InitVariables () {
                int init_i;
                int init_j;
                if (lib1_InitVariables_completed) {
                    return;
                }
                lib1_InitVariables_completed = true;
                for (init_i = 0; init_i &lt;= 100; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 16; init_j += 1) {
                        lib1_gv_talentTreeButton[init_i][init_j] = c_invalidDialogControlId;
                    }
                }
                for (init_i = 0; init_i &lt;= 100; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 16; init_j += 1) {
                        lib1_gv_talentButtonGlow[init_i][init_j] = c_invalidDialogControlId;
                    }
                }
                for (init_i = 0; init_i &lt;= 100; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 16; init_j += 1) {
                        lib1_gv_talentButtonLabelBackground[init_i][init_j] = c_invalidDialogControlId;
                    }
                }
                for (init_i = 0; init_i &lt;= 100; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 16; init_j += 1) {
                        lib1_gv_talentButtonLabel[init_i][init_j] = c_invalidDialogControlId;
                    }
                }
                for (init_i = 0; init_i &lt;= 100; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 16; init_j += 1) {
                        lib1_gv_maxRank[init_i][init_j] = 1;
                    }
                }
                for (init_i = 0; init_i &lt;= 100; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 16; init_j += 1) {
                        lib1_gv_tree[init_i][init_j] = 1;
                    }
                }
                for (init_i = 0; init_i &lt;= 100; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 16; init_j += 1) {
                        lib1_gv_column[init_i][init_j] = 1;
                    }
                }
                for (init_i = 0; init_i &lt;= 100; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 16; init_j += 1) {
                        lib1_gv_row[init_i][init_j] = 1;
                    }
                }
                for (init_i = 0; init_i &lt;= 100; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 16; init_j += 1) {
                        lib1_gv_talentType[init_i][init_j] = lib1_ge_TalentType_Passive;
                    }
                }
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    lib1_gv_mainTalentDialog[init_i] = c_invalidDialogId;
                }
                for (init_i = 0; init_i &lt;= 3; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 16; init_j += 1) {
                        lib1_gv_subTalentDialog[init_i][init_j] = c_invalidDialogId;
                    }
                }
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    lib1_gv_colorScheme[init_i] = &quot;&quot;;
                }
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    lib1_gv_pointsPerTier[init_i] = lib1_ge_PointsPerTier__5;
                }
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    lib1_gv_availablePointsLabel[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    lib1_gv_availablePointsDialog[init_i] = c_invalidDialogId;
                }
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    lib1_gv_closeTalentTreeButton[init_i] = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 10; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 16; init_j += 1) {
                        lib1_gv_talentBuildString[init_i][init_j] = &quot;&quot;;
                    }
                }
            }
            // Presets
            // Functions
            bool lib1_gf_IsTalentButton (int lp_player, int lp_dialogItem) {
                // Variable Declarations
                bool lv_isTalentButton;
                // Variable Initialization
                // Implementation
                IntLoopBegin(1, 100);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    if ((lp_dialogItem == lib1_gv_talentTreeButton[IntLoopCurrent()][lp_player])) {
                        lv_isTalentButton = true;
                        break;
                    }
                }
                IntLoopEnd();
                if ((lv_isTalentButton == true)) {
                    return true;
                }
                else {
                    return false;
                }
            }
            bool lib1_gf_TalentTreeisOpen (int lp_player) {
                // Implementation
                if ((DialogIsVisible(lib1_gv_mainTalentDialog[lp_player], lp_player) == true)) {
                    return true;
                }
                else {
                    return false;
                }
            }
            void lib1_gf_UpdateAbilityButtonTooltip (int lp_player, int lp_button, int lp_buttonIndex, int lp_requiredPoints, int lp_tree, string lp_abilityLink, string lp_buttonLink) {
                // Variable Declarations
                text lv_tooltipName;
                text lv_tooltipRequirement;
                text lv_tooltipRequirementSpacer;
                int lv_prerequisiteIndex;
                text lv_pointsText;
                text lv_tooltipPrerequisite;
                text lv_tooltipDescription;
                bool lv_hasCost;
                text lv_tooltipCost;
                text lv_tooltipCostMinerals;
                text lv_tooltipCostGas;
                text lv_tooltipCostLife;
                text lv_tooltipCostEnergy;
                text lv_tooltipCostCooldown;
                // Variable Initialization
                // Implementation
                lv_tooltipName = (StringExternal(&quot;Param/Value/lib_1_09FBC8F4&quot;) + StringExternal((&quot;Button/Name/&quot; + (lp_buttonLink))) + StringExternal(&quot;Param/Value/lib_1_A533532A&quot;));
                if ((lp_requiredPoints &gt; 0)) {
                    if ((lib1_gv_hasPrerequisite[lp_buttonIndex][lp_player] != 0) &amp;&amp; (lib1_gv_prerequisiteComplete[lp_buttonIndex][lp_player] == false)) {
                        lv_tooltipRequirementSpacer = StringExternal(&quot;Param/Value/lib_1_3D5D601C&quot;);
                    }
                    else {
                        lv_tooltipRequirementSpacer = StringExternal(&quot;Param/Value/lib_1_A045BCC2&quot;);
                    }
                    lv_tooltipRequirement = (StringExternal(&quot;Param/Value/lib_1_31AEA4D1&quot;) + IntToText(lp_requiredPoints) + StringExternal(&quot;Param/Value/lib_1_ADD45111&quot;) + lib1_gv_talentTreeNames[lp_tree][lp_player] + StringExternal(&quot;Param/Value/lib_1_DBF60C3F&quot;) + lv_tooltipRequirementSpacer);
                }
                else {
                    lv_tooltipRequirement = StringToText(&quot;&quot;);
                }
                if ((lib1_gv_hasPrerequisite[lp_buttonIndex][lp_player] != 0) &amp;&amp; (lib1_gv_prerequisiteComplete[lp_buttonIndex][lp_player] == false)) {
                    lv_prerequisiteIndex = lib1_gv_hasPrerequisite[lp_buttonIndex][lp_player];
                    if ((lib1_gv_maxRank[lv_prerequisiteIndex][lp_player] == 1)) {
                        lv_pointsText = StringExternal(&quot;Param/Value/lib_1_02BBAD52&quot;);
                    }
                    else {
                        lv_pointsText = StringExternal(&quot;Param/Value/lib_1_E5D41D76&quot;);
                    }
                    lv_tooltipPrerequisite = (StringExternal(&quot;Param/Value/lib_1_95225FD9&quot;) + IntToText(lib1_gv_maxRank[lv_prerequisiteIndex][lp_player]) + StringExternal(&quot;Param/Value/lib_1_0F2A744B&quot;) + lv_pointsText + StringExternal(&quot;Param/Value/lib_1_C566D5F1&quot;) + lib1_gv_talentName[lv_prerequisiteIndex][lp_player] + StringExternal(&quot;Param/Value/lib_1_3680DFC1&quot;));
                }
                else {
                    lv_tooltipPrerequisite = StringToText(&quot;&quot;);
                }
                if ((StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), &quot;Cost[0].Resource[Vespene]&quot;, lp_player)) &gt; 0)) {
                    lv_tooltipCostGas = (StringExternal(&quot;Param/Value/lib_1_6E372436&quot;) + StringToText(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), &quot;Cost[0].Resource[Vespene]&quot;, lp_player)) + StringExternal(&quot;Param/Value/lib_1_2F05AF2C&quot;));
                    lv_hasCost = true;
                }
                if ((StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), &quot;Cost[0].Vital[Life]&quot;, lp_player)) &gt; 0)) {
                    lv_tooltipCostLife = (StringExternal(&quot;Param/Value/lib_1_64005C61&quot;) + StringToText(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), &quot;Cost[0].Vital[Life]&quot;, lp_player)) + StringExternal(&quot;Param/Value/lib_1_96EE75DB&quot;));
                    lv_hasCost = true;
                }
                if ((StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), &quot;Cost[0].Vital[Energy]&quot;, lp_player)) &gt; 0)) {
                    lv_tooltipCostEnergy = (StringExternal(&quot;Param/Value/lib_1_36A22419&quot;) + StringToText(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), &quot;Cost[0].Vital[Energy]&quot;, lp_player)) + StringExternal(&quot;Param/Value/lib_1_BDAA03F9&quot;));
                    lv_hasCost = true;
                }
                if ((StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), &quot;Cost[0].Cooldown.TimeUse&quot;, lp_player)) &gt; 0)) {
                    lv_tooltipCostCooldown = (StringExternal(&quot;Param/Value/lib_1_28B4F42A&quot;) + StringToText(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), &quot;Cost[0].Cooldown.TimeUse&quot;, lp_player)) + StringExternal(&quot;Param/Value/lib_1_DB16B10F&quot;));
                    lv_hasCost = true;
                }
                if ((lv_hasCost == true)) {
                    lv_tooltipCost = (StringExternal(&quot;Param/Value/lib_1_9F0F1568&quot;) + lv_tooltipCostMinerals + lv_tooltipCostGas + lv_tooltipCostLife + lv_tooltipCostEnergy + lv_tooltipCostCooldown + StringExternal(&quot;Param/Value/lib_1_9C21FB6F&quot;));
                }
                else {
                    lv_tooltipCost = StringToText(&quot;&quot;);
                }
                lv_tooltipDescription = (StringExternal(&quot;Param/Value/lib_1_04F5E258&quot;) + lv_tooltipCost + StringExternal((&quot;Button/Tooltip/&quot; + (lp_buttonLink))) + StringExternal(&quot;Param/Value/lib_1_3E98BEAA&quot;));
                libNtve_gf_SetDialogItemTooltip(lp_button, (lv_tooltipName + lv_tooltipRequirement + lv_tooltipPrerequisite + lv_tooltipDescription), PlayerGroupAll());
            }
            void lib1_gf_UpdatePassiveButtonTooltip (int lp_player, int lp_button, int lp_buttonIndex, int lp_requiredPoints, int lp_tree, text lp_name, text lp_descriptionRaw, int lp_currentRank, fixed lp_multiplier1, fixed lp_multiplier2) {
                // Variable Declarations
                text lv_tooltipName;
                text lv_tooltipRequirement;
                text lv_tooltipRequirementSpacer;
                int lv_prerequisiteIndex;
                text lv_pointsText;
                text lv_tooltipPrerequisite;
                text lv_tooltipDescription;
                int lv_rankMultiplier;
                // Variable Initialization
                // Implementation
                lv_tooltipName = (StringExternal(&quot;Param/Value/lib_1_20CC4B21&quot;) + lp_name + StringExternal(&quot;Param/Value/lib_1_269556FE&quot;));
                if ((lp_requiredPoints &gt; 0)) {
                    if ((lib1_gv_hasPrerequisite[lp_buttonIndex][lp_player] != 0) &amp;&amp; (lib1_gv_prerequisiteComplete[lp_buttonIndex][lp_player] == false)) {
                        lv_tooltipRequirementSpacer = StringExternal(&quot;Param/Value/lib_1_A01F23F2&quot;);
                    }
                    else {
                        lv_tooltipRequirementSpacer = StringExternal(&quot;Param/Value/lib_1_9A874965&quot;);
                    }
                    lv_tooltipRequirement = (StringExternal(&quot;Param/Value/lib_1_7CB7BFBB&quot;) + IntToText(lp_requiredPoints) + StringExternal(&quot;Param/Value/lib_1_61D82CE4&quot;) + lib1_gv_talentTreeNames[lp_tree][lp_player] + StringExternal(&quot;Param/Value/lib_1_6BED7575&quot;) + lv_tooltipRequirementSpacer);
                }
                else {
                    lv_tooltipRequirement = StringToText(&quot;&quot;);
                }
                if ((lib1_gv_hasPrerequisite[lp_buttonIndex][lp_player] != 0) &amp;&amp; (lib1_gv_prerequisiteComplete[lp_buttonIndex][lp_player] == false)) {
                    lv_prerequisiteIndex = lib1_gv_hasPrerequisite[lp_buttonIndex][lp_player];
                    if ((lib1_gv_maxRank[lv_prerequisiteIndex][lp_player] == 1)) {
                        lv_pointsText = StringExternal(&quot;Param/Value/lib_1_B9826448&quot;);
                    }
                    else {
                        lv_pointsText = StringExternal(&quot;Param/Value/lib_1_E3F15863&quot;);
                    }
                    lv_tooltipPrerequisite = (StringExternal(&quot;Param/Value/lib_1_B9887A7A&quot;) + IntToText(5) + StringExternal(&quot;Param/Value/lib_1_650F531F&quot;) + lv_pointsText + StringExternal(&quot;Param/Value/lib_1_583A97DF&quot;) + lib1_gv_talentName[lv_prerequisiteIndex][lp_player] + StringExternal(&quot;Param/Value/lib_1_4A56FEC3&quot;));
                }
                else {
                    lv_tooltipPrerequisite = StringToText(&quot;&quot;);
                }
                if ((lp_currentRank &gt; 0)) {
                    lv_rankMultiplier = lp_currentRank;
                }
                else {
                    lv_rankMultiplier = 1;
                }
                lv_tooltipDescription = TextReplaceWord(lp_descriptionRaw, StringExternal(&quot;Param/Value/lib_1_6D51BF3D&quot;), FixedToText((lp_multiplier1 * IntToFixed(lv_rankMultiplier)), 1), c_stringReplaceAll, c_stringNoCase);
                lv_tooltipDescription = TextReplaceWord(lv_tooltipDescription, StringExternal(&quot;Param/Value/lib_1_2F659930&quot;), FixedToText((lp_multiplier2 * IntToFixed(lv_rankMultiplier)), 1), c_stringReplaceAll, c_stringNoCase);
                lv_tooltipDescription = (StringExternal(&quot;Param/Value/lib_1_3AE2BD72&quot;) + lv_tooltipDescription + StringExternal(&quot;Param/Value/lib_1_1ECE9A68&quot;));
                libNtve_gf_SetDialogItemTooltip(lp_button, (lv_tooltipName + lv_tooltipRequirement + lv_tooltipPrerequisite + lv_tooltipDescription), PlayerGroupAll());
            }
            void lib1_gf_UnlockTalentButton (int lp_player, int lp_tree, int lp_column, int lp_row) {
                int autoC6E66CC3_val;
                // Variable Declarations
                int lv_buttonIndex;
                // Variable Initialization
                // Implementation
                lv_buttonIndex = lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][lp_column][lp_row][lp_player];
                if ((lib1_gv_talentTreeButton[lv_buttonIndex][lp_player] != c_invalidDialogControlId) &amp;&amp; (lib1_gv_currentRank[lv_buttonIndex][lp_player] &lt; lib1_gv_maxRank[lv_buttonIndex][lp_player])) {
                    if (((lib1_gv_hasPrerequisite[lv_buttonIndex][lp_player] == 0) || (lib1_gv_prerequisiteComplete[lv_buttonIndex][lp_player] == true))) {
                        DialogControlSetEnabled(lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], PlayerGroupAll(), true);
                        DialogControlSetVisible(lib1_gv_talentButtonGlow[lv_buttonIndex][lp_player], PlayerGroupAll(), true);
                        DialogControlSetVisible(lib1_gv_talentButtonLabelBackground[lv_buttonIndex][lp_player], PlayerGroupAll(), true);
                        DialogControlSetVisible(lib1_gv_talentButtonLabel[lv_buttonIndex][lp_player], PlayerGroupAll(), true);
                    }
                    autoC6E66CC3_val = lib1_gv_talentType[lv_buttonIndex][lp_player];
                    if (autoC6E66CC3_val == lib1_ge_TalentType_Ability) {
                        lib1_gf_UpdateAbilityButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], lv_buttonIndex, 0, lp_tree, lib1_gv_abilityLink[lv_buttonIndex][lp_player], lib1_gv_buttonLink[lv_buttonIndex][lp_player]);
                    }
                    else if (autoC6E66CC3_val == lib1_ge_TalentType_Passive) {
                        lib1_gf_UpdatePassiveButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], lv_buttonIndex, 0, lp_tree, lib1_gv_talentName[lv_buttonIndex][lp_player], lib1_gv_tooltipDescriptionRaw[lv_buttonIndex][lp_player], lib1_gv_currentRank[lv_buttonIndex][lp_player], lib1_gv_multiplier[1][lv_buttonIndex][lp_player], lib1_gv_multiplier[2][lv_buttonIndex][lp_player]);
                    }
                    else {
                    }
                }
            }
            void lib1_gf_UnlockTalentTier (int lp_player, int lp_tree, int lp_tier) {
                // Variable Declarations
                int lv_buttonIndex;
                // Variable Initialization
                // Implementation
                IntLoopBegin(1, lib1_gv_ofColumns[lp_player]);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    lib1_gf_UnlockTalentButton(lp_player, lp_tree, IntLoopCurrent(), lp_tier);
                }
                IntLoopEnd();
            }
            void lib1_gf_CreateTalentTree (int lp_player, text lp_title, int lp_colorScheme, int lp_trees, string lp_treeNames, int lp_columns, int lp_rows, int lp_pointsPerTier) {
                int auto3120DF8A_val;
                int auto899F399B_val;
                // Variable Declarations
                int lv_mainDialogHeight;
                int lv_mainDialogWidth;
                string lv_mainDialogIMG;
                string lv_titleFrameIMG;
                string lv_dividerFrameIMG;
                string lv_buttonNormalIMG;
                string lv_buttonHoverIMG;
                string lv_treeNameString;
                text lv_treeName1;
                text lv_treeName2;
                text lv_treeName3;
                // Variable Initialization
                lv_treeNameString = &quot;&quot;;
                // Implementation
                lib1_gv_ofTrees[lp_player] = lp_trees;
                lib1_gv_ofColumns[lp_player] = lp_columns;
                lib1_gv_ofRows[lp_player] = lp_rows;
                lib1_gv_buttonIndex[lp_player] = 0;
                lib1_gv_pointsPerTier[lp_player] = lp_pointsPerTier;
                auto3120DF8A_val = lp_colorScheme;
                if (auto3120DF8A_val == lib1_ge_ColorScheme_Blue) {
                    lib1_gv_colorScheme[lp_player] = &quot;Blue&quot;;
                    lv_mainDialogIMG = &quot;Assets\\Textures\\ui_glue_dropdownmenuframe_protoss.dds&quot;;
                    lv_titleFrameIMG = &quot;Assets\\Textures\\ui_help_frame_tips_new_protoss.dds&quot;;
                    lv_dividerFrameIMG = &quot;Assets\\Textures\\ui_tooltip_frame_protoss.dds&quot;;
                    lv_buttonNormalIMG = &quot;Assets\\Textures\\ui_ingame_resourcesharing_button_x_normalpressed_protoss.dds&quot;;
                    lv_buttonHoverIMG = &quot;Assets\\Textures\\ui_ingame_resourcesharing_button_x_normaloverpressedover_protoss.dds&quot;;
                }
                else if (auto3120DF8A_val == lib1_ge_ColorScheme_Green) {
                    lib1_gv_colorScheme[lp_player] = &quot;Green&quot;;
                    lv_mainDialogIMG = &quot;Assets\\Textures\\ui_glue_dropdownmenuframe_terran.dds&quot;;
                    lv_titleFrameIMG = &quot;Assets\\Textures\\ui_help_frame_tips_new_terran.dds&quot;;
                    lv_dividerFrameIMG = &quot;Assets\\Textures\\ui_tooltip_frame_terran.dds&quot;;
                    lv_buttonNormalIMG = &quot;Assets\\Textures\\ui_ingame_resourcesharing_button_x_normalpressed.dds&quot;;
                    lv_buttonHoverIMG = &quot;Assets\\Textures\\ui_ingame_resourcesharing_button_x_normaloverpressedover.dds&quot;;
                }
                else if (auto3120DF8A_val == lib1_ge_ColorScheme_Red) {
                    lib1_gv_colorScheme[lp_player] = &quot;Red&quot;;
                    lv_mainDialogIMG = &quot;Assets\\Textures\\ui_glue_dropdownmenuframe_zerg.dds&quot;;
                    lv_titleFrameIMG = &quot;Assets\\Textures\\ui_help_frame_tips_new_zerg.dds&quot;;
                    lv_dividerFrameIMG = &quot;Assets\\Textures\\ui_tooltip_frame_zerg.dds&quot;;
                    lv_buttonNormalIMG = &quot;Assets\\Textures\\ui_button_generic_normalpressed_zerg.dds&quot;;
                    lv_buttonHoverIMG = &quot;Assets\\Textures\\ui_button_generic_normaloverpressedover_zerg.dds&quot;;
                    lv_buttonNormalIMG = &quot;Assets\\Textures\\ui_ingame_resourcesharing_button_x_normalpressed_zerg.dds&quot;;
                    lv_buttonHoverIMG = &quot;Assets\\Textures\\ui_ingame_resourcesharing_button_x_normaloverpressedover_zerg.dds&quot;;
                }
                else {
                }
                lv_mainDialogHeight = (335 + (100 * (lp_rows - 1)));
                lv_mainDialogWidth = (450 * lp_trees);
                DialogCreate(lv_mainDialogWidth, lv_mainDialogHeight, c_anchorCenter, 0, 0, true);
                lib1_gv_mainTalentDialog[lp_player] = DialogLastCreated();
                DialogSetImageVisible(lib1_gv_mainTalentDialog[lp_player], false);
                libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 0, 0, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), lv_mainDialogIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
                DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
                libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 325, 100, c_anchorTop, 0, 12, StringToText(&quot;&quot;), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemLabel(lib1_gv_mainTalentDialog[lp_player], 325, 100, c_anchorTop, 0, 15, lp_title, Color(100,100,100), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;HelpMenuDialogTitle&quot;, PlayerGroupAll());
                libNtve_gf_CreateDialogItemButton(lib1_gv_mainTalentDialog[lp_player], 35, 35, c_anchorTopRight, 22, 5, StringToText(&quot;&quot;), StringToText(&quot;&quot;), &quot;&quot;);
                lib1_gv_closeTalentTreeButton[lp_player] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemImage(lib1_gv_closeTalentTreeButton[lp_player], lv_buttonNormalIMG, PlayerGroupAll());
                libNtve_gf_SetDialogItemImageType(lib1_gv_closeTalentTreeButton[lp_player], c_triggerImageTypeNormal, PlayerGroupAll());
                libNtve_gf_SetDialogItemImage2(lib1_gv_closeTalentTreeButton[lp_player], lv_buttonHoverIMG, PlayerGroupAll());
                DialogCreate(110, 110, c_anchorCenter, 0, 0, true);
                lib1_gv_availablePointsDialog[lp_player] = DialogLastCreated();
                DialogSetPositionRelative(lib1_gv_availablePointsDialog[lp_player], c_anchorBottomRight, lib1_gv_mainTalentDialog[lp_player], c_anchorTopLeft, 70, 60);
                DialogSetImageVisible(lib1_gv_availablePointsDialog[lp_player], false);
                libNtve_gf_CreateDialogItemImage(lib1_gv_availablePointsDialog[lp_player], 1, 1, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), lv_dividerFrameIMG, c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
                DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
                libNtve_gf_CreateDialogItemLabel(lib1_gv_availablePointsDialog[lp_player], 100, 100, c_anchorTop, 0, -12, IntToText(lib1_gv_availableTalentPoints[lp_player]), Color(100,100,100), false, 2.0);
                lib1_gv_availablePointsLabel[lp_player] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemStyle(lib1_gv_availablePointsLabel[lp_player], &quot;HelpMenuDialogTitle&quot;, PlayerGroupAll());
                libNtve_gf_CreateDialogItemLabel(lib1_gv_availablePointsDialog[lp_player], 100, 100, c_anchorTop, 0, 55, StringExternal(&quot;Param/Value/lib_1_35BCD81C&quot;), Color(100,100,100), false, 2.0);
                lv_treeNameString = lp_treeNames;
                lv_treeNameString = StringReplaceWord(lv_treeNameString, &quot; &quot;, &quot;_&quot;, c_stringReplaceAll, c_stringNoCase);
                lv_treeNameString = StringReplaceWord(lv_treeNameString, &quot;,&quot;, &quot; &quot;, c_stringReplaceAll, c_stringNoCase);
                lv_treeName1 = StringToText(StringReplaceWord(StringWord(lv_treeNameString, 1), &quot;_&quot;, &quot; &quot;, c_stringReplaceAll, c_stringNoCase));
                lv_treeName2 = StringToText(StringReplaceWord(StringWord(lv_treeNameString, 2), &quot;_&quot;, &quot; &quot;, c_stringReplaceAll, c_stringNoCase));
                lv_treeName3 = StringToText(StringReplaceWord(StringWord(lv_treeNameString, 3), &quot;_&quot;, &quot; &quot;, c_stringReplaceAll, c_stringNoCase));
                lib1_gv_talentTreeNames[1][lp_player] = lv_treeName1;
                lib1_gv_talentTreeNames[2][lp_player] = lv_treeName2;
                lib1_gv_talentTreeNames[3][lp_player] = lv_treeName3;
                auto899F399B_val = lp_trees;
                if (auto899F399B_val == 1) {
                    libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 0, 110, StringToText(&quot;&quot;), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_CreateDialogItemLabel(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 0, 113, lv_treeName1, Color(100,100,100), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;HelpMenuDialogTitle&quot;, PlayerGroupAll());
                    DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
                    lib1_gv_subTalentDialog[1][lp_player] = DialogLastCreated();
                    DialogSetPositionRelative(lib1_gv_subTalentDialog[1][lp_player], c_anchorTop, lib1_gv_mainTalentDialog[lp_player], c_anchorTop, 0, 200);
                    DialogSetImageVisible(lib1_gv_subTalentDialog[1][lp_player], false);
                }
                else if (auto899F399B_val == 2) {
                    libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, -225, 110, StringToText(&quot;&quot;), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_CreateDialogItemLabel(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, -225, 113, lv_treeName1, Color(100,100,100), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;HelpMenuDialogTitle&quot;, PlayerGroupAll());
                    libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 225, 110, StringToText(&quot;&quot;), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_CreateDialogItemLabel(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 225, 113, lv_treeName2, Color(100,100,100), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;HelpMenuDialogTitle&quot;, PlayerGroupAll());
                    libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 17, (100 * lp_rows), c_anchorTop, 0, 200, StringToText(&quot;&quot;), lv_dividerFrameIMG, c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
                    DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
                    lib1_gv_subTalentDialog[1][lp_player] = DialogLastCreated();
                    DialogSetPositionRelative(lib1_gv_subTalentDialog[1][lp_player], c_anchorTop, lib1_gv_mainTalentDialog[lp_player], c_anchorTop, -225, 200);
                    DialogSetImageVisible(lib1_gv_subTalentDialog[1][lp_player], false);
                    DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
                    lib1_gv_subTalentDialog[2][lp_player] = DialogLastCreated();
                    DialogSetPositionRelative(lib1_gv_subTalentDialog[2][lp_player], c_anchorTop, lib1_gv_mainTalentDialog[lp_player], c_anchorTop, 225, 200);
                    DialogSetImageVisible(lib1_gv_subTalentDialog[2][lp_player], false);
                }
                else if (auto899F399B_val == 3) {
                    libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, -450, 110, StringToText(&quot;&quot;), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_CreateDialogItemLabel(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, -450, 113, lv_treeName1, Color(100,100,100), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;HelpMenuDialogTitle&quot;, PlayerGroupAll());
                    libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 0, 110, StringToText(&quot;&quot;), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_CreateDialogItemLabel(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 0, 113, lv_treeName2, Color(100,100,100), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;HelpMenuDialogTitle&quot;, PlayerGroupAll());
                    libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 450, 110, StringToText(&quot;&quot;), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_CreateDialogItemLabel(lib1_gv_mainTalentDialog[lp_player], 275, 90, c_anchorTop, 450, 113, lv_treeName3, Color(100,100,100), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;HelpMenuDialogTitle&quot;, PlayerGroupAll());
                    libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 17, (100 * lp_rows), c_anchorTop, -225, 200, StringToText(&quot;&quot;), lv_dividerFrameIMG, c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_mainTalentDialog[lp_player], 17, (100 * lp_rows), c_anchorTop, 225, 200, StringToText(&quot;&quot;), lv_dividerFrameIMG, c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
                    DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
                    lib1_gv_subTalentDialog[1][lp_player] = DialogLastCreated();
                    DialogSetPositionRelative(lib1_gv_subTalentDialog[1][lp_player], c_anchorTop, lib1_gv_mainTalentDialog[lp_player], c_anchorTop, -450, 200);
                    DialogSetImageVisible(lib1_gv_subTalentDialog[1][lp_player], false);
                    DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
                    lib1_gv_subTalentDialog[2][lp_player] = DialogLastCreated();
                    DialogSetPositionRelative(lib1_gv_subTalentDialog[2][lp_player], c_anchorTop, lib1_gv_mainTalentDialog[lp_player], c_anchorTop, 0, 200);
                    DialogSetImageVisible(lib1_gv_subTalentDialog[2][lp_player], false);
                    DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
                    lib1_gv_subTalentDialog[3][lp_player] = DialogLastCreated();
                    DialogSetPositionRelative(lib1_gv_subTalentDialog[3][lp_player], c_anchorTop, lib1_gv_mainTalentDialog[lp_player], c_anchorTop, 450, 200);
                    DialogSetImageVisible(lib1_gv_subTalentDialog[3][lp_player], false);
                }
                else {
                }
            }
            void lib1_gf_CreateTalentButton (int lp_player, int lp_tree, int lp_column, int lp_row, int lp_talentPrerequisite, string lp_upgradeLink, int lp_talentType, text lp_namePassive, int lp_maxRankPassive, string lp_imagePassive, text lp_tooltipTextPassive, fixed lp_multiplier1Passive, fixed lp_multiplier2Passive, string lp_abilityLinkAbility, string lp_buttonLinkAbility) {
                string auto03D269F5_val;
                int autoD4433183_val;
                int auto4FDECC6C_val;
                int auto6D8F3512_val;
                int auto9A455375_val;
                // Variable Declarations
                string lv_buttonGlowIMG;
                string lv_buttonNormalIMG;
                string lv_buttonHoverIMG;
                string lv_buttonLabelIMG;
                int lv_xOffset;
                int lv_yOffset;
                string lv_talentIMG;
                string lv_talentIMGString;
                int lv_requiredPoints;
                // Variable Initialization
                lv_talentIMGString = &quot;&quot;;
                // Implementation
                lib1_gv_buttonIndex[lp_player] += 1;
                lib1_gv_tree[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_tree;
                lib1_gv_column[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_column;
                lib1_gv_row[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_row;
                lib1_gv_talentUpgrade[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_upgradeLink;
                lib1_gv_talentType[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_talentType;
                auto03D269F5_val = lib1_gv_colorScheme[lp_player];
                if (auto03D269F5_val == &quot;Blue&quot;) {
                    lv_buttonGlowIMG = &quot;Assets\\Textures\\ui_research_button_protoss_researched.dds&quot;;
                    lv_buttonNormalIMG = &quot;Assets\\Textures\\ui_button_generic_normalpressed_protoss.dds&quot;;
                    lv_buttonHoverIMG = &quot;Assets\\Textures\\ui_button_generic_normaloverpressedover_protoss.dds&quot;;
                    lv_buttonLabelIMG = &quot;Assets\\Textures\\ui_tooltip_frame_protoss.dds&quot;;
                }
                else if (auto03D269F5_val == &quot;Green&quot;) {
                    lv_buttonGlowIMG = &quot;Assets\\Textures\\ui_ingame_tipsbutton_glow.dds&quot;;
                    lv_buttonNormalIMG = &quot;Assets\\Textures\\ui_button_generic_normalpressed_terran.dds&quot;;
                    lv_buttonHoverIMG = &quot;Assets\\Textures\\ui_button_generic_normaloverpressedover_terran.dds&quot;;
                    lv_buttonLabelIMG = &quot;Assets\\Textures\\ui_tooltip_frame_terran.dds&quot;;
                }
                else if (auto03D269F5_val == &quot;Red&quot;) {
                    lv_buttonGlowIMG = &quot;Assets\\Textures\\ui_research_button_zerg_researched.dds&quot;;
                    lv_buttonNormalIMG = &quot;Assets\\Textures\\ui_button_generic_normalpressed_zerg.dds&quot;;
                    lv_buttonHoverIMG = &quot;Assets\\Textures\\ui_button_generic_normaloverpressedover_zerg.dds&quot;;
                    lv_buttonLabelIMG = &quot;Assets\\Textures\\ui_tooltip_frame_zerg.dds&quot;;
                }
                else {
                }
                if ((lib1_gv_talentTreeButton[lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][lp_column][lp_row][lp_player]][lp_player] != c_invalidDialogControlId)) {
                    libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal(&quot;Param/Value/lib_1_F0C5D28C&quot;), SoundLink(&quot;Alert_TerranBuildError&quot;, -1));
                }
                autoD4433183_val = lib1_gv_ofColumns[lp_player];
                if (autoD4433183_val == 1) {
                    lv_xOffset = 0;
                }
                else if (autoD4433183_val == 2) {
                    lv_xOffset = -50;
                }
                else if (autoD4433183_val == 3) {
                    lv_xOffset = -100;
                }
                else if (autoD4433183_val == 4) {
                    lv_xOffset = -150;
                }
                else {
                }
                lv_xOffset = (lv_xOffset + (100 * (lp_column - 1)));
                lv_yOffset = (25 + (100 * (lp_row - 1)));
                libNtve_gf_CreateDialogItemButton(lib1_gv_subTalentDialog[lp_tree][lp_player], 75, 75, c_anchorTop, lv_xOffset, lv_yOffset, StringToText(&quot;&quot;), StringToText(&quot;&quot;), &quot;&quot;);
                lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player] = DialogControlLastCreated();
                lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][lp_column][lp_row][lp_player] = lib1_gv_buttonIndex[lp_player];
                libNtve_gf_SetDialogItemImage(lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], lv_buttonNormalIMG, PlayerGroupAll());
                libNtve_gf_SetDialogItemImageType(lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_triggerImageTypeBorder, PlayerGroupAll());
                libNtve_gf_SetDialogItemImage2(lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], lv_buttonHoverIMG, PlayerGroupAll());
                auto4FDECC6C_val = lp_talentPrerequisite;
                if (auto4FDECC6C_val == lib1_ge_TalentPrerequisite_Up) {
                    lib1_gv_hasPrerequisite[lib1_gv_buttonIndex[lp_player]][lp_player] = lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][lp_column][(lp_row - 1)][lp_player];
                    lib1_gv_isPrerequisite[lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][lp_column][(lp_row - 1)][lp_player]][lp_player] = lib1_gv_buttonIndex[lp_player];
                    lib1_gv_prerequisiteComplete[lib1_gv_buttonIndex[lp_player]][lp_player] = false;
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 20, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_tail.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -20, -55);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_head2.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -20, -43);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 20, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_tail.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 0, -55);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_head2.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 0, -43);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 20, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_tail.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 20, -55);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_head2.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 20, -43);
                }
                else if (auto4FDECC6C_val == lib1_ge_TalentPrerequisite_Left) {
                    lib1_gv_hasPrerequisite[lib1_gv_buttonIndex[lp_player]][lp_player] = lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][(lp_column - 1)][lp_row][lp_player];
                    lib1_gv_isPrerequisite[lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][(lp_column - 1)][lp_row][lp_player]][lp_player] = lib1_gv_buttonIndex[lp_player];
                    lib1_gv_prerequisiteComplete[lib1_gv_buttonIndex[lp_player]][lp_player] = false;
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 20, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_tail90cw.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -54, -20);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_head2.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 270, PlayerGroupAll());
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -41, -20);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 20, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_tail90cw.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -54, 0);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_head2.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 270, PlayerGroupAll());
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -41, 0);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 20, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_tail90cw.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -54, 20);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_head2.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 270, PlayerGroupAll());
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, -41, 20);
                }
                else if (auto4FDECC6C_val == lib1_ge_TalentPrerequisite_Right) {
                    lib1_gv_hasPrerequisite[lib1_gv_buttonIndex[lp_player]][lp_player] = lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][(lp_column + 1)][lp_row][lp_player];
                    lib1_gv_isPrerequisite[lib1_gv_talentTreeButtonIndexTreeColumnRow[lp_tree][(lp_column + 1)][lp_row][lp_player]][lp_player] = lib1_gv_buttonIndex[lp_player];
                    lib1_gv_prerequisiteComplete[lib1_gv_buttonIndex[lp_player]][lp_player] = false;
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 20, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_tail90cw.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 54, -20);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_head2.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 90, PlayerGroupAll());
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 41, -20);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 20, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_tail90cw.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 54, 0);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_head2.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 90, PlayerGroupAll());
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 41, 0);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 20, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_tail90cw.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 54, 20);
                    libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 15, 15, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), &quot;Assets\\Textures\\ui_techtree_arrow_head2.dds&quot;, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 90, PlayerGroupAll());
                    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 499, PlayerGroupAll());
                    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 41, 20);
                }
                else {
                }
                auto6D8F3512_val = lib1_gv_pointsPerTier[lp_player];
                if (auto6D8F3512_val == lib1_ge_PointsPerTier__5) {
                    lv_requiredPoints = (5 * (lp_row - 1));
                }
                else if (auto6D8F3512_val == lib1_ge_PointsPerTier__10) {
                    lv_requiredPoints = (10 * (lp_row - 1));
                }
                else {
                }
                auto9A455375_val = lp_talentType;
                if (auto9A455375_val == lib1_ge_TalentType_Ability) {
                    lib1_gf_UpdateAbilityButtonTooltip(lp_player, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], lib1_gv_buttonIndex[lp_player], lv_requiredPoints, lp_tree, lp_abilityLinkAbility, lp_buttonLinkAbility);
                    lv_talentIMGString = CatalogFieldValueGet(c_gameCatalogButton, (lp_buttonLinkAbility), &quot;Icon&quot;, lp_player);
                    lv_talentIMG = lv_talentIMGString;
                    lib1_gv_maxRank[lib1_gv_buttonIndex[lp_player]][lp_player] = 1;
                    lib1_gv_talentName[lib1_gv_buttonIndex[lp_player]][lp_player] = StringExternal((&quot;Button/Name/&quot; + (lp_buttonLinkAbility)));
                    lib1_gv_abilityLink[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_abilityLinkAbility;
                    lib1_gv_buttonLink[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_buttonLinkAbility;
                }
                else if (auto9A455375_val == lib1_ge_TalentType_Passive) {
                    lib1_gf_UpdatePassiveButtonTooltip(lp_player, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], lib1_gv_buttonIndex[lp_player], lv_requiredPoints, lp_tree, lp_namePassive, lp_tooltipTextPassive, 0, lp_multiplier1Passive, lp_multiplier2Passive);
                    lv_talentIMG = lp_imagePassive;
                    lib1_gv_maxRank[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_maxRankPassive;
                    lib1_gv_talentName[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_namePassive;
                    lib1_gv_tooltipDescriptionRaw[lib1_gv_buttonIndex[lp_player]][lp_player] = lp_tooltipTextPassive;
                    lib1_gv_multiplier[1][lib1_gv_buttonIndex[lp_player]][lp_player] = lp_multiplier1Passive;
                    lib1_gv_multiplier[2][lib1_gv_buttonIndex[lp_player]][lp_player] = lp_multiplier2Passive;
                }
                else {
                }
                libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 67, 67, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), lv_talentIMG, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 0, 0);
                libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 130, 130, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), lv_buttonGlowIMG, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                lib1_gv_talentButtonGlow[lib1_gv_buttonIndex[lp_player]][lp_player] = DialogControlLastCreated();
                DialogControlSetPositionRelative(lib1_gv_talentButtonGlow[lib1_gv_buttonIndex[lp_player]][lp_player], PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 0, -2);
                libNtve_gf_SetDialogItemRenderPriority(lib1_gv_talentButtonGlow[lib1_gv_buttonIndex[lp_player]][lp_player], 500, PlayerGroupAll());
                libNtve_gf_CreateDialogItemImage(lib1_gv_subTalentDialog[lp_tree][lp_player], 60, 35, c_anchorCenter, 0, 0, StringToText(&quot;&quot;), lv_buttonLabelIMG, c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
                lib1_gv_talentButtonLabelBackground[lib1_gv_buttonIndex[lp_player]][lp_player] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemRenderPriority(lib1_gv_talentButtonLabelBackground[lib1_gv_buttonIndex[lp_player]][lp_player], 520, PlayerGroupAll());
                DialogControlSetPositionRelative(lib1_gv_talentButtonLabelBackground[lib1_gv_buttonIndex[lp_player]][lp_player], PlayerGroupAll(), c_anchorCenter, lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 25, 32);
                libNtve_gf_CreateDialogItemLabel(lib1_gv_subTalentDialog[lp_tree][lp_player], 55, 20, c_anchorCenter, 0, 0, (StringExternal(&quot;Param/Value/lib_1_6FE57CC2&quot;) + StringExternal(&quot;Param/Value/lib_1_D30A5C78&quot;) + IntToText(lib1_gv_maxRank[lib1_gv_buttonIndex[lp_player]][lp_player])), Color(100,100,100), false, 2.0);
                lib1_gv_talentButtonLabel[lib1_gv_buttonIndex[lp_player]][lp_player] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemRenderPriority(lib1_gv_talentButtonLabel[lib1_gv_buttonIndex[lp_player]][lp_player], 521, PlayerGroupAll());
                libNtve_gf_SetDialogItemStyle(lib1_gv_talentButtonLabel[lib1_gv_buttonIndex[lp_player]][lp_player], &quot;IdleButtonCharge&quot;, PlayerGroupAll());
                DialogControlSetPositionRelative(lib1_gv_talentButtonLabel[lib1_gv_buttonIndex[lp_player]][lp_player], PlayerGroupAll(), c_anchorCenter, lib1_gv_talentButtonLabelBackground[lib1_gv_buttonIndex[lp_player]][lp_player], c_anchorCenter, 0, 0);
                if (((lp_row != 1) || (lp_talentPrerequisite != lib1_ge_TalentPrerequisite_None))) {
                    DialogControlSetEnabled(lib1_gv_talentTreeButton[lib1_gv_buttonIndex[lp_player]][lp_player], PlayerGroupAll(), false);
                    DialogControlSetVisible(lib1_gv_talentButtonGlow[lib1_gv_buttonIndex[lp_player]][lp_player], PlayerGroupAll(), false);
                    DialogControlSetVisible(lib1_gv_talentButtonLabelBackground[lib1_gv_buttonIndex[lp_player]][lp_player], PlayerGroupAll(), false);
                    DialogControlSetVisible(lib1_gv_talentButtonLabel[lib1_gv_buttonIndex[lp_player]][lp_player], PlayerGroupAll(), false);
                }
            }
            void lib1_gf_ShowHideTalentTree (int lp_player) {
                bool auto65715FE0_val;
                // Implementation
                auto65715FE0_val = DialogIsVisible(lib1_gv_mainTalentDialog[lp_player], lp_player);
                if (auto65715FE0_val == true) {
                    DialogSetVisible(lib1_gv_mainTalentDialog[lp_player], PlayerGroupSingle(lp_player), false);
                    DialogSetVisible(lib1_gv_subTalentDialog[1][lp_player], PlayerGroupSingle(lp_player), false);
                    DialogSetVisible(lib1_gv_subTalentDialog[2][lp_player], PlayerGroupSingle(lp_player), false);
                    DialogSetVisible(lib1_gv_subTalentDialog[3][lp_player], PlayerGroupSingle(lp_player), false);
                    DialogSetVisible(lib1_gv_availablePointsDialog[lp_player], PlayerGroupSingle(lp_player), false);
                }
                else if (auto65715FE0_val == false) {
                    DialogSetVisible(lib1_gv_mainTalentDialog[lp_player], PlayerGroupSingle(lp_player), true);
                    DialogSetVisible(lib1_gv_subTalentDialog[1][lp_player], PlayerGroupSingle(lp_player), true);
                    DialogSetVisible(lib1_gv_subTalentDialog[2][lp_player], PlayerGroupSingle(lp_player), true);
                    DialogSetVisible(lib1_gv_subTalentDialog[3][lp_player], PlayerGroupSingle(lp_player), true);
                    DialogSetVisible(lib1_gv_availablePointsDialog[lp_player], PlayerGroupSingle(lp_player), true);
                }
                else {
                }
            }
            void lib1_gf_GrantTalentPoints (int lp_talentPoints, int lp_player) {
                // Implementation
                lib1_gv_availableTalentPoints[lp_player] += lp_talentPoints;
                libNtve_gf_SetDialogItemText(lib1_gv_availablePointsLabel[lp_player], IntToText(lib1_gv_availableTalentPoints[lp_player]), PlayerGroupAll());
            }
            void lib1_gf_DestroyTalentTree (int lp_player) {
                int autoC59CCD7D_n;
                int autoC59CCD7D_i;
                int autoE6ACA13B_n;
                int autoE6ACA13B_i;
                int auto3D7D62F0_n;
                int auto3D7D62F0_i;
                // Variable Declarations
                int lv_buttonTree;
                int lv_buttonColumn;
                int lv_buttonRow;
                int lv_buttonIndex;
                // Variable Initialization
                // Implementation
                lib1_gv_buttonIndex[lp_player] = 0;
                lib1_gv_availableTalentPoints[lp_player] = 0;
                lib1_gv_spentTalentPoints[lp_player] = 0;
                lib1_gv_pointsSpentinTree[1][lp_player] = 0;
                lib1_gv_pointsSpentinTree[2][lp_player] = 0;
                lib1_gv_pointsSpentinTree[3][lp_player] = 0;
                DialogDestroy(lib1_gv_mainTalentDialog[lp_player]);
                DialogDestroy(lib1_gv_subTalentDialog[1][lp_player]);
                DialogDestroy(lib1_gv_subTalentDialog[2][lp_player]);
                DialogDestroy(lib1_gv_subTalentDialog[3][lp_player]);
                DialogDestroy(lib1_gv_availablePointsDialog[lp_player]);
                IntLoopBegin(1, 100);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    lib1_gv_talentTreeButton[IntLoopCurrent()][lp_player] = c_invalidDialogControlId;
                    lib1_gv_currentRank[IntLoopCurrent()][lp_player] = 0;
                    lib1_gv_maxRank[IntLoopCurrent()][lp_player] = 0;
                    lib1_gv_hasPrerequisite[IntLoopCurrent()][lp_player] = 0;
                    lib1_gv_isPrerequisite[IntLoopCurrent()][lp_player] = 0;
                    lib1_gv_prerequisiteComplete[IntLoopCurrent()][lp_player] = false;
                }
                IntLoopEnd();
                autoC59CCD7D_n = lib1_gv_ofTrees[lp_player];
                for (autoC59CCD7D_i = 1; autoC59CCD7D_i &lt;= autoC59CCD7D_n; autoC59CCD7D_i += 1) {
                    lv_buttonTree += 1;
                    lv_buttonRow = 0;
                    autoE6ACA13B_n = lib1_gv_ofRows[lp_player];
                    for (autoE6ACA13B_i = 1; autoE6ACA13B_i &lt;= autoE6ACA13B_n; autoE6ACA13B_i += 1) {
                        lv_buttonRow += 1;
                        lv_buttonColumn = 0;
                        auto3D7D62F0_n = lib1_gv_ofColumns[lp_player];
                        for (auto3D7D62F0_i = 1; auto3D7D62F0_i &lt;= auto3D7D62F0_n; auto3D7D62F0_i += 1) {
                            lv_buttonColumn += 1;
                            lib1_gv_talentTreeButtonIndexTreeColumnRow[lv_buttonTree][lv_buttonColumn][lv_buttonRow][lp_player] = 0;
                        }
                    }
                }
            }
            void lib1_gf_SaveLoadTalentBuild (int lp_saveLoad, int lp_buildIndex, string lp_bankName, int lp_player) {
                int auto39B7DD06_val;
                int auto4B6F81CD_n;
                int auto4B6F81CD_i;
                int autoD0201FAF_n;
                int autoD0201FAF_i;
                int autoD142A2C6_n;
                int autoD142A2C6_i;
                int auto801731C0_n;
                int auto801731C0_i;
                int auto056FDEC7_n;
                int auto056FDEC7_i;
                int auto2944E9AE_n;
                int auto2944E9AE_i;
                int auto883FD3A8_val;
                int autoEF30D3F4_val;
                int autoB7C929C5_val;
                int autoBB553F6A_val;
                int autoEE828A01_val;
                int autoAA9AD66B_n;
                int autoAA9AD66B_i;
                int auto982C0BD7_n;
                int auto982C0BD7_i;
                // Variable Declarations
                int lv_playerIndex;
                bank lv_talentBank;
                int lv_buttonTree;
                int lv_buttonColumn;
                int lv_buttonRow;
                int lv_buttonIndex;
                int lv_talentStringIndex;
                int lv_buttonCurrentRank;
                int lv_unlockedPrereqTalentIndex;
                int lv_unlockedPrereqTalentRequiredPoints;
                int lv_pointsRequired;
                int lv_pointsPerTier;
                // Variable Initialization
                lv_talentStringIndex = 1;
                // Implementation
                BankLoad(&quot;DQRPGTalentLibraryBank&quot;, lp_player);
                lv_talentBank = BankLastCreated();
                lib1_gv_talentBuildString[lp_buildIndex][lp_player] = &quot;&quot;;
                lv_playerIndex = (lp_player - 1);
                auto39B7DD06_val = lp_saveLoad;
                if (auto39B7DD06_val == lib1_ge_SaveLoad_Save) {
                    auto4B6F81CD_n = lib1_gv_ofTrees[lp_player];
                    for (auto4B6F81CD_i = 1; auto4B6F81CD_i &lt;= auto4B6F81CD_n; auto4B6F81CD_i += 1) {
                        lv_buttonTree += 1;
                        lv_buttonRow = 0;
                        autoD0201FAF_n = lib1_gv_ofRows[lp_player];
                        for (autoD0201FAF_i = 1; autoD0201FAF_i &lt;= autoD0201FAF_n; autoD0201FAF_i += 1) {
                            lv_buttonRow += 1;
                            lv_buttonColumn = 0;
                            autoD142A2C6_n = lib1_gv_ofColumns[lp_player];
                            for (autoD142A2C6_i = 1; autoD142A2C6_i &lt;= autoD142A2C6_n; autoD142A2C6_i += 1) {
                                lv_buttonColumn += 1;
                                lv_buttonIndex = lib1_gv_talentTreeButtonIndexTreeColumnRow[lv_buttonTree][lv_buttonColumn][lv_buttonRow][lp_player];
                                if ((lv_buttonIndex != 0)) {
                                    if ((lib1_gv_currentRank[lv_buttonIndex][lp_player] &lt; 10)) {
                                        lib1_gv_talentBuildString[lp_buildIndex][lp_player] = StringReplace(lib1_gv_talentBuildString[lp_buildIndex][lp_player], &quot;0&quot;, lv_talentStringIndex, (lv_talentStringIndex + 0));
                                        lib1_gv_talentBuildString[lp_buildIndex][lp_player] = StringReplace(lib1_gv_talentBuildString[lp_buildIndex][lp_player], IntToString(lib1_gv_currentRank[lv_buttonIndex][lp_player]), (lv_talentStringIndex + 1), (lv_talentStringIndex + 1));
                                    }
                                    else {
                                        lib1_gv_talentBuildString[lp_buildIndex][lp_player] = StringReplace(lib1_gv_talentBuildString[lp_buildIndex][lp_player], IntToString(lib1_gv_currentRank[lv_buttonIndex][lp_player]), lv_talentStringIndex, (lv_talentStringIndex + 1));
                                    }
                                    lv_talentStringIndex += 2;
                                }
                            }
                        }
                    }
                    BankValueSetFromString(lv_talentBank, lp_bankName, IntToString(lp_buildIndex), lib1_gv_talentBuildString[lp_buildIndex][lp_player]);
                    BankValueSetFromInt(lv_talentBank, (lp_bankName + &quot;Points&quot;), IntToString(lp_buildIndex), lib1_gv_availableTalentPoints[lp_player]);
                    BankSave(lv_talentBank);
                }
                else if (auto39B7DD06_val == lib1_ge_SaveLoad_Load) {
                    lib1_gv_talentBuildString[lp_buildIndex][lp_player] = BankValueGetAsString(lv_talentBank, lp_bankName, IntToString(lp_buildIndex));
                    if ((lib1_gv_talentBuildString[lp_buildIndex][lp_player] != &quot;&quot;)) {
                        lib1_gf_ResetTalentBuild(lp_player, 101);
                        lib1_gv_availableTalentPoints[lp_player] = BankValueGetAsInt(lv_talentBank, (lp_bankName + &quot;Points&quot;), IntToString(lp_buildIndex));
                        libNtve_gf_SetDialogItemText(lib1_gv_availablePointsLabel[lp_player], IntToText(lib1_gv_availableTalentPoints[lp_player]), PlayerGroupAll());
                        auto801731C0_n = lib1_gv_ofTrees[lp_player];
                        for (auto801731C0_i = 1; auto801731C0_i &lt;= auto801731C0_n; auto801731C0_i += 1) {
                            lv_buttonTree += 1;
                            lv_buttonRow = 0;
                            auto056FDEC7_n = lib1_gv_ofRows[lp_player];
                            for (auto056FDEC7_i = 1; auto056FDEC7_i &lt;= auto056FDEC7_n; auto056FDEC7_i += 1) {
                                lv_buttonRow += 1;
                                lv_buttonColumn = 0;
                                auto2944E9AE_n = lib1_gv_ofColumns[lp_player];
                                for (auto2944E9AE_i = 1; auto2944E9AE_i &lt;= auto2944E9AE_n; auto2944E9AE_i += 1) {
                                    lv_buttonColumn += 1;
                                    lv_buttonIndex = lib1_gv_talentTreeButtonIndexTreeColumnRow[lv_buttonTree][lv_buttonColumn][lv_buttonRow][lp_player];
                                    if ((lv_buttonIndex != 0)) {
                                        lv_buttonCurrentRank = StringToInt(StringSub(lib1_gv_talentBuildString[lp_buildIndex][lp_player], lv_talentStringIndex, (lv_talentStringIndex + 1)));
                                        lv_talentStringIndex += 2;
                                        auto883FD3A8_val = lib1_gv_pointsPerTier[lp_player];
                                        if (auto883FD3A8_val == lib1_ge_PointsPerTier__5) {
                                            lv_pointsRequired = (5 * (lib1_gv_row[lv_buttonIndex][lp_player] - 1));
                                            lv_pointsPerTier = 5;
                                        }
                                        else if (auto883FD3A8_val == lib1_ge_PointsPerTier__10) {
                                            lv_pointsRequired = (10 * (lib1_gv_row[lv_buttonIndex][lp_player] - 1));
                                            lv_pointsPerTier = 10;
                                        }
                                        else {
                                        }
                                        if ((lv_buttonCurrentRank &gt;= lib1_gv_maxRank[lv_buttonIndex][lp_player])) {
                                            lv_buttonCurrentRank = lib1_gv_maxRank[lv_buttonIndex][lp_player];
                                            lib1_gv_currentRank[lv_buttonIndex][lp_player] = lv_buttonCurrentRank;
                                            lib1_gv_pointsSpentinTree[lib1_gv_tree[lv_buttonIndex][lp_player]][lp_player] += lv_buttonCurrentRank;
                                            lib1_gv_spentTalentPoints[lp_player] += lv_buttonCurrentRank;
                                            DialogControlSetEnabled(lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], PlayerGroupAll(), false);
                                            DialogControlSetVisible(lib1_gv_talentButtonGlow[lv_buttonIndex][lp_player], PlayerGroupAll(), false);
                                            DialogControlSetVisible(lib1_gv_talentButtonLabelBackground[lv_buttonIndex][lp_player], PlayerGroupAll(), true);
                                            DialogControlSetVisible(lib1_gv_talentButtonLabel[lv_buttonIndex][lp_player], PlayerGroupAll(), true);
                                            autoBB553F6A_val = lib1_gv_talentType[lv_buttonIndex][lp_player];
                                            if (autoBB553F6A_val == lib1_ge_TalentType_Ability) {
                                                lib1_gf_UpdateAbilityButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], lv_buttonIndex, 0, lib1_gv_tree[lv_buttonIndex][lp_player], lib1_gv_abilityLink[lv_buttonIndex][lp_player], lib1_gv_buttonLink[lv_buttonIndex][lp_player]);
                                            }
                                            else if (autoBB553F6A_val == lib1_ge_TalentType_Passive) {
                                                lib1_gf_UpdatePassiveButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], lv_buttonIndex, 0, lib1_gv_tree[lv_buttonIndex][lp_player], lib1_gv_talentName[lv_buttonIndex][lp_player], lib1_gv_tooltipDescriptionRaw[lv_buttonIndex][lp_player], lib1_gv_currentRank[lv_buttonIndex][lp_player], lib1_gv_multiplier[1][lv_buttonIndex][lp_player], lib1_gv_multiplier[2][lv_buttonIndex][lp_player]);
                                            }
                                            else {
                                            }
                                            if ((lib1_gv_isPrerequisite[lv_buttonIndex][lp_player] != 0)) {
                                                lv_unlockedPrereqTalentIndex = lib1_gv_isPrerequisite[lv_buttonIndex][lp_player];
                                                lib1_gv_prerequisiteComplete[lv_unlockedPrereqTalentIndex][lp_player] = true;
                                                lv_unlockedPrereqTalentRequiredPoints = (lv_pointsPerTier * (lib1_gv_row[lv_unlockedPrereqTalentIndex][lp_player] - 1));
                                                autoEE828A01_val = lib1_gv_talentType[lv_unlockedPrereqTalentIndex][lp_player];
                                                if (autoEE828A01_val == lib1_ge_TalentType_Ability) {
                                                    lib1_gf_UpdateAbilityButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_unlockedPrereqTalentIndex][lp_player], lv_unlockedPrereqTalentIndex, lv_unlockedPrereqTalentRequiredPoints, lib1_gv_tree[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_abilityLink[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_buttonLink[lv_unlockedPrereqTalentIndex][lp_player]);
                                                }
                                                else if (autoEE828A01_val == lib1_ge_TalentType_Passive) {
                                                    lib1_gf_UpdatePassiveButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_unlockedPrereqTalentIndex][lp_player], lv_unlockedPrereqTalentIndex, lv_unlockedPrereqTalentRequiredPoints, lib1_gv_tree[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_talentName[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_tooltipDescriptionRaw[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_currentRank[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_multiplier[1][lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_multiplier[2][lv_unlockedPrereqTalentIndex][lp_player]);
                                                }
                                                else {
                                                }
                                            }
                                        }
                                        else {
                                            lib1_gv_currentRank[lv_buttonIndex][lp_player] = lv_buttonCurrentRank;
                                            lib1_gv_pointsSpentinTree[lib1_gv_tree[lv_buttonIndex][lp_player]][lp_player] += lv_buttonCurrentRank;
                                            lib1_gv_spentTalentPoints[lp_player] += lv_buttonCurrentRank;
                                            if ((lv_buttonCurrentRank &gt; 0)) {
                                                lib1_gf_UnlockTalentButton(lp_player, lv_buttonTree, lv_buttonColumn, lv_buttonRow);
                                                if ((lv_buttonCurrentRank &gt;= 5)) {
                                                    if ((lib1_gv_isPrerequisite[lv_buttonIndex][lp_player] != 0)) {
                                                        lv_unlockedPrereqTalentIndex = lib1_gv_isPrerequisite[lv_buttonIndex][lp_player];
                                                        lib1_gv_prerequisiteComplete[lv_unlockedPrereqTalentIndex][lp_player] = true;
                                                        lv_unlockedPrereqTalentRequiredPoints = (lv_pointsPerTier * (lib1_gv_row[lv_unlockedPrereqTalentIndex][lp_player] - 1));
                                                        autoB7C929C5_val = lib1_gv_talentType[lv_unlockedPrereqTalentIndex][lp_player];
                                                        if (autoB7C929C5_val == lib1_ge_TalentType_Ability) {
                                                            lib1_gf_UpdateAbilityButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_unlockedPrereqTalentIndex][lp_player], lv_unlockedPrereqTalentIndex, lv_unlockedPrereqTalentRequiredPoints, lib1_gv_tree[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_abilityLink[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_buttonLink[lv_unlockedPrereqTalentIndex][lp_player]);
                                                        }
                                                        else if (autoB7C929C5_val == lib1_ge_TalentType_Passive) {
                                                            lib1_gf_UpdatePassiveButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_unlockedPrereqTalentIndex][lp_player], lv_unlockedPrereqTalentIndex, lv_unlockedPrereqTalentRequiredPoints, lib1_gv_tree[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_talentName[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_tooltipDescriptionRaw[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_currentRank[lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_multiplier[1][lv_unlockedPrereqTalentIndex][lp_player], lib1_gv_multiplier[2][lv_unlockedPrereqTalentIndex][lp_player]);
                                                        }
                                                        else {
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                DialogControlSetEnabled(lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], PlayerGroupAll(), false);
                                                DialogControlSetVisible(lib1_gv_talentButtonGlow[lv_buttonIndex][lp_player], PlayerGroupAll(), false);
                                                DialogControlSetVisible(lib1_gv_talentButtonLabelBackground[lv_buttonIndex][lp_player], PlayerGroupAll(), false);
                                                DialogControlSetVisible(lib1_gv_talentButtonLabel[lv_buttonIndex][lp_player], PlayerGroupAll(), false);
                                                autoEF30D3F4_val = lib1_gv_talentType[lv_buttonIndex][lp_player];
                                                if (autoEF30D3F4_val == lib1_ge_TalentType_Ability) {
                                                    lib1_gf_UpdateAbilityButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], lv_buttonIndex, lv_pointsRequired, lib1_gv_tree[lv_buttonIndex][lp_player], lib1_gv_abilityLink[lv_buttonIndex][lp_player], lib1_gv_buttonLink[lv_buttonIndex][lp_player]);
                                                }
                                                else if (autoEF30D3F4_val == lib1_ge_TalentType_Passive) {
                                                    lib1_gf_UpdatePassiveButtonTooltip(lp_player, lib1_gv_talentTreeButton[lv_buttonIndex][lp_player], lv_buttonIndex, lv_pointsRequired, lib1_gv_tree[lv_buttonIndex][lp_player], lib1_gv_talentName[lv_buttonIndex][lp_player], lib1_gv_tooltipDescriptionRaw[lv_buttonIndex][lp_player], lib1_gv_currentRank[lv_buttonIndex][lp_player], lib1_gv_multiplier[1][lv_buttonIndex][lp_player], lib1_gv_multiplier[2][lv_buttonIndex][lp_player]);
                                                }
                                                else {
                                                }
                                            }
                                        }
                                        if ((lib1_gv_currentRank[lv_buttonIndex][lp_player] &lt; lib1_gv_maxRank[lv_buttonIndex][lp_player])) {
                                            libNtve_gf_SetDialogItemText(lib1_gv_talentButtonLabel[lv_buttonIndex][lp_player], (IntToText(lib1_gv_currentRank[lv_buttonIndex][lp_player]) + StringExternal(&quot;Param/Value/lib_1_D81739DA&quot;) + IntToText(lib1_gv_maxRank[lv_buttonIndex][lp_player])), PlayerGroupAll());
                                        }
                                        else {
                                            libNtve_gf_SetDialogItemText(lib1_gv_talentButtonLabel[lv_buttonIndex][lp_player], (IntToText(lib1_gv_maxRank[lv_buttonIndex][lp_player]) + StringExternal(&quot;Param/Value/lib_1_DBD8440E&quot;) + IntToText(lib1_gv_maxRank[lv_buttonIndex][lp_player])), PlayerGroupAll());
                                        }
                                        if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] != null)) {
                                            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lib1_gv_talentUpgrade[lv_buttonIndex][lp_player], lv_buttonCurrentRank);
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;StrengthoftheDragon&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;StrengthoftheDragon&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_strengthoftheDragonCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;MindoftheDragon&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;MindoftheDragon&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_mindoftheDragonCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;PowerOverwhelming&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;PowerOverwhelming&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_powerOverwhelmingCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;Rage&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;Rage&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_rageCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;VampiricTendencies&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;VampiricTendencies&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_vampiricTendenciesCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;CriticalCrepitus&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;CriticalCrepitus&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_criticalCrepitusCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;Zeal&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;Zeal&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_zealCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;DarkDissulto&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;DarkDissulto&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_darkDissultoCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;SpikedScales&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;SpikedScales&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_spikedScalesCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;Retaliation&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;Retaliation&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_retaliationCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;Headshot&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;Headshot&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_headshotCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;StickyShot&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;StickyShot&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_stickyShotCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;DuelWield&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;DualWield&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_dualWieldCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;GreedisGood&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;GreedIsGood&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_greedisGoodCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;QuickLearner&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;QuickLearner&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_quickLearnerCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;AbsorbMana&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;AbsorbMana&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_absorbManaCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lp_player] == &quot;RealmSwitch&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;RealmSwitch&quot;, lib1_gv_heros[lv_playerIndex], lv_buttonCurrentRank);
                                                lib1_gv_realmSwitchCount[lv_playerIndex] += lv_buttonCurrentRank;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        lv_buttonTree = 0;
                        autoAA9AD66B_n = lib1_gv_ofTrees[lp_player];
                        for (autoAA9AD66B_i = 1; autoAA9AD66B_i &lt;= autoAA9AD66B_n; autoAA9AD66B_i += 1) {
                            lv_buttonTree += 1;
                            if ((lib1_gv_pointsSpentinTree[lv_buttonTree][lp_player] &gt;= (lv_pointsPerTier * 1))) {
                                lib1_gf_UnlockTalentTier(lp_player, lv_buttonTree, 2);
                            }
                            if ((lib1_gv_pointsSpentinTree[lv_buttonTree][lp_player] &gt;= (lv_pointsPerTier * 2))) {
                                lib1_gf_UnlockTalentTier(lp_player, lv_buttonTree, 3);
                            }
                            if ((lib1_gv_pointsSpentinTree[lv_buttonTree][lp_player] &gt;= (lv_pointsPerTier * 3))) {
                                lib1_gf_UnlockTalentTier(lp_player, lv_buttonTree, 4);
                            }
                            if ((lib1_gv_pointsSpentinTree[lv_buttonTree][lp_player] &gt;= (lv_pointsPerTier * 4))) {
                                lib1_gf_UnlockTalentTier(lp_player, lv_buttonTree, 5);
                            }
                            if ((lib1_gv_pointsSpentinTree[lv_buttonTree][lp_player] &gt;= (lv_pointsPerTier * 5))) {
                                lib1_gf_UnlockTalentTier(lp_player, lv_buttonTree, 6);
                            }
                            if ((lib1_gv_pointsSpentinTree[lv_buttonTree][lp_player] &gt;= (lv_pointsPerTier * 6))) {
                                lib1_gf_UnlockTalentTier(lp_player, lv_buttonTree, 7);
                            }
                            if ((lib1_gv_pointsSpentinTree[lv_buttonTree][lp_player] &gt;= (lv_pointsPerTier * 7))) {
                                lib1_gf_UnlockTalentTier(lp_player, lv_buttonTree, 8);
                            }
                            lv_buttonColumn = 0;
                            auto982C0BD7_n = lib1_gv_ofColumns[lp_player];
                            for (auto982C0BD7_i = 1; auto982C0BD7_i &lt;= auto982C0BD7_n; auto982C0BD7_i += 1) {
                                lv_buttonColumn += 1;
                                if (((lib1_gv_hasPrerequisite[lib1_gv_talentTreeButtonIndexTreeColumnRow[lv_buttonTree][lv_buttonColumn][1][lp_player]][lp_player] == 0) || (lib1_gv_prerequisiteComplete[lib1_gv_talentTreeButtonIndexTreeColumnRow[lv_buttonTree][lv_buttonColumn][1][lp_player]][lp_player] == true))) {
                                    lib1_gf_UnlockTalentButton(lp_player, lv_buttonTree, lv_buttonColumn, 1);
                                }
                            }
                        }
                    }
                }
                else {
                }
            }
            void lib1_gf_ResetTalentBuild (int lp_player, int lp_resetto) {
                int auto70440042_val;
                int auto717EC17A_val;
                // Variable Declarations
                int lv_requiredPoints;
                // Variable Initialization
                // Implementation
                if ((lp_resetto == 101)) {
                    lib1_gv_availableTalentPoints[lp_player] = 1;
                }
                else {
                    lib1_gv_availableTalentPoints[lp_player] = lp_resetto;
                }
                lib1_gv_spentTalentPoints[lp_player] = 0;
                libNtve_gf_SetDialogItemText(lib1_gv_availablePointsLabel[lp_player], IntToText(lib1_gv_availableTalentPoints[lp_player]), PlayerGroupAll());
                lib1_gv_pointsSpentinTree[1][lp_player] = 0;
                lib1_gv_pointsSpentinTree[2][lp_player] = 0;
                lib1_gv_pointsSpentinTree[3][lp_player] = 0;
                IntLoopBegin(1, lib1_gv_buttonIndex[lp_player]);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    if ((lib1_gv_talentUpgrade[IntLoopCurrent()][lp_player] != null)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lib1_gv_talentUpgrade[IntLoopCurrent()][lp_player], 0);
                    }
                    lib1_gv_currentRank[IntLoopCurrent()][lp_player] = 0;
                    libNtve_gf_SetDialogItemText(lib1_gv_talentButtonLabel[IntLoopCurrent()][lp_player], (IntToText(lib1_gv_currentRank[IntLoopCurrent()][lp_player]) + StringExternal(&quot;Param/Value/lib_1_52455AE2&quot;) + IntToText(lib1_gv_maxRank[IntLoopCurrent()][lp_player])), PlayerGroupAll());
                    lib1_gv_prerequisiteComplete[IntLoopCurrent()][lp_player] = false;
                    auto70440042_val = lib1_gv_pointsPerTier[lp_player];
                    if (auto70440042_val == lib1_ge_PointsPerTier__5) {
                        lv_requiredPoints = 5;
                    }
                    else if (auto70440042_val == lib1_ge_PointsPerTier__10) {
                        lv_requiredPoints = 10;
                    }
                    else {
                    }
                    lv_requiredPoints = (lv_requiredPoints * (lib1_gv_row[IntLoopCurrent()][lp_player] - 1));
                    auto717EC17A_val = lib1_gv_talentType[IntLoopCurrent()][lp_player];
                    if (auto717EC17A_val == lib1_ge_TalentType_Ability) {
                        lib1_gf_UpdateAbilityButtonTooltip(lp_player, lib1_gv_talentTreeButton[IntLoopCurrent()][lp_player], IntLoopCurrent(), lv_requiredPoints, lib1_gv_tree[IntLoopCurrent()][lp_player], lib1_gv_abilityLink[IntLoopCurrent()][lp_player], lib1_gv_buttonLink[IntLoopCurrent()][lp_player]);
                    }
                    else if (auto717EC17A_val == lib1_ge_TalentType_Passive) {
                        lib1_gf_UpdatePassiveButtonTooltip(lp_player, lib1_gv_talentTreeButton[IntLoopCurrent()][lp_player], IntLoopCurrent(), lv_requiredPoints, lib1_gv_tree[IntLoopCurrent()][lp_player], lib1_gv_talentName[IntLoopCurrent()][lp_player], lib1_gv_tooltipDescriptionRaw[IntLoopCurrent()][lp_player], lib1_gv_currentRank[IntLoopCurrent()][lp_player], lib1_gv_multiplier[1][IntLoopCurrent()][lp_player], lib1_gv_multiplier[2][IntLoopCurrent()][lp_player]);
                    }
                    else {
                    }
                    if (((lib1_gv_row[IntLoopCurrent()][lp_player] != 1) || (lib1_gv_hasPrerequisite[IntLoopCurrent()][lp_player] != 0))) {
                        DialogControlSetEnabled(lib1_gv_talentTreeButton[IntLoopCurrent()][lp_player], PlayerGroupAll(), false);
                        DialogControlSetVisible(lib1_gv_talentButtonGlow[IntLoopCurrent()][lp_player], PlayerGroupAll(), false);
                        DialogControlSetVisible(lib1_gv_talentButtonLabelBackground[IntLoopCurrent()][lp_player], PlayerGroupAll(), false);
                        DialogControlSetVisible(lib1_gv_talentButtonLabel[IntLoopCurrent()][lp_player], PlayerGroupAll(), false);
                    }
                    else {
                        DialogControlSetEnabled(lib1_gv_talentTreeButton[IntLoopCurrent()][lp_player], PlayerGroupAll(), true);
                        DialogControlSetVisible(lib1_gv_talentButtonGlow[IntLoopCurrent()][lp_player], PlayerGroupAll(), true);
                        DialogControlSetVisible(lib1_gv_talentButtonLabelBackground[IntLoopCurrent()][lp_player], PlayerGroupAll(), true);
                        DialogControlSetVisible(lib1_gv_talentButtonLabel[IntLoopCurrent()][lp_player], PlayerGroupAll(), true);
                    }
                }
                IntLoopEnd();
            }
            void lib1_gf_SetHeros (int lp_player, unit lp_hero) {
                // Implementation
                lib1_gv_heros[(lp_player - 1)] = lp_hero;
            }
            // Triggers
            //--------------------------------------------------------------------------------------------------
            // Trigger: Pick Talent
            //--------------------------------------------------------------------------------------------------
            bool lib1_gt_PickTalent_Func (bool testConds, bool runActions) {
                int auto6174C529_val;
                int autoD8089CA4_val;
                fixed auto98A8ED9E_val;
                // Variable Declarations
                int lv_playerIndex;
                bool lv_holdUp;
                int lv_player;
                int lv_buttonIndex;
                int lv_unlockedPrereqTalentIndex;
                int lv_unlockedPrereqTalentRequiredPoints;
                int lv_pointsRequired;
                int lv_pointsPerTier;
                const int lv_prereqPointReq = 5;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((lib1_gf_IsTalentButton(EventPlayer(), EventDialogControl()) == true) &amp;&amp; (lib1_gv_availableTalentPoints[EventPlayer()] &gt; 0) &amp;&amp; (gv_players[(EventPlayer() - 1)].talents.adding == false)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_players[(EventPlayer() - 1)].talents.adding == false)) {
                    lv_player = EventPlayer();
                    lv_playerIndex = (EventPlayer() - 1);
                    gv_players[lv_playerIndex].talents.adding = true;
                    while (gv_players[(EventPlayer() - 1)].talents.locked) {
                        Wait(1.0, c_timeGame);
                    }
                    gv_players[(EventPlayer() - 1)].talents.locked = true;
                    IntLoopBegin(1, 30);
                    for ( ; !IntLoopDone() ; IntLoopStep() ) {
                        if ((EventDialogControl() == lib1_gv_talentTreeButton[IntLoopCurrent()][lv_player])) {
                            lv_buttonIndex = IntLoopCurrent();
                            break;
                        }
                    }
                    IntLoopEnd();
                    lib1_gv_currentRank[lv_buttonIndex][lv_player] += 1;
                    lib1_gv_pointsSpentinTree[lib1_gv_tree[lv_buttonIndex][lv_player]][lv_player] += 1;
                    lib1_gv_availableTalentPoints[lv_player] -= 1;
                    lib1_gv_spentTalentPoints[lv_player] += 1;
                    if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] != null)) {
                        TechTreeUpgradeAddLevel(lv_player, lib1_gv_talentUpgrade[lv_buttonIndex][lv_player], 1);
                        if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;StrengthoftheDragon&quot;)) {
                            UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;StrengthoftheDragon&quot;, lib1_gv_heros[lv_playerIndex], 1);
                            lib1_gv_strengthoftheDragonCount[lv_playerIndex] += 1;
                        }
                        else {
                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;MindoftheDragon&quot;)) {
                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;MindoftheDragon&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                lib1_gv_mindoftheDragonCount[lv_playerIndex] += 1;
                            }
                            else {
                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;PowerOverwhelming&quot;)) {
                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;PowerOverwhelming&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                    lib1_gv_powerOverwhelmingCount[lv_playerIndex] += 1;
                                }
                                else {
                                    if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;Rage&quot;)) {
                                        UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;Rage&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                        lib1_gv_rageCount[lv_playerIndex] += 1;
                                    }
                                    else {
                                        if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;VampiricTendencies&quot;)) {
                                            UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;VampiricTendencies&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                            lib1_gv_vampiricTendenciesCount[lv_playerIndex] += 1;
                                        }
                                        else {
                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;Zeal&quot;)) {
                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;Zeal&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                                lib1_gv_zealCount[lv_playerIndex] += 1;
                                            }
                                            else {
                                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;CriticalCrepitus&quot;)) {
                                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;CriticalCrepitus&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                                    lib1_gv_criticalCrepitusCount[lv_playerIndex] += 1;
                                                }
                                                else {
                                                    if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;DarkDissulto&quot;)) {
                                                        UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;DarkDissulto&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                                        lib1_gv_darkDissultoCount[lv_playerIndex] += 1;
                                                    }
                                                    else {
                                                        if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;SpikedScales&quot;)) {
                                                            UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;SpikedScales&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                                            lib1_gv_spikedScalesCount[lv_playerIndex] += 1;
                                                        }
                                                        else {
                                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;Retaliation&quot;)) {
                                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;Retaliation&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                                                lib1_gv_retaliationCount[lv_playerIndex] += 1;
                                                            }
                                                            else {
                                                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;Headshot&quot;)) {
                                                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;Headshot&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                                                    lib1_gv_headshotCount[lv_playerIndex] += 1;
                                                                }
                                                                else {
                                                                    if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;StickyShot&quot;)) {
                                                                        UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;StickyShot&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                                                        lib1_gv_stickyShotCount[lv_playerIndex] += 1;
                                                                    }
                                                                    else {
                                                                        if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;DuelWield&quot;)) {
                                                                            UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;DualWield&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                                                            lib1_gv_dualWieldCount[lv_playerIndex] += 1;
                                                                        }
                                                                        else {
                                                                            if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;GreedisGood&quot;)) {
                                                                                UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;GreedIsGood&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                                                                lib1_gv_greedisGoodCount[lv_playerIndex] += 1;
                                                                            }
                                                                            else {
                                                                                if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;QuickLearner&quot;)) {
                                                                                    UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;QuickLearner&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                                                                    lib1_gv_quickLearnerCount[lv_playerIndex] += 1;
                                                                                }
                                                                                else {
                                                                                    if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;AbsorbMana&quot;)) {
                                                                                        UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;AbsorbMana&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                                                                        lib1_gv_absorbManaCount[lv_playerIndex] += 1;
                                                                                    }
                                                                                    else {
                                                                                        if ((lib1_gv_talentUpgrade[lv_buttonIndex][lv_player] == &quot;RealmSwitch&quot;)) {
                                                                                            UnitBehaviorAdd(lib1_gv_heros[lv_playerIndex], &quot;RealmSwitch&quot;, lib1_gv_heros[lv_playerIndex], 1);
                                                                                            lib1_gv_realmSwitchCount[lv_playerIndex] += 1;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((lib1_gv_currentRank[lv_buttonIndex][lv_player] &lt; lib1_gv_maxRank[lv_buttonIndex][lv_player])) {
                        libNtve_gf_SetDialogItemText(lib1_gv_talentButtonLabel[lv_buttonIndex][lv_player], (IntToText(lib1_gv_currentRank[lv_buttonIndex][lv_player]) + StringExternal(&quot;Param/Value/lib_1_75883A25&quot;) + IntToText(lib1_gv_maxRank[lv_buttonIndex][lv_player])), PlayerGroupAll());
                    }
                    else {
                        libNtve_gf_SetDialogItemText(lib1_gv_talentButtonLabel[lv_buttonIndex][lv_player], (IntToText(lib1_gv_maxRank[lv_buttonIndex][lv_player]) + StringExternal(&quot;Param/Value/lib_1_BC8BEA49&quot;) + IntToText(lib1_gv_maxRank[lv_buttonIndex][lv_player])), PlayerGroupAll());
                    }
                    libNtve_gf_SetDialogItemText(lib1_gv_availablePointsLabel[lv_player], IntToText(lib1_gv_availableTalentPoints[lv_player]), PlayerGroupAll());
                    auto6174C529_val = lib1_gv_pointsPerTier[lv_player];
                    if (auto6174C529_val == lib1_ge_PointsPerTier__5) {
                        lv_pointsRequired = (5 * (lib1_gv_row[lv_buttonIndex][lv_player] - 1));
                        lv_pointsPerTier = 5;
                    }
                    else if (auto6174C529_val == lib1_ge_PointsPerTier__10) {
                        lv_pointsRequired = (10 * (lib1_gv_row[lv_buttonIndex][lv_player] - 1));
                        lv_pointsPerTier = 10;
                    }
                    else {
                    }
                    if ((lib1_gv_currentRank[lv_buttonIndex][lv_player] == lib1_gv_maxRank[lv_buttonIndex][lv_player])) {
                        DialogControlSetEnabled(lib1_gv_talentTreeButton[lv_buttonIndex][lv_player], PlayerGroupAll(), false);
                        DialogControlSetVisible(lib1_gv_talentButtonGlow[lv_buttonIndex][lv_player], PlayerGroupAll(), false);
                    }
                    else if ((lib1_gv_currentRank[lv_buttonIndex][lv_player] == lv_prereqPointReq)) {
                        if ((lib1_gv_isPrerequisite[lv_buttonIndex][lv_player] != 0)) {
                            lv_unlockedPrereqTalentIndex = lib1_gv_isPrerequisite[lv_buttonIndex][lv_player];
                            lib1_gv_prerequisiteComplete[lv_unlockedPrereqTalentIndex][lv_player] = true;
                            lv_unlockedPrereqTalentRequiredPoints = (lv_pointsPerTier * (lib1_gv_row[lv_unlockedPrereqTalentIndex][lv_player] - 1));
                            if ((lib1_gv_pointsSpentinTree[lib1_gv_tree[lv_unlockedPrereqTalentIndex][lv_player]][lv_player] &gt;= lv_unlockedPrereqTalentRequiredPoints)) {
                                lv_unlockedPrereqTalentRequiredPoints = 0;
                                SoundPlay(SoundLink(&quot;UI_TechConsole_Purchase&quot;, -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
                                lib1_gf_UnlockTalentButton(lv_player, lib1_gv_tree[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_column[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_row[lv_unlockedPrereqTalentIndex][lv_player]);
                            }
                            autoD8089CA4_val = lib1_gv_talentType[lv_unlockedPrereqTalentIndex][lv_player];
                            if (autoD8089CA4_val == lib1_ge_TalentType_Ability) {
                                lib1_gf_UpdateAbilityButtonTooltip(lv_player, lib1_gv_talentTreeButton[lv_unlockedPrereqTalentIndex][lv_player], lv_unlockedPrereqTalentIndex, lv_unlockedPrereqTalentRequiredPoints, lib1_gv_tree[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_abilityLink[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_buttonLink[lv_unlockedPrereqTalentIndex][lv_player]);
                            }
                            else if (autoD8089CA4_val == lib1_ge_TalentType_Passive) {
                                lib1_gf_UpdatePassiveButtonTooltip(lv_player, lib1_gv_talentTreeButton[lv_unlockedPrereqTalentIndex][lv_player], lv_unlockedPrereqTalentIndex, lv_unlockedPrereqTalentRequiredPoints, lib1_gv_tree[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_talentName[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_tooltipDescriptionRaw[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_currentRank[lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_multiplier[1][lv_unlockedPrereqTalentIndex][lv_player], lib1_gv_multiplier[2][lv_unlockedPrereqTalentIndex][lv_player]);
                            }
                            else {
                            }
                        }
                    }
                    else if ((lib1_gv_currentRank[lv_buttonIndex][lv_player] &gt; lib1_gv_maxRank[lv_buttonIndex][lv_player])) {
                        lib1_gv_currentRank[lv_buttonIndex][lv_player] = lib1_gv_maxRank[lv_buttonIndex][lv_player];
                        lib1_gv_pointsSpentinTree[lib1_gv_tree[lv_buttonIndex][lv_player]][lv_player] -= 1;
                        lib1_gv_availableTalentPoints[lv_player] += 1;
                        lib1_gv_spentTalentPoints[lv_player] -= 1;
                    }
                    if ((lib1_gv_talentType[lv_buttonIndex][lv_player] == lib1_ge_TalentType_Passive)) {
                        lib1_gf_UpdatePassiveButtonTooltip(lv_player, lib1_gv_talentTreeButton[lv_buttonIndex][lv_player], lv_buttonIndex, 0, lib1_gv_tree[lv_buttonIndex][lv_player], lib1_gv_talentName[lv_buttonIndex][lv_player], lib1_gv_tooltipDescriptionRaw[lv_buttonIndex][lv_player], lib1_gv_currentRank[lv_buttonIndex][lv_player], lib1_gv_multiplier[1][lv_buttonIndex][lv_player], lib1_gv_multiplier[2][lv_buttonIndex][lv_player]);
                    }
                    auto98A8ED9E_val = (IntToFixed(lib1_gv_pointsSpentinTree[lib1_gv_tree[lv_buttonIndex][lv_player]][lv_player]) / IntToFixed(lv_pointsPerTier));
                    if (auto98A8ED9E_val == 1.0) {
                        if ((lib1_gv_ofRows[lv_player] &gt;= 2)) {
                            lib1_gf_UnlockTalentTier(lv_player, lib1_gv_tree[lv_buttonIndex][lv_player], 2);
                            SoundPlay(SoundLink(&quot;UI_TechConsole_Purchase&quot;, -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
                        }
                    }
                    else if (auto98A8ED9E_val == 2.0) {
                        if ((lib1_gv_ofRows[lv_player] &gt;= 3)) {
                            lib1_gf_UnlockTalentTier(lv_player, lib1_gv_tree[lv_buttonIndex][lv_player], 3);
                            SoundPlay(SoundLink(&quot;UI_TechConsole_Purchase&quot;, -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
                        }
                    }
                    else if (auto98A8ED9E_val == 3.0) {
                        if ((lib1_gv_ofRows[lv_player] &gt;= 4)) {
                            lib1_gf_UnlockTalentTier(lv_player, lib1_gv_tree[lv_buttonIndex][lv_player], 4);
                            SoundPlay(SoundLink(&quot;UI_TechConsole_Purchase&quot;, -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
                        }
                    }
                    else if (auto98A8ED9E_val == 4.0) {
                        if ((lib1_gv_ofRows[lv_player] &gt;= 5)) {
                            lib1_gf_UnlockTalentTier(lv_player, lib1_gv_tree[lv_buttonIndex][lv_player], 5);
                            SoundPlay(SoundLink(&quot;UI_TechConsole_Purchase&quot;, -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
                        }
                    }
                    else if (auto98A8ED9E_val == 5.0) {
                        if ((lib1_gv_ofRows[lv_player] &gt;= 6)) {
                            lib1_gf_UnlockTalentTier(lv_player, lib1_gv_tree[lv_buttonIndex][lv_player], 6);
                            SoundPlay(SoundLink(&quot;UI_TechConsole_Purchase&quot;, -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
                        }
                    }
                    else if (auto98A8ED9E_val == 6.0) {
                        if ((lib1_gv_ofRows[lv_player] &gt;= 7)) {
                            lib1_gf_UnlockTalentTier(lv_player, lib1_gv_tree[lv_buttonIndex][lv_player], 7);
                            SoundPlay(SoundLink(&quot;UI_TechConsole_Purchase&quot;, -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
                        }
                    }
                    else if (auto98A8ED9E_val == 7.0) {
                        if ((lib1_gv_ofRows[lv_player] &gt;= 8)) {
                            lib1_gf_UnlockTalentTier(lv_player, lib1_gv_tree[lv_buttonIndex][lv_player], 8);
                            SoundPlay(SoundLink(&quot;UI_TechConsole_Purchase&quot;, -1), PlayerGroupSingle(lv_player), 100.0, 0.0);
                        }
                    }
                    else {
                    }
                    gv_players[(EventPlayer() - 1)].talents.locked = false;
                    if ((lib1_gv_currentRank[lv_buttonIndex][lv_player] &gt; lib1_gv_maxRank[lv_buttonIndex][lv_player])) {
                        libNtve_gf_SetDialogItemText(lib1_gv_talentButtonLabel[lv_buttonIndex][lv_player], (IntToText(lib1_gv_maxRank[lv_buttonIndex][lv_player]) + StringExternal(&quot;Param/Value/lib_1_180A9D53&quot;) + IntToText(lib1_gv_maxRank[lv_buttonIndex][lv_player])), PlayerGroupAll());
                        lib1_gv_currentRank[lv_buttonIndex][lv_player] = lib1_gv_maxRank[lv_buttonIndex][lv_player];
                        lib1_gv_pointsSpentinTree[lib1_gv_tree[lv_buttonIndex][lv_player]][lv_player] -= 1;
                        lib1_gv_availableTalentPoints[lv_player] += 1;
                        lib1_gv_spentTalentPoints[lv_player] -= 1;
                    }
                    Wait(0.1, c_timeReal);
                    gv_players[lv_playerIndex].talents.adding = false;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void lib1_gt_PickTalent_Init () {
                lib1_gt_PickTalent = TriggerCreate(&quot;lib1_gt_PickTalent_Func&quot;);
                TriggerAddEventDialogControl(lib1_gt_PickTalent, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Close Talent
            //--------------------------------------------------------------------------------------------------
            bool lib1_gt_CloseTalent_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventDialogControl() == lib1_gv_closeTalentTreeButton[EventPlayer()]))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lib1_gf_ShowHideTalentTree(EventPlayer());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void lib1_gt_CloseTalent_Init () {
                lib1_gt_CloseTalent = TriggerCreate(&quot;lib1_gt_CloseTalent_Func&quot;);
                TriggerAddEventDialogControl(lib1_gt_CloseTalent, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Load Talent Bank
            //--------------------------------------------------------------------------------------------------
            bool lib1_gt_LoadTalentBank_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void lib1_gt_LoadTalentBank_Init () {
                lib1_gt_LoadTalentBank = TriggerCreate(&quot;lib1_gt_LoadTalentBank_Func&quot;);
                TriggerAddEventMapInit(lib1_gt_LoadTalentBank);
            }
            void lib1_InitTriggers () {
                lib1_gt_PickTalent_Init();
                lib1_gt_CloseTalent_Init();
                lib1_gt_LoadTalentBank_Init();
            }
            //--------------------------------------------------------------------------------------------------
            // Library Initialization
            //--------------------------------------------------------------------------------------------------
            bool lib1_InitLib_completed = false;
            void lib1_InitLib () {
                if (lib1_InitLib_completed) {
                    return;
                }
                lib1_InitLib_completed = true;
                lib1_InitLibraries();
                lib1_InitVariables();
                lib1_InitTriggers();
            }
            //--------------------------------------------------------------------------------------------------
            // Library Initialization
            //--------------------------------------------------------------------------------------------------
            void FakeInitLibs () {
                libNtve_InitLib();
                lib1_InitLib();
            }
            //--------------------------------------------------------------------------------------------------
            // Constants
            //--------------------------------------------------------------------------------------------------
            const fixed gv_mAXEXPERIENCE = 500000.0;
            //--------------------------------------------------------------------------------------------------
            // Global Variables
            //--------------------------------------------------------------------------------------------------
            bool gv_endofDays;
            bool gv_syritalsHatchActive;
            bool gv_guardiansHatchActive;
            bool gv_sremagsisHatchActive;
            bool gv_machinaDePlagamsHatchActive;
            bool gv_zauberersHatchActive;
            unit gv_contestant1;
            unit gv_contestant2;
            unitgroup gv_contestant1Group;
            unitgroup gv_contestant2Group;
            bool gv_matchGoingOn;
            int gv_arenaWaitingTextTag;
            playergroup gv_playersintheArena;
            int[5] gv_potionHotkeyTextTag;
            string gv_potionCooldownName;
            string gv_aSPCooldownName;
            int[5] gv_grandOrbofAngerCount;
            bool[5] gv_occulusofWarning;
            bool[5] gv_facetofRevenge;
            bool[5] gv_crystalofRebirth;
            bool[5] gv_jewelofReturn;
            bool[5] gv_stoneofProtection;
            bool[5] gv_ringofQuickening;
            fixed[5][101] gv_stackCounts;
            string[10] gv_stackChargeNames;
            int gv_invenorySlot;
            int gv_untitledVariable001;
            playergroup gv_playersinUndergroundForest;
            playergroup gv_playersinRelamyGorge;
            playergroup gv_playersinRelamyCave;
            trigger[5] gv_infestationSpawnTrigger;
            playergroup gv_playersinInfestation;
            unit[5][7][26] gv_inventory;
            bool[5] gv_evolving;
            bool[5] gv_allSeeingEye;
            bool[5] gv_fireSkin;
            bool[5] gv_dragonDying;
            timer[5] gv_dyingTimer;
            int[5] gv_dyingTimerWindow;
            string[5] gv_attributeText;
            int gv_screenButton;
            bool[5] gv_reapplyingBuffs;
            bool[5] gv_isIdle;
            int gv_nosferatusDeathCount;
            unit gv_nosferatu;
            int[50] gv_enemyDeathCounts;
            int[50] gv_unitKills;
            unitgroup gv_zauberersMinions;
            string[11] gv_zauberersMinionsUnitTypes;
            region[10] gv_zauberersRegions;
            unit gv_zauberersCrystal;
            point gv_zauberersCrystalLocation;
            unit gv_TimeWarpBot;
            point gv_TimeWarpBotLocation;
            bool[5] gv_zaubererFirstFormAlreadyDead;
            revealer[6] gv_zauberer1stFormRevealer;
            unitgroup gv_dragonInBattleWithZauberer1stForm;
            playergroup gv_playersInBattleWithZauberer1stForm;
            int gv_livingDragonsFightingZauberer1stForm;
            unit gv_zauberer1stForm;
            unitgroup gv_dragonInBattleWithZauberer2ndForm;
            playergroup gv_playersInBattleWithZauberer2ndForm;
            int gv_livingDragonsFightingZauberer2ndForm;
            unit gv_zauberer2ndForm;
            timer gv_zaubererTimer;
            int gv_zaubererTimerWindow;
            int[5] gv_machinaDePlagamWarning;
            unitgroup gv_unitsthatdidDamagetoMachinaDePlagam;
            bool gv_machinaDePlagamisDead;
            sound[5] gv_machinaDePlagamsTheme;
            bool[5] gv_inFightwithMachinaDePlagam;
            bool gv_respawningMachinaDePlagam;
            unit gv_machinaDePlagam;
            unitgroup gv_machinaDePlagamsBackup;
            int gv_sremagsiWarning;
            bool gv_sremagsiDead;
            sound[5] gv_sremagsisTheme;
            bool[5] gv_inFightWithSremagsi;
            unitgroup gv_unitsthatdidDamagetoSremagsi;
            bool gv_respawningSremagsi;
            unit gv_sremagsi;
            unit gv_tolic;
            unit gv_korlic;
            unit gv_madawc;
            sound gv_guardiansTheme;
            bool gv_guardiansDead;
            unit[9] gv_mineralBlocks;
            unitgroup gv_dragonsInBattleWithGuardians;
            playergroup gv_playersinBattlewithGuardians;
            bool[5] gv_inFightWithGaurdians;
            unit gv_zauberersStatue;
            unitgroup gv_guardians;
            int gv_numGaurdiansDead;
            revealer[5] gv_guardianRevealers;
            int gv_numPlayersHigherThan25;
            int gv_livingDragonsinGaurdian;
            int gv_syritalWarning;
            bool gv_syritalDead;
            sound[5] gv_syritalsTheme;
            bool[5] gv_inFightwithSyrital;
            unitgroup gv_unitsthatdidDamagetoSyrital;
            bool gv_respawningSyrital;
            unit gv_syrital;
            region[8] gv_bioDomeWastelandRegions;
            unitgroup[8] gv_bioDomeWastelandUnits;
            region[11] gv_cretonTrenchRegions;
            unitgroup[11] gv_cretonTrenchUnits;
            region[39] gv_cretonRegions;
            unitgroup[39] gv_cretonUnits;
            bool gv_cretonSpawned;
            unitgroup[11] gv_verbotenInfestationUnits;
            region[11] gv_verbotenInfestationsRegions;
            bool[5] gv_verbotenInfestationSpawned;
            region[8] gv_verbotenForestRegions;
            unitgroup[8] gv_verbotenForestUnits;
            unitgroup[6] gv_wastelandUnitGroups;
            region[6] gv_wastelandRegions;
            unitgroup[5] gv_relamyPassUnits;
            region[5] gv_relamyPassRegions;
            unitgroup[9] gv_relamyGorgeUnits;
            region[9] gv_relamyGorgeRegions;
            string[4] gv_relamyGorgeUnitTypes;
            unitgroup[5] gv_relamyCanyonUnits;
            region[5] gv_relamyCanyonRegions;
            region[6] gv_relamyHillsRegions;
            unitgroup[6] gv_relamyHillsUnits;
            region[9] gv_undergroundForestRegions;
            unitgroup[9] gv_undergroundForestUnits;
            string[3] gv_undergroundForestUnitTypes;
            bool[5][6] gv_unlockedWaypoints;
            playergroup gv_playersInBioDome;
            unitgroup gv_dragonsInBioDome;
            unitgroup gv_bDZombieUnits;
            unitgroup gv_bDCretonUnits;
            unitgroup gv_bDVerbotenUnits;
            unitgroup gv_bDRelamyUnits;
            unitgroup gv_bDWastelandUnits;
            point[5] gv_respawnPoint;
            region[5] gv_dragonLocation;
            string[5] gv_locationText;
            string[5] gv_locationString;
            bool[5] gv_epicModeOn;
            int gv_mortuusKillCount;
            bool gv_playersSetUp;
            bank[5] gv_stashBank;
            bank[5] gv_playerBank;
            int gv_ofHumanPlayers;
            playergroup gv_humanPlayers;
            string[101] gv_enemyUnitTypes;
            bool[5] gv_unitispatrolling;
            bool[5] gv_unitisattackmoving;
            bool[5] gv_aPFixed;
            int[5] gv_gold;
            int[5] gv_pvPPoints;
            int[5] gv_shards;
            bool[5] gv_accesingBank;
            fixed[5] gv_currentexp;
            unitgroup gv_dragons;
            int gv_leadboard;
            bool[5] gv_gameBeat;
            int gv_showTalentsButton;
            bool[5] gv_inCinematic;
            unit[5] gv_stash;
            point[5] gv_stashLocation;
            bool[5] gv_hRCChecked;
            bool[5] gv_hPCChecked;
            int gv_days;
            int gv_hours;
            int gv_minutes;
            playergroup gv_playerswatchingintrocinematic;
            unit gv_introCinematicZauberer;
            bool[5] gv_playerhasseenIntro;
            playergroup gv_playerswatchingendingcinematic;
            int[5] gv_infernoCount;
            bool[5] gv_isSavingExiting;
            bool[5] gv_autosavePrevention;
            int gv_hPCConstant;
            int gv_hRCConstant;
            void FakeInitGlobals () {
                int init_i;
                int init_j;
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.questDialog.state = c_invalidDialogId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.questDialog.textBox = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.questDialog.reward = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.questDialog.recommendedLevel = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.questDialog.accept = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.questDialog.decline = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.talkDialog.state = c_invalidDialogId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.talkDialog.textBox = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.talkDialog.accept = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.rewardDialog.state = c_invalidDialogId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.rewardDialog.textBox = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.rewardDialog.accept = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[0].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[0].ping = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[1].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[1].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[1].ping = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[2].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[2].ping = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[3].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[3].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[3].ping = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[4].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[4].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[4].ping = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[5].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[5].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[5].ping = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[6].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[6].ping = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[7].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[7].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[7].ping = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[8].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[8].ping = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[9].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.storyQuests[9].ping = c_invalidPingId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.manaQuests[0].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.manaQuests[0].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.manaQuests[1].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.manaQuests[1].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.manaQuests[2].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.manaQuests[2].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.manaQuests[3].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.manaQuests[3].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.manaQuests[4].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.manaQuests[4].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.manaQuests[5].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.manaQuests[5].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.baseQuests[0].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.baseQuests[0].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.baseQuests[1].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.baseQuests[1].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.detsefniQuests[0].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.detsefniQuests[0].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.sergeantListerQuests[0].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.sergeantListerQuests[0].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.greedQuests[0].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.greedQuests[0].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.madelineQuests[0].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.madelineQuests[0].objective = c_invalidObjectiveId;
                }
                gv_robus = UnitFromId(4066);
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.malinQuests[0].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.malinQuests[0].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.ampQuests[0].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.ampQuests[0].objective = c_invalidObjectiveId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.altossQuests[0].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.altossQuests[0].objective = c_invalidObjectiveId;
                }
                gv_illisus = UnitFromId(4393);
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.oleumQuests[0].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.oleumQuests[0].objective = c_invalidObjectiveId;
                }
                gv_shadowSeryn = UnitFromId(632);
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.serynQuests[0].textTag = c_textTagNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].quests.serynQuests[0].objective = c_invalidObjectiveId;
                }
                gv_contestant1 = UnitFromId(630);
                gv_contestant2 = UnitFromId(632);
                gv_contestant1Group = UnitGroupEmpty();
                gv_contestant2Group = UnitGroupEmpty();
                gv_arenaWaitingTextTag = c_textTagNone;
                gv_playersintheArena = PlayerGroupEmpty();
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_potionHotkeyTextTag[init_i] = c_textTagNone;
                }
                gv_potionCooldownName = &quot;Potions&quot;;
                gv_aSPCooldownName = &quot;Attack Speed Potions&quot;;
                for (init_i = 0; init_i &lt;= 9; init_i += 1) {
                    gv_stackChargeNames[init_i] = &quot;&quot;;
                }
                gv_playersinUndergroundForest = PlayerGroupEmpty();
                gv_playersinRelamyGorge = PlayerGroupEmpty();
                gv_playersinRelamyCave = PlayerGroupEmpty();
                gv_playersinInfestation = PlayerGroupEmpty();
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].skills.frostSpike = -1;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].skills.blizzard = -1;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].skills.fireball = -1;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].skills.fireClaw = -1;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].skills.flameEgg = -1;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].skills.inferno = -1;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].skills.nova = -1;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].skills.subzero = -1;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].skills.frozenArmour = -1;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_dyingTimer[init_i] = TimerCreate();
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_dyingTimerWindow[init_i] = c_timerWindowNone;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].stats.attributeDialog.state = c_invalidDialogId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].stats.attributeDialog.textBox = c_invalidDialogControlId;
                }
                gv_screenButton = c_invalidDialogControlId;
                gv_nosferatu = UnitFromId(632);
                gv_zauberersMinions = UnitGroupEmpty();
                gv_zauberersCrystal = UnitFromId(2501);
                gv_zauberersCrystalLocation = UnitGetPosition(gv_zauberersCrystal);
                gv_TimeWarpBot = UnitFromId(571981628);
                gv_TimeWarpBotLocation =  UnitGetPosition(gv_TimeWarpBot);
                gv_dragonInBattleWithZauberer1stForm = UnitGroupEmpty();
                gv_playersInBattleWithZauberer1stForm = PlayerGroupEmpty();
                gv_dragonInBattleWithZauberer2ndForm = UnitGroupEmpty();
                gv_playersInBattleWithZauberer2ndForm = PlayerGroupEmpty();
                gv_zaubererTimer = TimerCreate();
                gv_zaubererTimerWindow = c_timerWindowNone;
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_machinaDePlagamWarning[init_i] = c_textTagNone;
                }
                gv_unitsthatdidDamagetoMachinaDePlagam = UnitGroupEmpty();
                gv_machinaDePlagam = UnitFromId(1711);
                gv_machinaDePlagamsBackup = UnitGroupEmpty();
                gv_sremagsiWarning = c_textTagNone;
                gv_unitsthatdidDamagetoSremagsi = UnitGroupEmpty();
                gv_sremagsi = UnitFromId(1151);
                gv_tolic = UnitFromId(631);
                gv_korlic = UnitFromId(632);
                gv_madawc = UnitFromId(630);
                gv_dragonsInBattleWithGuardians = UnitGroupEmpty();
                gv_playersinBattlewithGuardians = PlayerGroupEmpty();
                gv_zauberersStatue = UnitFromId(628);
                gv_guardians = UnitGroupEmpty();
                gv_syritalWarning = c_textTagNone;
                gv_unitsthatdidDamagetoSyrital = UnitGroupEmpty();
                gv_syrital = UnitFromId(158);
                for (init_i = 0; init_i &lt;= 7; init_i += 1) {
                    gv_bioDomeWastelandUnits[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= 10; init_i += 1) {
                    gv_cretonTrenchUnits[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= 38; init_i += 1) {
                    gv_cretonUnits[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= 10; init_i += 1) {
                    gv_verbotenInfestationUnits[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= 7; init_i += 1) {
                    gv_verbotenForestUnits[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= 5; init_i += 1) {
                    gv_wastelandUnitGroups[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_relamyPassUnits[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= 8; init_i += 1) {
                    gv_relamyGorgeUnits[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_relamyCanyonUnits[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= 5; init_i += 1) {
                    gv_relamyHillsUnits[init_i] = UnitGroupEmpty();
                }
                for (init_i = 0; init_i &lt;= 8; init_i += 1) {
                    gv_undergroundForestUnits[init_i] = UnitGroupEmpty();
                }
                gv_waypointDialog = c_invalidDialogId;
                gv_wastelandDialogButton = c_invalidDialogControlId;
                gv_relamyDialogButton = c_invalidDialogControlId;
                gv_verbotenDialogButton = c_invalidDialogControlId;
                gv_cretonDialogButton = c_invalidDialogControlId;
                gv_ballanDialogButton = c_invalidDialogControlId;
                gv_closeWaypointDialogButton = c_invalidDialogControlId;
                gv_playersInBioDome = PlayerGroupEmpty();
                gv_dragonsInBioDome = UnitGroupEmpty();
                gv_bDZombieUnits = UnitGroupEmpty();
                gv_bDCretonUnits = UnitGroupEmpty();
                gv_bDVerbotenUnits = UnitGroupEmpty();
                gv_bDRelamyUnits = UnitGroupEmpty();
                gv_bDWastelandUnits = UnitGroupEmpty();
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_respawnPoint[init_i] = PointFromId(1);
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].locationDialog.state = c_invalidDialogId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].locationDialog.textBox = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_locationText[init_i] = &quot;Dragon&apos;s Nest&quot;;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_locationString[init_i] = &quot;Dragon&apos;s Nest&quot;;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].dragon = UnitFromId(632);
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].stats.level = 1;
                }
                gv_humanPlayers = PlayerGroupEmpty();
                gv_dragons = UnitGroupEmpty();
                gv_leadboard = c_boardNone;
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].talents.talentDialog.state = c_invalidDialogId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].talents.talentDialog.button = c_invalidDialogControlId;
                }
                gv_showTalentsButton = c_invalidDialogControlId;
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_stash[init_i] = UnitFromId(631);
                }
                gv_days = 1;
                gv_hours = 6;
                gv_timeofDayDialog = c_invalidDialogId;
                gv_timeofDayDialogLabel = c_invalidDialogControlId;
                gv_timeofDayDialogLabelText = StringExternal(&quot;Param/Value/C521DE8F&quot;);
                gv_playerswatchingintrocinematic = PlayerGroupEmpty();
                gv_playerswatchingendingcinematic = PlayerGroupEmpty();
                gv_hPCConstant = 3954;
                gv_hRCConstant = 7919;
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].stats.reborn.dialog.state = c_invalidDialogId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].stats.reborn.buttonDialog.state = c_invalidDialogId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    gv_players[init_i].stats.reborn.dialog.button = c_invalidDialogControlId;
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 10; init_j += 1) {
                        gv_players[init_i].stats.reborn.dialog.pointLabel[init_j] = c_invalidDialogControlId;
                    }
                }
                for (init_i = 0; init_i &lt;= 4; init_i += 1) {
                    for (init_j = 0; init_j &lt;= 10; init_j += 1) {
                        gv_players[init_i].stats.reborn.dialog.pointButton[init_j] = c_invalidDialogControlId;
                    }
                }
                gv_rebornDialogRebornPointLabel = c_invalidDialogControlId;
                gv_adminHandles[0] = &quot;&quot;;
                gv_adminHandles[1] = &quot;1-S2-1-4553710&quot;;
                gv_adminHandles[2] = &quot;1-S2-1-3427636&quot;;
                gv_adminHandles[3] = &quot;1-S2-1-4099844&quot;;
                gv_adminHandles[4] = &quot;1-S2-1-3554203&quot;;
                gv_adminHandles[5] = &quot;1-S2-1-2453495&quot;;
                gv_adminHandles[6] = &quot;1-S2-1-5695184&quot;;
                gv_adminHandles[7] = &quot;2-S2-1-2355723&quot;;
            }
            //--------------------------------------------------------------------------------------------------
            // Global Function Declarations
            //--------------------------------------------------------------------------------------------------
            void gf_AddExperience (unit lp_hero, fixed lp_experienceAmmount);
            void gf_OpenQuestDialog (int lp_questingPlayer, text lp_questText, text lp_questName, text lp_reward, text lp_recommendedLevel);
            void gf_CloseQuestDialog (int lp_questingPlayer);
            void gf_OpenTalkDialog (int lp_questingPlayer, text lp_nPCName, text lp_dialog);
            void gf_CloseTalkDialog (int lp_questingPlayer);
            void gf_OpenRewardDialog (int lp_questingPlayer, text lp_questName, text lp_dialog);
            void gf_CloseRewardDialog (int lp_questingPlayer);
            void gf_SQ0Setup (int lp_player);
            void gf_SQ1Setup (int lp_player);
            void gf_SQ2Setup (int lp_player);
            void gf_SQ3Setup (int lp_player);
            void gf_SQ4Setup (int lp_player);
            void gf_SQ5Setup (int lp_player);
            void gf_SQ6Setup (int lp_player);
            void gf_SQ7Setup (int lp_player);
            void gf_SQ8Setup (int lp_player);
            void gf_SQ9Setup (int lp_player);
            fixed gf_CalculateHealthMissing (unit lp_unit);
            void gf_SaveStackCounts (int lp_player);
            void gf_RemoveWeapons (unit lp_hero);
            void gf_SaveSkills (int lp_player);
            void gf_FillInventory (int lp_player);
            void gf_PutInventoryinInventory (int lp_player);
            void gf_EvolvetoTeen (int lp_player);
            void gf_EvolvetoAdult (int lp_player);
            void gf_EvolvetoMaster (int lp_player);
            void gf_EvolvetoLegendary (int lp_player);
            void gf_ReapplyBuffs (int lp_player);
            void gf_LevelUp (int lp_player);
            void gf_ShowStats (unit lp_hero);
            void gf_HideStats (unit lp_hero);
            void gf_RandomEffectonAttack (fixed lp_percentChance, int lp_ammountof, string lp_debuff, unit lp_recievingUnit, unit lp_sendingUnit);
            void gf_RandomlySpawnAllies (fixed lp_percentChance, int lp_ammountof, string lp_enemytospawn, unit lp_spawningUnit, unit lp_spawnee);
            bool gf_RandomChance (fixed lp_percentChance);
            void gf_NosferatusRelic (int lp_player, unit lp_hero, fixed lp_attackAmmount);
            void gf_StickyShot (unit lp_hero, unit lp_target);
            void gf_RealmSwitch (unit lp_hero, unit lp_target);
            void gf_DualWield (unit lp_hero, unit lp_target, string lp_herosEffect, fixed lp_herosEffectDamage);
            void gf_Rage (unit lp_hero, fixed lp_damagingAmount);
            void gf_WaypointTeleport (int lp_player, region lp_waypoint);
            void gf_ShowWaypointDialog (int lp_player);
            void gf_HideWaypointDialog (int lp_player);
            void gf_ResetTalentBuildandVariables (int lp_importantPlayer);
            void gf_LoadStackCounts (int lp_player);
            void gf_LoadSkills (int lp_player);
            void gf_LoadHPC (int lp_player);
            void gf_LoadHRC (int lp_player);
            void gf_LoadDragonCheck (int lp_player);
            void gf_LoadStash (int lp_player);
            void gf_InitializeOne ();
            void gf_InitializeTwo ();
            void gf_InitializeThree ();
            void gf_ChangeItemsOwner (int lp_player);
            void gf_StatCheck (int lp_player);
            void gf_Save (int lp_savingPlayer);
            void gf_SaveHero (int lp_player);
            void gf_SaveStash (int lp_player);
            void gf_SaveHPC (int lp_player);
            void gf_SaveHRC (int lp_player);
            void gf_ApplyRebornStats (int lp_player);
            bool gf_IsAdmin(int p);
            void gf_InitializePlayers();
            void gf_SetupPlayer(int p);
            void gf_OcculusPingPlayer(int p);
            //--------------------------------------------------------------------------------------------------
            // Trigger Variables
            //--------------------------------------------------------------------------------------------------
            trigger gt_CreateQuestDialog;
            trigger gt_CreateTalkDialog;
            trigger gt_CreateRewardDialog;
            trigger gt_QuestDecline;
            trigger gt_TalkDialogClosed;
            trigger gt_RunStoryQuestSetups;
            trigger gt_SQ0PlayerEntersSQ0Region1;
            trigger gt_SQ1PlayerTalkstoFelix;
            trigger gt_SQ2PlayerEntersSQ2Region1;
            trigger gt_SQ3PlayerTalkstoPetrose;
            trigger gt_SQ3PlayerEntersVerbotenForest;
            trigger gt_SQ4PlayerTalkstoRisdak;
            trigger gt_SQ5PlayerEntersInfestation;
            trigger gt_SQ5PlayerTalkstoPetrose;
            trigger gt_SQ6PlayerEntersTeleporttoBiodome;
            trigger gt_SQ7PlayerTalkstoLanae;
            trigger gt_SQ8BiodomeEntered;
            trigger gt_SQ8Crystal1Destroyed;
            trigger gt_SQ8Crystal2Destroyed;
            trigger gt_SQ8Crystal3Destroyed;
            trigger gt_SQ8Crystal4Destroyed;
            trigger gt_SQ8Crystal5Destroyed;
            trigger gt_SQ8Crystal6Destroyed;
            trigger gt_LoadSideQuests;
            trigger gt_ManaQuest0TalktoMana;
            trigger gt_ManaQuest0QuestAccept;
            trigger gt_ManaQuest0EquipArmorP1;
            trigger gt_ManaQuest0RewardAccept;
            trigger gt_ManaQuest1TalktoMana;
            trigger gt_ManaQuest1QuestAccept;
            trigger gt_ManaQuest1KillSheep;
            trigger gt_ManaQuest1RewardAccept;
            trigger gt_ManaQuest2TalktoMana;
            trigger gt_ManaQuest2QuestAccept;
            trigger gt_ManaQuest2EnterWastelandWater;
            trigger gt_ManaQuest2RewardAccept;
            trigger gt_ManaQuest3TalktoMana;
            trigger gt_ManaQuest3QuestAccept;
            trigger gt_ManaQuest3KillSrepti;
            trigger gt_ManaQuest3RewardAccept;
            trigger gt_ManaQuest4TalktoMana;
            trigger gt_ManaQuest4QuestAccept;
            trigger gt_ManaQuest4RewardAccept;
            trigger gt_ManaQuest4PurchasePotion;
            trigger gt_ManaQuest5TalktoMana;
            trigger gt_ManaQuest5QuestAccept;
            trigger gt_ManaQuest5KillAlphaSrepti;
            trigger gt_ManaQuest5RewardAccept;
            trigger gt_BaseQuest0TalktoBase;
            trigger gt_BaseQuest0QuestAccept;
            trigger gt_BaseQuest0SetRespawnPointatWasteland;
            trigger gt_BaseQuest0RewardAccept;
            trigger gt_BaseQuest1TalktoBase;
            trigger gt_BaseQuest1QuestAccept;
            trigger gt_BaseQuest1ActivateBallanWaypoint;
            trigger gt_BaseQuest2UseBallanWaypointtoWasteland;
            trigger gt_BaseQuest1RewardAccept;
            trigger gt_DetsefniQuest0TalktoDetsefni;
            trigger gt_DetsefniQuest0QuestAccept;
            trigger gt_DetsefniQuest0Kill25Sreptis;
            trigger gt_DetsefniQuest0RewardAccept;
            trigger gt_SergeantListerQuest0TalktoSergeantLister;
            trigger gt_SergeantListeriQuest0QuestAccept;
            trigger gt_SergeantListerQuest0Kill10CretonWarriors;
            trigger gt_SergeantListerQuest0RewardAccept;
            trigger gt_GreedQuest0TalktoGreed;
            trigger gt_GreedQuest0QuestAccept;
            trigger gt_GreedQuest0FindMisterScruffers;
            trigger gt_GreedQuest0RewardAccept;
            trigger gt_MadeleineQuest0TalktoMadeleine;
            trigger gt_MadeleineQuest0QuestAccept;
            trigger gt_MadeleineQuest0Kill30Karramarros;
            trigger gt_MadeleineQuest0RewardAccept;
            trigger gt_MalinQuest0TalktoMalin;
            trigger gt_MalinQuest0QuestAccept;
            trigger gt_MalinQuest0KillRobus;
            trigger gt_MalinQuest0RewardAccept;
            trigger gt_AmpQuest0TalktoAmp;
            trigger gt_AmpQuest0QuestAccept;
            trigger gt_AmpQuest0KillanEliteCretonWarrior;
            trigger gt_AmpQuest0RewardAccept;
            trigger gt_AltossQuest0TalktoAltoss;
            trigger gt_AltossQuest0QuestAccept;
            trigger gt_AltossQuest0Kill15Odvratans;
            trigger gt_AltossQuest0RewardAccept;
            trigger gt_IllisusLocustSpawn;
            trigger gt_OleumQuest0TalktoOleum;
            trigger gt_OleumQuest0QuestAccept;
            trigger gt_OleumQuest0FindCrew137;
            trigger gt_OleumQuest0KillIllisus;
            trigger gt_OleumQuest0RewardAccept;
            trigger gt_SerynQuest0TalktoSeryn;
            trigger gt_SerynQuest0QuestAccept;
            trigger gt_SerynQuest0KillSerynsShadow;
            trigger gt_SerynQuest0RewardAccept;
            trigger gt_ChaosUnitTypes;
            trigger gt_SyritalsHatch;
            trigger gt_GuardiansHatch;
            trigger gt_SremagsisHatch;
            trigger gt_MachinaDePlagamsHatch;
            trigger gt_ZauberersHatch;
            trigger gt_SpawnArenaText1;
            trigger gt_SpawnArenaText2;
            trigger gt_HeroLeavesArena1;
            trigger gt_HeroLeavesArena2;
            trigger gt_HeroEntersArena1;
            trigger gt_HeroEntersArena2;
            trigger gt_Contestant1Dies;
            trigger gt_Contestant2Dies;
            trigger gt_OpenInventorywhenclickonstash;
            trigger gt_Dropstuffnotunlockedyet;
            trigger gt_PotionHotkeyP1;
            trigger gt_PotionHotkeyP2;
            trigger gt_PotionHotkeyP3;
            trigger gt_PotionHotkeyP4;
            trigger gt_GrandOrbofAngerCounter;
            trigger gt_GrandOrbofAngerEffectP1;
            trigger gt_GrandOrbofAngerEffectP2;
            trigger gt_GrandOrbofAngerEffectP3;
            trigger gt_GrandOrbofAngerEffectP4;
            trigger gt_Player1BuysOcculusofWarning;
            trigger gt_Player2BuysOcculusofWarning;
            trigger gt_Player3BuysOcculusofWarning;
            trigger gt_Player4BuysOcculusofWarning;
            trigger gt_OcculusPingPlayer1;
            trigger gt_OcculusPingPlayer2;
            trigger gt_OcculusPingPlayer3;
            trigger gt_OcculusPingPlayer4;
            trigger gt_PlayerBuysFacetofRevenge;
            trigger gt_PlayerBuysCrystalofRebirth;
            trigger gt_PlayerBuysJewelofReturn;
            trigger gt_PlayerBuysStoneofProtection;
            trigger gt_PlayerBuysRingofQuickening;
            trigger gt_TolicsFireOrbDamageResponse;
            trigger gt_SetStackChargeNames;
            trigger gt_SaveStackCountsOnInventoryEdit;
            trigger gt_SaveStackCountsPeriodically;
            trigger gt_TownPortal;
            trigger gt_Unitdropsitem;
            trigger gt_Unitgainsitem;
            trigger gt_ShieldCheck;
            trigger gt_WeaponCheck;
            trigger gt_SellingSystemRedux;
            trigger gt_DisplayArmorShopTextTag;
            trigger gt_DisplayWeaponShopTextTag;
            trigger gt_DisplayOrbShopTextTag;
            trigger gt_DisplayShardShopTextTag;
            trigger gt_DisplayStashTextTagP1;
            trigger gt_DisplayStashTextTagP2;
            trigger gt_DisplayStashTextTagP3;
            trigger gt_DisplayStashTextTagP4;
            trigger gt_UndergroundForestEnter;
            trigger gt_UndergroundForestExit;
            trigger gt_RelamyGorgeEnter;
            trigger gt_RelamyGorgeExit;
            trigger gt_RelamyCaveEnter;
            trigger gt_RelamyCaveExit;
            trigger gt_SetInfestationSpawnTrigger;
            trigger gt_VerbotenInfestationEnter;
            trigger gt_VerbotenInfestationExit;
            trigger gt_BlizzardFreezeChance;
            trigger gt_LearnFireball;
            trigger gt_LearnFireclaws;
            trigger gt_LearnFlameegg;
            trigger gt_LearnInferno;
            trigger gt_LearnNova;
            trigger gt_LearnFrostspike;
            trigger gt_LearnBlizzard;
            trigger gt_LearnSubzero;
            trigger gt_LearnFrozenarmor;
            trigger gt_CheckPlayerisnoteveolved;
            trigger gt_DummyDies;
            trigger gt_ReviveDragonNormal;
            trigger gt_ReviveDragonPvP;
            trigger gt_SetUpAttributeDialog;
            trigger gt_Level0Check;
            trigger gt_LevelUp;
            trigger gt_EvolutionCheck;
            trigger gt_Agility1;
            trigger gt_Dexterity1;
            trigger gt_Intelligence1;
            trigger gt_Strength1;
            trigger gt_Vitality1;
            trigger gt_UpdateBuffs;
            trigger gt_ShowTalents;
            trigger gt_SetisIdleOn;
            trigger gt_SetisIdleOff;
            trigger gt_DefendYourself;
            trigger gt_FrostSpike;
            trigger gt_SyritalTalonsBurning;
            trigger gt_RobusSpawnAllies;
            trigger gt_RobusCarrionNeedlesPoison;
            trigger gt_SremagsiTentacleDisorientation;
            trigger gt_HeroCarrionNeedlesPoison;
            trigger gt_HeroSremagsisTentaclesDisorientated;
            trigger gt_NosferatusLogic;
            trigger gt_NosferatuDies;
            trigger gt_Nosferatudeathcount;
            trigger gt_GreedisGood;
            trigger gt_QuickLearner;
            trigger gt_Herotakesmeleedamage;
            trigger gt_Herotakesrangeddamage;
            trigger gt_Herotakesspelldamage;
            trigger gt_Herotakessplashdamage;
            trigger gt_HeroMissranged;
            trigger gt_HeroMissmelee;
            trigger gt_HeroMissmelee1Shot;
            trigger gt_Herogivesrangeddamage;
            trigger gt_DarkDissulto;
            trigger gt_EnemyAIAttacked;
            trigger gt_EnemyAILava1;
            trigger gt_EnemyAILava2;
            trigger gt_EnemyAILava3;
            trigger gt_EnemyAINest;
            trigger gt_EnemySkillResponse;
            trigger gt_ZauberersFavor;
            trigger gt_CountUnitDeaths;
            trigger gt_EliteCretonWarrior;
            trigger gt_EliteCretonWatcher;
            trigger gt_LargeSheep;
            trigger gt_AlphaSrepti;
            trigger gt_GivenMeleeDamageTextTag;
            trigger gt_RecievedMeleeDamageTextTag;
            trigger gt_SetZauberersMinionsUnitTypes;
            trigger gt_SetZauberersRegions;
            trigger gt_SpawnZauberersMinions;
            trigger gt_DragonDiesinZauberer1;
            trigger gt_DragonDiesinZauberer2;
            trigger gt_WarpOutFromBossArena;
            trigger gt_SpawnZauberer1stForm;
            trigger gt_Zauberer1stFormDeath;
            trigger gt_Zauberer1stFormAI;
            trigger gt_SpawnZauberer2ndFormNormalWay;
            trigger gt_SpawnZauberer2ndFormSpecial;
            trigger gt_Zauberer2ndFormDeath;
            trigger gt_Zauberer2ndFormAI;
            trigger gt_MachinaDePlagamSethealth;
            trigger gt_CreateMachinaDePlagamWarning;
            trigger gt_DestroyMachinaDePlagamWarning;
            trigger gt_HeroattacksMachinaDePlagam;
            trigger gt_MachinaDePlagamEnter;
            trigger gt_MachinaDePlagamLeave;
            trigger gt_MachinaDePlagamDragonDies;
            trigger gt_MachinaDePlagamDies;
            trigger gt_MachinaDePlagamRespawn;
            trigger gt_MachinaDePlagamBackup;
            trigger gt_UnitattacksSremagsi;
            trigger gt_Sremagsisethealth;
            trigger gt_SremagsiLairEnter;
            trigger gt_SremagsiLairExit;
            trigger gt_SremagsiDragonDies;
            trigger gt_SremagsiDies;
            trigger gt_SremagsiRespawn;
            trigger gt_CountPlayersGreaterthan25;
            trigger gt_GuardianSpawn;
            trigger gt_KorlicDies;
            trigger gt_TolicDies;
            trigger gt_MadawcDies;
            trigger gt_NoDragonsinGaurdian;
            trigger gt_GuardianRespawn;
            trigger gt_UnitattacksSyrital;
            trigger gt_SetSyritalHealth;
            trigger gt_CreateSyritalWarning;
            trigger gt_SyritalEnter;
            trigger gt_SyritalLeave;
            trigger gt_SyritalDragonDies;
            trigger gt_SyritalDies;
            trigger gt_SyritalRespawn;
            trigger gt_SpawnEnemies;
            trigger gt_SetupBioDomeWastelandRegions;
            trigger gt_SpawnEnemiesBioDomeWasteland;
            trigger gt_RespawnBioDomeWasteland;
            trigger gt_SetupCretonTranchRegions;
            trigger gt_SpawnEnemiesCretonTrench;
            trigger gt_RespawnCretonTrench;
            trigger gt_SetupCretonRegions;
            trigger gt_SpawnEnemiesCreton;
            trigger gt_RespawnCreton;
            trigger gt_SetVerbotenInfestationRegions;
            trigger gt_SpawnEnemiesVerbotenInfestationPlayer1;
            trigger gt_SpawnEnemiesVerbotenInfestationPlayer2;
            trigger gt_SpawnEnemiesVerbotenInfestationPlayer3;
            trigger gt_SpawnEnemiesVerbotenInfestationPlayer4;
            trigger gt_RespawnVerbotenInfestation;
            trigger gt_SetVerbotenForestRegions;
            trigger gt_RespawnVerbotenForest;
            trigger gt_SetWastelandRegions;
            trigger gt_RespawnWasteland;
            trigger gt_SetRelamyPassRegions;
            trigger gt_RespawnRelamyPass;
            trigger gt_SetRelamyGorgeRegions;
            trigger gt_RespawnRelamyGorge;
            trigger gt_SetRelamyCanyonRegions;
            trigger gt_RespawnRelamyCanyon;
            trigger gt_SetRelamyHillsRegions;
            trigger gt_RespawnRelamyHills;
            trigger gt_SetUndergroundForestRegions;
            trigger gt_RespawnUndergroundForest;
            trigger gt_WastelandWanderControl;
            trigger gt_RelamyPassWanderControl;
            trigger gt_RelamyGorgeWanderControl;
            trigger gt_RelamyCanyonWanderControl;
            trigger gt_RelamyHillsWanderControl;
            trigger gt_CreateWaypointDialog;
            trigger gt_LoadWaypoints;
            trigger gt_PlayerSelectsWaypoint;
            trigger gt_PlayerLeavesWaypoint;
            trigger gt_WaypointDialogButtonClicked;
            trigger gt_DragonEntersWaypoint;
            trigger gt_DragonLeavesWaypoint;
            trigger gt_BDZombieUnitSpawn;
            trigger gt_BDZombieUnitDeath;
            trigger gt_BDCretonUnitSpawn;
            trigger gt_BDCretonUnitDeath;
            trigger gt_BDVerbotenUnitSpawn;
            trigger gt_BDVerbotenUnitDeath;
            trigger gt_BDRelamyUnitSpawn;
            trigger gt_BDRelamyUnitDeath;
            trigger gt_BDWastelandUnitSpawn;
            trigger gt_BDWastelandUnitDeath;
            trigger gt_TeleporttoBioDome;
            trigger gt_TeleporttoCreton;
            trigger gt_SetRPtoWastelands;
            trigger gt_SetRPtoBallan;
            trigger gt_SetRPtoRelamy;
            trigger gt_SetRPtoVerbotenForestWaypoint;
            trigger gt_SetRPtoCreton;
            trigger gt_CreateDragonsNestWarning;
            trigger gt_CreateRelamyPassWarning;
            trigger gt_CreateRelamyCanyonWarning;
            trigger gt_CreateRelamyHillsWarning;
            trigger gt_CreateRelamyGorgeWarning;
            trigger gt_CreateLavaPassWarning;
            trigger gt_CreateVerbotenForestWarning;
            trigger gt_CreateVerbotenInfestationWarning;
            trigger gt_CreateRoadToBallanWarning;
            trigger gt_CreateCretonWarning;
            trigger gt_CreateSragmasiWarning;
            trigger gt_SetUpLocationDialog;
            trigger gt_LocationWasteland;
            trigger gt_LocationDragonsNest;
            trigger gt_LocationSyritalsLair;
            trigger gt_LocationRelamyPass;
            trigger gt_LocationRelamyCanyon;
            trigger gt_LocationRelamyHills;
            trigger gt_LocationVerbotenForest;
            trigger gt_LocationCreton;
            trigger gt_LocationCretonTrench;
            trigger gt_LocationRoadtoBallan;
            trigger gt_LocationBallan;
            trigger gt_WastelandHealingWaterEnter;
            trigger gt_WastelandHealingWaterLeave;
            trigger gt_RelamyPassHealingWaterEnter;
            trigger gt_RelamyPassHealingWaterLeave;
            trigger gt_RelamyCanyonHealingWaterEnter;
            trigger gt_RelamyCanyonHealingWaterLeave;
            trigger gt_VerbotenForestHealingWaterEnter;
            trigger gt_VerbotenForestHealingWaterLeave;
            trigger gt_LavaEnter;
            trigger gt_LavaExit;
            trigger gt_Chaos;
            trigger gt_ChaosHack;
            trigger gt_RevealMap;
            trigger gt_DevilsFlamethrower;
            trigger gt_WingClaws;
            trigger gt_TeleportInfestation;
            trigger gt_IslandofWoecheat;
            trigger gt_VTCount;
            trigger gt_Location;
            trigger gt_ResetQuest;
            trigger gt_TeleportBioDome;
            trigger gt_TeleporttoSpawn;
            trigger gt_DebugTeleZauberer;
            trigger gt_Invincibility;
            trigger gt_SuitUp;
            trigger gt_LevelDebug;
            trigger gt_GetHandle;
            trigger gt_NumberofUnitDeaths;
            trigger gt_Weapons;
            trigger gt_GetMoney;
            trigger gt_ViewEnding;
            trigger gt__50ShadesofGray;
            trigger gt_GetMoney2;
            trigger gt_GetMoney3;
            trigger gt_Fastest;
            trigger gt_MaxStats;
            trigger gt_DropAll;
            trigger gt_SpawnUnit;
            trigger gt_SpawnEnemyUnit;
            trigger gt_SpawnMassEnemyUnit;
            trigger gt_SpawnItem;
            trigger gt_MeleeBuffStacks;
            trigger gt_NumBuffs;
            trigger gt__999Talents;
            trigger gt_PlayerLeaves;
            trigger gt_OpenTalentMenu;
            trigger gt_ResetTalentBuild;
            trigger gt_InventoryTip;
            trigger gt_WeaponTip;
            trigger gt_DragonsNestTip;
            trigger gt_ResetStatsTip;
            trigger gt_ResetTalentsTip;
            trigger gt_ResetQuestsTip;
            trigger gt_HealingWaterTip;
            trigger gt_VespeneGasTip;
            trigger gt_EvolutionsTip;
            trigger gt_ArmorTip;
            trigger gt_SavingLoadingTip;
            trigger gt_MusicCreditsTip;
            trigger gt_AwesomePeopleTip;
            trigger gt_StashLocationSetup;
            trigger gt_LoadShards;
            trigger gt_CreateTimeofdayDialog;
            trigger gt_TimeofDayTick;
            trigger gt_SetUpPlayers;
            trigger gt_SetupRegions;
            trigger gt_SetupTips;
            trigger gt_SetUpTalentTree;
            trigger gt_MakePlayer14anAlly;
            trigger gt_SetUpUnitTypes;
            trigger gt_HideUselessUI;
            trigger gt_EnterDragonsNest;
            trigger gt_LeaveDragonsNest;
            trigger gt_CheckStats;
            trigger gt_ResetStats;
            trigger gt_BasicClaws;
            trigger gt_IntroCinematic;
            trigger gt_IntroCinematicReturntoNormal;
            trigger gt_PlayIntroTheme;
            trigger gt_EndingCinematic;
            trigger gt_EndingCinematicSaveExitNormal;
            trigger gt_EndingCinematicSaveExitSpecialP1;
            trigger gt_EndingCinematicSaveExitSpecialP2;
            trigger gt_EndingCinematicSaveExitSpecialP3;
            trigger gt_EndingCinematicSaveExitSpecialP4;
            trigger gt_PeriodicallySave;
            trigger gt_IceReborn;
            trigger gt_FireReborn;
            trigger gt_CreateRebornDialog;
            trigger gt_ToggleRebornDialogVisibility;
            trigger gt_RebornStats;
            //--------------------------------------------------------------------------------------------------
            // Custom AI Functions
            //--------------------------------------------------------------------------------------------------
            string[17] cai_playerAI;
            //--------------------------------------------------------------------------------------------------
            void FakeInitCustomAI () {
                int init_i;
                for (init_i = 0; init_i &lt;= 16; init_i += 1) {
                    cai_playerAI[init_i] = null;
                }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_start (string ai, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                cai_playerAI[p] = ai;
                if (cai_playerAI[p] == &quot;aiDF9A5388&quot;) { aiDF9A5388_start(p); }
                if (cai_playerAI[p] == &quot;ai665651A4&quot;) { ai665651A4_start(p); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_setDefGather (int p, point val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiDF9A5388&quot;) { aiDF9A5388_setDefGather(p, val); }
                if (cai_playerAI[p] == &quot;ai665651A4&quot;) { ai665651A4_setDefGather(p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            string cai_getCustomData (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiDF9A5388&quot;) { return aiDF9A5388_getCustomData(p); }
                if (cai_playerAI[p] == &quot;ai665651A4&quot;) { return ai665651A4_getCustomData(p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave cai_getLastWave (int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiDF9A5388&quot;) { return aiDF9A5388_getLastWave(p); }
                if (cai_playerAI[p] == &quot;ai665651A4&quot;) { return ai665651A4_getLastWave(p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_run (int p, playergroup target) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiDF9A5388&quot;) { aiDF9A5388_waves_run(p, target); }
                if (cai_playerAI[p] == &quot;ai665651A4&quot;) { ai665651A4_waves_run(p, target); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_enable (int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiDF9A5388&quot;) { aiDF9A5388_waves_enable(p, val); }
                if (cai_playerAI[p] == &quot;ai665651A4&quot;) { ai665651A4_waves_enable(p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_waves_stop (string ai) {
                if (ai == &quot;aiDF9A5388&quot;) { aiDF9A5388_waves_stop(); }
                if (ai == &quot;ai665651A4&quot;) { ai665651A4_waves_stop(); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_wave_run (int w, int p, playergroup target, bool wait) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiDF9A5388&quot;) { aiDF9A5388_wave_run(w, p, target, wait); }
                if (cai_playerAI[p] == &quot;ai665651A4&quot;) { ai665651A4_wave_run(w, p, target, wait); }
            }
            //--------------------------------------------------------------------------------------------------
            void cai_wave_enable (int w, int p, bool val) {
                if (p &lt; 0 || p &gt;= 16) {
                    return;
                }
                if (cai_playerAI[p] == &quot;aiDF9A5388&quot;) { aiDF9A5388_wave_enable(w, p, val); }
                if (cai_playerAI[p] == &quot;ai665651A4&quot;) { ai665651A4_wave_enable(w, p, val); }
            }
            //--------------------------------------------------------------------------------------------------
            bool cai_wave_isEnabled (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return false;
                }
                if (cai_playerAI[p] == &quot;aiDF9A5388&quot;) { return aiDF9A5388_wave_isEnabled(w, p); }
                if (cai_playerAI[p] == &quot;ai665651A4&quot;) { return ai665651A4_wave_isEnabled(w, p); }
                return false;
            }
            //--------------------------------------------------------------------------------------------------
            unitgroup cai_wave_createdUnits (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiDF9A5388&quot;) { return aiDF9A5388_wave_createdUnits(w, p); }
                if (cai_playerAI[p] == &quot;ai665651A4&quot;) { return ai665651A4_wave_createdUnits(w, p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            wave cai_wave_createdWave (int w, int p) {
                if (p &lt; 0 || p &gt;= 16) {
                    return null;
                }
                if (cai_playerAI[p] == &quot;aiDF9A5388&quot;) { return aiDF9A5388_wave_createdWave(w, p); }
                if (cai_playerAI[p] == &quot;ai665651A4&quot;) { return ai665651A4_wave_createdWave(w, p); }
                return null;
            }
            //--------------------------------------------------------------------------------------------------
            void cai_startall () {
                cai_start(&quot;aiDF9A5388&quot;, 14);
                cai_start(&quot;ai665651A4&quot;, 13);
            }
            //--------------------------------------------------------------------------------------------------
            void cai_runall () {
                playergroup target = PlayerGroupEmpty();
            }
            //--------------------------------------------------------------------------------------------------
            // Global Functions
            //--------------------------------------------------------------------------------------------------
            void gf_AddExperience (unit lp_hero, fixed lp_experienceAmmount) {
                // Implementation
                if (((UnitGetPropertyFixed(lp_hero, c_unitPropXP, c_unitPropCurrent) + lp_experienceAmmount) &lt;= gv_mAXEXPERIENCE)) {
                    UnitSetPropertyFixed(lp_hero, c_unitPropXP, (UnitGetPropertyFixed(lp_hero, c_unitPropXP, c_unitPropCurrent) + lp_experienceAmmount));
                }
                else {
                    UnitSetPropertyFixed(lp_hero, c_unitPropXP, gv_mAXEXPERIENCE);
                }
            }
            void gf_OpenQuestDialog (int lp_questingPlayer, text lp_questText, text lp_questName, text lp_reward, text lp_recommendedLevel) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (lp_questingPlayer - 1);
                // Implementation
                gv_players[lv_qPI].quests.talking = true;
                libNtve_gf_PauseUnit(gv_players[lv_qPI].dragon, true);
                libNtve_gf_MakeUnitInvulnerable(gv_players[lv_qPI].dragon, true);
                DialogSetTitle(gv_players[lv_qPI].quests.questDialog.state, lp_questName);
                libNtve_gf_SetDialogItemText(gv_players[lv_qPI].quests.questDialog.textBox, lp_questText, PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_players[lv_qPI].quests.questDialog.reward, lp_reward, PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_players[lv_qPI].quests.questDialog.recommendedLevel, lp_recommendedLevel, PlayerGroupAll());
                DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.textBox, PlayerGroupSingle(lp_questingPlayer), true);
                DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.recommendedLevel, PlayerGroupSingle(lp_questingPlayer), true);
                DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.reward, PlayerGroupSingle(lp_questingPlayer), true);
                DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.decline, PlayerGroupSingle(lp_questingPlayer), true);
                DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.accept, PlayerGroupSingle(lp_questingPlayer), true);
                DialogSetVisible(gv_players[lv_qPI].quests.questDialog.state, PlayerGroupSingle(lp_questingPlayer), true);
            }
            void gf_CloseQuestDialog (int lp_questingPlayer) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (lp_questingPlayer - 1);
                // Implementation
                DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.textBox, PlayerGroupSingle(lp_questingPlayer), false);
                DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.decline, PlayerGroupSingle(lp_questingPlayer), false);
                DialogControlSetVisible(gv_players[lv_qPI].quests.questDialog.accept, PlayerGroupSingle(lp_questingPlayer), false);
                DialogSetVisible(gv_players[lv_qPI].quests.questDialog.state, PlayerGroupSingle(lp_questingPlayer), false);
                libNtve_gf_PauseUnit(gv_players[lv_qPI].dragon, false);
                libNtve_gf_MakeUnitInvulnerable(gv_players[lv_qPI].dragon, false);
                gv_players[lv_qPI].quests.talking = false;
                UnitClearSelection(lp_questingPlayer);
                UnitSelect(gv_players[lv_qPI].dragon, lp_questingPlayer, true);
            }
            void gf_OpenTalkDialog (int lp_questingPlayer, text lp_nPCName, text lp_dialog) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (lp_questingPlayer - 1);
                // Implementation
                gv_players[lv_qPI].quests.talking = true;
                libNtve_gf_PauseUnit(gv_players[lv_qPI].dragon, true);
                libNtve_gf_MakeUnitInvulnerable(gv_players[lv_qPI].dragon, true);
                DialogSetTitle(gv_players[lv_qPI].quests.talkDialog.state, lp_nPCName);
                libNtve_gf_SetDialogItemText(gv_players[lv_qPI].quests.talkDialog.textBox, lp_dialog, PlayerGroupSingle(lp_questingPlayer));
                DialogControlSetVisible(gv_players[lv_qPI].quests.talkDialog.textBox, PlayerGroupSingle(lp_questingPlayer), true);
                DialogControlSetVisible(gv_players[lv_qPI].quests.talkDialog.accept, PlayerGroupSingle(lp_questingPlayer), true);
                DialogSetVisible(gv_players[lv_qPI].quests.talkDialog.state, PlayerGroupSingle(lp_questingPlayer), true);
            }
            void gf_CloseTalkDialog (int lp_questingPlayer) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (lp_questingPlayer - 1);
                // Implementation
                DialogControlSetVisible(gv_players[lv_qPI].quests.talkDialog.accept, PlayerGroupSingle(lp_questingPlayer), false);
                DialogControlSetVisible(gv_players[lv_qPI].quests.talkDialog.textBox, PlayerGroupSingle(lp_questingPlayer), false);
                DialogSetVisible(gv_players[lv_qPI].quests.talkDialog.state, PlayerGroupSingle(lp_questingPlayer), false);
                libNtve_gf_PauseUnit(gv_players[lv_qPI].dragon, false);
                libNtve_gf_MakeUnitInvulnerable(gv_players[lv_qPI].dragon, false);
                gv_players[lv_qPI].quests.talking = false;
                UnitClearSelection(lp_questingPlayer);
                UnitSelect(gv_players[lv_qPI].dragon, lp_questingPlayer, true);
            }
            void gf_OpenRewardDialog (int lp_questingPlayer, text lp_questName, text lp_dialog) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (lp_questingPlayer - 1);
                // Implementation
                gv_players[lv_qPI].quests.talking = true;
                libNtve_gf_PauseUnit(gv_players[lv_qPI].dragon, true);
                libNtve_gf_MakeUnitInvulnerable(gv_players[lv_qPI].dragon, true);
                DialogSetTitle(gv_players[lv_qPI].quests.rewardDialog.state, lp_questName);
                libNtve_gf_SetDialogItemText(gv_players[lv_qPI].quests.rewardDialog.textBox, lp_dialog, PlayerGroupSingle(lp_questingPlayer));
                DialogControlSetVisible(gv_players[lv_qPI].quests.rewardDialog.accept, PlayerGroupSingle(lp_questingPlayer), true);
                DialogControlSetVisible(gv_players[lv_qPI].quests.rewardDialog.textBox, PlayerGroupSingle(lp_questingPlayer), true);
                DialogSetVisible(gv_players[lv_qPI].quests.rewardDialog.state, PlayerGroupSingle(lp_questingPlayer), true);
            }
            void gf_CloseRewardDialog (int lp_questingPlayer) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (lp_questingPlayer - 1);
                // Implementation
                DialogControlSetVisible(gv_players[lv_qPI].quests.rewardDialog.accept, PlayerGroupSingle(lp_questingPlayer), false);
                DialogControlSetVisible(gv_players[lv_qPI].quests.rewardDialog.textBox, PlayerGroupSingle(lp_questingPlayer), false);
                DialogSetVisible(gv_players[lv_qPI].quests.rewardDialog.state, PlayerGroupSingle(lp_questingPlayer), false);
                libNtve_gf_PauseUnit(gv_players[lv_qPI].dragon, false);
                libNtve_gf_MakeUnitInvulnerable(gv_players[lv_qPI].dragon, false);
                gv_players[lv_qPI].quests.talking = false;
                UnitClearSelection(lp_questingPlayer);
                UnitSelect(gv_players[lv_qPI].dragon, lp_questingPlayer, true);
            }
            void gf_SQ0Setup (int lp_player) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Implementation
                PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ0&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[0].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                    }
                    else {
                        gv_players[lv_pPI].quests.storyQuests[0].state = 0;
                    }
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].state == 0)) {
                        ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/CEBC47B7&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].objective = ObjectiveLastCreated();
                        ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                        gv_players[lv_pPI].quests.storyQuests[0].state = 1;
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingAlert&quot;, RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                    }
                    else {
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].state == 1)) {
                            ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/6FC5CF17&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].objective = ObjectiveLastCreated();
                            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                            gv_players[lv_pPI].quests.storyQuests[0].state = 1;
                            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].ping);
                            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingAlert&quot;, RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[0].ping = PingLastCreated();
                            PingSetScale(PingLastCreated(), 0.5);
                        }
                    }
                }
                PlayerGroupLoopEnd();
            }
            void gf_SQ1Setup (int lp_player) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Implementation
                PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ1&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[1].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ1&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                    }
                    else {
                        gv_players[lv_pPI].quests.storyQuests[1].state = 0;
                    }
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].state == 0)) {
                        ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/2D1D02A1&quot;), StringExternal(&quot;Param/Value/3AF1017C&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingObjective&quot;, RegionGetCenter(RegionFromId(216)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].objective = ObjectiveLastCreated();
                        TextTagCreate(StringExternal(&quot;Param/Value/433538AD&quot;), 72, UnitGetPosition(UnitFromId(2511)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].textTag = TextTagLastCreated();
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
                        TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2511), 1.0);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                        ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    }
                    else {
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].state == 1)) {
                            ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/A20BD716&quot;), StringExternal(&quot;Param/Value/1C0DC747&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].ping);
                            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingBoss&quot;, RegionGetCenter(RegionFromId(5)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].ping = PingLastCreated();
                            PingSetScale(PingLastCreated(), 0.5);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].objective = ObjectiveLastCreated();
                            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                        }
                        else {
                            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].state == 2)) {
                                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/4D4A430E&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].ping);
                                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingObjective&quot;, RegionGetCenter(RegionFromId(216)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].ping = PingLastCreated();
                                PingSetScale(PingLastCreated(), 0.5);
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].objective = ObjectiveLastCreated();
                                TextTagCreate(StringExternal(&quot;Param/Value/0C002467&quot;), 72, UnitGetPosition(UnitFromId(2511)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].textTag = TextTagLastCreated();
                                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                                TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
                                TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2511), 1.0);
                                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[1].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                            }
                        }
                    }
                }
                PlayerGroupLoopEnd();
            }
            void gf_SQ2Setup (int lp_player) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Implementation
                PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ2&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[2].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ2&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                    }
                    else {
                        gv_players[lv_pPI].quests.storyQuests[2].state = 0;
                    }
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].state == 0)) {
                        ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/1B0DED0D&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingAlert&quot;, RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].ping = PingLastCreated();
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].objective = ObjectiveLastCreated();
                        ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                        gv_players[lv_pPI].quests.storyQuests[2].state = 1;
                    }
                    else {
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].state == 1)) {
                            ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/86363A30&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].ping);
                            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingAlert&quot;, RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].ping = PingLastCreated();
                            PingSetScale(PingLastCreated(), 0.5);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].objective = ObjectiveLastCreated();
                            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[2].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                            gv_players[lv_pPI].quests.storyQuests[2].state = 1;
                        }
                    }
                }
                PlayerGroupLoopEnd();
            }
            void gf_SQ3Setup (int lp_player) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Implementation
                PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ3&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[3].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ3&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                    }
                    else {
                        gv_players[lv_pPI].quests.storyQuests[3].state = 1;
                    }
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].state == 0)) {
                        gv_players[lv_pPI].quests.storyQuests[3].state = 1;
                    }
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].state == 1)) {
                        ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/7A96BE90&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingObjective&quot;, RegionGetCenter(RegionFromId(224)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].objective = ObjectiveLastCreated();
                        TextTagCreate(StringExternal(&quot;Param/Value/F5B34512&quot;), 72, UnitGetPosition(UnitFromId(1597)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].textTag = TextTagLastCreated();
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
                        TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1597), 1.0);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                        ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    }
                    else {
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].state == 2)) {
                            ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/5EE0564A&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].ping);
                            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingBoss&quot;, RegionGetCenter(RegionFromId(229)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].ping = PingLastCreated();
                            PingSetScale(PingLastCreated(), 0.5);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].objective = ObjectiveLastCreated();
                            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[3].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                        }
                    }
                }
                PlayerGroupLoopEnd();
            }
            void gf_SQ4Setup (int lp_player) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Implementation
                PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ4&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[4].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ4&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                    }
                    else {
                        gv_players[lv_pPI].quests.storyQuests[4].state = 1;
                    }
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].state == 0)) {
                        gv_players[lv_pPI].quests.storyQuests[4].state = 1;
                    }
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].state == 1)) {
                        ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/AADC97B0&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingObjective&quot;, RegionGetCenter(RegionFromId(225)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].objective = ObjectiveLastCreated();
                        TextTagCreate(StringExternal(&quot;Param/Value/87A071E6&quot;), 72, UnitGetPosition(UnitFromId(1976)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].textTag = TextTagLastCreated();
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
                        TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1976), 1.0);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                        ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    }
                    else {
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].state == 2)) {
                            ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/8C107748&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].ping);
                            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingSimple&quot;, RegionGetCenter(RegionFromId(48)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].ping = PingLastCreated();
                            PingSetScale(PingLastCreated(), 0.5);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].objective = ObjectiveLastCreated();
                            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                        }
                        else {
                            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].state == 3)) {
                                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/76460735&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].ping);
                                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingObjective&quot;, RegionGetCenter(RegionFromId(225)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].ping = PingLastCreated();
                                PingSetScale(PingLastCreated(), 0.5);
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].objective = ObjectiveLastCreated();
                                TextTagCreate(StringExternal(&quot;Param/Value/1A10F0CF&quot;), 72, UnitGetPosition(UnitFromId(1976)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].textTag = TextTagLastCreated();
                                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                                TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
                                TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1976), 1.0);
                                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[4].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                            }
                        }
                    }
                }
                PlayerGroupLoopEnd();
            }
            void gf_SQ5Setup (int lp_player) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Implementation
                PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (lp_player - 1);
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ5&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[5].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ5&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                    }
                    else {
                        gv_players[lv_pPI].quests.storyQuests[5].state = 1;
                    }
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].state == 0)) {
                        gv_players[lv_pPI].quests.storyQuests[5].state = 1;
                    }
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].state == 1)) {
                        ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/64D12ECA&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingAlert&quot;, RegionGetCenter(RegionFromId(61)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].objective = ObjectiveLastCreated();
                        ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    }
                    else {
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].state == 2)) {
                            ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/44E480EE&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].ping);
                            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingBoss&quot;, RegionGetCenter(RegionFromId(229)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].ping = PingLastCreated();
                            PingSetScale(PingLastCreated(), 0.5);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].objective = ObjectiveLastCreated();
                            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                        }
                        else {
                            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].state == 3)) {
                                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/C8EE6AC6&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].ping);
                                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingObjective&quot;, RegionGetCenter(RegionFromId(224)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].ping = PingLastCreated();
                                PingSetScale(PingLastCreated(), 0.5);
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].objective = ObjectiveLastCreated();
                                TextTagCreate(StringExternal(&quot;Param/Value/AC39DF53&quot;), 72, UnitGetPosition(UnitFromId(1597)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].textTag = TextTagLastCreated();
                                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                                TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
                                TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1597), 5.0);
                                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[5].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                            }
                        }
                    }
                }
                PlayerGroupLoopEnd();
            }
            void gf_SQ6Setup (int lp_player) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Implementation
                PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ6&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[6].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ6&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                    }
                    else {
                        gv_players[lv_pPI].quests.storyQuests[6].state = 1;
                    }
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[6].state == 0)) {
                        gv_players[lv_pPI].quests.storyQuests[6].state = 1;
                    }
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[6].state == 1)) {
                        ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/6525BF43&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[6].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingAlert&quot;, RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[6].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[6].objective = ObjectiveLastCreated();
                        ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[6].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    }
                }
                PlayerGroupLoopEnd();
            }
            void gf_SQ7Setup (int lp_player) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Implementation
                PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ7&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[7].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ7&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                    }
                    else {
                        gv_players[lv_pPI].quests.storyQuests[7].state = 0;
                    }
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].state == 0)) {
                        ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/FAFD0670&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingObjective&quot;, UnitGetPosition(UnitFromId(2595)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping = PingLastCreated();
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective = ObjectiveLastCreated();
                        ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                        TextTagCreate(StringExternal(&quot;Param/Value/DDE5287F&quot;), 72, UnitGetPosition(UnitFromId(2595)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].textTag = TextTagLastCreated();
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
                        TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2595), 5.0);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                        gv_players[lv_pPI].quests.storyQuests[7].state = 1;
                    }
                    else {
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].state == 1)) {
                            ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/377F54EA&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping);
                            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingObjective&quot;, UnitGetPosition(UnitFromId(2595)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping = PingLastCreated();
                            PingSetScale(PingLastCreated(), 0.5);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective = ObjectiveLastCreated();
                            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                            TextTagCreate(StringExternal(&quot;Param/Value/5E52AED5&quot;), 72, UnitGetPosition(UnitFromId(2595)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].textTag = TextTagLastCreated();
                            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                            TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
                            TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2595), 5.0);
                            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                        }
                        else {
                            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].state == 2)) {
                                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/6D95D414&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping);
                                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingBoss&quot;, UnitGetPosition(UnitFromId(1711)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping = PingLastCreated();
                                PingSetScale(PingLastCreated(), 0.5);
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective = ObjectiveLastCreated();
                                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                            }
                            else {
                                if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].state == 3)) {
                                    ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/90310BF6&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                    PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping);
                                    PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingObjective&quot;, UnitGetPosition(UnitFromId(2595)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].ping = PingLastCreated();
                                    PingSetScale(PingLastCreated(), 0.5);
                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective = ObjectiveLastCreated();
                                    ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                                    TextTagCreate(StringExternal(&quot;Param/Value/F69E26DF&quot;), 72, UnitGetPosition(UnitFromId(2595)), 6.0, true, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[7].textTag = TextTagLastCreated();
                                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                                    TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
                                    TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2595), 5.0);
                                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                                }
                            }
                        }
                    }
                }
                PlayerGroupLoopEnd();
            }
            void gf_SQ8Setup (int lp_player) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Implementation
                PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ8&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[8].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ8&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                    }
                    else {
                        gv_players[lv_pPI].quests.storyQuests[8].state = 0;
                    }
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 0)) {
                        ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/AF3CF266&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                        ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingAlert&quot;, RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                        gv_players[lv_pPI].quests.storyQuests[8].state = 1;
                    }
                    else {
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 1)) {
                            ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/9FE4C48D&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingAlert&quot;, RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                            PingSetScale(PingLastCreated(), 0.5);
                        }
                        else {
                            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 2)) {
                                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/DBB6DB82&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingNumeric1&quot;, UnitGetPosition(UnitFromId(1880)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                                PingSetScale(PingLastCreated(), 0.5);
                            }
                            else {
                                if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 3)) {
                                    ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/19669321&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                                    ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                                    PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                                    PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingNumeric2&quot;, UnitGetPosition(UnitFromId(1881)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                                    PingSetScale(PingLastCreated(), 0.5);
                                }
                                else {
                                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 4)) {
                                        ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/C6717FEF&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                                        ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingNumeric3&quot;, UnitGetPosition(UnitFromId(1882)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
                                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                                        PingSetScale(PingLastCreated(), 0.5);
                                    }
                                    else {
                                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 5)) {
                                            ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/8E333976&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                                            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                                            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                                            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingNumeric4&quot;, UnitGetPosition(UnitFromId(1883)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
                                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                                            PingSetScale(PingLastCreated(), 0.5);
                                        }
                                        else {
                                            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 6)) {
                                                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/1B167411&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                                                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                                                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                                                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingNumeric5&quot;, UnitGetPosition(UnitFromId(1884)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
                                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                                                PingSetScale(PingLastCreated(), 0.5);
                                            }
                                            else {
                                                if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state == 7)) {
                                                    ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/64C7FA63&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective = ObjectiveLastCreated();
                                                    ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                                                    PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                                                    PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingNumeric6&quot;, UnitGetPosition(UnitFromId(2501)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
                                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                                                    PingSetScale(PingLastCreated(), 0.5);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                PlayerGroupLoopEnd();
            }
            void gf_SQ9Setup (int lp_player) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Implementation
                PlayerGroupLoopBegin(PlayerGroupSingle(lp_player));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ9&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[9].state = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ9&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                    }
                    else {
                        gv_players[lv_pPI].quests.storyQuests[9].state = 0;
                    }
                    if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].state == 0)) {
                        ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/4EB31843&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].objective = ObjectiveLastCreated();
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingBoss&quot;, RegionGetCenter(RegionFromId(214)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].ping = PingLastCreated();
                        ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                        gv_players[lv_pPI].quests.storyQuests[9].state = 1;
                    }
                    else {
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].state == 1)) {
                            ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/223ED8F2&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].objective = ObjectiveLastCreated();
                            PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].ping);
                            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingBoss&quot;, RegionGetCenter(RegionFromId(214)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].ping = PingLastCreated();
                            ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                        }
                        else {
                            if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].state == 2)) {
                                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/176FF71B&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].objective = ObjectiveLastCreated();
                                PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].ping);
                                PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingBoss&quot;, RegionGetCenter(RegionFromId(214)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].ping = PingLastCreated();
                                ObjectiveShow(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[9].objective, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                            }
                        }
                    }
                }
                PlayerGroupLoopEnd();
            }
            fixed gf_CalculateHealthMissing (unit lp_unit) {
                // Variable Declarations
                fixed lv_healthMissing;
                // Variable Initialization
                // Implementation
                lv_healthMissing = (UnitGetPropertyFixed(lp_unit, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent));
                return lv_healthMissing;
            }
            void gf_SaveStackCounts (int lp_player) {
                // Variable Declarations
                int lv_tPI;
                // Variable Initialization
                // Implementation
                lv_tPI = (lp_player - 1);
                UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_tPI].dragon));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;SmallHealthPotion&quot;)) {
                        gv_stackCounts[lv_tPI][0] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[0]);
                        BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, &quot;SHP&quot;, PlayerHandle(lp_player), gv_stackCounts[lv_tPI][0]);
                    }
                    else {
                        if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;MediumHealthPotion&quot;)) {
                            gv_stackCounts[lv_tPI][1] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[1]);
                            BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, &quot;MHP&quot;, PlayerHandle(lp_player), gv_stackCounts[lv_tPI][1]);
                        }
                        else {
                            if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;LargeHealthPotion&quot;)) {
                                gv_stackCounts[lv_tPI][2] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[2]);
                                BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, &quot;LHP&quot;, PlayerHandle(lp_player), gv_stackCounts[lv_tPI][2]);
                            }
                            else {
                                if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;GrandHealthPotion&quot;)) {
                                    gv_stackCounts[lv_tPI][3] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[3]);
                                    BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, &quot;GHP&quot;, PlayerHandle(lp_player), gv_stackCounts[lv_tPI][3]);
                                }
                                else {
                                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;SmallAttackSpeedPotion&quot;)) {
                                        gv_stackCounts[lv_tPI][4] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[4]);
                                        BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, &quot;SASP&quot;, PlayerHandle(lp_player), gv_stackCounts[lv_tPI][4]);
                                    }
                                    else {
                                        if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;MediumAttackSpeedPotion&quot;)) {
                                            gv_stackCounts[lv_tPI][5] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[5]);
                                            BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, &quot;MASP&quot;, PlayerHandle(lp_player), gv_stackCounts[lv_tPI][5]);
                                        }
                                        else {
                                            if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;LargeAttackSpeedPotion&quot;)) {
                                                gv_stackCounts[lv_tPI][6] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[6]);
                                                BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, &quot;LASP&quot;, PlayerHandle(lp_player), gv_stackCounts[lv_tPI][6]);
                                            }
                                            else {
                                                if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;GrandAttackSpeedPotion&quot;)) {
                                                    gv_stackCounts[lv_tPI][7] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[7]);
                                                    BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, &quot;GASP&quot;, PlayerHandle(lp_player), gv_stackCounts[lv_tPI][7]);
                                                }
                                                else {
                                                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;TownPortal&quot;)) {
                                                        gv_stackCounts[lv_tPI][8] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[8]);
                                                        BankValueSetFromFixed(gv_players[lv_tPI].banks.dragonBank, &quot;TP&quot;, PlayerHandle(lp_player), gv_stackCounts[lv_tPI][8]);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                UnitGroupLoopEnd();
            }
            void gf_RemoveWeapons (unit lp_hero) {
                // Variable Declarations
                unit lv_weapon;
                // Variable Initialization
                // Implementation
                UnitGroupLoopBegin(UnitInventoryGroup(lp_hero));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 1)) {
                        lv_weapon = UnitGroupLoopCurrent();
                        break;
                    }
                }
                UnitGroupLoopEnd();
                UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 0));
                UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 1));
                UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 2));
                UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 3));
                UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 4));
                UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 5));
                UnitWeaponAdd(lp_hero, ((UnitGetType(lv_weapon))), null);
            }
            void gf_SaveSkills (int lp_player) {
                // Variable Declarations
                int lv_pi;
                // Variable Initialization
                lv_pi = (lp_player - 1);
                // Implementation
                if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
                    if ((UnitAbilityCheck(gv_players[lv_pi].dragon, &quot;Fireball&quot;, true) == true)) {
                        gv_players[lv_pi].skills.fireball = UnitAbilityGetLevel(gv_players[lv_pi].dragon, &quot;Fireball&quot;);
                    }
                    if ((UnitAbilityCheck(gv_players[lv_pi].dragon, &quot;FireClaws&quot;, true) == true)) {
                        gv_players[lv_pi].skills.fireClaw = UnitAbilityGetLevel(gv_players[lv_pi].dragon, &quot;FireClaws&quot;);
                    }
                    if ((UnitAbilityCheck(gv_players[lv_pi].dragon, &quot;FlameEgg&quot;, true) == true)) {
                        gv_players[lv_pi].skills.flameEgg = UnitAbilityGetLevel(gv_players[lv_pi].dragon, &quot;FlameEgg&quot;);
                    }
                    if ((UnitAbilityCheck(gv_players[lv_pi].dragon, &quot;Inferno&quot;, true) == true)) {
                        gv_players[lv_pi].skills.inferno = UnitAbilityGetLevel(gv_players[lv_pi].dragon, &quot;Inferno&quot;);
                    }
                    if ((UnitAbilityCheck(gv_players[lv_pi].dragon, &quot;Nova&quot;, true) == true)) {
                        gv_players[lv_pi].skills.nova = UnitAbilityGetLevel(gv_players[lv_pi].dragon, &quot;Nova&quot;);
                    }
                    if ((UnitAbilityCheck(gv_players[lv_pi].dragon, &quot;FrostSpike&quot;, true) == true)) {
                        gv_players[lv_pi].skills.frostSpike = UnitAbilityGetLevel(gv_players[lv_pi].dragon, &quot;FrostSpike&quot;);
                    }
                    if ((UnitAbilityCheck(gv_players[lv_pi].dragon, &quot;Blizzard&quot;, true) == true)) {
                        gv_players[lv_pi].skills.blizzard = UnitAbilityGetLevel(gv_players[lv_pi].dragon, &quot;Blizzard&quot;);
                    }
                    if ((UnitAbilityCheck(gv_players[lv_pi].dragon, &quot;SubZero&quot;, true) == true)) {
                        gv_players[lv_pi].skills.subzero = UnitAbilityGetLevel(gv_players[lv_pi].dragon, &quot;SubZero&quot;);
                    }
                    if ((UnitAbilityCheck(gv_players[lv_pi].dragon, &quot;FrozenArmor&quot;, true) == true)) {
                        gv_players[lv_pi].skills.frozenArmour = UnitAbilityGetLevel(gv_players[lv_pi].dragon, &quot;FrozenArmor&quot;);
                    }
                    BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, &quot;FDFB&quot;, PlayerHandle(lp_player), gv_players[lv_pi].skills.fireball);
                    BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, &quot;FDFC&quot;, PlayerHandle(lp_player), gv_players[lv_pi].skills.fireClaw);
                    BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, &quot;FDFE&quot;, PlayerHandle(lp_player), gv_players[lv_pi].skills.flameEgg);
                    BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, &quot;FDI&quot;, PlayerHandle(lp_player), gv_players[lv_pi].skills.inferno);
                    BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, &quot;FDN&quot;, PlayerHandle(lp_player), gv_players[lv_pi].skills.nova);
                    BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, &quot;IDFS&quot;, PlayerHandle(lp_player), gv_players[lv_pi].skills.frostSpike);
                    BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, &quot;IDB&quot;, PlayerHandle(lp_player), gv_players[lv_pi].skills.blizzard);
                    BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, &quot;IDSZ&quot;, PlayerHandle(lp_player), gv_players[lv_pi].skills.subzero);
                    BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, &quot;IDFA&quot;, PlayerHandle(lp_player), gv_players[lv_pi].skills.frozenArmour);
                }
            }
            void gf_FillInventory (int lp_player) {
                int autoA1B49F80_ae;
                int autoA1B49F80_ai;
                int auto652F10A5_ae;
                int auto652F10A5_ai;
                // Variable Declarations
                int lv_pI;
                int lv_c;
                int lv_s;
                // Variable Initialization
                lv_c = 1;
                lv_s = 1;
                // Implementation
                lv_pI = (lp_player - 1);
                autoA1B49F80_ae = 6;
                autoA1B49F80_ai = 1;
                lv_c = 1;
                for ( ; ( (autoA1B49F80_ai &gt;= 0 &amp;&amp; lv_c &lt;= autoA1B49F80_ae) || (autoA1B49F80_ai &lt;= 0 &amp;&amp; lv_c &gt;= autoA1B49F80_ae) ) ; lv_c += autoA1B49F80_ai ) {
                    auto652F10A5_ae = 25;
                    auto652F10A5_ai = 1;
                    lv_s = 1;
                    for ( ; ( (auto652F10A5_ai &gt;= 0 &amp;&amp; lv_s &lt;= auto652F10A5_ae) || (auto652F10A5_ai &lt;= 0 &amp;&amp; lv_s &gt;= auto652F10A5_ae) ) ; lv_s += auto652F10A5_ai ) {
                        gv_inventory[lv_pI][lv_c][lv_s] = null;
                    }
                }
                UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_pI].dragon));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gv_inventory[lv_pI][UnitInventoryContainer(UnitGroupLoopCurrent())][UnitInventorySlot(UnitGroupLoopCurrent())] = UnitGroupLoopCurrent();
                }
                UnitGroupLoopEnd();
            }
            void gf_PutInventoryinInventory (int lp_player) {
                int auto632BA966_ae;
                int auto632BA966_ai;
                int auto3293DE15_ae;
                int auto3293DE15_ai;
                // Variable Declarations
                int lv_pI;
                int lv_c;
                int lv_s;
                // Variable Initialization
                lv_c = 1;
                lv_s = 1;
                // Implementation
                lv_pI = (lp_player - 1);
                auto632BA966_ae = 6;
                auto632BA966_ai = 1;
                lv_c = 1;
                for ( ; ( (auto632BA966_ai &gt;= 0 &amp;&amp; lv_c &lt;= auto632BA966_ae) || (auto632BA966_ai &lt;= 0 &amp;&amp; lv_c &gt;= auto632BA966_ae) ) ; lv_c += auto632BA966_ai ) {
                    auto3293DE15_ae = 25;
                    auto3293DE15_ai = 1;
                    lv_s = 1;
                    for ( ; ( (auto3293DE15_ai &gt;= 0 &amp;&amp; lv_s &lt;= auto3293DE15_ae) || (auto3293DE15_ai &lt;= 0 &amp;&amp; lv_s &gt;= auto3293DE15_ae) ) ; lv_s += auto3293DE15_ai ) {
                        if (((UnitGetType(gv_inventory[lv_pI][lv_c][lv_s]) != null) &amp;&amp; (UnitGetType(gv_inventory[lv_pI][lv_c][lv_s]) != &quot;&quot;))) {
                            UnitInventoryCreate(gv_players[lv_pI].dragon, UnitGetType(gv_inventory[lv_pI][lv_c][lv_s]));
                            UnitInventoryMove(UnitInventoryLastCreated(), lv_c, lv_s);
                        }
                    }
                }
            }
            void gf_EvolvetoTeen (int lp_player) {
                // Variable Declarations
                unit lv_tempDragon;
                int lv_tempAgility;
                int lv_tempDexterity;
                int lv_tempIntelligence;
                int lv_tempStrength;
                int lv_tempVitality;
                int lv_tempReborn;
                int lv_evolvingPlayerIndex;
                int lv_evolvingPlayer;
                int lv_n;
                // Variable Initialization
                lv_evolvingPlayerIndex = (lp_player - 1);
                lv_evolvingPlayer = lp_player;
                // Implementation
                gv_evolving[lv_evolvingPlayerIndex] = true;
                TriggerEnable(gt_SaveStackCountsOnInventoryEdit, false);
                TriggerEnable(gt_SaveStackCountsPeriodically, false);
                lv_tempVitality = gv_players[lv_evolvingPlayerIndex].stats.vitality;
                lv_tempStrength = gv_players[lv_evolvingPlayerIndex].stats.strength;
                lv_tempIntelligence = gv_players[lv_evolvingPlayerIndex].stats.intelligence;
                lv_tempDexterity = gv_players[lv_evolvingPlayerIndex].stats.dexterity;
                lv_tempAgility = gv_players[lv_evolvingPlayerIndex].stats.agility;
                lv_tempReborn = gv_players[lv_evolvingPlayerIndex].stats.reborn.count;
                lv_tempDragon = gv_players[lv_evolvingPlayerIndex].dragon;
                gf_FillInventory(lv_evolvingPlayer);
                gf_SaveStackCounts(lv_evolvingPlayer);
                UIDisplayMessage(PlayerGroupSingle(lv_evolvingPlayer), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/F24E8F1E&quot;));
                if ((GameAttributePlayerValue(&quot;1&quot;, lv_evolvingPlayer) == &quot;0001&quot;)) {
                    UnitCreate(1, &quot;TeenDragon&quot;, c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
                }
                else {
                    UnitCreate(1, &quot;TeenIceDragon&quot;, c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
                }
                gv_players[lv_evolvingPlayerIndex].dragon = UnitLastCreated();
                gf_PutInventoryinInventory(lv_evolvingPlayer);
                UnitRemove(lv_tempDragon);
                BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
                gf_LoadStackCounts(lv_evolvingPlayer);
                gf_LoadSkills(lv_evolvingPlayer);
                while ((lv_tempVitality &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddVitality&quot;, lv_evolvingPlayer, 1);
                    lv_tempVitality = (lv_tempVitality - 1);
                }
                while ((lv_tempStrength &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddStrength&quot;, lv_evolvingPlayer, 1);
                    lv_tempStrength = (lv_tempStrength - 1);
                }
                while ((lv_tempIntelligence &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddIntelligence&quot;, lv_evolvingPlayer, 1);
                    lv_tempIntelligence = (lv_tempIntelligence - 1);
                }
                while ((lv_tempDexterity &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddDexterity&quot;, lv_evolvingPlayer, 1);
                    lv_tempDexterity = (lv_tempDexterity - 1);
                }
                while ((lv_tempAgility &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddAgility&quot;, lv_evolvingPlayer, 1);
                    lv_tempAgility = (lv_tempAgility - 1);
                }
                while ((lv_tempReborn &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;BlessingofDrache&quot;, lv_evolvingPlayer, 1);
                    lv_tempReborn = (lv_tempReborn - 1);
                }
                BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
                if ((gv_fireSkin[lv_evolvingPlayerIndex] == true)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;FireSkin&quot;, lv_evolvingPlayerIndex, 1);
                }
                if ((gv_allSeeingEye[lv_evolvingPlayerIndex] == true)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AllSeeingEye&quot;, lv_evolvingPlayerIndex, 1);
                }
                gv_players[lv_evolvingPlayerIndex].stats.attributePoints = 5.0;
                gv_attributeText[lv_evolvingPlayerIndex] = FixedToString(gv_players[lv_evolvingPlayerIndex].stats.attributePoints, 0);
                libNtve_gf_SetDialogItemText(gv_players[lv_evolvingPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_evolvingPlayerIndex]), PlayerGroupSingle(lv_evolvingPlayer));
                UnitSelect(gv_players[lv_evolvingPlayerIndex].dragon, lv_evolvingPlayer, true);
                gf_ReapplyBuffs(lv_evolvingPlayer);
                lib1_gf_GrantTalentPoints(1, lv_evolvingPlayer);
                Wait(5.0, c_timeGame);
                TriggerEnable(gt_SaveStackCountsOnInventoryEdit, true);
                TriggerEnable(gt_SaveStackCountsPeriodically, true);
                gv_evolving[lv_evolvingPlayerIndex] = false;
            }
            void gf_EvolvetoAdult (int lp_player) {
                // Variable Declarations
                unit lv_tempDragon;
                int lv_tempAgility;
                int lv_tempDexterity;
                int lv_tempIntelligence;
                int lv_tempStrength;
                int lv_tempVitality;
                int lv_tempReborn;
                int lv_evolvingPlayerIndex;
                int lv_evolvingPlayer;
                int lv_n;
                // Variable Initialization
                lv_evolvingPlayerIndex = (lp_player - 1);
                lv_evolvingPlayer = lp_player;
                // Implementation
                gv_evolving[lv_evolvingPlayerIndex] = true;
                TriggerEnable(gt_SaveStackCountsOnInventoryEdit, false);
                TriggerEnable(gt_SaveStackCountsPeriodically, false);
                lv_tempVitality = gv_players[lv_evolvingPlayerIndex].stats.vitality;
                lv_tempStrength = gv_players[lv_evolvingPlayerIndex].stats.strength;
                lv_tempIntelligence = gv_players[lv_evolvingPlayerIndex].stats.intelligence;
                lv_tempDexterity = gv_players[lv_evolvingPlayerIndex].stats.dexterity;
                lv_tempAgility = gv_players[lv_evolvingPlayerIndex].stats.agility;
                lv_tempReborn = gv_players[lv_evolvingPlayerIndex].stats.reborn.count;
                lv_tempDragon = gv_players[lv_evolvingPlayerIndex].dragon;
                gf_FillInventory(lv_evolvingPlayer);
                gf_SaveStackCounts(lv_evolvingPlayer);
                if ((GameAttributePlayerValue(&quot;1&quot;, lv_evolvingPlayer) == &quot;0001&quot;)) {
                    UnitCreate(1, &quot;AdultDragon&quot;, c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
                }
                else {
                    UnitCreate(1, &quot;AdultIceDragon&quot;, c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
                }
                gv_players[lv_evolvingPlayerIndex].dragon = UnitLastCreated();
                gf_PutInventoryinInventory(lv_evolvingPlayer);
                UnitRemove(lv_tempDragon);
                BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
                gf_LoadStackCounts(lv_evolvingPlayer);
                gf_LoadSkills(lv_evolvingPlayer);
                while ((lv_tempVitality &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddVitality&quot;, lv_evolvingPlayer, 1);
                    lv_tempVitality = (lv_tempVitality - 1);
                }
                while ((lv_tempStrength &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddStrength&quot;, lv_evolvingPlayer, 1);
                    lv_tempStrength = (lv_tempStrength - 1);
                }
                while ((lv_tempIntelligence &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddIntelligence&quot;, lv_evolvingPlayer, 1);
                    lv_tempIntelligence = (lv_tempIntelligence - 1);
                }
                while ((lv_tempDexterity &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddDexterity&quot;, lv_evolvingPlayer, 1);
                    lv_tempDexterity = (lv_tempDexterity - 1);
                }
                while ((lv_tempAgility &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddAgility&quot;, lv_evolvingPlayer, 1);
                    lv_tempAgility = (lv_tempAgility - 1);
                }
                while ((lv_tempReborn &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;BlessingofDrache&quot;, lv_evolvingPlayer, 1);
                    lv_tempReborn = (lv_tempReborn - 1);
                }
                BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
                if ((gv_fireSkin[lv_evolvingPlayerIndex] == true)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;FireSkin&quot;, lv_evolvingPlayerIndex, 1);
                }
                if ((gv_allSeeingEye[lv_evolvingPlayerIndex] == true)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AllSeeingEye&quot;, lv_evolvingPlayerIndex, 1);
                }
                gv_players[lv_evolvingPlayerIndex].stats.attributePoints += 5.0;
                gv_attributeText[lv_evolvingPlayerIndex] = FixedToString(gv_players[lv_evolvingPlayerIndex].stats.attributePoints, 0);
                libNtve_gf_SetDialogItemText(gv_players[lv_evolvingPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_evolvingPlayerIndex]), PlayerGroupSingle(lv_evolvingPlayer));
                UnitSelect(gv_players[lv_evolvingPlayerIndex].dragon, lv_evolvingPlayer, true);
                gf_ReapplyBuffs(lv_evolvingPlayer);
                lib1_gf_GrantTalentPoints(1, lv_evolvingPlayer);
                Wait(5.0, c_timeGame);
                TriggerEnable(gt_SaveStackCountsOnInventoryEdit, true);
                TriggerEnable(gt_SaveStackCountsPeriodically, true);
                gv_evolving[lv_evolvingPlayerIndex] = false;
            }
            void gf_EvolvetoMaster (int lp_player) {
                // Variable Declarations
                unit lv_tempDragon;
                int lv_tempAgility;
                int lv_tempDexterity;
                int lv_tempIntelligence;
                int lv_tempStrength;
                int lv_tempVitality;
                int lv_tempReborn;
                int lv_evolvingPlayerIndex;
                int lv_evolvingPlayer;
                int lv_n;
                // Variable Initialization
                lv_evolvingPlayerIndex = (lp_player - 1);
                lv_evolvingPlayer = lp_player;
                // Implementation
                TriggerEnable(gt_SaveStackCountsOnInventoryEdit, false);
                TriggerEnable(gt_SaveStackCountsPeriodically, false);
                lv_tempVitality = gv_players[lv_evolvingPlayerIndex].stats.vitality;
                lv_tempStrength = gv_players[lv_evolvingPlayerIndex].stats.strength;
                lv_tempIntelligence = gv_players[lv_evolvingPlayerIndex].stats.intelligence;
                lv_tempDexterity = gv_players[lv_evolvingPlayerIndex].stats.dexterity;
                lv_tempAgility = gv_players[lv_evolvingPlayerIndex].stats.agility;
                lv_tempReborn = gv_players[lv_evolvingPlayerIndex].stats.reborn.count;
                gv_evolving[lv_evolvingPlayerIndex] = true;
                lv_tempDragon = gv_players[lv_evolvingPlayerIndex].dragon;
                gf_FillInventory(lv_evolvingPlayer);
                gf_SaveStackCounts(lv_evolvingPlayer);
                if ((GameAttributePlayerValue(&quot;1&quot;, lv_evolvingPlayer) == &quot;0001&quot;)) {
                    UnitCreate(1, &quot;MasterDragon&quot;, c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
                }
                else {
                    UnitCreate(1, &quot;MasterIceDragon&quot;, c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
                }
                gv_players[lv_evolvingPlayerIndex].dragon = UnitLastCreated();
                gf_PutInventoryinInventory(lv_evolvingPlayer);
                UnitRemove(lv_tempDragon);
                BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
                gf_LoadStackCounts(lv_evolvingPlayer);
                gf_LoadSkills(lv_evolvingPlayer);
                while ((lv_tempVitality &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddVitality&quot;, lv_evolvingPlayer, 1);
                    lv_tempVitality = (lv_tempVitality - 1);
                }
                while ((lv_tempStrength &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddStrength&quot;, lv_evolvingPlayer, 1);
                    lv_tempStrength = (lv_tempStrength - 1);
                }
                while ((lv_tempIntelligence &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddIntelligence&quot;, lv_evolvingPlayer, 1);
                    lv_tempIntelligence = (lv_tempIntelligence - 1);
                }
                while ((lv_tempDexterity &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddDexterity&quot;, lv_evolvingPlayer, 1);
                    lv_tempDexterity = (lv_tempDexterity - 1);
                }
                while ((lv_tempAgility &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddAgility&quot;, lv_evolvingPlayer, 1);
                    lv_tempAgility = (lv_tempAgility - 1);
                }
                while ((lv_tempReborn &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;BlessingofDrache&quot;, lv_evolvingPlayer, 1);
                    lv_tempReborn = (lv_tempReborn - 1);
                }
                BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
                if ((gv_fireSkin[lv_evolvingPlayerIndex] == true)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;FireSkin&quot;, lv_evolvingPlayerIndex, 1);
                }
                if ((gv_allSeeingEye[lv_evolvingPlayerIndex] == true)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AllSeeingEye&quot;, lv_evolvingPlayerIndex, 1);
                }
                gv_players[lv_evolvingPlayerIndex].stats.attributePoints += 5.0;
                gv_attributeText[lv_evolvingPlayerIndex] = FixedToString(gv_players[lv_evolvingPlayerIndex].stats.attributePoints, 0);
                libNtve_gf_SetDialogItemText(gv_players[lv_evolvingPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_evolvingPlayerIndex]), PlayerGroupSingle(lv_evolvingPlayer));
                UnitSelect(gv_players[lv_evolvingPlayerIndex].dragon, lv_evolvingPlayer, true);
                gf_ReapplyBuffs(lv_evolvingPlayer);
                lib1_gf_GrantTalentPoints(1, lv_evolvingPlayer);
                Wait(5.0, c_timeGame);
                gv_evolving[lv_evolvingPlayerIndex] = false;
                TriggerEnable(gt_SaveStackCountsOnInventoryEdit, true);
                TriggerEnable(gt_SaveStackCountsPeriodically, true);
            }
            void gf_EvolvetoLegendary (int lp_player) {
                // Variable Declarations
                unit lv_tempDragon;
                int lv_tempAgility;
                int lv_tempDexterity;
                int lv_tempIntelligence;
                int lv_tempStrength;
                int lv_tempVitality;
                int lv_tempReborn;
                int lv_evolvingPlayerIndex;
                int lv_evolvingPlayer;
                int lv_n;
                // Variable Initialization
                lv_evolvingPlayerIndex = (lp_player - 1);
                lv_evolvingPlayer = lp_player;
                // Implementation
                TriggerEnable(gt_SaveStackCountsOnInventoryEdit, false);
                TriggerEnable(gt_SaveStackCountsPeriodically, false);
                lv_tempVitality = gv_players[lv_evolvingPlayerIndex].stats.vitality;
                lv_tempStrength = gv_players[lv_evolvingPlayerIndex].stats.strength;
                lv_tempIntelligence = gv_players[lv_evolvingPlayerIndex].stats.intelligence;
                lv_tempDexterity = gv_players[lv_evolvingPlayerIndex].stats.dexterity;
                lv_tempAgility = gv_players[lv_evolvingPlayerIndex].stats.agility;
                lv_tempReborn = gv_players[lv_evolvingPlayerIndex].stats.reborn.count;
                gv_evolving[lv_evolvingPlayerIndex] = true;
                lv_tempDragon = gv_players[lv_evolvingPlayerIndex].dragon;
                gf_FillInventory(lv_evolvingPlayer);
                gf_SaveStackCounts(lv_evolvingPlayer);
                if ((GameAttributePlayerValue(&quot;1&quot;, lv_evolvingPlayer) == &quot;0001&quot;)) {
                    UnitCreate(1, &quot;LegendaryDragon&quot;, c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
                }
                else {
                    UnitCreate(1, &quot;LegendaryIceDragon&quot;, c_unitCreateIgnorePlacement, lv_evolvingPlayer, UnitGetPosition(gv_players[lv_evolvingPlayerIndex].dragon), UnitGetFacing(gv_players[lv_evolvingPlayerIndex].dragon));
                }
                gv_players[lv_evolvingPlayerIndex].dragon = UnitLastCreated();
                gf_PutInventoryinInventory(lv_evolvingPlayer);
                UnitRemove(lv_tempDragon);
                BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
                gf_LoadStackCounts(lv_evolvingPlayer);
                gf_LoadSkills(lv_evolvingPlayer);
                while ((lv_tempVitality &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddVitality&quot;, lv_evolvingPlayer, 1);
                    lv_tempVitality = (lv_tempVitality - 1);
                }
                while ((lv_tempStrength &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddStrength&quot;, lv_evolvingPlayer, 1);
                    lv_tempStrength = (lv_tempStrength - 1);
                }
                while ((lv_tempIntelligence &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddIntelligence&quot;, lv_evolvingPlayer, 1);
                    lv_tempIntelligence = (lv_tempIntelligence - 1);
                }
                while ((lv_tempDexterity &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddDexterity&quot;, lv_evolvingPlayer, 1);
                    lv_tempDexterity = (lv_tempDexterity - 1);
                }
                while ((lv_tempAgility &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AddAgility&quot;, lv_evolvingPlayer, 1);
                    lv_tempAgility = (lv_tempAgility - 1);
                }
                while ((lv_tempReborn &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;BlessingofDrache&quot;, lv_evolvingPlayer, 1);
                    lv_tempReborn = (lv_tempReborn - 1);
                }
                BankValueSetFromUnit(gv_players[lv_evolvingPlayerIndex].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(lv_evolvingPlayer), gv_players[lv_evolvingPlayerIndex].dragon);
                if ((gv_fireSkin[lv_evolvingPlayerIndex] == true)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;FireSkin&quot;, lv_evolvingPlayerIndex, 1);
                }
                if ((gv_allSeeingEye[lv_evolvingPlayerIndex] == true)) {
                    UnitBehaviorAddPlayer(gv_players[lv_evolvingPlayerIndex].dragon, &quot;AllSeeingEye&quot;, lv_evolvingPlayerIndex, 1);
                }
                gv_players[lv_evolvingPlayerIndex].stats.attributePoints += 5.0;
                gv_attributeText[lv_evolvingPlayerIndex] = FixedToString(gv_players[lv_evolvingPlayerIndex].stats.attributePoints, 0);
                libNtve_gf_SetDialogItemText(gv_players[lv_evolvingPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_evolvingPlayerIndex]), PlayerGroupSingle(lv_evolvingPlayer));
                UnitSelect(gv_players[lv_evolvingPlayerIndex].dragon, lv_evolvingPlayer, true);
                gf_ReapplyBuffs(lv_evolvingPlayer);
                lib1_gf_GrantTalentPoints(1, lv_evolvingPlayer);
                Wait(5.0, c_timeGame);
                gv_evolving[lv_evolvingPlayerIndex] = false;
                TriggerEnable(gt_SaveStackCountsOnInventoryEdit, true);
                TriggerEnable(gt_SaveStackCountsPeriodically, true);
            }
            void gf_ReapplyBuffs (int lp_player) {
                // Variable Declarations
                int lv_strengthoftheDragon;
                int lv_mindoftheDragon;
                int lv_powerOverwhelming;
                int lv_rage;
                int lv_vampiricTendencies;
                int lv_zeal;
                int lv_criticalCrepitus;
                int lv_importantPlayerIndex;
                int lv_importantPlayer;
                // Variable Initialization
                // Implementation
                lv_importantPlayerIndex = (lp_player - 1);
                lv_importantPlayer = lp_player;
                while (gv_reapplyingBuffs[lv_importantPlayerIndex]) {
                    Wait(1.0, c_timeGame);
                }
                gv_reapplyingBuffs[lv_importantPlayerIndex] = true;
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;AbsorbMana&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;CriticalCrepitus&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;DarkDissulto&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;DualWield&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;GreedIsGood&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;Headshot&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;MindoftheDragon&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;PowerOverwhelming&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;QuickLearner&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;Rage&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;RealmSwitch&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;Retaliation&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;SpikedScales&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;StickyShot&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;StrengthoftheDragon&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;VampiricTendencies&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorRemovePlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;Zeal&quot;, lv_importantPlayer, c_unitBehaviorCountAll);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;StrengthoftheDragon&quot;, lv_importantPlayer, lib1_gv_strengthoftheDragonCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;MindoftheDragon&quot;, lv_importantPlayer, lib1_gv_mindoftheDragonCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;PowerOverwhelming&quot;, lv_importantPlayer, lib1_gv_powerOverwhelmingCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;Rage&quot;, lv_importantPlayer, lib1_gv_rageCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;VampiricTendencies&quot;, lv_importantPlayer, lib1_gv_vampiricTendenciesCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;Zeal&quot;, lv_importantPlayer, lib1_gv_zealCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;CriticalCrepitus&quot;, lv_importantPlayer, lib1_gv_criticalCrepitusCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;SpikedScales&quot;, lv_importantPlayer, lib1_gv_spikedScalesCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;Retaliation&quot;, lv_importantPlayer, lib1_gv_retaliationCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;Headshot&quot;, lv_importantPlayer, lib1_gv_headshotCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;StickyShot&quot;, lv_importantPlayer, lib1_gv_stickyShotCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;DualWield&quot;, lv_importantPlayer, lib1_gv_dualWieldCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;GreedIsGood&quot;, lv_importantPlayer, lib1_gv_greedisGoodCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;QuickLearner&quot;, lv_importantPlayer, lib1_gv_quickLearnerCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;AbsorbMana&quot;, lv_importantPlayer, lib1_gv_absorbManaCount[lv_importantPlayerIndex]);
                UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;RealmSwitch&quot;, lv_importantPlayer, lib1_gv_realmSwitchCount[lv_importantPlayerIndex]);
                gf_ApplyRebornStats(lp_player);
                gv_reapplyingBuffs[lv_importantPlayerIndex] = false;
            }
            trigger auto_gf_LevelUp_Trigger = null;
            int auto_gf_LevelUp_lp_player;
            void gf_LevelUp (int lp_player) {
                auto_gf_LevelUp_lp_player = lp_player;
                if (auto_gf_LevelUp_Trigger == null) {
                    auto_gf_LevelUp_Trigger = TriggerCreate(&quot;auto_gf_LevelUp_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_LevelUp_Trigger, false, false);
            }
            bool auto_gf_LevelUp_TriggerFunc (bool testConds, bool runActions) {
                int lp_player = auto_gf_LevelUp_lp_player;
                // Variable Declarations
                int lv_importantPlayerIndex;
                int lv_importantPlayer;
                // Variable Initialization
                // Implementation
                lv_importantPlayer = lp_player;
                lv_importantPlayerIndex = (lp_player - 1);
                gv_players[lv_importantPlayerIndex].stats.level = FixedToInt(UnitGetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropLevel, c_unitPropCurrent));
                if ((gv_evolving[lv_importantPlayerIndex] == false) &amp;&amp; (gv_playersSetUp == true)) {
                    lib1_gf_GrantTalentPoints(1, lv_importantPlayer);
                    ActorCreate(ActorScopeFromUnit(gv_players[lv_importantPlayerIndex].dragon), &quot;LevelUpEffect&quot;, null, null, null);
                    SoundPlayOnUnit(SoundLink(&quot;LevelUp&quot;, -1), PlayerGroupSingle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].dragon, 0.0, 100.0, 0.0);
                    gv_players[lv_importantPlayerIndex].stats.level = FixedToInt(UnitGetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropLevel, c_unitPropCurrent));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lp_player) + (StringExternal(&quot;Param/Value/684E7509&quot;) + IntToText(gv_players[lv_importantPlayerIndex].stats.level))));
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_players[lv_importantPlayerIndex].dragon), c_animNameDefault, &quot;Dance&quot;, c_animFlagNonLooping, c_animTimeDefault);
                    BoardItemSetText(gv_leadboard, 2, 2, FixedToText(UnitGetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropLevel, c_unitPropCurrent), 0));
                    gv_players[lv_importantPlayerIndex].stats.attributePoints = (gv_players[lv_importantPlayerIndex].stats.attributePoints + 5.0);
                    gf_ShowStats(gv_players[lv_importantPlayerIndex].dragon);
                    gv_attributeText[lv_importantPlayerIndex] = FixedToString(gv_players[lv_importantPlayerIndex].stats.attributePoints, 0);
                    libNtve_gf_SetDialogItemText(gv_players[lv_importantPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_importantPlayerIndex]), PlayerGroupSingle(lv_importantPlayer));
                    while (gv_players[lv_importantPlayerIndex].banks.accessing) {
                        Wait(1.0, c_timeGame);
                    }
                    gv_players[lv_importantPlayerIndex].banks.accessing = true;
                    BankValueSetFromFixed(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;AP&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.attributePoints);
                    gv_players[lv_importantPlayerIndex].banks.accessing = false;
                }
                UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropEnergyPercent, 100.0);
                return true;
            }
            trigger auto_gf_ShowStats_Trigger = null;
            unit auto_gf_ShowStats_lp_hero;
            void gf_ShowStats (unit lp_hero) {
                auto_gf_ShowStats_lp_hero = lp_hero;
                if (auto_gf_ShowStats_Trigger == null) {
                    auto_gf_ShowStats_Trigger = TriggerCreate(&quot;auto_gf_ShowStats_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_ShowStats_Trigger, false, false);
            }
            bool auto_gf_ShowStats_TriggerFunc (bool testConds, bool runActions) {
                unit lp_hero = auto_gf_ShowStats_lp_hero;
                // Implementation
                UnitAbilityShow(lp_hero, &quot;Strength1&quot;, true);
                UnitAbilityShow(lp_hero, &quot;Vitality1&quot;, true);
                UnitAbilityShow(lp_hero, &quot;Intelligence1&quot;, true);
                UnitAbilityShow(lp_hero, &quot;Dexterity1&quot;, true);
                UnitAbilityShow(lp_hero, &quot;Agility1&quot;, true);
                return true;
            }
            trigger auto_gf_HideStats_Trigger = null;
            unit auto_gf_HideStats_lp_hero;
            void gf_HideStats (unit lp_hero) {
                auto_gf_HideStats_lp_hero = lp_hero;
                if (auto_gf_HideStats_Trigger == null) {
                    auto_gf_HideStats_Trigger = TriggerCreate(&quot;auto_gf_HideStats_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_HideStats_Trigger, false, false);
            }
            bool auto_gf_HideStats_TriggerFunc (bool testConds, bool runActions) {
                unit lp_hero = auto_gf_HideStats_lp_hero;
                // Implementation
                UnitAbilityShow(lp_hero, &quot;Strength1&quot;, false);
                UnitAbilityShow(lp_hero, &quot;Vitality1&quot;, false);
                UnitAbilityShow(lp_hero, &quot;Intelligence1&quot;, false);
                UnitAbilityShow(lp_hero, &quot;Dexterity1&quot;, false);
                UnitAbilityShow(lp_hero, &quot;Agility1&quot;, false);
                return true;
            }
            void gf_RandomEffectonAttack (fixed lp_percentChance, int lp_ammountof, string lp_debuff, unit lp_recievingUnit, unit lp_sendingUnit) {
                // Implementation
                if (gf_RandomChance(lp_percentChance)) {
                    UnitBehaviorAdd(lp_recievingUnit, lp_debuff, lp_sendingUnit, lp_ammountof);
                }
            }
            void gf_RandomlySpawnAllies (fixed lp_percentChance, int lp_ammountof, string lp_enemytospawn, unit lp_spawningUnit, unit lp_spawnee) {
                // Implementation
                if (gf_RandomChance(lp_percentChance)) {
                    libNtve_gf_UnitCreateFacingPoint(lp_ammountof, lp_enemytospawn, 0, 15, UnitGetPosition(lp_spawningUnit), UnitGetPosition(lp_spawnee));
                }
            }
            bool gf_RandomChance (fixed lp_percentChance) {
                // Implementation
                if ((RandomFixed(0.0, 100.0) &lt; lp_percentChance)) {
                    return true;
                }
                else {
                    return false;
                }
            }
            trigger auto_gf_NosferatusRelic_Trigger = null;
            int auto_gf_NosferatusRelic_lp_player;
            unit auto_gf_NosferatusRelic_lp_hero;
            fixed auto_gf_NosferatusRelic_lp_attackAmmount;
            void gf_NosferatusRelic (int lp_player, unit lp_hero, fixed lp_attackAmmount) {
                auto_gf_NosferatusRelic_lp_player = lp_player;
                auto_gf_NosferatusRelic_lp_hero = lp_hero;
                auto_gf_NosferatusRelic_lp_attackAmmount = lp_attackAmmount;
                if (auto_gf_NosferatusRelic_Trigger == null) {
                    auto_gf_NosferatusRelic_Trigger = TriggerCreate(&quot;auto_gf_NosferatusRelic_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_NosferatusRelic_Trigger, false, false);
            }
            bool auto_gf_NosferatusRelic_TriggerFunc (bool testConds, bool runActions) {
                int lp_player = auto_gf_NosferatusRelic_lp_player;
                unit lp_hero = auto_gf_NosferatusRelic_lp_hero;
                fixed lp_attackAmmount = auto_gf_NosferatusRelic_lp_attackAmmount;
                // Variable Declarations
                unitgroup lv_surroundingUnits;
                int lv_tag;
                // Variable Initialization
                lv_surroundingUnits = UnitGroupEmpty();
                lv_tag = c_textTagNone;
                // Implementation
                if ((RandomFixed(0.0, 100.0) &lt; (1.0 * UnitBehaviorCount(lp_hero, &quot;NosferatusRelic&quot;)))) {
                    UnitSetPropertyFixed(lp_hero, c_unitPropLifePercent, 100.0);
                    TextTagCreate(StringExternal(&quot;Param/Value/4AEFB157&quot;), 50, UnitGetPosition(lp_hero), 5.0, true, true, PlayerGroupSingle(lp_player));
                    lv_tag = TextTagLastCreated();
                    TextTagSetVelocity(lv_tag, 0.1, 90.0);
                    TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
                    TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
                }
                if ((RandomFixed(0.0, 100.0) &lt; (1.0 * UnitBehaviorCount(lp_hero, &quot;NosferatusRelic&quot;)))) {
                    UnitSetPropertyFixed(lp_hero, c_unitPropShieldsPercent, 100.0);
                    TextTagCreate(StringExternal(&quot;Param/Value/42EFD948&quot;), 50, UnitGetPosition(lp_hero), 5.0, true, true, PlayerGroupSingle(lp_player));
                    lv_tag = TextTagLastCreated();
                    TextTagSetVelocity(lv_tag, 0.1, 90.0);
                    TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
                    TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
                }
                if ((RandomFixed(0.0, 100.0) &lt; (1.0 * UnitBehaviorCount(lp_hero, &quot;NosferatusRelic&quot;)))) {
                    UnitSetPropertyFixed(lp_hero, c_unitPropEnergyPercent, 100.0);
                    TextTagCreate(StringExternal(&quot;Param/Value/CD490724&quot;), 50, UnitGetPosition(lp_hero), 5.0, true, true, PlayerGroupSingle(lp_player));
                    lv_tag = TextTagLastCreated();
                    TextTagSetVelocity(lv_tag, 0.1, 90.0);
                    TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
                    TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
                }
                if ((RandomFixed(0.0, 100.0) &lt; (1.0 * UnitBehaviorCount(lp_hero, &quot;NosferatusRelic&quot;)))) {
                    UnitAbilityReset(lp_hero, AbilityCommand(&quot;Fireball&quot;, 0), c_spendLocationAll);
                    UnitAbilityReset(lp_hero, AbilityCommand(&quot;FireClaws&quot;, 0), c_spendLocationAll);
                    UnitAbilityReset(lp_hero, AbilityCommand(&quot;FlameEgg&quot;, 0), c_spendLocationAll);
                    UnitAbilityReset(lp_hero, AbilityCommand(&quot;Nova&quot;, 0), c_spendLocationAll);
                    UnitAbilityReset(lp_hero, AbilityCommand(&quot;Inferno&quot;, 0), c_spendLocationAll);
                    TextTagCreate(StringExternal(&quot;Param/Value/D979A8A4&quot;), 50, UnitGetPosition(lp_hero), 5.0, true, true, PlayerGroupSingle(lp_player));
                    lv_tag = TextTagLastCreated();
                    TextTagSetVelocity(lv_tag, 0.1, 90.0);
                    TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
                    TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
                }
                if ((RandomFixed(0.0, 100.0) &lt; (1.0 * UnitBehaviorCount(lp_hero, &quot;NosferatusRelic&quot;)))) {
                    TextTagCreate(StringExternal(&quot;Param/Value/3602F42D&quot;), 50, UnitGetPosition(lp_hero), 5.0, true, true, PlayerGroupSingle(lp_player));
                    lv_tag = TextTagLastCreated();
                    TextTagSetVelocity(lv_tag, 0.1, 90.0);
                    TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
                    TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
                }
                if ((RandomFixed(0.0, 100.0) &lt; (1.0 * UnitBehaviorCount(lp_hero, &quot;NosferatusRelic&quot;)))) {
                    lv_surroundingUnits = UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_hero), 6.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(lp_hero));
                    UnitGroupLoopBegin(lv_surroundingUnits);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitDamage(lp_hero, &quot;CriticalStrike&quot;, UnitGroupLoopCurrent(), lp_attackAmmount);
                        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(UnitGroupLoopCurrent()));
                        TextTagCreate(StringExternal(&quot;Param/Value/13ABAEAA&quot;), 50, UnitGetPosition(UnitGroupLoopCurrent()), 5.0, true, true, PlayerGroupSingle(lp_player));
                        lv_tag = TextTagLastCreated();
                        TextTagSetVelocity(lv_tag, 0.1, 90.0);
                        TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
                        TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
                    }
                    UnitGroupLoopEnd();
                }
                return true;
            }
            void gf_StickyShot (unit lp_hero, unit lp_target) {
                // Variable Declarations
                fixed lv_randomNumber;
                int lv_thisTag;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                // Implementation
                lv_randomNumber = RandomFixed(0.0, 100.0);
                if ((lv_randomNumber &lt; (0.5 * UnitBehaviorCount(lp_hero, &quot;Sticky&quot;)))) {
                    UnitBehaviorRemove(lp_target, &quot;Sticky&quot;, c_unitBehaviorCountAll);
                    UnitBehaviorAdd(lp_target, &quot;Sticky&quot;, lp_hero, UnitBehaviorCount(lp_hero, &quot;StickyShot&quot;));
                    TextTagCreate(StringExternal(&quot;Param/Value/8F5EE5D4&quot;), 24, UnitGetPosition(lp_target), 1.0, true, true, PlayerGroupAll());
                    lv_thisTag = TextTagLastCreated();
                    TextTagSetVelocity(lv_thisTag, 0.25, 10.0);
                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                }
            }
            void gf_RealmSwitch (unit lp_hero, unit lp_target) {
                // Variable Declarations
                fixed lv_randomNumber;
                int lv_thisTag;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                // Implementation
                lv_randomNumber = RandomFixed(0.0, 100.0);
                if ((lv_randomNumber &lt; (0.5 * UnitBehaviorCount(lp_hero, &quot;RealmSwitch&quot;)))) {
                    UnitBehaviorAdd(lp_hero, &quot;Vanished&quot;, lp_hero, 1);
                    TextTagCreate(StringExternal(&quot;Param/Value/032643A8&quot;), 30, UnitGetPosition(lp_hero), 0.0, true, true, PlayerGroupAll());
                    lv_thisTag = TextTagLastCreated();
                    TextTagSetVelocity(lv_thisTag, 0.5, 0.0);
                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                    TextTagCreate(StringExternal(&quot;Param/Value/3D64B2BA&quot;), 30, UnitGetPosition(lp_hero), 0.0, true, true, PlayerGroupAll());
                    lv_thisTag = TextTagLastCreated();
                    TextTagSetVelocity(lv_thisTag, 0.5, 180.0);
                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                }
            }
            void gf_DualWield (unit lp_hero, unit lp_target, string lp_herosEffect, fixed lp_herosEffectDamage) {
                // Variable Declarations
                fixed lv_randomNumber;
                int lv_thisTag;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                // Implementation
                lv_randomNumber = RandomFixed(0.0, 100.0);
                if ((lv_randomNumber &lt; (0.5 * UnitBehaviorCount(lp_hero, &quot;DualWield&quot;)))) {
                    UnitDamage(lp_hero, lp_herosEffect, lp_target, 0.0);
                    TextTagCreate((StringExternal(&quot;Param/Value/242D9ECB&quot;) + (FixedToText(lp_herosEffectDamage, 0) + StringExternal(&quot;Param/Value/73896267&quot;))), 24, UnitGetPosition(lp_target), 1.0, true, true, PlayerGroupAll());
                    lv_thisTag = TextTagLastCreated();
                    TextTagSetVelocity(lv_thisTag, 0.75, 70.0);
                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                }
            }
            void gf_Rage (unit lp_hero, fixed lp_damagingAmount) {
                // Variable Declarations
                int lv_thisTag;
                fixed lv_rageGain;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                // Implementation
                lv_rageGain = (lp_damagingAmount * (0.01 * UnitBehaviorCount(lp_hero, &quot;Rage&quot;)));
                UnitSetPropertyFixed(lp_hero, c_unitPropEnergy, (UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent) + lv_rageGain));
                if ((lv_rageGain &gt; 0.0)) {
                    TextTagCreate(FixedToText(lv_rageGain, 0), 24, UnitGetPosition(lp_hero), 1.0, true, true, PlayerGroupAll());
                    lv_thisTag = TextTagLastCreated();
                    TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 0.00, 100.00));
                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
                }
            }
            void gf_WaypointTeleport (int lp_player, region lp_waypoint) {
                // Variable Declarations
                int lv_tPI;
                actor lv_effectActor1;
                actor lv_effectActor2;
                // Variable Initialization
                lv_tPI = (lp_player - 1);
                // Implementation
                libNtve_gf_PauseUnit(gv_players[lv_tPI].dragon, true);
                libNtve_gf_CreateModelAtPoint(&quot;TimeWarpLaunch&quot;, UnitGetPosition(gv_players[lv_tPI].dragon));
                lv_effectActor1 = libNtve_gf_ActorLastCreated();
                SoundPlayOnUnit(SoundLink(&quot;WarpGate_TrainStart&quot;, -1), PlayerGroupAll(), gv_players[lv_tPI].dragon, 0.0, 100.0, 0.0);
                Wait(0.45, c_timeGame);
                UnitSetPosition(gv_players[lv_tPI].dragon, RegionGetCenter(lp_waypoint), false);
                gv_respawnPoint[lv_tPI] = RegionGetCenter(lp_waypoint);
                libNtve_gf_CreateModelAtPoint(&quot;TimeWarp&quot;, RegionGetCenter(lp_waypoint));
                lv_effectActor2 = libNtve_gf_ActorLastCreated();
                SoundPlayOnUnit(SoundLink(&quot;WarpGate_TrainFinish&quot;, -1), PlayerGroupAll(), gv_players[lv_tPI].dragon, 0.0, 100.0, 0.0);
                Wait(0.45, c_timeGame);
                libNtve_gf_KillModel(lv_effectActor1);
                CameraPan(lp_player, RegionGetCenter(lp_waypoint), 0.0, -1, 10.0, false);
                libNtve_gf_PauseUnit(gv_players[lv_tPI].dragon, false);
                Wait(0.45, c_timeGame);
                libNtve_gf_KillModel(lv_effectActor2);
            }
            void gf_ShowWaypointDialog (int lp_player) {
                // Variable Declarations
                int lv_tPI;
                // Variable Initialization
                lv_tPI = (lp_player - 1);
                // Implementation
                if ((gv_unlockedWaypoints[lv_tPI][0] == true)) {
                    DialogControlSetEnabled(gv_wastelandDialogButton, PlayerGroupSingle(lp_player), true);
                    DialogControlSetVisible(gv_wastelandDialogButton, PlayerGroupSingle(lp_player), true);
                    if ((libNtve_gf_UnitInRegion(gv_players[lv_tPI].dragon, RegionCircle(UnitGetPosition(UnitFromId(1199)), 2.0)) == true)) {
                        DialogControlSetEnabled(gv_wastelandDialogButton, PlayerGroupSingle(lp_player), false);
                    }
                }
                if ((gv_unlockedWaypoints[lv_tPI][1] == true)) {
                    DialogControlSetEnabled(gv_ballanDialogButton, PlayerGroupSingle(lp_player), true);
                    DialogControlSetVisible(gv_ballanDialogButton, PlayerGroupSingle(lp_player), true);
                    if ((libNtve_gf_UnitInRegion(gv_players[lv_tPI].dragon, RegionCircle(UnitGetPosition(UnitFromId(1201)), 2.0)) == true)) {
                        DialogControlSetEnabled(gv_ballanDialogButton, PlayerGroupSingle(lp_player), false);
                    }
                }
                if ((gv_unlockedWaypoints[lv_tPI][2] == true)) {
                    DialogControlSetEnabled(gv_relamyDialogButton, PlayerGroupSingle(lp_player), true);
                    DialogControlSetVisible(gv_relamyDialogButton, PlayerGroupSingle(lp_player), true);
                    if ((libNtve_gf_UnitInRegion(gv_players[lv_tPI].dragon, RegionCircle(UnitGetPosition(UnitFromId(607)), 2.0)) == true)) {
                        DialogControlSetEnabled(gv_relamyDialogButton, PlayerGroupSingle(lp_player), false);
                    }
                }
                if ((gv_unlockedWaypoints[lv_tPI][3] == true)) {
                    DialogControlSetEnabled(gv_verbotenDialogButton, PlayerGroupSingle(lp_player), true);
                    DialogControlSetVisible(gv_verbotenDialogButton, PlayerGroupSingle(lp_player), true);
                    if ((libNtve_gf_UnitInRegion(gv_players[lv_tPI].dragon, RegionCircle(UnitGetPosition(UnitFromId(798)), 2.0)) == true)) {
                        DialogControlSetEnabled(gv_verbotenDialogButton, PlayerGroupSingle(lp_player), false);
                    }
                }
                if ((gv_unlockedWaypoints[lv_tPI][4] == true)) {
                    DialogControlSetEnabled(gv_cretonDialogButton, PlayerGroupSingle(lp_player), true);
                    DialogControlSetVisible(gv_cretonDialogButton, PlayerGroupSingle(lp_player), true);
                    if ((libNtve_gf_UnitInRegion(gv_players[lv_tPI].dragon, RegionCircle(UnitGetPosition(UnitFromId(797)), 2.0)) == true)) {
                        DialogControlSetEnabled(gv_cretonDialogButton, PlayerGroupSingle(lp_player), false);
                    }
                }
                DialogSetVisible(gv_waypointDialog, PlayerGroupSingle(lp_player), true);
            }
            void gf_HideWaypointDialog (int lp_player) {
                // Variable Declarations
                int lv_tPI;
                // Variable Initialization
                lv_tPI = (lp_player - 1);
                // Implementation
                DialogControlSetVisible(gv_wastelandDialogButton, PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_ballanDialogButton, PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_relamyDialogButton, PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_verbotenDialogButton, PlayerGroupSingle(lp_player), false);
                DialogControlSetVisible(gv_cretonDialogButton, PlayerGroupSingle(lp_player), false);
                DialogSetVisible(gv_waypointDialog, PlayerGroupSingle(lp_player), false);
            }
            void gf_ResetTalentBuildandVariables (int lp_importantPlayer) {
                // Implementation
                lib1_gf_ResetTalentBuild(lp_importantPlayer, FixedToInt(UnitGetPropertyFixed(gv_players[lp_importantPlayer - 1].dragon, c_unitPropLevel, c_unitPropCurrent)));
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;StrengthoftheDragon&quot;, lp_importantPlayer, lib1_gv_strengthoftheDragonCount[(lp_importantPlayer - 1)]);
                lib1_gv_strengthoftheDragonCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;MindoftheDragon&quot;, lp_importantPlayer, lib1_gv_mindoftheDragonCount[(lp_importantPlayer - 1)]);
                lib1_gv_mindoftheDragonCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;PowerOverwhelming&quot;, lp_importantPlayer, lib1_gv_powerOverwhelmingCount[(lp_importantPlayer - 1)]);
                lib1_gv_powerOverwhelmingCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;Rage&quot;, lp_importantPlayer, lib1_gv_rageCount[(lp_importantPlayer - 1)]);
                lib1_gv_rageCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;VampiricTendencies&quot;, lp_importantPlayer, lib1_gv_vampiricTendenciesCount[(lp_importantPlayer - 1)]);
                lib1_gv_vampiricTendenciesCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;Zeal&quot;, lp_importantPlayer, lib1_gv_zealCount[(lp_importantPlayer - 1)]);
                lib1_gv_zealCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;CriticalCrepitus&quot;, lp_importantPlayer, lib1_gv_criticalCrepitusCount[(lp_importantPlayer - 1)]);
                lib1_gv_criticalCrepitusCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;Headshot&quot;, lp_importantPlayer, lib1_gv_headshotCount[(lp_importantPlayer - 1)]);
                lib1_gv_headshotCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;StickyShot&quot;, lp_importantPlayer, lib1_gv_stickyShotCount[(lp_importantPlayer - 1)]);
                lib1_gv_stickyShotCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;DualWield&quot;, lp_importantPlayer, lib1_gv_dualWieldCount[(lp_importantPlayer - 1)]);
                lib1_gv_dualWieldCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;GreedIsGood&quot;, lp_importantPlayer, lib1_gv_greedisGoodCount[(lp_importantPlayer - 1)]);
                lib1_gv_greedisGoodCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;QuickLearner&quot;, lp_importantPlayer, lib1_gv_quickLearnerCount[(lp_importantPlayer - 1)]);
                lib1_gv_quickLearnerCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;SpikedScales&quot;, lp_importantPlayer, lib1_gv_spikedScalesCount[(lp_importantPlayer - 1)]);
                lib1_gv_spikedScalesCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;Retaliation&quot;, lp_importantPlayer, lib1_gv_retaliationCount[(lp_importantPlayer - 1)]);
                lib1_gv_retaliationCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;AbsorbMana&quot;, lp_importantPlayer, lib1_gv_absorbManaCount[(lp_importantPlayer - 1)]);
                lib1_gv_absorbManaCount[(lp_importantPlayer - 1)] = 0;
                UnitBehaviorRemovePlayer(gv_players[lp_importantPlayer - 1].dragon, &quot;RealmSwitch&quot;, lp_importantPlayer, lib1_gv_realmSwitchCount[(lp_importantPlayer - 1)]);
                lib1_gv_realmSwitchCount[(lp_importantPlayer - 1)] = 0;
            }
            void gf_LoadStackCounts (int lp_player) {
                // Variable Declarations
                int lv_tPI;
                fixed lv_chargesUsed;
                // Variable Initialization
                // Implementation
                lv_tPI = (lp_player - 1);
                UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_tPI].dragon));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;SmallHealthPotion&quot;)) {
                        if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;SHP&quot;) == true)) {
                            lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, &quot;SHP&quot;, PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[0]));
                            UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[0], lv_chargesUsed);
                        }
                    }
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;MediumHealthPotion&quot;)) {
                        if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;MHP&quot;) == true)) {
                            lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, &quot;MHP&quot;, PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[1]));
                            UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[1], lv_chargesUsed);
                        }
                    }
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;LargeHealthPotion&quot;)) {
                        if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;LHP&quot;) == true)) {
                            lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, &quot;LHP&quot;, PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[2]));
                            UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[2], lv_chargesUsed);
                        }
                    }
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;GrandHealthPotion&quot;)) {
                        if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;GHP&quot;) == true)) {
                            lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, &quot;GHP&quot;, PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[3]));
                            UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[3], lv_chargesUsed);
                        }
                    }
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;SmallAttackSpeedPotion&quot;)) {
                        if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;SASP&quot;) == true)) {
                            lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, &quot;SASP&quot;, PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[4]));
                            UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[4], lv_chargesUsed);
                        }
                    }
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;MediumAttackSpeedPotion&quot;)) {
                        if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;MASP&quot;) == true)) {
                            lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, &quot;MASP&quot;, PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[5]));
                            UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[5], lv_chargesUsed);
                        }
                    }
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;LargeAttackSpeedPotion&quot;)) {
                        if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;LASP&quot;) == true)) {
                            lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, &quot;LASP&quot;, PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[6]));
                            UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[6], lv_chargesUsed);
                        }
                    }
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;GrandAttackSpeedPotion&quot;)) {
                        if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;GASP&quot;) == true)) {
                            lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, &quot;GASP&quot;, PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[7]));
                            UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[7], lv_chargesUsed);
                        }
                    }
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;TownPortal&quot;)) {
                        if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;TP&quot;) == true)) {
                            lv_chargesUsed = (BankValueGetAsFixed(gv_players[lv_tPI].banks.dragonBank, &quot;TP&quot;, PlayerHandle(lp_player)) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[8]));
                            UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackChargeNames[8], lv_chargesUsed);
                        }
                    }
                }
                UnitGroupLoopEnd();
            }
            trigger auto_gf_LoadSkills_Trigger = null;
            int auto_gf_LoadSkills_lp_player;
            void gf_LoadSkills (int lp_player) {
                auto_gf_LoadSkills_lp_player = lp_player;
                if (auto_gf_LoadSkills_Trigger == null) {
                    auto_gf_LoadSkills_Trigger = TriggerCreate(&quot;auto_gf_LoadSkills_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_LoadSkills_Trigger, false, false);
            }
            bool auto_gf_LoadSkills_TriggerFunc (bool testConds, bool runActions) {
                int lp_player = auto_gf_LoadSkills_lp_player;
                int auto393224BF_ae;
                int auto393224BF_ai;
                int autoF6240F41_ae;
                int autoF6240F41_ai;
                int autoAC6D5B7E_ae;
                int autoAC6D5B7E_ai;
                int auto81B57A14_ae;
                int auto81B57A14_ai;
                int autoD32DC9E4_ae;
                int autoD32DC9E4_ai;
                int auto44843EEF_ae;
                int auto44843EEF_ai;
                int autoB61BED0D_ae;
                int autoB61BED0D_ai;
                int auto188752F2_ae;
                int auto188752F2_ai;
                int auto02E715EE_ae;
                int auto02E715EE_ai;
                int auto89633E99_ae;
                int auto89633E99_ai;
                int auto7CC7289B_ae;
                int auto7CC7289B_ai;
                int auto4E29FC8D_ae;
                int auto4E29FC8D_ai;
                int autoE13BBE5B_ae;
                int autoE13BBE5B_ai;
                int auto479250D5_ae;
                int auto479250D5_ai;
                int auto92BBD8B5_ae;
                int auto92BBD8B5_ai;
                int autoE237CE34_ae;
                int autoE237CE34_ai;
                int auto1AAAE099_ae;
                int auto1AAAE099_ai;
                int autoD025A1A7_ae;
                int autoD025A1A7_ai;
                // Variable Declarations
                int lv_tPI;
                int lv_i;
                // Variable Initialization
                lv_tPI = (lp_player - 1);
                // Implementation
                if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;FDFB&quot;) == true)) {
                    gv_players[lv_tPI].skills.fireball = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, &quot;FDFB&quot;, PlayerHandle(lp_player));
                    if ((gv_players[lv_tPI].skills.fireball &gt;= 0)) {
                        if ((UnitAbilityCheck(gv_players[lv_tPI].dragon, &quot;Fireball&quot;, true) == false)) {
                            autoF6240F41_ae = gv_players[lv_tPI].skills.fireball;
                            autoF6240F41_ai = 1;
                            lv_i = 0;
                            for ( ; ( (autoF6240F41_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoF6240F41_ae) || (autoF6240F41_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoF6240F41_ae) ) ; lv_i += autoF6240F41_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsFire&quot;, 0)), c_orderQueueAddToEnd);
                            }
                        }
                        else {
                            auto393224BF_ae = gv_players[lv_tPI].skills.fireball;
                            auto393224BF_ai = 1;
                            lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, &quot;Fireball&quot;) + 1);
                            for ( ; ( (auto393224BF_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto393224BF_ae) || (auto393224BF_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto393224BF_ae) ) ; lv_i += auto393224BF_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsFire&quot;, 0)), c_orderQueueAddToEnd);
                            }
                        }
                    }
                }
                if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;FDFC&quot;) == true)) {
                    gv_players[lv_tPI].skills.fireClaw = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, &quot;FDFC&quot;, PlayerHandle(lp_player));
                    if ((gv_players[lv_tPI].skills.fireClaw &gt;= 0)) {
                        if ((UnitAbilityCheck(gv_players[lv_tPI].dragon, &quot;FireClaws&quot;, true) == false)) {
                            auto81B57A14_ae = gv_players[lv_tPI].skills.fireClaw;
                            auto81B57A14_ai = 1;
                            lv_i = 0;
                            for ( ; ( (auto81B57A14_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto81B57A14_ae) || (auto81B57A14_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto81B57A14_ae) ) ; lv_i += auto81B57A14_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsFire&quot;, 1)), c_orderQueueAddToEnd);
                            }
                        }
                        else {
                            autoAC6D5B7E_ae = gv_players[lv_tPI].skills.fireClaw;
                            autoAC6D5B7E_ai = 1;
                            lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, &quot;FireClaws&quot;) + 1);
                            for ( ; ( (autoAC6D5B7E_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoAC6D5B7E_ae) || (autoAC6D5B7E_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoAC6D5B7E_ae) ) ; lv_i += autoAC6D5B7E_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsFire&quot;, 1)), c_orderQueueAddToEnd);
                            }
                        }
                    }
                }
                if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;FDFE&quot;) == true)) {
                    gv_players[lv_tPI].skills.flameEgg = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, &quot;FDFE&quot;, PlayerHandle(lp_player));
                    if ((gv_players[lv_tPI].skills.flameEgg &gt;= 0)) {
                        if ((UnitAbilityCheck(gv_players[lv_tPI].dragon, &quot;FlameEgg&quot;, true) == false)) {
                            auto44843EEF_ae = gv_players[lv_tPI].skills.flameEgg;
                            auto44843EEF_ai = 1;
                            lv_i = 0;
                            for ( ; ( (auto44843EEF_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto44843EEF_ae) || (auto44843EEF_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto44843EEF_ae) ) ; lv_i += auto44843EEF_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsFire&quot;, 2)), c_orderQueueAddToEnd);
                            }
                        }
                        else {
                            autoD32DC9E4_ae = gv_players[lv_tPI].skills.flameEgg;
                            autoD32DC9E4_ai = 1;
                            lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, &quot;FlameEgg&quot;) + 1);
                            for ( ; ( (autoD32DC9E4_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoD32DC9E4_ae) || (autoD32DC9E4_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoD32DC9E4_ae) ) ; lv_i += autoD32DC9E4_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsFire&quot;, 2)), c_orderQueueAddToEnd);
                            }
                        }
                    }
                }
                if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;FDI&quot;) == true)) {
                    gv_players[lv_tPI].skills.inferno = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, &quot;FDI&quot;, PlayerHandle(lp_player));
                    if ((gv_players[lv_tPI].skills.inferno &gt;= 0)) {
                        if ((UnitAbilityCheck(gv_players[lv_tPI].dragon, &quot;Inferno&quot;, true) == false)) {
                            auto188752F2_ae = gv_players[lv_tPI].skills.inferno;
                            auto188752F2_ai = 1;
                            lv_i = 0;
                            for ( ; ( (auto188752F2_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto188752F2_ae) || (auto188752F2_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto188752F2_ae) ) ; lv_i += auto188752F2_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsFire&quot;, 3)), c_orderQueueAddToEnd);
                            }
                        }
                        else {
                            autoB61BED0D_ae = gv_players[lv_tPI].skills.inferno;
                            autoB61BED0D_ai = 1;
                            lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, &quot;Inferno&quot;) + 1);
                            for ( ; ( (autoB61BED0D_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoB61BED0D_ae) || (autoB61BED0D_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoB61BED0D_ae) ) ; lv_i += autoB61BED0D_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsFire&quot;, 3)), c_orderQueueAddToEnd);
                            }
                        }
                    }
                }
                if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;FDN&quot;) == true)) {
                    gv_players[lv_tPI].skills.nova = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, &quot;FDN&quot;, PlayerHandle(lp_player));
                    if ((gv_players[lv_tPI].skills.nova &gt;= 0)) {
                        if ((UnitAbilityCheck(gv_players[lv_tPI].dragon, &quot;Nova&quot;, true) == false)) {
                            auto89633E99_ae = gv_players[lv_tPI].skills.nova;
                            auto89633E99_ai = 1;
                            lv_i = 0;
                            for ( ; ( (auto89633E99_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto89633E99_ae) || (auto89633E99_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto89633E99_ae) ) ; lv_i += auto89633E99_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsFire&quot;, 4)), c_orderQueueAddToEnd);
                            }
                        }
                        else {
                            auto02E715EE_ae = gv_players[lv_tPI].skills.nova;
                            auto02E715EE_ai = 1;
                            lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, &quot;Nova&quot;) + 1);
                            for ( ; ( (auto02E715EE_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto02E715EE_ae) || (auto02E715EE_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto02E715EE_ae) ) ; lv_i += auto02E715EE_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsFire&quot;, 4)), c_orderQueueAddToEnd);
                            }
                        }
                    }
                }
                if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;IDFS&quot;) == true)) {
                    gv_players[lv_tPI].skills.frostSpike = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, &quot;IDFS&quot;, PlayerHandle(lp_player));
                    if ((gv_players[lv_tPI].skills.frostSpike &gt;= 0)) {
                        if ((UnitAbilityCheck(gv_players[lv_tPI].dragon, &quot;FrostSpike&quot;, true) == false)) {
                            auto4E29FC8D_ae = gv_players[lv_tPI].skills.frostSpike;
                            auto4E29FC8D_ai = 1;
                            lv_i = 0;
                            for ( ; ( (auto4E29FC8D_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto4E29FC8D_ae) || (auto4E29FC8D_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto4E29FC8D_ae) ) ; lv_i += auto4E29FC8D_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsIce&quot;, 0)), c_orderQueueAddToEnd);
                            }
                        }
                        else {
                            auto7CC7289B_ae = gv_players[lv_tPI].skills.frostSpike;
                            auto7CC7289B_ai = 1;
                            lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, &quot;FrostSpike&quot;) + 1);
                            for ( ; ( (auto7CC7289B_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto7CC7289B_ae) || (auto7CC7289B_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto7CC7289B_ae) ) ; lv_i += auto7CC7289B_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsIce&quot;, 0)), c_orderQueueAddToEnd);
                            }
                        }
                    }
                }
                if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;IDB&quot;) == true)) {
                    gv_players[lv_tPI].skills.blizzard = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, &quot;IDB&quot;, PlayerHandle(lp_player));
                    if ((gv_players[lv_tPI].skills.blizzard &gt;= 0)) {
                        if ((UnitAbilityCheck(gv_players[lv_tPI].dragon, &quot;Blizzard&quot;, true) == false)) {
                            auto479250D5_ae = gv_players[lv_tPI].skills.blizzard;
                            auto479250D5_ai = 1;
                            lv_i = 0;
                            for ( ; ( (auto479250D5_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto479250D5_ae) || (auto479250D5_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto479250D5_ae) ) ; lv_i += auto479250D5_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsIce&quot;, 1)), c_orderQueueAddToEnd);
                            }
                        }
                        else {
                            autoE13BBE5B_ae = gv_players[lv_tPI].skills.blizzard;
                            autoE13BBE5B_ai = 1;
                            lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, &quot;Blizzard&quot;) + 1);
                            for ( ; ( (autoE13BBE5B_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoE13BBE5B_ae) || (autoE13BBE5B_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoE13BBE5B_ae) ) ; lv_i += autoE13BBE5B_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsIce&quot;, 1)), c_orderQueueAddToEnd);
                            }
                        }
                    }
                }
                if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;IDSZ&quot;) == true)) {
                    gv_players[lv_tPI].skills.subzero = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, &quot;IDSZ&quot;, PlayerHandle(lp_player));
                    if ((gv_players[lv_tPI].skills.subzero &gt;= 0)) {
                        if ((UnitAbilityCheck(gv_players[lv_tPI].dragon, &quot;SubZero&quot;, true) == false)) {
                            autoE237CE34_ae = gv_players[lv_tPI].skills.subzero;
                            autoE237CE34_ai = 1;
                            lv_i = 0;
                            for ( ; ( (autoE237CE34_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoE237CE34_ae) || (autoE237CE34_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoE237CE34_ae) ) ; lv_i += autoE237CE34_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsIce&quot;, 2)), c_orderQueueAddToEnd);
                            }
                        }
                        else {
                            auto92BBD8B5_ae = gv_players[lv_tPI].skills.subzero;
                            auto92BBD8B5_ai = 1;
                            lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, &quot;SubZero&quot;) + 1);
                            for ( ; ( (auto92BBD8B5_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto92BBD8B5_ae) || (auto92BBD8B5_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto92BBD8B5_ae) ) ; lv_i += auto92BBD8B5_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsIce&quot;, 2)), c_orderQueueAddToEnd);
                            }
                        }
                    }
                }
                if ((BankSectionExists(gv_players[lv_tPI].banks.dragonBank, &quot;IDFA&quot;) == true)) {
                    gv_players[lv_tPI].skills.frozenArmour = BankValueGetAsInt(gv_players[lv_tPI].banks.dragonBank, &quot;IDFA&quot;, PlayerHandle(lp_player));
                    if ((gv_players[lv_tPI].skills.frozenArmour &gt;= 0)) {
                        if ((UnitAbilityCheck(gv_players[lv_tPI].dragon, &quot;FrozenArmor&quot;, true) == false)) {
                            autoD025A1A7_ae = gv_players[lv_tPI].skills.frozenArmour;
                            autoD025A1A7_ai = 1;
                            lv_i = 0;
                            for ( ; ( (autoD025A1A7_ai &gt;= 0 &amp;&amp; lv_i &lt;= autoD025A1A7_ae) || (autoD025A1A7_ai &lt;= 0 &amp;&amp; lv_i &gt;= autoD025A1A7_ae) ) ; lv_i += autoD025A1A7_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsIce&quot;, 3)), c_orderQueueAddToEnd);
                            }
                        }
                        else {
                            auto1AAAE099_ae = gv_players[lv_tPI].skills.frozenArmour;
                            auto1AAAE099_ai = 1;
                            lv_i = (UnitAbilityGetLevel(gv_players[lv_tPI].dragon, &quot;FrozenArmor&quot;) + 1);
                            for ( ; ( (auto1AAAE099_ai &gt;= 0 &amp;&amp; lv_i &lt;= auto1AAAE099_ae) || (auto1AAAE099_ai &lt;= 0 &amp;&amp; lv_i &gt;= auto1AAAE099_ae) ) ; lv_i += auto1AAAE099_ai ) {
                                UnitIssueOrder(gv_players[lv_tPI].dragon, Order(AbilityCommand(&quot;LearnSkillsIce&quot;, 3)), c_orderQueueAddToEnd);
                            }
                        }
                    }
                }
                return true;
            }
            void gf_LoadHPC (int lp_player) {
                // Variable Declarations
                int lv_hPCBank;
                int lv_hPCManual;
                int lv_pi;
                // Variable Initialization
                lv_pi = (lp_player - 1);
                // Implementation
                if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
                    if ((BankSectionExists(gv_players[lv_pi].banks.currencyBank, &quot;HPC&quot;) == true)) {
                        gv_shards[lv_pi] = (BankValueGetAsInt(gv_players[lv_pi].banks.currencyBank, &quot;Shards&quot;, PlayerHandle(lp_player)) / 1);
                        PlayerModifyPropertyInt(lp_player, c_playerPropCustom, c_playerPropOperSetTo, gv_shards[lv_pi]);
                        gv_gold[lv_pi] = (BankValueGetAsInt(gv_players[lv_pi].banks.currencyBank, &quot;Gold&quot;, PlayerHandle(lp_player)) / 1);
                        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, gv_gold[lv_pi]);
                        gv_pvPPoints[lv_pi] = (BankValueGetAsInt(gv_players[lv_pi].banks.currencyBank, &quot;PvP Points&quot;, PlayerHandle(lp_player)) / 1);
                        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, gv_pvPPoints[lv_pi]);
                        lv_hPCManual = (gv_shards[lv_pi] + (gv_gold[lv_pi] + (gv_pvPPoints[lv_pi] + gv_hPCConstant)));
                        lv_hPCBank = BankValueGetAsInt(gv_players[lv_pi].banks.currencyBank, &quot;HPC&quot;, PlayerHandle(lp_player));
                        if ((lv_hPCBank != lv_hPCManual)) {
                            if ((lv_hPCBank == -10691)) {
                                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/10F95778&quot;));
                                gv_hPCChecked[lv_pi] = true;
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/7CC796A6&quot;));
                                GameOver(lp_player, c_gameOverDefeat, true, true);
                            }
                        }
                        else {
                            gv_hPCChecked[lv_pi] = true;
                        }
                    }
                    else {
                        if ((BankSectionExists(gv_players[lv_pi].banks.dragonBank, &quot;Gold&quot;) == true) &amp;&amp; (BankSectionExists(gv_players[lv_pi].banks.dragonBank, &quot;PvP Points&quot;) == true) &amp;&amp; (BankSectionExists(gv_players[lv_pi].banks.dragonBank, &quot;Shards&quot;) == true)) {
                            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/A7264C2D&quot;));
                            GameOver(lp_player, c_gameOverDefeat, true, true);
                        }
                        else {
                            gv_hPCChecked[lv_pi] = true;
                        }
                    }
                }
            }
            void gf_LoadHRC (int lp_player) {
                // Variable Declarations
                int lv_hRCBank;
                int lv_hRCManual;
                int lv_checkVariable;
                int lv_pi;
                // Variable Initialization
                lv_pi = (lp_player - 1);
                // Implementation
                if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
                    if ((BankSectionExists(gv_players[lv_pi].banks.rebornBank, &quot;HRC&quot;) == true)) {
                        gv_players[lv_pi].stats.reborn.regen = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, &quot;Reborn RegenerationUp&quot;, PlayerHandle(lp_player));
                        gv_players[lv_pi].stats.reborn.points = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, &quot;Reborn Points&quot;, PlayerHandle(lp_player));
                        gv_players[lv_pi].stats.reborn.movementSpeed = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, &quot;Reborn MovementSpeedUp&quot;, PlayerHandle(lp_player));
                        gv_players[lv_pi].stats.reborn.miss = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, &quot;Reborn Miss%Down&quot;, PlayerHandle(lp_player));
                        gv_players[lv_pi].stats.reborn.maxMP = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, &quot;Reborn MaxMPUp&quot;, PlayerHandle(lp_player));
                        gv_players[lv_pi].stats.reborn.maxHP = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, &quot;Reborn MaxHPUp&quot;, PlayerHandle(lp_player));
                        gv_players[lv_pi].stats.reborn.itemDrop = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, &quot;Reborn ItemDrop%Up&quot;, PlayerHandle(lp_player));
                        gv_players[lv_pi].stats.reborn.goldDrop = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, &quot;Reborn GoldDrop%Up&quot;, PlayerHandle(lp_player));
                        gv_players[lv_pi].stats.reborn.dodge = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, &quot;Reborn Dodge%Up&quot;, PlayerHandle(lp_player));
                        gv_players[lv_pi].stats.reborn.defense = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, &quot;Reborn DefenseUp&quot;, PlayerHandle(lp_player));
                        gv_players[lv_pi].stats.reborn.count = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, &quot;Reborn Count&quot;, PlayerHandle(lp_player));
                        gv_players[lv_pi].stats.reborn.attackSpeed = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, &quot;Reborn AttackSpeedUp&quot;, PlayerHandle(lp_player));
                        lv_hRCManual = (gv_players[lv_pi].stats.reborn.regen + (gv_players[lv_pi].stats.reborn.points + ((gv_players[lv_pi].stats.reborn.movementSpeed + (((gv_players[lv_pi].stats.reborn.miss + gv_players[lv_pi].stats.reborn.maxMP) + gv_players[lv_pi].stats.reborn.maxHP) + (((gv_players[lv_pi].stats.reborn.itemDrop + gv_players[lv_pi].stats.reborn.goldDrop) + gv_players[lv_pi].stats.reborn.dodge) + gv_players[lv_pi].stats.reborn.defense))) + ((gv_players[lv_pi].stats.reborn.count + gv_players[lv_pi].stats.reborn.attackSpeed) + gv_hRCConstant))));
                        lv_hRCBank = BankValueGetAsInt(gv_players[lv_pi].banks.rebornBank, &quot;HRC&quot;, PlayerHandle(lp_player));
                        BankWait(gv_players[lv_pi].banks.rebornBank);
                        if ((lv_hRCBank != lv_hRCManual)) {
                            if ((lv_hRCBank == -10691)) {
                                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/D79EFB21&quot;));
                                gv_hRCChecked[lv_pi] = true;
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/4C304E5E&quot;));
                                GameOver(lp_player, c_gameOverDefeat, true, true);
                            }
                        }
                        else {
                            lv_checkVariable = (gv_players[lv_pi].stats.reborn.regen + (gv_players[lv_pi].stats.reborn.points + ((gv_players[lv_pi].stats.reborn.movementSpeed + (((gv_players[lv_pi].stats.reborn.miss + gv_players[lv_pi].stats.reborn.maxMP) + gv_players[lv_pi].stats.reborn.maxHP) + (((gv_players[lv_pi].stats.reborn.itemDrop + gv_players[lv_pi].stats.reborn.goldDrop) + gv_players[lv_pi].stats.reborn.dodge) + gv_players[lv_pi].stats.reborn.defense))) + gv_players[lv_pi].stats.reborn.attackSpeed)));
                            if (((gv_players[lv_pi].stats.reborn.count * 10) != lv_checkVariable)) {
                                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E49171F1&quot;));
                                gv_players[lv_pi].stats.reborn.regen = 0;
                                gv_players[lv_pi].stats.reborn.movementSpeed = 0;
                                gv_players[lv_pi].stats.reborn.miss = 0;
                                gv_players[lv_pi].stats.reborn.maxMP = 0;
                                gv_players[lv_pi].stats.reborn.maxHP = 0;
                                gv_players[lv_pi].stats.reborn.itemDrop = 0;
                                gv_players[lv_pi].stats.reborn.goldDrop = 0;
                                gv_players[lv_pi].stats.reborn.dodge = 0;
                                gv_players[lv_pi].stats.reborn.defense = 0;
                                gv_players[lv_pi].stats.reborn.attackSpeed = 0;
                                gv_players[lv_pi].stats.reborn.points = (gv_players[lv_pi].stats.reborn.count * 10);
                            }
                            gv_hRCChecked[lv_pi] = true;
                        }
                    }
                    else {
                        gv_hRCChecked[lv_pi] = true;
                    }
                }
            }
            void gf_LoadStash (int lp_player) {
                // Variable Declarations
                int lv_pi;
                // Variable Initialization
                lv_pi = (lp_player - 1);
                // Implementation
                if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
                    if ((BankSectionExists(gv_players[lv_pi].banks.stashBank, &quot;Stash&quot;) == true)) {
                        TechTreeUpgradeAddLevel(lp_player, &quot;Stash1&quot;, BankValueGetAsInt(gv_players[lv_pi].banks.stashBank, &quot;One&quot;, PlayerHandle(lp_player)));
                        TechTreeUpgradeAddLevel(lp_player, &quot;Stash12&quot;, BankValueGetAsInt(gv_players[lv_pi].banks.stashBank, &quot;Two&quot;, PlayerHandle(lp_player)));
                        TechTreeUpgradeAddLevel(lp_player, &quot;Stash13&quot;, BankValueGetAsInt(gv_players[lv_pi].banks.stashBank, &quot;Three&quot;, PlayerHandle(lp_player)));
                        TechTreeUpgradeAddLevel(lp_player, &quot;Stash14&quot;, BankValueGetAsInt(gv_players[lv_pi].banks.stashBank, &quot;Four&quot;, PlayerHandle(lp_player)));
                        TechTreeUpgradeAddLevel(lp_player, &quot;Stash15&quot;, BankValueGetAsInt(gv_players[lv_pi].banks.stashBank, &quot;Five&quot;, PlayerHandle(lp_player)));
                        TechTreeUpgradeAddLevel(lp_player, &quot;Stash16&quot;, BankValueGetAsInt(gv_players[lv_pi].banks.stashBank, &quot;Six&quot;, PlayerHandle(lp_player)));
                        BankValueGetAsUnit(gv_players[lv_pi].banks.stashBank, &quot;Stash&quot;, PlayerHandle(lp_player), lp_player, gv_stashLocation[lv_pi], 270.0);
                        gv_stash[lv_pi] = BankLastRestoredUnit();
                    }
                    else {
                        UnitCreate(1, &quot;Stash&quot;, c_unitCreateIgnorePlacement, lp_player, gv_stashLocation[lv_pi], 270.0);
                        gv_stash[lv_pi] = UnitLastCreated();
                    }
                }
            }
            void gf_InitializeOne () {
                // Implementation
                GameCheatAllow(c_gameCheatAny, false);
                UISetAlertTypeVisible(PlayerGroupAll(), &quot;AttackUnitAlly_Zerg&quot;, false);
                UISetAlertTypeVisible(PlayerGroupAll(), &quot;AttackUnit_Zerg&quot;, false);
                TriggerExecute(gt_HideUselessUI, true, true);
                TriggerExecute(gt_SetUpUnitTypes, true, true);
                SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 0.0);
                UIStatusBarOverride(PlayerGroupAll(), c_unitStatusGroupEnemy);
                TriggerExecute(gt_SetStackChargeNames, true, true);
                TriggerExecute(gt_SetInfestationSpawnTrigger, true, true);
                TriggerExecute(gt_SetZauberersMinionsUnitTypes, true, true);
                TriggerExecute(gt_SetZauberersRegions, true, true);
                TriggerExecute(gt_SpawnEnemies, true, true);
                TriggerExecute(gt_SetupRegions, true, true);
                TriggerExecute(gt_SetUpLocationDialog, true, true);
                TriggerExecute(gt_SetupTips, true, true);
                TriggerExecute(gt_SetUpAttributeDialog, true, true);
                TriggerExecute(gt_CreateTimeofdayDialog, true, true);
                UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowButtons, true);
                UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowHotkeys, true);
                UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowInfoPanel, true);
                UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowMinimap, true);
                UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowModifiers, true);
                UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowPings, true);
                UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowSmartClick, true);
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    PlayerOptionOverride(PlayerGroupLoopCurrent(), &quot;selectuncontrolable&quot;, &quot;1&quot;);
                    PlayerOptionOverride(PlayerGroupLoopCurrent(), &quot;simplecommandcard&quot;, &quot;0&quot;);
                }
                PlayerGroupLoopEnd();
            }
            void gf_InitializeTwo () {
                // Implementation
                TriggerExecute(gt_SetSyritalHealth, false, true);
                TriggerExecute(gt_MachinaDePlagamSethealth, false, true);
                TriggerExecute(gt_Sremagsisethealth, false, true);
                TriggerExecute(gt_MakePlayer14anAlly, false, true);
                TriggerExecute(gt_RunStoryQuestSetups, true, true);
                TriggerExecute(gt_SetUpTalentTree, false, true);
                TriggerExecute(gt_CreateWaypointDialog, true, true);
                TriggerExecute(gt_LoadWaypoints, true, true);
                GameSetSpeedValue(c_gameSpeedNormal);
                GameSetSpeedLocked(true);
            }
            void gf_InitializeThree () {
                // Implementation
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(233)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(247)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(248)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(249)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(250)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(251)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(234)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(235)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(236)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(242)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(243)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(244)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(245)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(246)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(3)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(233)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(247)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(248)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(249)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(250)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(251)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(234)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(235)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(236)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(242)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(243)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(244)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(245)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(246)), 270.0);
                    UnitCreate(1, &quot;VisionDummy&quot;, c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromId(3)), 270.0);
                    gf_LoadHRC(PlayerGroupLoopCurrent());
                    gf_LoadHPC(PlayerGroupLoopCurrent());
                    gf_LoadDragonCheck(PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                libNtve_gf_SetPlayerGroupAlliance(gv_humanPlayers, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
                TriggerExecute(gt_CreateQuestDialog, true, true);
                TriggerExecute(gt_CreateTalkDialog, true, true);
                TriggerExecute(gt_CreateRewardDialog, true, true);
                TriggerExecute(gt_LoadSideQuests, true, true);
                TriggerExecute(gt_CreateRebornDialog, true, true);
                gv_playersSetUp = true;
            }
            void gf_ChangeItemsOwner (int lp_player) {
                // Implementation
                UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lp_player - 1].dragon));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetOwner(UnitGroupLoopCurrent(), lp_player, true);
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitInventoryGroup(gv_stash[(lp_player - 1)]));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetOwner(UnitGroupLoopCurrent(), lp_player, true);
                }
                UnitGroupLoopEnd();
            }
            void gf_StatCheck (int lp_player) {
                // Variable Declarations
                int lv_lazyPlayer;
                int lv_lazyPlayerIndex;
                // Variable Initialization
                lv_lazyPlayer = lp_player;
                lv_lazyPlayerIndex = (lp_player - 1);
                // Implementation
                if (((UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == &quot;BabyDragon&quot;) || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == &quot;BabyIceDragon&quot;) || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == &quot;AdultDragon&quot;) || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == &quot;AdultIceDragon&quot;) || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == &quot;LegendaryDragon&quot;) || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == &quot;LegendaryIceDragon&quot;) || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == &quot;MasterDragon&quot;) || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == &quot;MasterIceDragon&quot;) || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == &quot;TeenDragon&quot;) || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == &quot;TeenIceDragon&quot;) || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == &quot;&quot;) || (UnitGetType(gv_players[lv_lazyPlayerIndex].dragon) == null))) {
                }
                else {
                    UnitBehaviorAdd(gv_players[lv_lazyPlayerIndex].dragon, &quot;DONTEDITBANKFILES&quot;, UnitFromId(2662), 1);
                }
                gv_players[lv_lazyPlayerIndex].stats.agility = UnitBehaviorCount(gv_players[lv_lazyPlayerIndex].dragon, &quot;Agility&quot;);
                gv_players[lv_lazyPlayerIndex].stats.dexterity = UnitBehaviorCount(gv_players[lv_lazyPlayerIndex].dragon, &quot;Dexterity&quot;);
                gv_players[lv_lazyPlayerIndex].stats.intelligence = UnitBehaviorCount(gv_players[lv_lazyPlayerIndex].dragon, &quot;Intelligence&quot;);
                gv_players[lv_lazyPlayerIndex].stats.strength = UnitBehaviorCount(gv_players[lv_lazyPlayerIndex].dragon, &quot;Strength&quot;);
                gv_players[lv_lazyPlayerIndex].stats.vitality = UnitBehaviorCount(gv_players[lv_lazyPlayerIndex].dragon, &quot;Vitality&quot;);
                if (((gv_players[lv_lazyPlayerIndex].stats.agility &gt; 100) || (gv_players[lv_lazyPlayerIndex].stats.dexterity &gt; 500) || (gv_players[lv_lazyPlayerIndex].stats.strength &gt; 500) || (gv_players[lv_lazyPlayerIndex].stats.vitality &gt; 500) || (gv_players[lv_lazyPlayerIndex].stats.intelligence &gt; 500) || ((gv_players[lv_lazyPlayerIndex].stats.strength + (gv_players[lv_lazyPlayerIndex].stats.dexterity + (gv_players[lv_lazyPlayerIndex].stats.intelligence + (gv_players[lv_lazyPlayerIndex].stats.vitality + (gv_players[lv_lazyPlayerIndex].stats.agility + FixedToInt(gv_players[lv_lazyPlayerIndex].stats.attributePoints)))))) &gt; 500))) {
                    gv_players[lv_lazyPlayerIndex].stats.attributePoints = (UnitGetPropertyFixed(gv_players[lv_lazyPlayerIndex].dragon, c_unitPropLevel, c_unitPropCurrent) * 5.0);
                    gv_attributeText[lv_lazyPlayerIndex] = FixedToString(gv_players[lv_lazyPlayerIndex].stats.attributePoints, 0);
                    libNtve_gf_SetDialogItemText(gv_players[lv_lazyPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_lazyPlayerIndex]), PlayerGroupSingle(lv_lazyPlayer));
                    BankValueSetFromFixed(gv_players[lv_lazyPlayerIndex].banks.dragonBank, &quot;AP&quot;, PlayerHandle(lv_lazyPlayer), gv_players[lv_lazyPlayerIndex].stats.attributePoints);
                    UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayerIndex].dragon, &quot;AddAgility&quot;, (lv_lazyPlayerIndex + 1), gv_players[lv_lazyPlayerIndex].stats.agility);
                    gv_players[lv_lazyPlayerIndex].stats.agility = 0;
                    BankValueSetFromInt(gv_players[lv_lazyPlayerIndex].banks.dragonBank, &quot;Ag&quot;, PlayerHandle(lv_lazyPlayer), gv_players[lv_lazyPlayerIndex].stats.agility);
                    UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayerIndex].dragon, &quot;AddDexterity&quot;, (lv_lazyPlayerIndex + 1), gv_players[lv_lazyPlayerIndex].stats.dexterity);
                    gv_players[lv_lazyPlayerIndex].stats.dexterity = 0;
                    BankValueSetFromInt(gv_players[lv_lazyPlayerIndex].banks.dragonBank, &quot;De&quot;, PlayerHandle(lv_lazyPlayer), gv_players[lv_lazyPlayerIndex].stats.dexterity);
                    UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayerIndex].dragon, &quot;AddIntelligence&quot;, (lv_lazyPlayerIndex + 1), gv_players[lv_lazyPlayerIndex].stats.intelligence);
                    gv_players[lv_lazyPlayerIndex].stats.intelligence = 0;
                    BankValueSetFromInt(gv_players[lv_lazyPlayerIndex].banks.dragonBank, &quot;Int&quot;, PlayerHandle(lv_lazyPlayer), gv_players[lv_lazyPlayerIndex].stats.intelligence);
                    UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayerIndex].dragon, &quot;AddStrength&quot;, (lv_lazyPlayerIndex + 1), gv_players[lv_lazyPlayerIndex].stats.strength);
                    gv_players[lv_lazyPlayerIndex].stats.strength = 0;
                    BankValueSetFromInt(gv_players[lv_lazyPlayerIndex].banks.dragonBank, &quot;Str&quot;, PlayerHandle(lv_lazyPlayer), gv_players[lv_lazyPlayerIndex].stats.strength);
                    UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayerIndex].dragon, &quot;AddVitality&quot;, (lv_lazyPlayerIndex + 1), gv_players[lv_lazyPlayerIndex].stats.vitality);
                    gv_players[lv_lazyPlayerIndex].stats.vitality = 0;
                    BankValueSetFromInt(gv_players[lv_lazyPlayerIndex].banks.dragonBank, &quot;Vi&quot;, PlayerHandle(lv_lazyPlayer), gv_players[lv_lazyPlayerIndex].stats.vitality);
                    UnitAbilityShow(gv_players[lv_lazyPlayerIndex].dragon, &quot;Agility1&quot;, true);
                    UnitAbilityShow(gv_players[lv_lazyPlayerIndex].dragon, &quot;Dexterity1&quot;, true);
                    UnitAbilityShow(gv_players[lv_lazyPlayerIndex].dragon, &quot;Intelligence1&quot;, true);
                    UnitAbilityShow(gv_players[lv_lazyPlayerIndex].dragon, &quot;Strength1&quot;, true);
                    UnitAbilityShow(gv_players[lv_lazyPlayerIndex].dragon, &quot;Vitality1&quot;, true);
                    UIDisplayMessage(PlayerGroupSingle(lv_lazyPlayer), c_messageAreaError, StringExternal(&quot;Param/Value/21DD33BF&quot;));
                }
            }
            trigger auto_gf_Save_Trigger = null;
            int auto_gf_Save_lp_savingPlayer;
            void gf_Save (int lp_savingPlayer) {
                auto_gf_Save_lp_savingPlayer = lp_savingPlayer;
                if (auto_gf_Save_Trigger == null) {
                    auto_gf_Save_Trigger = TriggerCreate(&quot;auto_gf_Save_TriggerFunc&quot;);
                }
                TriggerExecute(auto_gf_Save_Trigger, false, false);
            }
            bool auto_gf_Save_TriggerFunc (bool testConds, bool runActions) {
                int lp_savingPlayer = auto_gf_Save_lp_savingPlayer;
                // Variable Declarations
                int lv_sPI;
                // Variable Initialization
                lv_sPI = (lp_savingPlayer - 1);
                // Implementation
                if ((gv_isSavingExiting[lv_sPI] == false) &amp;&amp; (gv_autosavePrevention[lv_sPI] == false) &amp;&amp; (gv_playersSetUp == true)) {
                    gv_isSavingExiting[lv_sPI] = true;
                    gf_SaveStackCounts(lp_savingPlayer);
                    gf_SaveHero(lp_savingPlayer);
                    gf_SaveStash(lp_savingPlayer);
                    gf_SaveSkills(lp_savingPlayer);
                    gf_SaveHPC(lp_savingPlayer);
                    gf_SaveHRC(lp_savingPlayer);
                    BankValueSetFromFlag(gv_players[lv_sPI].banks.dragonBank, &quot;GB&quot;, PlayerHandle(lp_savingPlayer), gv_gameBeat[lv_sPI]);
                    BankSave(gv_players[lv_sPI].banks.dragonBank);
                    if ((GameAttributePlayerValue(&quot;1&quot;, lp_savingPlayer) == &quot;0001&quot;)) {
                        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, &quot;Fire Dragon&quot;, lp_savingPlayer);
                    }
                    if ((GameAttributePlayerValue(&quot;1&quot;, lp_savingPlayer) == &quot;0002&quot;)) {
                        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, &quot;Ice Dragon&quot;, lp_savingPlayer);
                    }
                    gv_isSavingExiting[lv_sPI] = false;
                }
                return true;
            }
            void gf_SaveHero (int lp_player) {
                // Variable Declarations
                int lv_pi;
                // Variable Initialization
                lv_pi = (lp_player - 1);
                // Implementation
                if ((PlayerStatus(lp_player) == c_playerStatusActive) &amp;&amp; (gv_playersSetUp == true) &amp;&amp; (UnitIsAlive(gv_players[lv_pi].dragon) == true) &amp;&amp; (gv_players[lv_pi].verification.dragon == true)) {
                    BankValueSetFromUnit(gv_players[lv_pi].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(lp_player), gv_players[lv_pi].dragon);
                    BankValueSetFromInt(gv_players[lv_pi].banks.dragonBank, &quot;DSN&quot;, PlayerHandle(lp_player), ((2386 + UnitLevel(gv_players[lv_pi].dragon)) + ModI(FixedToInt(UnitGetPropertyFixed(gv_players[lv_pi].dragon, c_unitPropXP, c_unitPropCurrent)), 1000)));
                }
            }
            void gf_SaveStash (int lp_player) {
                // Variable Declarations
                int lv_pi;
                // Variable Initialization
                lv_pi = (lp_player - 1);
                // Implementation
                if ((PlayerStatus(lp_player) == c_playerStatusActive) &amp;&amp; (gv_playersSetUp == true)) {
                    BankValueSetFromUnit(gv_players[lv_pi].banks.stashBank, &quot;Stash&quot;, PlayerHandle(lp_player), gv_stash[lv_pi]);
                    BankValueSetFromInt(gv_players[lv_pi].banks.stashBank, &quot;One&quot;, PlayerHandle(lp_player), TechTreeUpgradeCount(lp_player, &quot;Stash1&quot;, c_techCountCompleteOnly));
                    BankValueSetFromInt(gv_players[lv_pi].banks.stashBank, &quot;Two&quot;, PlayerHandle(lp_player), TechTreeUpgradeCount(lp_player, &quot;Stash12&quot;, c_techCountCompleteOnly));
                    BankValueSetFromInt(gv_players[lv_pi].banks.stashBank, &quot;Three&quot;, PlayerHandle(lp_player), TechTreeUpgradeCount(lp_player, &quot;Stash13&quot;, c_techCountCompleteOnly));
                    BankValueSetFromInt(gv_players[lv_pi].banks.stashBank, &quot;Four&quot;, PlayerHandle(lp_player), TechTreeUpgradeCount(lp_player, &quot;Stash14&quot;, c_techCountCompleteOnly));
                    BankValueSetFromInt(gv_players[lv_pi].banks.stashBank, &quot;Five&quot;, PlayerHandle(lp_player), TechTreeUpgradeCount(lp_player, &quot;Stash15&quot;, c_techCountCompleteOnly));
                    BankValueSetFromInt(gv_players[lv_pi].banks.stashBank, &quot;Six&quot;, PlayerHandle(lp_player), TechTreeUpgradeCount(lp_player, &quot;Stash16&quot;, c_techCountCompleteOnly));
                    BankSave(gv_players[lv_pi].banks.stashBank);
                }
            }
            void gf_SaveHPC (int lp_player) {
                // Variable Declarations
                int lv_hPC;
                int lv_pi;
                // Variable Initialization
                lv_pi = (lp_player - 1);
                // Implementation
                if ((PlayerStatus(lp_player) == c_playerStatusActive) &amp;&amp; (gv_playersSetUp == true) &amp;&amp; (gv_hPCChecked[lv_pi] == true)) {
                    gv_shards[lv_pi] = PlayerGetPropertyInt(lp_player, c_playerPropCustom);
                    BankValueSetFromInt(gv_players[lv_pi].banks.currencyBank, &quot;Shards&quot;, PlayerHandle(lp_player), gv_shards[lv_pi]);
                    gv_pvPPoints[lv_pi] = PlayerGetPropertyInt(lp_player, c_playerPropVespene);
                    BankValueSetFromInt(gv_players[lv_pi].banks.currencyBank, &quot;PvP Points&quot;, PlayerHandle(lp_player), gv_pvPPoints[lv_pi]);
                    gv_gold[lv_pi] = PlayerGetPropertyInt(lp_player, c_playerPropMinerals);
                    BankValueSetFromInt(gv_players[lv_pi].banks.currencyBank, &quot;Gold&quot;, PlayerHandle(lp_player), gv_gold[lv_pi]);
                    lv_hPC = (gv_shards[lv_pi] + (gv_gold[lv_pi] + (gv_pvPPoints[lv_pi] + gv_hPCConstant)));
                    BankValueSetFromInt(gv_players[lv_pi].banks.currencyBank, &quot;HPC&quot;, PlayerHandle(lp_player), lv_hPC);
                    BankSave(gv_players[lv_pi].banks.currencyBank);
                }
            }
            void gf_SaveHRC (int lp_player) {
                // Variable Declarations
                int lv_hRC;
                int lv_tP;
                int lv_tPI;
                // Variable Initialization
                lv_tP = lp_player;
                lv_tPI = (lp_player - 1);
                // Implementation
                if ((PlayerStatus(lp_player) == c_playerStatusActive) &amp;&amp; (gv_playersSetUp == true) &amp;&amp; (gv_hRCChecked[lv_tPI] == true)) {
                    lv_hRC = (gv_players[lv_tPI].stats.reborn.regen + (gv_players[lv_tPI].stats.reborn.points + ((gv_players[lv_tPI].stats.reborn.movementSpeed + (((gv_players[lv_tPI].stats.reborn.miss + gv_players[lv_tPI].stats.reborn.maxMP) + gv_players[lv_tPI].stats.reborn.maxHP) + (((gv_players[lv_tPI].stats.reborn.itemDrop + gv_players[lv_tPI].stats.reborn.goldDrop) + gv_players[lv_tPI].stats.reborn.dodge) + gv_players[lv_tPI].stats.reborn.defense))) + ((gv_players[lv_tPI].stats.reborn.count + gv_players[lv_tPI].stats.reborn.attackSpeed) + gv_hRCConstant))));
                    BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, &quot;Reborn Points&quot;, PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.points);
                    BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, &quot;Reborn MaxHPUp&quot;, PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.maxHP);
                    BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, &quot;Reborn MaxMPUp&quot;, PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.maxMP);
                    BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, &quot;Reborn DefenseUp&quot;, PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.defense);
                    BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, &quot;Reborn MovementSpeedUp&quot;, PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.movementSpeed);
                    BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, &quot;Reborn AttackSpeedUp&quot;, PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.attackSpeed);
                    BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, &quot;Reborn Dodge%Up&quot;, PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.dodge);
                    BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, &quot;Reborn Miss%Down&quot;, PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.miss);
                    BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, &quot;Reborn GoldDrop%Up&quot;, PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.goldDrop);
                    BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, &quot;Reborn ItemDrop%Up&quot;, PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.itemDrop);
                    BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, &quot;Reborn RegenerationUp&quot;, PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.regen);
                    BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, &quot;Reborn Count&quot;, PlayerHandle(lv_tP), gv_players[lv_tPI].stats.reborn.count);
                    BankValueSetFromInt(gv_players[lv_tPI].banks.rebornBank, &quot;HRC&quot;, PlayerHandle(lv_tP), lv_hRC);
                    BankSave(gv_players[lv_tPI].banks.rebornBank);
                }
            }
            void gf_ApplyRebornStats (int lp_player) {
                // Variable Declarations
                int lv_pI;
                // Variable Initialization
                lv_pI = (lp_player - 1);
                // Implementation
                UnitBehaviorRemove(gv_players[lv_pI].dragon, &quot;MaxHPUp&quot;, c_unitBehaviorCountAll);
                UnitBehaviorRemove(gv_players[lv_pI].dragon, &quot;MaxMPUp&quot;, c_unitBehaviorCountAll);
                UnitBehaviorRemove(gv_players[lv_pI].dragon, &quot;DefenseUp&quot;, c_unitBehaviorCountAll);
                UnitBehaviorRemove(gv_players[lv_pI].dragon, &quot;MovementSpeedUp&quot;, c_unitBehaviorCountAll);
                UnitBehaviorRemove(gv_players[lv_pI].dragon, &quot;RegenerationUp&quot;, c_unitBehaviorCountAll);
                UnitBehaviorRemove(gv_players[lv_pI].dragon, &quot;AttackSpeedUp&quot;, c_unitBehaviorCountAll);
                UnitBehaviorAddPlayer(gv_players[lv_pI].dragon, &quot;MaxHPUp&quot;, lp_player, gv_players[lv_pI].stats.reborn.maxHP);
                UnitBehaviorAddPlayer(gv_players[lv_pI].dragon, &quot;MaxMPUp&quot;, lp_player, gv_players[lv_pI].stats.reborn.maxMP);
                UnitBehaviorAddPlayer(gv_players[lv_pI].dragon, &quot;MovementSpeedUp&quot;, lp_player, gv_players[lv_pI].stats.reborn.movementSpeed);
                UnitBehaviorAddPlayer(gv_players[lv_pI].dragon, &quot;AttackSpeedUp&quot;, lp_player, gv_players[lv_pI].stats.reborn.attackSpeed);
                UnitBehaviorAddPlayer(gv_players[lv_pI].dragon, &quot;DefenseUp&quot;, lp_player, gv_players[lv_pI].stats.reborn.defense);
                UnitBehaviorAddPlayer(gv_players[lv_pI].dragon, &quot;RegenerationUp&quot;, lp_player, gv_players[lv_pI].stats.reborn.regen);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Quest Dialog
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateQuestDialog_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    DialogCreate(500, 600, c_anchorCenter, 0, 0, true);
                    gv_players[lv_pPI].quests.questDialog.state = DialogLastCreated();
                    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    DialogSetTitle(gv_players[lv_pPI].quests.questDialog.state, StringExternal(&quot;Param/Value/4C530C19&quot;));
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].quests.questDialog.state, 450, 375, c_anchorTop, 0, 75, StringExternal(&quot;Param/Value/44A38F2B&quot;), ColorWithAlpha(0,0,0,0), true, 0.0);
                    gv_players[lv_pPI].quests.questDialog.textBox = DialogControlLastCreated();
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].quests.questDialog.state, 450, 50, c_anchorTop, 0, 450, StringExternal(&quot;Param/Value/435C7371&quot;), ColorWithAlpha(0,0,0,0), false, 0.0);
                    gv_players[lv_pPI].quests.questDialog.reward = DialogControlLastCreated();
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].quests.questDialog.state, 450, 50, c_anchorTop, 0, 500, StringExternal(&quot;Param/Value/4CF0811B&quot;), ColorWithAlpha(0,0,0,0), false, 0.0);
                    gv_players[lv_pPI].quests.questDialog.recommendedLevel = DialogControlLastCreated();
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].quests.questDialog.state, 250, 50, c_anchorBottomLeft, 0, 0, StringExternal(&quot;Param/Value/13643487&quot;), StringExternal(&quot;Param/Value/68A2CF78&quot;), &quot;&quot;);
                    gv_players[lv_pPI].quests.questDialog.decline = DialogControlLastCreated();
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].quests.questDialog.state, 250, 50, c_anchorBottomRight, 0, 0, StringExternal(&quot;Param/Value/948D8910&quot;), StringExternal(&quot;Param/Value/509C3FEA&quot;), &quot;&quot;);
                    gv_players[lv_pPI].quests.questDialog.accept = DialogControlLastCreated();
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateQuestDialog_Init () {
                gt_CreateQuestDialog = TriggerCreate(&quot;gt_CreateQuestDialog_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Talk Dialog
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateTalkDialog_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    DialogCreate(500, 600, c_anchorCenter, 0, 0, true);
                    gv_players[lv_pPI].quests.talkDialog.state = DialogLastCreated();
                    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
                    DialogSetTitle(gv_players[lv_pPI].quests.talkDialog.state, StringExternal(&quot;Param/Value/864BC008&quot;));
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].quests.talkDialog.state, 450, 475, c_anchorTop, 0, 75, StringExternal(&quot;Param/Value/32E1D3FE&quot;), ColorWithAlpha(0,0,0,0), true, 0.0);
                    gv_players[lv_pPI].quests.talkDialog.textBox = DialogControlLastCreated();
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                    libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].quests.talkDialog.state, 500, 50, c_anchorBottom, 0, 0, StringExternal(&quot;Param/Value/74D3F4D3&quot;), StringExternal(&quot;Param/Value/2C6A7AF3&quot;), &quot;&quot;);
                    gv_players[lv_pPI].quests.talkDialog.accept = DialogControlLastCreated();
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateTalkDialog_Init () {
                gt_CreateTalkDialog = TriggerCreate(&quot;gt_CreateTalkDialog_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Reward Dialog
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateRewardDialog_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    DialogCreate(500, 600, c_anchorCenter, 0, 0, true);
                    gv_players[lv_pPI].quests.rewardDialog.state = DialogLastCreated();
                    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
                    DialogSetTitle(gv_players[lv_pPI].quests.rewardDialog.state, StringExternal(&quot;Param/Value/7FD5CEA6&quot;));
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].quests.rewardDialog.state, 440, 475, c_anchorTop, 0, 75, StringExternal(&quot;Param/Value/593C6AC2&quot;), ColorWithAlpha(0,0,0,0), true, 0.0);
                    gv_players[lv_pPI].quests.rewardDialog.textBox = DialogControlLastCreated();
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                    libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].quests.rewardDialog.state, 500, 50, c_anchorBottom, 0, 0, StringExternal(&quot;Param/Value/6194C7D7&quot;), StringExternal(&quot;Param/Value/55261293&quot;), &quot;&quot;);
                    gv_players[lv_pPI].quests.rewardDialog.accept = DialogControlLastCreated();
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateRewardDialog_Init () {
                gt_CreateRewardDialog = TriggerCreate(&quot;gt_CreateRewardDialog_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Quest Decline
            //--------------------------------------------------------------------------------------------------
            bool gt_QuestDecline_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.decline) || (EventDialogControl() == gv_players[1].quests.questDialog.decline) || (EventDialogControl() == gv_players[2].quests.questDialog.decline) || (EventDialogControl() == gv_players[3].quests.questDialog.decline)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_CloseQuestDialog(EventPlayer());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_QuestDecline_Init () {
                gt_QuestDecline = TriggerCreate(&quot;gt_QuestDecline_Func&quot;);
                TriggerAddEventDialogControl(gt_QuestDecline, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Talk Dialog Closed
            //--------------------------------------------------------------------------------------------------
            bool gt_TalkDialogClosed_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.talkDialog.accept) || (EventDialogControl() == gv_players[1].quests.talkDialog.accept) || (EventDialogControl() == gv_players[2].quests.talkDialog.accept) || (EventDialogControl() == gv_players[3].quests.talkDialog.accept)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_CloseTalkDialog(EventPlayer());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TalkDialogClosed_Init () {
                gt_TalkDialogClosed = TriggerCreate(&quot;gt_TalkDialogClosed_Func&quot;);
                TriggerAddEventDialogControl(gt_TalkDialogClosed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Run Story Quest Setups
            //--------------------------------------------------------------------------------------------------
            bool gt_RunStoryQuestSetups_Func (bool testConds, bool runActions) {
                playergroup auto39B5CB63_g;
                int auto39B5CB63_p;
                // Variable Declarations
                int lv_pPI;
                int lv_forPlayer;
                // Variable Initialization
                lv_forPlayer = 1;
                // Actions
                if (!runActions) {
                    return true;
                }
                auto39B5CB63_g = gv_humanPlayers; 
                auto39B5CB63_p = 1;
                for ( ; auto39B5CB63_p &lt;= PlayerGroupCount(auto39B5CB63_g) ; auto39B5CB63_p += BoolToInt(lv_forPlayer == PlayerGroupPlayer(auto39B5CB63_g, auto39B5CB63_p)) ) {
                    lv_forPlayer = PlayerGroupPlayer(auto39B5CB63_g, auto39B5CB63_p);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(lv_forPlayer));
                    lv_pPI = (lv_forPlayer - 1);
                    if ((BankSectionExists(gv_players[lv_pPI].banks.dragonBank, &quot;SQ0&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[0].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, &quot;SQ0&quot;, PlayerHandle(lv_forPlayer));
                    }
                    if ((BankSectionExists(gv_players[lv_pPI].banks.dragonBank, &quot;SQ1&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[1].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, &quot;SQ1&quot;, PlayerHandle(lv_forPlayer));
                    }
                    if ((BankSectionExists(gv_players[lv_pPI].banks.dragonBank, &quot;SQ2&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[2].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, &quot;SQ2&quot;, PlayerHandle(lv_forPlayer));
                    }
                    if ((BankSectionExists(gv_players[lv_pPI].banks.dragonBank, &quot;SQ3&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[3].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, &quot;SQ3&quot;, PlayerHandle(lv_forPlayer));
                    }
                    if ((BankSectionExists(gv_players[lv_pPI].banks.dragonBank, &quot;SQ4&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[4].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, &quot;SQ4&quot;, PlayerHandle(lv_forPlayer));
                    }
                    if ((BankSectionExists(gv_players[lv_pPI].banks.dragonBank, &quot;SQ5&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[5].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, &quot;SQ5&quot;, PlayerHandle(lv_forPlayer));
                    }
                    if ((BankSectionExists(gv_players[lv_pPI].banks.dragonBank, &quot;SQ6&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[6].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, &quot;SQ6&quot;, PlayerHandle(lv_forPlayer));
                    }
                    if ((BankSectionExists(gv_players[lv_pPI].banks.dragonBank, &quot;SQ7&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[7].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, &quot;SQ7&quot;, PlayerHandle(lv_forPlayer));
                    }
                    if ((BankSectionExists(gv_players[lv_pPI].banks.dragonBank, &quot;SQ8&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[8].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, &quot;SQ8&quot;, PlayerHandle(lv_forPlayer));
                    }
                    if ((BankSectionExists(gv_players[lv_pPI].banks.dragonBank, &quot;SQ9&quot;) == true)) {
                        gv_players[lv_pPI].quests.storyQuests[9].state = BankValueGetAsInt(gv_players[lv_pPI].banks.dragonBank, &quot;SQ9&quot;, PlayerHandle(lv_forPlayer));
                    }
                    if ((gv_players[lv_pPI].quests.storyQuests[0].state &lt; 2)) {
                        gf_SQ0Setup(lv_forPlayer);
                    }
                    else {
                        if ((gv_players[lv_pPI].quests.storyQuests[1].state &lt; 3)) {
                            gf_SQ1Setup(lv_forPlayer);
                        }
                        else {
                            if ((gv_players[lv_pPI].quests.storyQuests[2].state &lt; 2)) {
                                gf_SQ2Setup(lv_forPlayer);
                            }
                            else {
                                if ((gv_players[lv_pPI].quests.storyQuests[3].state &lt; 3)) {
                                    gf_SQ3Setup(lv_forPlayer);
                                }
                                else {
                                    if ((gv_players[lv_pPI].quests.storyQuests[4].state &lt; 4)) {
                                        gf_SQ4Setup(lv_forPlayer);
                                    }
                                    else {
                                        if ((gv_players[lv_pPI].quests.storyQuests[5].state &lt; 4)) {
                                            gf_SQ5Setup(lv_forPlayer);
                                        }
                                        else {
                                            if ((gv_players[lv_pPI].quests.storyQuests[6].state &lt; 2)) {
                                                gf_SQ6Setup(lv_forPlayer);
                                            }
                                            else {
                                                if ((gv_players[lv_pPI].quests.storyQuests[7].state &lt; 4)) {
                                                    gf_SQ7Setup(lv_forPlayer);
                                                }
                                                else {
                                                    if ((gv_players[lv_pPI].quests.storyQuests[8].state &lt; 8)) {
                                                        gf_SQ8Setup(lv_forPlayer);
                                                    }
                                                    else {
                                                        if ((gv_players[lv_pPI].quests.storyQuests[9].state &lt; 3)) {
                                                            gf_SQ9Setup(lv_forPlayer);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RunStoryQuestSetups_Init () {
                gt_RunStoryQuestSetups = TriggerCreate(&quot;gt_RunStoryQuestSetups_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ0 - Player Enters SQ0 Region 1
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ0PlayerEntersSQ0Region1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[0].state == 1)) {
                    ObjectiveSetState(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[0].objective, c_objectiveStateFailed);
                    ObjectiveDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[0].objective);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[0].state = 2;
                    BankValueSetFromInt(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, &quot;SQ0&quot;, PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[0].state);
                    PingDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[0].ping);
                    gf_SQ1Setup(UnitGetOwner(EventUnit()));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ0PlayerEntersSQ0Region1_Init () {
                gt_SQ0PlayerEntersSQ0Region1 = TriggerCreate(&quot;gt_SQ0PlayerEntersSQ0Region1_Func&quot;);
                TriggerAddEventUnitRegion(gt_SQ0PlayerEntersSQ0Region1, null, RegionFromId(222), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ1 - Player Talks to Felix
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ1PlayerTalkstoFelix_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionFromId(216)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[1].state == 0)) {
                    gv_players[(EventPlayer() - 1)].quests.talking = true;
                    libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                    libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                    TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(2511), true, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/B15EE073&quot;), StringExternal(&quot;Param/Value/F09F60C9&quot;), 10.0, c_transmissionDurationAdd, true);
                    libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                    libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                    gv_players[(EventPlayer() - 1)].quests.storyQuests[1].state = 1;
                    ObjectiveSetDescription(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].objective, StringExternal(&quot;Param/Value/493EBBC1&quot;));
                    ObjectiveSetName(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].objective, StringExternal(&quot;Param/Value/8D9F3763&quot;));
                    PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].ping);
                    PingCreate(PlayerGroupSingle(EventPlayer()), &quot;PingBoss&quot;, RegionGetCenter(RegionFromId(5)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                    gv_players[(EventPlayer() - 1)].quests.storyQuests[1].ping = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.5);
                    SoundPlay(SoundLink(&quot;Alert_UniObjectiveUpdate&quot;, -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                    BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;SQ1&quot;, PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[1].state);
                    TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].textTag);
                    gv_players[(EventPlayer() - 1)].quests.talking = false;
                    TriggerExecute(gt_SyritalRespawn, true, false);
                }
                else {
                    if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[1].state == 1)) {
                        gv_players[(EventPlayer() - 1)].quests.talking = true;
                        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                        TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(2511), true, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/7EC4D069&quot;), StringExternal(&quot;Param/Value/FD03BABE&quot;), 4.0, c_transmissionDurationAdd, true);
                        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                        gv_players[(EventPlayer() - 1)].quests.talking = false;
                        TriggerExecute(gt_SyritalRespawn, true, false);
                    }
                    else {
                        if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[1].state == 2)) {
                            gv_players[(EventPlayer() - 1)].quests.talking = true;
                            libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                            libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                            TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(2511), true, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/1E675D13&quot;), StringExternal(&quot;Param/Value/9B7A53D6&quot;), 4.0, c_transmissionDurationAdd, true);
                            libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                            libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                            gv_players[(EventPlayer() - 1)].quests.storyQuests[1].state = 3;
                            ObjectiveSetState(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].objective, c_objectiveStateCompleted);
                            ObjectiveDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].objective);
                            BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;SQ1&quot;, PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[1].state);
                            TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].textTag);
                            gv_fireSkin[(EventPlayer() - 1)] = true;
                            BankValueSetFromFlag(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;FS&quot;, PlayerHandle(EventPlayer()), gv_fireSkin[(EventPlayer() - 1)]);
                            UnitBehaviorAddPlayer(gv_players[(EventPlayer() - 1)].dragon, &quot;FireSkin&quot;, EventPlayer(), 1);
                            if ((UnitLevel(gv_players[(EventPlayer() - 1)].dragon) != 100)) {
                                gf_AddExperience(gv_players[(EventPlayer() - 1)].dragon, 1000);
                            }
                            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/6D44D93A&quot;));
                            gv_players[(EventPlayer() - 1)].quests.talking = false;
                            PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[1].ping);
                            gf_SQ2Setup(EventPlayer());
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ1PlayerTalkstoFelix_Init () {
                gt_SQ1PlayerTalkstoFelix = TriggerCreate(&quot;gt_SQ1PlayerTalkstoFelix_Func&quot;);
                TriggerAddEventUnitSelected(gt_SQ1PlayerTalkstoFelix, UnitRefFromUnit(UnitFromId(2511)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_SQ1PlayerTalkstoFelix, UnitRefFromUnit(UnitFromId(2511)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_SQ1PlayerTalkstoFelix, UnitRefFromUnit(UnitFromId(2511)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ2 - Player Enters SQ2 Region 1
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ2PlayerEntersSQ2Region1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[2].state == 1)) {
                    ObjectiveSetState(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[2].objective, c_objectiveStateFailed);
                    ObjectiveDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[2].objective);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[2].state = 2;
                    BankValueSetFromInt(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, &quot;SQ2&quot;, PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[2].state);
                    PingDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[2].ping);
                    gf_SQ3Setup(UnitGetOwner(EventUnit()));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ2PlayerEntersSQ2Region1_Init () {
                gt_SQ2PlayerEntersSQ2Region1 = TriggerCreate(&quot;gt_SQ2PlayerEntersSQ2Region1_Func&quot;);
                TriggerAddEventUnitRegion(gt_SQ2PlayerEntersSQ2Region1, null, RegionFromId(223), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ3 - Player Talks to Petrose
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ3PlayerTalkstoPetrose_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionFromId(224)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[3].state == 1)) {
                    gv_players[(EventPlayer() - 1)].quests.talking = true;
                    libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                    libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                    TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(1597), true, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/52CCADF4&quot;), StringExternal(&quot;Param/Value/361F831D&quot;), 10.0, c_transmissionDurationAdd, true);
                    libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                    libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                    gv_players[(EventPlayer() - 1)].quests.storyQuests[3].state = 2;
                    ObjectiveSetName(gv_players[(EventPlayer() - 1)].quests.storyQuests[3].objective, StringExternal(&quot;Param/Value/339C9E22&quot;));
                    PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[3].ping);
                    PingCreate(PlayerGroupSingle(EventPlayer()), &quot;PingBoss&quot;, RegionGetCenter(RegionFromId(229)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                    gv_players[(EventPlayer() - 1)].quests.storyQuests[3].ping = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.5);
                    SoundPlay(SoundLink(&quot;Alert_UniObjectiveUpdate&quot;, -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                    BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;SQ3&quot;, PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[3].state);
                    TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[3].textTag);
                    gv_players[(EventPlayer() - 1)].quests.talking = false;
                }
                else {
                    if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[3].state == 2)) {
                        gv_players[(EventPlayer() - 1)].quests.talking = true;
                        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                        TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(1597), true, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/00C05A10&quot;), StringExternal(&quot;Param/Value/8F7EBDC2&quot;), 4.0, c_transmissionDurationAdd, true);
                        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                        gv_players[(EventPlayer() - 1)].quests.talking = false;
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ3PlayerTalkstoPetrose_Init () {
                gt_SQ3PlayerTalkstoPetrose = TriggerCreate(&quot;gt_SQ3PlayerTalkstoPetrose_Func&quot;);
                TriggerAddEventUnitSelected(gt_SQ3PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_SQ3PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_SQ3PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ3 - Player Enters Verboten Forest
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ3PlayerEntersVerbotenForest_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[3].state == 2)) {
                    ObjectiveSetState(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[3].objective, c_objectiveStateFailed);
                    ObjectiveDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[3].objective);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[3].state = 3;
                    BankValueSetFromInt(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, &quot;SQ3&quot;, PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[3].state);
                    PingDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[3].ping);
                    gf_SQ4Setup(UnitGetOwner(EventUnit()));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ3PlayerEntersVerbotenForest_Init () {
                gt_SQ3PlayerEntersVerbotenForest = TriggerCreate(&quot;gt_SQ3PlayerEntersVerbotenForest_Func&quot;);
                TriggerAddEventUnitRegion(gt_SQ3PlayerEntersVerbotenForest, null, RegionFromId(58), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ4 - Player Talks to Risdak
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ4PlayerTalkstoRisdak_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionFromId(225)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[4].state == 1)) {
                    gv_players[(EventPlayer() - 1)].quests.talking = true;
                    libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                    libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                    TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(1976), true, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/79D72710&quot;), StringExternal(&quot;Param/Value/AF090285&quot;), 10.0, c_transmissionDurationAdd, true);
                    libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                    libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                    gv_players[(EventPlayer() - 1)].quests.storyQuests[4].state = 2;
                    ObjectiveSetName(gv_players[(EventPlayer() - 1)].quests.storyQuests[4].objective, StringExternal(&quot;Param/Value/61D2B86E&quot;));
                    PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[4].ping);
                    PingCreate(PlayerGroupSingle(EventPlayer()), &quot;PingSimple&quot;, RegionGetCenter(RegionFromId(48)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
                    gv_players[(EventPlayer() - 1)].quests.storyQuests[4].ping = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.5);
                    SoundPlay(SoundLink(&quot;Alert_UniObjectiveUpdate&quot;, -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                    BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;SQ4&quot;, PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[4].state);
                    TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[4].textTag);
                    gv_players[(EventPlayer() - 1)].quests.talking = false;
                    
                    if(!(statueSpawned == true)){
                    TriggerExecute(gt_GuardianRespawn, true, false);
                    }
                }
                else {
                    if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[4].state == 2)) {
                        gv_players[(EventPlayer() - 1)].quests.talking = true;
                        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                        TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(1976), true, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/0848ECBA&quot;), StringExternal(&quot;Param/Value/C8E6C7E5&quot;), 4.0, c_transmissionDurationAdd, true);
                        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                        gv_players[(EventPlayer() - 1)].quests.talking = false;
                        
                    }
                    else {
                        if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[4].state == 3)) {
                            gv_players[(EventPlayer() - 1)].quests.talking = true;
                            libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                            libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                            TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(1976), true, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/660FA807&quot;), StringExternal(&quot;Param/Value/ED00BDE2&quot;), 5.0, c_transmissionDurationAdd, true);
                            libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                            libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                            gv_players[(EventPlayer() - 1)].quests.storyQuests[4].state = 4;
                            ObjectiveSetState(gv_players[(EventPlayer() - 1)].quests.storyQuests[4].objective, c_objectiveStateCompleted);
                            ObjectiveDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[4].objective);
                            BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;SQ4&quot;, PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[4].state);
                            TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[4].textTag);
                            gv_allSeeingEye[(EventPlayer() - 1)] = true;
                            BankValueSetFromFlag(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;ASE&quot;, PlayerHandle(EventPlayer()), gv_allSeeingEye[(EventPlayer() - 1)]);
                            UnitBehaviorAddPlayer(gv_players[(EventPlayer() - 1)].dragon, &quot;AllSeeingEye&quot;, EventPlayer(), 1);
                            if ((UnitLevel(gv_players[(EventPlayer() - 1)].dragon) != 100)) {
                                gf_AddExperience(gv_players[(EventPlayer() - 1)].dragon, 3000.0);
                            }
                            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/26171E78&quot;));
                            gv_players[(EventPlayer() - 1)].quests.talking = false;
                            PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[4].ping);
                            TriggerExecute(gt_SremagsiRespawn, true, false);
                            gf_SQ5Setup(EventPlayer());
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ4PlayerTalkstoRisdak_Init () {
                gt_SQ4PlayerTalkstoRisdak = TriggerCreate(&quot;gt_SQ4PlayerTalkstoRisdak_Func&quot;);
                TriggerAddEventUnitSelected(gt_SQ4PlayerTalkstoRisdak, UnitRefFromUnit(UnitFromId(1976)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_SQ4PlayerTalkstoRisdak, UnitRefFromUnit(UnitFromId(1976)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_SQ4PlayerTalkstoRisdak, UnitRefFromUnit(UnitFromId(1976)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ5 - Player Enters Infestation
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ5PlayerEntersInfestation_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[5].state == 1)) {
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[5].state = 2;
                    ObjectiveSetName(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[5].objective, StringExternal(&quot;Param/Value/556E72C6&quot;));
                    PingDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[5].ping);
                    PingCreate(PlayerGroupSingle(UnitGetOwner(EventUnit())), &quot;PingBoss&quot;, RegionGetCenter(RegionFromId(229)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[5].ping = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.5);
                    BankValueSetFromInt(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, &quot;SQ5&quot;, PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[5].state);
                    SoundPlay(SoundLink(&quot;Alert_UniObjectiveUpdate&quot;, -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ5PlayerEntersInfestation_Init () {
                gt_SQ5PlayerEntersInfestation = TriggerCreate(&quot;gt_SQ5PlayerEntersInfestation_Func&quot;);
                TriggerAddEventUnitRegion(gt_SQ5PlayerEntersInfestation, null, RegionFromId(64), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ5 - Player Talks to Petrose
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ5PlayerTalkstoPetrose_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionFromId(224)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[5].state == 3)) {
                    gv_players[(EventPlayer() - 1)].quests.talking = true;
                    libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                    libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                    TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(1597), true, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/F97E6B22&quot;), StringExternal(&quot;Param/Value/045D0308&quot;), 5.0, c_transmissionDurationAdd, true);
                    libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                    libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                    gv_players[(EventPlayer() - 1)].quests.storyQuests[5].state = 4;
                    ObjectiveSetState(gv_players[(EventPlayer() - 1)].quests.storyQuests[5].objective, c_objectiveStateCompleted);
                    ObjectiveDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[5].objective);
                    BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;SQ5&quot;, PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[5].state);
                    TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[5].textTag);
                    if ((UnitLevel(gv_players[(EventPlayer() - 1)].dragon) != 100)) {
                        gf_AddExperience(gv_players[(EventPlayer() - 1)].dragon, 10000.0);
                    }
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/3C91F57D&quot;));
                    gv_players[(EventPlayer() - 1)].quests.talking = false;
                    PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[5].ping);
                    gf_SQ6Setup(EventPlayer());
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ5PlayerTalkstoPetrose_Init () {
                gt_SQ5PlayerTalkstoPetrose = TriggerCreate(&quot;gt_SQ5PlayerTalkstoPetrose_Func&quot;);
                TriggerAddEventUnitSelected(gt_SQ5PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_SQ5PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_SQ5PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ6 - Player Enters Teleport to Biodome
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ6PlayerEntersTeleporttoBiodome_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) != 15))) {
                        return false;
                    }
                    if (!((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].state == 1))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                ObjectiveSetState(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].objective, c_objectiveStateFailed);
                ObjectiveDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].objective);
                gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].state = 2;
                BankValueSetFromInt(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, &quot;SQ6&quot;, PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].state);
                PingDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].ping);
                gf_SQ7Setup(UnitGetOwner(EventUnit()));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ6PlayerEntersTeleporttoBiodome_Init () {
                gt_SQ6PlayerEntersTeleporttoBiodome = TriggerCreate(&quot;gt_SQ6PlayerEntersTeleporttoBiodome_Func&quot;);
                TriggerAddEventUnitRegion(gt_SQ6PlayerEntersTeleporttoBiodome, null, RegionFromId(187), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ7 - Player Talks to Lanae
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ7PlayerTalkstoLanae_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionFromId(226)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[7].state == 1)) {
                    gv_players[(EventPlayer() - 1)].quests.talking = true;
                    libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                    libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                    TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(2595), true, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/D95C0650&quot;), StringExternal(&quot;Param/Value/54B2D940&quot;), 8.0, c_transmissionDurationAdd, true);
                    PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].ping);
                    PingCreate(PlayerGroupSingle(EventPlayer()), &quot;PingBoss&quot;, UnitGetPosition(gv_machinaDePlagam), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                    gv_players[(EventPlayer() - 1)].quests.storyQuests[7].ping = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.5);
                    libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                    libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                    gv_players[(EventPlayer() - 1)].quests.storyQuests[7].state = 2;
                    ObjectiveSetName(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].objective, StringExternal(&quot;Param/Value/B6E6C7C7&quot;));
                    SoundPlay(SoundLink(&quot;Alert_UniObjectiveUpdate&quot;, -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                    BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;SQ7&quot;, PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[7].state);
                    TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].textTag);
                    gv_players[(EventPlayer() - 1)].quests.talking = false;
                    TriggerExecute(gt_MachinaDePlagamRespawn, true, false);
                }
                else {
                    if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[7].state == 2)) {
                        gv_players[(EventPlayer() - 1)].quests.talking = true;
                        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                        TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(2595), true, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/F5929901&quot;), StringExternal(&quot;Param/Value/9C502B03&quot;), 4.0, c_transmissionDurationAdd, true);
                        libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                        libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                        gv_players[(EventPlayer() - 1)].quests.talking = false;
                        TriggerExecute(gt_MachinaDePlagamRespawn, true, false);
                    }
                    else {
                        if ((gv_players[(EventPlayer() - 1)].quests.storyQuests[7].state == 3)) {
                            gv_players[(EventPlayer() - 1)].quests.talking = true;
                            libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, true);
                            libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, true);
                            TransmissionSend(PlayerGroupSingle(EventPlayer()), TransmissionSourceFromUnit(UnitFromId(2595), true, false, &quot;Talk&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/826CFAF2&quot;), StringExternal(&quot;Param/Value/3E5F5E2F&quot;), 5.0, c_transmissionDurationAdd, true);
                            libNtve_gf_PauseUnit(gv_players[(EventPlayer() - 1)].dragon, false);
                            libNtve_gf_MakeUnitInvulnerable(gv_players[(EventPlayer() - 1)].dragon, false);
                            gv_players[(EventPlayer() - 1)].quests.storyQuests[7].state = 4;
                            ObjectiveSetState(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].objective, c_objectiveStateCompleted);
                            ObjectiveDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].objective);
                            PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].ping);
                            BankValueSetFromInt(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;SQ7&quot;, PlayerHandle(EventPlayer()), gv_players[(EventPlayer() - 1)].quests.storyQuests[7].state);
                            TextTagDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].textTag);
                            if ((UnitLevel(gv_players[(EventPlayer() - 1)].dragon) != 100)) {
                                gf_AddExperience(gv_players[(EventPlayer() - 1)].dragon, 18000.0);
                            }
                            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/43EFA5FC&quot;));
                            gv_players[(EventPlayer() - 1)].quests.talking = false;
                            PingDestroy(gv_players[(EventPlayer() - 1)].quests.storyQuests[7].ping);
                            gf_SQ8Setup(EventPlayer());
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ7PlayerTalkstoLanae_Init () {
                gt_SQ7PlayerTalkstoLanae = TriggerCreate(&quot;gt_SQ7PlayerTalkstoLanae_Func&quot;);
                TriggerAddEventUnitSelected(gt_SQ7PlayerTalkstoLanae, UnitRefFromUnit(UnitFromId(2595)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_SQ7PlayerTalkstoLanae, UnitRefFromUnit(UnitFromId(2595)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_SQ7PlayerTalkstoLanae, UnitRefFromUnit(UnitFromId(2595)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ8 - Biodome Entered
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ8BiodomeEntered_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[8].state == 1)) {
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[8].state = 2;
                    BankValueSetFromInt(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, &quot;SQ8&quot;, PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[8].state);
                    ObjectiveSetName(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[8].objective, StringExternal(&quot;Param/Value/9497FFEF&quot;));
                    PingDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[8].ping);
                    PingCreate(PlayerGroupSingle(UnitGetOwner(EventUnit())), &quot;PingSimple&quot;, UnitGetPosition(UnitFromId(1880)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[8].ping = PingLastCreated();
                    PingSetScale(PingLastCreated(), 0.5);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ8BiodomeEntered_Init () {
                gt_SQ8BiodomeEntered = TriggerCreate(&quot;gt_SQ8BiodomeEntered_Func&quot;);
                TriggerAddEventUnitRegion(gt_SQ8BiodomeEntered, null, RegionFromId(187), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ8 - Crystal 1 Destroyed
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ8Crystal1Destroyed_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pP;
                int lv_pPI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pP = PlayerGroupLoopCurrent();
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((gv_players[lv_pPI].quests.storyQuests[8].state == 2)) {
                        gv_players[lv_pPI].quests.storyQuests[8].state = 3;
                        BankValueSetFromInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ8&quot;, PlayerHandle(PlayerGroupLoopCurrent()), gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state);
                        ObjectiveSetName(gv_players[lv_pPI].quests.storyQuests[8].objective, StringExternal(&quot;Param/Value/258EB839&quot;));
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingSimple&quot;, UnitGetPosition(UnitFromId(1881)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ8Crystal1Destroyed_Init () {
                gt_SQ8Crystal1Destroyed = TriggerCreate(&quot;gt_SQ8Crystal1Destroyed_Func&quot;);
                TriggerAddEventUnitDied(gt_SQ8Crystal1Destroyed, UnitRefFromUnit(UnitFromId(1880)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ8 - Crystal 2 Destroyed
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ8Crystal2Destroyed_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pP;
                int lv_pPI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pP = PlayerGroupLoopCurrent();
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((gv_players[lv_pPI].quests.storyQuests[8].state == 3)) {
                        gv_players[lv_pPI].quests.storyQuests[8].state = 4;
                        BankValueSetFromInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ8&quot;, PlayerHandle(PlayerGroupLoopCurrent()), gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state);
                        ObjectiveSetName(gv_players[lv_pPI].quests.storyQuests[8].objective, StringExternal(&quot;Param/Value/110CADCD&quot;));
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingSimple&quot;, UnitGetPosition(UnitFromId(1882)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ8Crystal2Destroyed_Init () {
                gt_SQ8Crystal2Destroyed = TriggerCreate(&quot;gt_SQ8Crystal2Destroyed_Func&quot;);
                TriggerAddEventUnitDied(gt_SQ8Crystal2Destroyed, UnitRefFromUnit(UnitFromId(1881)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ8 - Crystal 3 Destroyed
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ8Crystal3Destroyed_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pP;
                int lv_pPI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pP = PlayerGroupLoopCurrent();
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((gv_players[lv_pPI].quests.storyQuests[8].state == 4)) {
                        gv_players[lv_pPI].quests.storyQuests[8].state = 5;
                        BankValueSetFromInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ8&quot;, PlayerHandle(PlayerGroupLoopCurrent()), gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state);
                        ObjectiveSetName(gv_players[lv_pPI].quests.storyQuests[8].objective, StringExternal(&quot;Param/Value/DBE25CDC&quot;));
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingSimple&quot;, UnitGetPosition(UnitFromId(1883)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ8Crystal3Destroyed_Init () {
                gt_SQ8Crystal3Destroyed = TriggerCreate(&quot;gt_SQ8Crystal3Destroyed_Func&quot;);
                TriggerAddEventUnitDied(gt_SQ8Crystal3Destroyed, UnitRefFromUnit(UnitFromId(1882)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ8 - Crystal 4 Destroyed
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ8Crystal4Destroyed_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pP;
                int lv_pPI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pP = PlayerGroupLoopCurrent();
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((gv_players[lv_pPI].quests.storyQuests[8].state == 5)) {
                        gv_players[lv_pPI].quests.storyQuests[8].state = 6;
                        BankValueSetFromInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ8&quot;, PlayerHandle(PlayerGroupLoopCurrent()), gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state);
                        ObjectiveSetName(gv_players[lv_pPI].quests.storyQuests[8].objective, StringExternal(&quot;Param/Value/E3F4860E&quot;));
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingSimple&quot;, UnitGetPosition(UnitFromId(1884)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ8Crystal4Destroyed_Init () {
                gt_SQ8Crystal4Destroyed = TriggerCreate(&quot;gt_SQ8Crystal4Destroyed_Func&quot;);
                TriggerAddEventUnitDied(gt_SQ8Crystal4Destroyed, UnitRefFromUnit(UnitFromId(1883)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ8 - Crystal 5 Destroyed
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ8Crystal5Destroyed_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pP;
                int lv_pPI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pP = PlayerGroupLoopCurrent();
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((gv_players[lv_pPI].quests.storyQuests[8].state == 6)) {
                        gv_players[lv_pPI].quests.storyQuests[8].state = 7;
                        BankValueSetFromInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ8&quot;, PlayerHandle(PlayerGroupLoopCurrent()), gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state);
                        ObjectiveSetName(gv_players[lv_pPI].quests.storyQuests[8].objective, StringExternal(&quot;Param/Value/0CD41769&quot;));
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                        PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), &quot;PingSimple&quot;, UnitGetPosition(UnitFromId(2501)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ8Crystal5Destroyed_Init () {
                gt_SQ8Crystal5Destroyed = TriggerCreate(&quot;gt_SQ8Crystal5Destroyed_Func&quot;);
                TriggerAddEventUnitDied(gt_SQ8Crystal5Destroyed, UnitRefFromUnit(UnitFromId(1884)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: SQ8 - Crystal 6 Destroyed
            //--------------------------------------------------------------------------------------------------
            bool gt_SQ8Crystal6Destroyed_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pP;
                int lv_pPI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pP = PlayerGroupLoopCurrent();
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((gv_players[lv_pPI].quests.storyQuests[8].state == 7)) {
                        gv_players[lv_pPI].quests.storyQuests[8].state = 8;
                        BankValueSetFromInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ8&quot;, PlayerHandle(PlayerGroupLoopCurrent()), gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].state);
                        ObjectiveSetState(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective, c_objectiveStateCompleted);
                        ObjectiveDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].objective);
                        if ((UnitLevel(gv_players[(PlayerGroupLoopCurrent() - 1)].dragon) != 100)) {
                            gf_AddExperience(gv_players[(EventPlayer() - 1)].dragon, 25000.0);
                        }
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/2725B5FA&quot;));
                        PingDestroy(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.storyQuests[8].ping);
                        gf_SQ9Setup(PlayerGroupLoopCurrent());
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SQ8Crystal6Destroyed_Init () {
                gt_SQ8Crystal6Destroyed = TriggerCreate(&quot;gt_SQ8Crystal6Destroyed_Func&quot;);
                TriggerAddEventUnitDied(gt_SQ8Crystal6Destroyed, UnitRefFromUnit(UnitFromId(2501)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Load Side Quests
            //--------------------------------------------------------------------------------------------------
            bool gt_LoadSideQuests_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Mana0-0&quot;) == true)) {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Mana0-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[0].progress == 0)) {
                            TextTagCreate(StringExternal(&quot;Param/Value/2F009883&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[0].textTag = TextTagLastCreated();
                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                        }
                        else {
                            if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Mana1-0&quot;) == true)) {
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[1].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Mana1-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                                if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[1].progress == 0)) {
                                    TextTagCreate(StringExternal(&quot;Param/Value/DE485F61&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[1].textTag = TextTagLastCreated();
                                    TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[1].textTag, c_textTagTimeDuration, 524287.0);
                                }
                                else {
                                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Mana2-0&quot;) == true)) {
                                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[2].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Mana2-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[2].progress == 0)) {
                                            TextTagCreate(StringExternal(&quot;Param/Value/D715BDE5&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[2].textTag = TextTagLastCreated();
                                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[2].textTag, c_textTagTimeDuration, 524287.0);
                                        }
                                        else {
                                            if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Mana3-0&quot;) == true)) {
                                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[3].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Mana3-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                                                if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[3].progress == 0)) {
                                                    TextTagCreate(StringExternal(&quot;Param/Value/3B996203&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[3].textTag = TextTagLastCreated();
                                                    TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[3].textTag, c_textTagTimeDuration, 524287.0);
                                                }
                                                else {
                                                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Mana4-0&quot;) == true)) {
                                                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[4].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Mana4-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                                                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[4].progress == 0)) {
                                                            TextTagCreate(StringExternal(&quot;Param/Value/788F4111&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[4].textTag = TextTagLastCreated();
                                                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[4].textTag, c_textTagTimeDuration, 524287.0);
                                                        }
                                                        else {
                                                            if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Mana5-0&quot;) == true)) {
                                                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[5].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Mana5-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                                                                if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[5].progress == 0)) {
                                                                    TextTagCreate(StringExternal(&quot;Param/Value/0169568B&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[5].textTag = TextTagLastCreated();
                                                                    TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[5].textTag, c_textTagTimeDuration, 524287.0);
                                                                }
                                                            }
                                                            else {
                                                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[5].progress = 0;
                                                                TextTagCreate(StringExternal(&quot;Param/Value/FC0B8386&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[5].textTag = TextTagLastCreated();
                                                                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[5].textTag, c_textTagTimeDuration, 524287.0);
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[4].progress = 0;
                                                        TextTagCreate(StringExternal(&quot;Param/Value/D0E0AB0B&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[4].textTag = TextTagLastCreated();
                                                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[4].textTag, c_textTagTimeDuration, 524287.0);
                                                    }
                                                }
                                            }
                                            else {
                                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[3].progress = 0;
                                                TextTagCreate(StringExternal(&quot;Param/Value/81A56668&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[3].textTag = TextTagLastCreated();
                                                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[3].textTag, c_textTagTimeDuration, 524287.0);
                                            }
                                        }
                                    }
                                    else {
                                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[2].progress = 0;
                                        TextTagCreate(StringExternal(&quot;Param/Value/81AF9223&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[2].textTag = TextTagLastCreated();
                                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[2].textTag, c_textTagTimeDuration, 524287.0);
                                    }
                                }
                            }
                            else {
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[1].progress = 0;
                                TextTagCreate(StringExternal(&quot;Param/Value/59C640A8&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[1].progress = TextTagLastCreated();
                                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[1].textTag, c_textTagTimeDuration, 524287.0);
                            }
                        }
                    }
                    else {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[0].progress = 0;
                        TextTagCreate(StringExternal(&quot;Param/Value/D3156BC0&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[0].textTag = TextTagLastCreated();
                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.manaQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                    }
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Malin0-0&quot;) == true)) {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.malinQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Malin0-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.malinQuests[0].progress == 0)) {
                            TextTagCreate(StringExternal(&quot;Param/Value/08DE1272&quot;), 72, UnitGetPosition(UnitFromId(2516)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.malinQuests[0].progress = TextTagLastCreated();
                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.malinQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                        }
                    }
                    else {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.malinQuests[0].progress = 0;
                        TextTagCreate(StringExternal(&quot;Param/Value/7DE06E8C&quot;), 72, UnitGetPosition(UnitFromId(2516)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.malinQuests[0].textTag = TextTagLastCreated();
                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.malinQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                    }
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Base0-0&quot;) == true)) {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Base0-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[0].progress == 0)) {
                            TextTagCreate(StringExternal(&quot;Param/Value/1B093517&quot;), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[0].textTag = TextTagLastCreated();
                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                        }
                        else {
                            if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Base1-0&quot;) == true)) {
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[1].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Base1-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                                if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[1].progress == 0)) {
                                    TextTagCreate(StringExternal(&quot;Param/Value/F6A8D66B&quot;), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                    gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[1].textTag = TextTagLastCreated();
                                    TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[1].textTag, c_textTagTimeDuration, 524287.0);
                                }
                            }
                            else {
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[1].progress = 0;
                                TextTagCreate(StringExternal(&quot;Param/Value/C9B57383&quot;), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                                gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[1].textTag = TextTagLastCreated();
                                TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[1].textTag, c_textTagTimeDuration, 524287.0);
                            }
                        }
                    }
                    else {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[0].progress = 0;
                        TextTagCreate(StringExternal(&quot;Param/Value/75E6820C&quot;), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[0].textTag = TextTagLastCreated();
                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.baseQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                    }
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Oleum0-0&quot;) == true)) {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.oleumQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Oleum0-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.oleumQuests[0].progress == 0)) {
                            TextTagCreate(StringExternal(&quot;Param/Value/8DFA2561&quot;), 72, UnitGetPosition(UnitFromId(4381)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.oleumQuests[0].textTag = TextTagLastCreated();
                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.oleumQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                        }
                    }
                    else {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.oleumQuests[0].progress = 0;
                        TextTagCreate(StringExternal(&quot;Param/Value/BEF311D1&quot;), 72, UnitGetPosition(UnitFromId(4381)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.oleumQuests[0].textTag = TextTagLastCreated();
                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.oleumQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                    }
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Seryn0-0&quot;) == true)) {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.serynQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Seryn0-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.serynQuests[0].progress == 0)) {
                            TextTagCreate(StringExternal(&quot;Param/Value/60C15502&quot;), 72, UnitGetPosition(UnitFromId(2671)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.serynQuests[0].textTag = TextTagLastCreated();
                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.serynQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                        }
                    }
                    else {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.serynQuests[0].progress = 0;
                        TextTagCreate(StringExternal(&quot;Param/Value/F977CC2E&quot;), 72, UnitGetPosition(UnitFromId(2671)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.serynQuests[0].textTag = TextTagLastCreated();
                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.serynQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                    }
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Detsefni0-0&quot;) == true)) {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.detsefniQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Detsefni0-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.detsefniQuests[0].progress == 0)) {
                            TextTagCreate(StringExternal(&quot;Param/Value/7EE2688E&quot;), 72, UnitGetPosition(UnitFromId(4922)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.detsefniQuests[0].textTag = TextTagLastCreated();
                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.detsefniQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                        }
                    }
                    else {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.detsefniQuests[0].progress = 0;
                        TextTagCreate(StringExternal(&quot;Param/Value/756E3A5A&quot;), 72, UnitGetPosition(UnitFromId(4922)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.detsefniQuests[0].textTag = TextTagLastCreated();
                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.detsefniQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                    }
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-SergeantLister0-0&quot;) == true)) {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.sergeantListerQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-SergeantLister0-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.sergeantListerQuests[0].progress == 0)) {
                            TextTagCreate(StringExternal(&quot;Param/Value/03D95F58&quot;), 72, UnitGetPosition(UnitFromId(4923)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.sergeantListerQuests[0].textTag = TextTagLastCreated();
                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.sergeantListerQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                        }
                    }
                    else {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.sergeantListerQuests[0].progress = 0;
                        TextTagCreate(StringExternal(&quot;Param/Value/97B825DC&quot;), 72, UnitGetPosition(UnitFromId(4923)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.sergeantListerQuests[0].textTag = TextTagLastCreated();
                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.sergeantListerQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                    }
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Greed0-0&quot;) == true)) {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.greedQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Greed0-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.greedQuests[0].progress == 0)) {
                            TextTagCreate(StringExternal(&quot;Param/Value/D473002B&quot;), 72, UnitGetPosition(UnitFromId(4924)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.greedQuests[0].textTag = TextTagLastCreated();
                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.greedQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                        }
                    }
                    else {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.greedQuests[0].progress = 0;
                        TextTagCreate(StringExternal(&quot;Param/Value/FFE6E959&quot;), 72, UnitGetPosition(UnitFromId(4924)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.greedQuests[0].textTag = TextTagLastCreated();
                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.greedQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                    }
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Madeleine0-0&quot;) == true)) {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.madelineQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Madeleine0-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.madelineQuests[0].progress == 0)) {
                            TextTagCreate(StringExternal(&quot;Param/Value/5625DC8F&quot;), 72, UnitGetPosition(UnitFromId(4945)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.madelineQuests[0].textTag = TextTagLastCreated();
                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.madelineQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                        }
                    }
                    else {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.madelineQuests[0].progress = 0;
                        TextTagCreate(StringExternal(&quot;Param/Value/4DD46BB6&quot;), 72, UnitGetPosition(UnitFromId(4945)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.madelineQuests[0].textTag = TextTagLastCreated();
                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.madelineQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                    }
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Altoss0-0&quot;) == true)) {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.altossQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Altoss0-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.altossQuests[0].progress == 0)) {
                            TextTagCreate(StringExternal(&quot;Param/Value/5707150A&quot;), 72, UnitGetPosition(UnitFromId(4946)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.altossQuests[0].textTag = TextTagLastCreated();
                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.altossQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                        }
                    }
                    else {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.altossQuests[0].progress = 0;
                        TextTagCreate(StringExternal(&quot;Param/Value/72459D54&quot;), 72, UnitGetPosition(UnitFromId(4946)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.altossQuests[0].textTag = TextTagLastCreated();
                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.altossQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                    }
                    if ((BankSectionExists(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Amp0-0&quot;) == true)) {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.ampQuests[0].progress = BankValueGetAsInt(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;SQ-Amp0-0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                        if ((gv_players[(PlayerGroupLoopCurrent() - 1)].quests.ampQuests[0].progress == 0)) {
                            TextTagCreate(StringExternal(&quot;Param/Value/64903B57&quot;), 72, UnitGetPosition(UnitFromId(444)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                            gv_players[(PlayerGroupLoopCurrent() - 1)].quests.ampQuests[0].textTag = TextTagLastCreated();
                            TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.ampQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                        }
                    }
                    else {
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.ampQuests[0].progress = 0;
                        TextTagCreate(StringExternal(&quot;Param/Value/9FAC43FA&quot;), 72, UnitGetPosition(UnitFromId(444)), 4.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                        gv_players[(PlayerGroupLoopCurrent() - 1)].quests.ampQuests[0].textTag = TextTagLastCreated();
                        TextTagSetTime(gv_players[(PlayerGroupLoopCurrent() - 1)].quests.ampQuests[0].textTag, c_textTagTimeDuration, 524287.0);
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LoadSideQuests_Init () {
                gt_LoadSideQuests = TriggerCreate(&quot;gt_LoadSideQuests_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 0 - Talk to Mana
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest0TalktoMana_Func (bool testConds, bool runActions) {
                int auto3DC10FEA_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                auto3DC10FEA_val = gv_players[lv_qPI].quests.manaQuests[0].progress;
                if (auto3DC10FEA_val == 0) {
                    gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/10839ED6&quot;), StringExternal(&quot;Param/Value/378E78B5&quot;), StringExternal(&quot;Param/Value/4059B14F&quot;), StringExternal(&quot;Param/Value/F9A00D5C&quot;));
                }
                else if (auto3DC10FEA_val == 1) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/C939D953&quot;));
                }
                else if (auto3DC10FEA_val == 2) {
                    gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/731375C0&quot;), StringExternal(&quot;Param/Value/E1F95815&quot;));
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, &quot;Jump&quot;, 0, c_animTimeDefault);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest0TalktoMana_Init () {
                gt_ManaQuest0TalktoMana = TriggerCreate(&quot;gt_ManaQuest0TalktoMana_Func&quot;);
                TriggerAddEventUnitSelected(gt_ManaQuest0TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_ManaQuest0TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_ManaQuest0TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 0 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest0QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.manaQuests[0].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/8E3307EA&quot;), StringExternal(&quot;Param/Value/9D6BEEE8&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.manaQuests[0].objective = ObjectiveLastCreated();
                UnitInventoryCreate(gv_players[lv_tPI].dragon, &quot;BasicArmor&quot;);
                lv_tempArmor = UnitInventoryLastCreated();
                UnitInventoryCreate(gv_players[lv_tPI].dragon, &quot;BasicArmor&quot;);
                gv_manaQuest0Armor[lv_tPI] = UnitInventoryLastCreated();
                UnitRemove(lv_tempArmor);
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.manaQuests[0].textTag, StringToText(&quot;&quot;));
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, false);
                Wait(0.1, c_timeGame);
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, true);
                Wait(0.1, c_timeGame);
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, false);
                Wait(0.1, c_timeGame);
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, true);
                Wait(0.1, c_timeGame);
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, false);
                Wait(0.1, c_timeGame);
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, true);
                Wait(0.1, c_timeGame);
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, false);
                Wait(0.1, c_timeGame);
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeInventoryPanel, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest0QuestAccept_Init () {
                gt_ManaQuest0QuestAccept = TriggerCreate(&quot;gt_ManaQuest0QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_ManaQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 0 - Equip Armor P1
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest0EquipArmorP1_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(EventUnitInventoryItem()) - 1);
                // Conditions
                if (testConds) {
                    if (!((gv_players[(UnitGetOwner(EventUnitInventoryItem()) - 1)].quests.manaQuests[0].progress == 1))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitInventoryContainer(gv_manaQuest0Armor[lv_qPI]) == 2)) {
                    gv_players[lv_qPI].quests.manaQuests[0].progress = 2;
                    ObjectiveSetState(gv_players[lv_qPI].quests.manaQuests[0].objective, c_objectiveStateCompleted);
                    gv_manaQuest0Armor[lv_qPI] = null;
                    TextTagSetText(gv_players[lv_qPI].quests.manaQuests[0].textTag, StringExternal(&quot;Param/Value/E213BE40&quot;));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest0EquipArmorP1_Init () {
                gt_ManaQuest0EquipArmorP1 = TriggerCreate(&quot;gt_ManaQuest0EquipArmorP1_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_ManaQuest0EquipArmorP1, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;), c_unitInventoryChangeMoves, UnitRefFromVariable(&quot;gv_manaQuest0Armor[0]&quot;));
                TriggerAddEventUnitInventoryChange(gt_ManaQuest0EquipArmorP1, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;), c_unitInventoryChangeMoves, UnitRefFromVariable(&quot;gv_manaQuest0Armor[1]&quot;));
                TriggerAddEventUnitInventoryChange(gt_ManaQuest0EquipArmorP1, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;), c_unitInventoryChangeMoves, UnitRefFromVariable(&quot;gv_manaQuest0Armor[2]&quot;));
                TriggerAddEventUnitInventoryChange(gt_ManaQuest0EquipArmorP1, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;), c_unitInventoryChangeMoves, UnitRefFromVariable(&quot;gv_manaQuest0Armor[3]&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 0 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest0RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 2))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.manaQuests[0].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Mana0-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.manaQuests[0].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.manaQuests[0].objective);
                gv_players[lv_tPI].quests.manaQuests[0].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                TextTagDestroy(gv_players[lv_tPI].quests.manaQuests[0].textTag);
                TextTagCreate(StringExternal(&quot;Param/Value/0B6F6B5B&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.manaQuests[1].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[lv_tPI].quests.manaQuests[1].textTag, c_textTagTimeDuration, 524287.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest0RewardAccept_Init () {
                gt_ManaQuest0RewardAccept = TriggerCreate(&quot;gt_ManaQuest0RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_ManaQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 1 - Talk to Mana
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest1TalktoMana_Func (bool testConds, bool runActions) {
                int auto3674C2B6_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                auto3674C2B6_val = gv_players[lv_qPI].quests.manaQuests[1].progress;
                if (auto3674C2B6_val == 0) {
                    gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/EF1ACC9A&quot;), StringExternal(&quot;Param/Value/7789F4B3&quot;), StringExternal(&quot;Param/Value/F9855B12&quot;), StringExternal(&quot;Param/Value/89553942&quot;));
                }
                else if (auto3674C2B6_val == 1) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/18BD2755&quot;));
                }
                else if (auto3674C2B6_val == 2) {
                    gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/F3FB8101&quot;), StringExternal(&quot;Param/Value/FA4DE787&quot;));
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, &quot;Jump&quot;, 0, c_animTimeDefault);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest1TalktoMana_Init () {
                gt_ManaQuest1TalktoMana = TriggerCreate(&quot;gt_ManaQuest1TalktoMana_Func&quot;);
                TriggerAddEventUnitSelected(gt_ManaQuest1TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_ManaQuest1TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_ManaQuest1TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 1 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest1QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.manaQuests[1].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/699B9328&quot;), StringExternal(&quot;Param/Value/2B14BCD9&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.manaQuests[1].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.manaQuests[1].textTag, StringToText(&quot;&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest1QuestAccept_Init () {
                gt_ManaQuest1QuestAccept = TriggerCreate(&quot;gt_ManaQuest1QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_ManaQuest1QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 1 - Kill Sheep
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest1KillSheep_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                int lv_pPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
                lv_pPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;SmallSheep&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
                    if ((gv_players[lv_pPI].quests.manaQuests[1].progress == 1)) {
                        gv_players[lv_pPI].quests.manaQuests[1].progress = 2;
                        ObjectiveSetState(gv_players[lv_pPI].quests.manaQuests[1].objective, c_objectiveStateCompleted);
                        TextTagSetText(gv_players[lv_pPI].quests.manaQuests[1].textTag, StringExternal(&quot;Param/Value/F3003B53&quot;));
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest1KillSheep_Init () {
                gt_ManaQuest1KillSheep = TriggerCreate(&quot;gt_ManaQuest1KillSheep_Func&quot;);
                TriggerAddEventUnitDied(gt_ManaQuest1KillSheep, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 1 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest1RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 2))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.manaQuests[1].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Mana1-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.manaQuests[1].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.manaQuests[1].objective);
                gv_players[lv_tPI].quests.manaQuests[1].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/48B1F90D&quot;));
                gf_AddExperience(gv_players[lv_tPI].dragon, 25);
                TextTagDestroy(gv_players[lv_tPI].quests.manaQuests[1].textTag);
                TextTagCreate(StringExternal(&quot;Param/Value/37757B36&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.manaQuests[2].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[lv_tPI].quests.manaQuests[2].textTag, c_textTagTimeDuration, 524287.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest1RewardAccept_Init () {
                gt_ManaQuest1RewardAccept = TriggerCreate(&quot;gt_ManaQuest1RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_ManaQuest1RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 2 - Talk to Mana
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest2TalktoMana_Func (bool testConds, bool runActions) {
                int autoE6491751_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                autoE6491751_val = gv_players[lv_qPI].quests.manaQuests[2].progress;
                if (autoE6491751_val == 0) {
                    if ((UnitGetPropertyFixed(gv_players[lv_qPI].dragon, c_unitPropLife, c_unitPropCurrent) != UnitGetPropertyFixed(gv_players[lv_qPI].dragon, c_unitPropLifeMax, c_unitPropCurrent))) {
                        gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/6009600F&quot;), StringExternal(&quot;Param/Value/62B0BB79&quot;), StringExternal(&quot;Param/Value/AED7BDFF&quot;), StringExternal(&quot;Param/Value/B4C73527&quot;));
                    }
                    else {
                        gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/D60B4BB7&quot;), StringExternal(&quot;Param/Value/D5D2F79B&quot;), StringExternal(&quot;Param/Value/A3E41EF2&quot;), StringExternal(&quot;Param/Value/70EAE5E9&quot;));
                    }
                }
                else if (autoE6491751_val == 1) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/7E6C12C5&quot;));
                }
                else if (autoE6491751_val == 2) {
                    gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/DB969F41&quot;), StringExternal(&quot;Param/Value/AF8ECD40&quot;));
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, &quot;Jump&quot;, 0, c_animTimeDefault);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest2TalktoMana_Init () {
                gt_ManaQuest2TalktoMana = TriggerCreate(&quot;gt_ManaQuest2TalktoMana_Func&quot;);
                TriggerAddEventUnitSelected(gt_ManaQuest2TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_ManaQuest2TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_ManaQuest2TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 2 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest2QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.manaQuests[2].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/74393FE6&quot;), StringExternal(&quot;Param/Value/AD08DCE8&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.manaQuests[2].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.manaQuests[2].textTag, StringToText(&quot;&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest2QuestAccept_Init () {
                gt_ManaQuest2QuestAccept = TriggerCreate(&quot;gt_ManaQuest2QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_ManaQuest2QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 2 - Enter Wasteland Water
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest2EnterWastelandWater_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(EventUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                    if (!((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.manaQuests[2].progress == 1))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_qPI].quests.manaQuests[2].progress = 2;
                ObjectiveSetState(gv_players[lv_qPI].quests.manaQuests[2].objective, c_objectiveStateCompleted);
                TextTagSetText(gv_players[lv_qPI].quests.manaQuests[2].textTag, StringExternal(&quot;Param/Value/4A7BBDF9&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest2EnterWastelandWater_Init () {
                gt_ManaQuest2EnterWastelandWater = TriggerCreate(&quot;gt_ManaQuest2EnterWastelandWater_Func&quot;);
                TriggerAddEventUnitRegion(gt_ManaQuest2EnterWastelandWater, null, RegionFromId(42), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 2 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest2RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 2))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.manaQuests[2].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Mana2-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.manaQuests[2].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.manaQuests[2].objective);
                gv_players[lv_tPI].quests.manaQuests[2].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E760FE26&quot;));
                gf_AddExperience(gv_players[lv_tPI].dragon, 25);
                TextTagDestroy(gv_players[lv_tPI].quests.manaQuests[2].textTag);
                TextTagCreate(StringExternal(&quot;Param/Value/49BA605A&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.manaQuests[3].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[lv_tPI].quests.manaQuests[3].textTag, c_textTagTimeDuration, 524287.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest2RewardAccept_Init () {
                gt_ManaQuest2RewardAccept = TriggerCreate(&quot;gt_ManaQuest2RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_ManaQuest2RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 3 - Talk to Mana
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest3TalktoMana_Func (bool testConds, bool runActions) {
                int autoAFA0159D_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                autoAFA0159D_val = gv_players[lv_qPI].quests.manaQuests[3].progress;
                if (autoAFA0159D_val == 0) {
                    gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/0F5230AE&quot;), StringExternal(&quot;Param/Value/B8FA5D90&quot;), StringExternal(&quot;Param/Value/16598A9B&quot;), StringExternal(&quot;Param/Value/82067E73&quot;));
                }
                else if (autoAFA0159D_val == 1) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/C4E513B5&quot;));
                }
                else if (autoAFA0159D_val == 2) {
                    gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/C943FD11&quot;), StringExternal(&quot;Param/Value/E346759C&quot;));
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, &quot;Jump&quot;, 0, c_animTimeDefault);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest3TalktoMana_Init () {
                gt_ManaQuest3TalktoMana = TriggerCreate(&quot;gt_ManaQuest3TalktoMana_Func&quot;);
                TriggerAddEventUnitSelected(gt_ManaQuest3TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_ManaQuest3TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_ManaQuest3TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 3 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest3QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.manaQuests[3].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/7D0D68C2&quot;), StringExternal(&quot;Param/Value/729C207A&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.manaQuests[3].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.manaQuests[3].textTag, StringToText(&quot;&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest3QuestAccept_Init () {
                gt_ManaQuest3QuestAccept = TriggerCreate(&quot;gt_ManaQuest3QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_ManaQuest3QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 3 - Kill Srepti
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest3KillSrepti_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                int lv_pPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;Srepti&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
                    if ((gv_players[lv_pPI].quests.manaQuests[3].progress == 1)) {
                        gv_players[lv_pPI].quests.manaQuests[3].kills += 1;
                        ObjectiveSetName(gv_players[lv_pPI].quests.manaQuests[3].objective, (StringExternal(&quot;Param/Value/8FDF552C&quot;) + (IntToText((10 - gv_players[lv_pPI].quests.manaQuests[3].kills)) + StringExternal(&quot;Param/Value/16FD1AF9&quot;))));
                        if ((gv_players[lv_pPI].quests.manaQuests[3].kills == 10)) {
                            gv_players[lv_pPI].quests.manaQuests[3].progress = 2;
                            ObjectiveSetState(gv_players[lv_pPI].quests.manaQuests[3].objective, c_objectiveStateCompleted);
                            TextTagSetText(gv_players[lv_pPI].quests.manaQuests[3].textTag, StringExternal(&quot;Param/Value/57030FBB&quot;));
                        }
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest3KillSrepti_Init () {
                gt_ManaQuest3KillSrepti = TriggerCreate(&quot;gt_ManaQuest3KillSrepti_Func&quot;);
                TriggerAddEventUnitDied(gt_ManaQuest3KillSrepti, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 3 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest3RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 2))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.manaQuests[3].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Mana3-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.manaQuests[3].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.manaQuests[3].objective);
                gv_players[lv_tPI].quests.manaQuests[3].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/598F5F66&quot;));
                gf_AddExperience(gv_players[lv_tPI].dragon, 150);
                TextTagDestroy(gv_players[lv_tPI].quests.manaQuests[3].textTag);
                TextTagCreate(StringExternal(&quot;Param/Value/6C209170&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.manaQuests[4].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[lv_tPI].quests.manaQuests[4].textTag, c_textTagTimeDuration, 524287.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest3RewardAccept_Init () {
                gt_ManaQuest3RewardAccept = TriggerCreate(&quot;gt_ManaQuest3RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_ManaQuest3RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 4 - Talk to Mana
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest4TalktoMana_Func (bool testConds, bool runActions) {
                int autoF06A7D93_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                autoF06A7D93_val = gv_players[lv_qPI].quests.manaQuests[4].progress;
                if (autoF06A7D93_val == 0) {
                    if ((UnitGetPropertyFixed(gv_players[lv_qPI].dragon, c_unitPropLife, c_unitPropCurrent) != UnitGetPropertyFixed(gv_players[lv_qPI].dragon, c_unitPropLifeMax, c_unitPropCurrent))) {
                        gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/0F7B287F&quot;), StringExternal(&quot;Param/Value/B567CAF8&quot;), StringExternal(&quot;Param/Value/F6D87979&quot;), StringExternal(&quot;Param/Value/35A32236&quot;));
                    }
                    else {
                        gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/9F8C7B1C&quot;), StringExternal(&quot;Param/Value/DB6B526A&quot;), StringExternal(&quot;Param/Value/1093F445&quot;), StringExternal(&quot;Param/Value/E66C3F8D&quot;));
                    }
                }
                else if (autoF06A7D93_val == 1) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/B7DADC24&quot;));
                }
                else if (autoF06A7D93_val == 2) {
                    gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/FCF6A792&quot;), StringExternal(&quot;Param/Value/2C96AEC8&quot;));
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, &quot;Jump&quot;, 0, c_animTimeDefault);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest4TalktoMana_Init () {
                gt_ManaQuest4TalktoMana = TriggerCreate(&quot;gt_ManaQuest4TalktoMana_Func&quot;);
                TriggerAddEventUnitSelected(gt_ManaQuest4TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_ManaQuest4TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_ManaQuest4TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 4 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest4QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.manaQuests[4].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/38F07793&quot;), StringExternal(&quot;Param/Value/9D482A49&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.manaQuests[4].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 100));
                TextTagSetText(gv_players[lv_tPI].quests.manaQuests[4].textTag, StringToText(&quot;&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest4QuestAccept_Init () {
                gt_ManaQuest4QuestAccept = TriggerCreate(&quot;gt_ManaQuest4QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_ManaQuest4QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 4 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest4RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 2))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.manaQuests[4].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Mana4-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.manaQuests[4].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.manaQuests[4].objective);
                gv_players[lv_tPI].quests.manaQuests[4].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/15E97A53&quot;));
                gf_AddExperience(gv_players[lv_tPI].dragon, 100);
                TextTagDestroy(gv_players[lv_tPI].quests.manaQuests[4].textTag);
                TextTagCreate(StringExternal(&quot;Param/Value/487305A4&quot;), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.manaQuests[5].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[lv_tPI].quests.manaQuests[5].textTag, c_textTagTimeDuration, 524287.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest4RewardAccept_Init () {
                gt_ManaQuest4RewardAccept = TriggerCreate(&quot;gt_ManaQuest4RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_ManaQuest4RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 4 - Purchase Potion
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest4PurchasePotion_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true))) {
                        return false;
                    }
                    if (!((gv_players[lv_qPI].quests.manaQuests[4].progress == 1))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_qPI].quests.manaQuests[4].progress = 2;
                ObjectiveSetState(gv_players[lv_qPI].quests.manaQuests[4].objective, c_objectiveStateCompleted);
                TextTagSetText(gv_players[lv_qPI].quests.manaQuests[4].textTag, StringExternal(&quot;Param/Value/B2FAD667&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest4PurchasePotion_Init () {
                gt_ManaQuest4PurchasePotion = TriggerCreate(&quot;gt_ManaQuest4PurchasePotion_Func&quot;);
                TriggerAddEventButtonPressed(gt_ManaQuest4PurchasePotion, c_playerAny, &quot;SmallHealthPotion&quot;);
                TriggerAddEventButtonPressed(gt_ManaQuest4PurchasePotion, c_playerAny, &quot;MediumHealthPotion&quot;);
                TriggerAddEventButtonPressed(gt_ManaQuest4PurchasePotion, c_playerAny, &quot;LargeHealthPotion&quot;);
                TriggerAddEventButtonPressed(gt_ManaQuest4PurchasePotion, c_playerAny, &quot;GrandHealthPotion&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 5 - Talk to Mana
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest5TalktoMana_Func (bool testConds, bool runActions) {
                int autoB9CA7EF2_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                autoB9CA7EF2_val = gv_players[lv_qPI].quests.manaQuests[5].progress;
                if (autoB9CA7EF2_val == 0) {
                    gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/7F2E977B&quot;), StringExternal(&quot;Param/Value/4058E6DB&quot;), StringExternal(&quot;Param/Value/67E874D2&quot;), StringExternal(&quot;Param/Value/5BAD673C&quot;));
                }
                else if (autoB9CA7EF2_val == 1) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/0368FA7A&quot;));
                }
                else if (autoB9CA7EF2_val == 2) {
                    gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/071F67CE&quot;), StringExternal(&quot;Param/Value/49C2F097&quot;));
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, &quot;Jump&quot;, 0, c_animTimeDefault);
                }
                else if (autoB9CA7EF2_val == 3) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/D4FB44DF&quot;));
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest5TalktoMana_Init () {
                gt_ManaQuest5TalktoMana = TriggerCreate(&quot;gt_ManaQuest5TalktoMana_Func&quot;);
                TriggerAddEventUnitSelected(gt_ManaQuest5TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_ManaQuest5TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_ManaQuest5TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 5 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest5QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.manaQuests[5].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/F4BCC69C&quot;), StringExternal(&quot;Param/Value/440CAF25&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.manaQuests[5].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.manaQuests[5].textTag, StringToText(&quot;&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest5QuestAccept_Init () {
                gt_ManaQuest5QuestAccept = TriggerCreate(&quot;gt_ManaQuest5QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_ManaQuest5QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 5 - Kill Alpha Srepti
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest5KillAlphaSrepti_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                int lv_pPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;AlphaSrepti&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
                    if ((gv_players[lv_pPI].quests.manaQuests[5].progress == 1)) {
                        gv_players[lv_pPI].quests.manaQuests[5].progress = 2;
                        ObjectiveSetState(gv_players[lv_pPI].quests.manaQuests[5].objective, c_objectiveStateCompleted);
                        TextTagSetText(gv_players[lv_pPI].quests.manaQuests[5].textTag, StringExternal(&quot;Param/Value/F19542C7&quot;));
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest5KillAlphaSrepti_Init () {
                gt_ManaQuest5KillAlphaSrepti = TriggerCreate(&quot;gt_ManaQuest5KillAlphaSrepti_Func&quot;);
                TriggerAddEventUnitDied(gt_ManaQuest5KillAlphaSrepti, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Mana Quest 5 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_ManaQuest5RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[0].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[1].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[2].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[3].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[4].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.manaQuests[5].progress == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.manaQuests[5].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Mana5-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.manaQuests[5].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.manaQuests[5].objective);
                gv_players[lv_tPI].quests.manaQuests[5].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                UnitInventoryCreate(gv_players[lv_tPI].dragon, &quot;MediumHealingOrb&quot;);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/BCB36106&quot;));
                gf_AddExperience(gv_players[lv_tPI].dragon, 1000);
                TextTagDestroy(gv_players[lv_tPI].quests.manaQuests[5].textTag);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ManaQuest5RewardAccept_Init () {
                gt_ManaQuest5RewardAccept = TriggerCreate(&quot;gt_ManaQuest5RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_ManaQuest5RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Quest 0 - Talk to Base
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseQuest0TalktoBase_Func (bool testConds, bool runActions) {
                int auto008EA624_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                auto008EA624_val = gv_players[lv_qPI].quests.baseQuests[0].progress;
                if (auto008EA624_val == 0) {
                    gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/D3E7E515&quot;), StringExternal(&quot;Param/Value/4DE4DAA9&quot;), StringExternal(&quot;Param/Value/CE6F05F8&quot;), StringExternal(&quot;Param/Value/81DC4384&quot;));
                }
                else if (auto008EA624_val == 1) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/B4E1E57D&quot;));
                }
                else if (auto008EA624_val == 2) {
                    gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/DE5135F3&quot;), StringExternal(&quot;Param/Value/D1A86300&quot;));
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4233)), c_animNameDefault, &quot;Jump&quot;, 0, c_animTimeDefault);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseQuest0TalktoBase_Init () {
                gt_BaseQuest0TalktoBase = TriggerCreate(&quot;gt_BaseQuest0TalktoBase_Func&quot;);
                TriggerAddEventUnitSelected(gt_BaseQuest0TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_BaseQuest0TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_BaseQuest0TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Quest 0 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseQuest0QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[0].progress == 0))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[1].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.baseQuests[0].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/FAE38376&quot;), StringExternal(&quot;Param/Value/354CA705&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.baseQuests[0].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.baseQuests[0].textTag, StringToText(&quot;&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseQuest0QuestAccept_Init () {
                gt_BaseQuest0QuestAccept = TriggerCreate(&quot;gt_BaseQuest0QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_BaseQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Quest 0 - Set Respawn Point at Wasteland
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseQuest0SetRespawnPointatWasteland_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(EventUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
                        return false;
                    }
                    if (!((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.baseQuests[0].progress == 1))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_qPI].quests.baseQuests[0].progress = 2;
                ObjectiveSetState(gv_players[lv_qPI].quests.baseQuests[0].objective, c_objectiveStateCompleted);
                TextTagSetText(gv_players[lv_qPI].quests.baseQuests[0].textTag, StringExternal(&quot;Param/Value/EB78C493&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseQuest0SetRespawnPointatWasteland_Init () {
                gt_BaseQuest0SetRespawnPointatWasteland = TriggerCreate(&quot;gt_BaseQuest0SetRespawnPointatWasteland_Func&quot;);
                TriggerAddEventUnitRegion(gt_BaseQuest0SetRespawnPointatWasteland, null, RegionFromId(124), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Quest 0 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseQuest0RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[0].progress == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.baseQuests[0].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Base0-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.baseQuests[0].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.baseQuests[0].objective);
                gv_players[lv_tPI].quests.baseQuests[0].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                gf_AddExperience(gv_players[lv_tPI].dragon, 25);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/8D20327C&quot;));
                TextTagDestroy(gv_players[lv_tPI].quests.baseQuests[0].textTag);
                TextTagCreate(StringExternal(&quot;Param/Value/B2162E35&quot;), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.baseQuests[1].textTag = TextTagLastCreated();
                TextTagSetTime(gv_players[lv_tPI].quests.baseQuests[1].textTag, c_textTagTimeDuration, 524287.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseQuest0RewardAccept_Init () {
                gt_BaseQuest0RewardAccept = TriggerCreate(&quot;gt_BaseQuest0RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_BaseQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Quest 1 - Talk to Base
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseQuest1TalktoBase_Func (bool testConds, bool runActions) {
                int auto79278DC8_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                auto79278DC8_val = gv_players[lv_qPI].quests.baseQuests[1].progress;
                if (auto79278DC8_val == 0) {
                    gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/9E26A307&quot;), StringExternal(&quot;Param/Value/0E7A1C61&quot;), StringExternal(&quot;Param/Value/A11FAE9B&quot;), StringExternal(&quot;Param/Value/497348F3&quot;));
                }
                else if (auto79278DC8_val == 1) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/FBB0E580&quot;));
                }
                else if (auto79278DC8_val == 2) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/3F0CE577&quot;));
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4233)), c_animNameDefault, &quot;Angry&quot;, c_animFlagPlayForever, c_animTimeDefault);
                }
                else if (auto79278DC8_val == 3) {
                    gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/670F1B94&quot;), StringExternal(&quot;Param/Value/65AC0532&quot;));
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4233)), c_animNameDefault, &quot;Jump&quot;, 0, c_animTimeDefault);
                }
                else if (auto79278DC8_val == 4) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/9F536067&quot;));
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4233)), c_animNameDefault, &quot;Dance&quot;, c_animFlagPlayForever, c_animTimeDefault);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseQuest1TalktoBase_Init () {
                gt_BaseQuest1TalktoBase = TriggerCreate(&quot;gt_BaseQuest1TalktoBase_Func&quot;);
                TriggerAddEventUnitSelected(gt_BaseQuest1TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_BaseQuest1TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_BaseQuest1TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Quest 1 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseQuest1QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[0].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[1].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.baseQuests[1].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/E253F21A&quot;), StringExternal(&quot;Param/Value/AADFE44D&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.baseQuests[1].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.baseQuests[1].textTag, StringToText(&quot;&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseQuest1QuestAccept_Init () {
                gt_BaseQuest1QuestAccept = TriggerCreate(&quot;gt_BaseQuest1QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_BaseQuest1QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Quest 1 - Activate Ballan Waypoint
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseQuest1ActivateBallanWaypoint_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(EventUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
                        return false;
                    }
                    if (!((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.baseQuests[1].progress == 1))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_qPI].quests.baseQuests[1].progress = 2;
                ObjectiveSetName(gv_players[lv_qPI].quests.baseQuests[1].objective, StringExternal(&quot;Param/Value/4D7B649C&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseQuest1ActivateBallanWaypoint_Init () {
                gt_BaseQuest1ActivateBallanWaypoint = TriggerCreate(&quot;gt_BaseQuest1ActivateBallanWaypoint_Func&quot;);
                TriggerAddEventUnitRegion(gt_BaseQuest1ActivateBallanWaypoint, null, RegionFromId(125), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Quest 2 - Use Ballan Waypoint to Wasteland
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseQuest2UseBallanWaypointtoWasteland_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionFromId(125)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[1].progress == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((EventDialogControl() == gv_wastelandDialogButton)) {
                    gf_WaypointTeleport(EventPlayer(), RegionFromId(124));
                    gv_players[lv_tPI].quests.baseQuests[1].progress = 3;
                    ObjectiveSetState(gv_players[lv_tPI].quests.baseQuests[1].objective, c_objectiveStateCompleted);
                    TextTagSetText(gv_players[lv_tPI].quests.baseQuests[1].textTag, StringExternal(&quot;Param/Value/D05FC8E4&quot;));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseQuest2UseBallanWaypointtoWasteland_Init () {
                gt_BaseQuest2UseBallanWaypointtoWasteland = TriggerCreate(&quot;gt_BaseQuest2UseBallanWaypointtoWasteland_Func&quot;);
                TriggerAddEventDialogControl(gt_BaseQuest2UseBallanWaypointtoWasteland, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Base Quest 1 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_BaseQuest1RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[0].progress == 3))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.baseQuests[1].progress == 3))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.baseQuests[1].progress = 4;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Base1-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.baseQuests[1].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.baseQuests[1].objective);
                gv_players[lv_tPI].quests.baseQuests[1].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                gf_AddExperience(gv_players[lv_tPI].dragon, 100);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/AC1DE9E4&quot;));
                TextTagDestroy(gv_players[lv_tPI].quests.baseQuests[1].textTag);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BaseQuest1RewardAccept_Init () {
                gt_BaseQuest1RewardAccept = TriggerCreate(&quot;gt_BaseQuest1RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_BaseQuest1RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Detsefni Quest 0 - Talk to Detsefni
            //--------------------------------------------------------------------------------------------------
            bool gt_DetsefniQuest0TalktoDetsefni_Func (bool testConds, bool runActions) {
                int auto844705FF_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4922)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                auto844705FF_val = gv_players[lv_qPI].quests.detsefniQuests[0].progress;
                if (auto844705FF_val == 0) {
                    gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/77465159&quot;), StringExternal(&quot;Param/Value/99429556&quot;), StringExternal(&quot;Param/Value/A9B2BE9C&quot;), StringExternal(&quot;Param/Value/707ED4E0&quot;));
                }
                else if (auto844705FF_val == 1) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/6BED864A&quot;));
                }
                else if (auto844705FF_val == 2) {
                    gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/22072B2B&quot;), StringExternal(&quot;Param/Value/DE876B14&quot;));
                    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4922)), c_animNameDefault, &quot;Jump&quot;, 0, c_animTimeDefault);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DetsefniQuest0TalktoDetsefni_Init () {
                gt_DetsefniQuest0TalktoDetsefni = TriggerCreate(&quot;gt_DetsefniQuest0TalktoDetsefni_Func&quot;);
                TriggerAddEventUnitSelected(gt_DetsefniQuest0TalktoDetsefni, UnitRefFromUnit(UnitFromId(4922)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_DetsefniQuest0TalktoDetsefni, UnitRefFromUnit(UnitFromId(4922)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_DetsefniQuest0TalktoDetsefni, UnitRefFromUnit(UnitFromId(4922)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Detsefni Quest 0 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_DetsefniQuest0QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4922)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.detsefniQuests[0].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.detsefniQuests[0].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/BE01F8B9&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.detsefniQuests[0].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.detsefniQuests[0].textTag, StringToText(&quot;&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DetsefniQuest0QuestAccept_Init () {
                gt_DetsefniQuest0QuestAccept = TriggerCreate(&quot;gt_DetsefniQuest0QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_DetsefniQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Detsefni Quest 0 - Kill 25 Sreptis
            //--------------------------------------------------------------------------------------------------
            bool gt_DetsefniQuest0Kill25Sreptis_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                int lv_pPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;Srepti&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
                    if ((gv_players[lv_pPI].quests.detsefniQuests[0].progress == 1)) {
                        gv_players[lv_pPI].quests.detsefniQuests[0].kills += 1;
                        ObjectiveSetName(gv_players[lv_pPI].quests.detsefniQuests[0].objective, (StringExternal(&quot;Param/Value/2AAE008D&quot;) + (IntToText((25 - gv_players[lv_pPI].quests.detsefniQuests[0].kills)) + StringExternal(&quot;Param/Value/996516FD&quot;))));
                        if ((gv_players[lv_pPI].quests.detsefniQuests[0].kills == 25)) {
                            gv_players[lv_pPI].quests.detsefniQuests[0].progress = 2;
                            ObjectiveSetState(gv_players[lv_pPI].quests.detsefniQuests[0].objective, c_objectiveStateCompleted);
                            TextTagSetText(gv_players[lv_pPI].quests.detsefniQuests[0].textTag, StringExternal(&quot;Param/Value/C7D0B265&quot;));
                        }
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DetsefniQuest0Kill25Sreptis_Init () {
                gt_DetsefniQuest0Kill25Sreptis = TriggerCreate(&quot;gt_DetsefniQuest0Kill25Sreptis_Func&quot;);
                TriggerAddEventUnitDied(gt_DetsefniQuest0Kill25Sreptis, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Detsefni Quest 0 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_DetsefniQuest0RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4922)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.detsefniQuests[0].progress == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.detsefniQuests[0].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Detsefni0-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.detsefniQuests[0].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.detsefniQuests[0].objective);
                gv_players[lv_tPI].quests.detsefniQuests[0].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                gf_AddExperience(gv_players[lv_tPI].dragon, 500.0);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 5000));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/DACEB55D&quot;));
                TextTagDestroy(gv_players[lv_tPI].quests.detsefniQuests[0].textTag);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DetsefniQuest0RewardAccept_Init () {
                gt_DetsefniQuest0RewardAccept = TriggerCreate(&quot;gt_DetsefniQuest0RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_DetsefniQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sergeant Lister Quest 0 - Talk to Sergeant Lister
            //--------------------------------------------------------------------------------------------------
            bool gt_SergeantListerQuest0TalktoSergeantLister_Func (bool testConds, bool runActions) {
                int autoFBB98C7D_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSelect(gv_players[lv_qPI].dragon, EventPlayer(), true);
                if ((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4923)), 3.0)) == true)) {
                    autoFBB98C7D_val = gv_players[lv_qPI].quests.sergeantListerQuests[0].progress;
                    if (autoFBB98C7D_val == 0) {
                        gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/21BDD31D&quot;), StringExternal(&quot;Param/Value/870AA9F6&quot;), StringExternal(&quot;Param/Value/ABDC9981&quot;), StringExternal(&quot;Param/Value/CED2A4D9&quot;));
                    }
                    else if (autoFBB98C7D_val == 1) {
                        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/9027D913&quot;));
                    }
                    else if (autoFBB98C7D_val == 2) {
                        gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/F0A0DDC8&quot;), StringExternal(&quot;Param/Value/C3DEB7CE&quot;));
                        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4923)), c_animNameDefault, &quot;Jump&quot;, 0, c_animTimeDefault);
                    }
                    else {
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SergeantListerQuest0TalktoSergeantLister_Init () {
                gt_SergeantListerQuest0TalktoSergeantLister = TriggerCreate(&quot;gt_SergeantListerQuest0TalktoSergeantLister_Func&quot;);
                TriggerAddEventUnitSelected(gt_SergeantListerQuest0TalktoSergeantLister, UnitRefFromUnit(UnitFromId(4923)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_SergeantListerQuest0TalktoSergeantLister, UnitRefFromUnit(UnitFromId(4923)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_SergeantListerQuest0TalktoSergeantLister, UnitRefFromUnit(UnitFromId(4923)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sergeant Listeri Quest 0 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_SergeantListeriQuest0QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4923)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.sergeantListerQuests[0].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.sergeantListerQuests[0].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/FFDAB444&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.sergeantListerQuests[0].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.sergeantListerQuests[0].textTag, StringToText(&quot;&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SergeantListeriQuest0QuestAccept_Init () {
                gt_SergeantListeriQuest0QuestAccept = TriggerCreate(&quot;gt_SergeantListeriQuest0QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_SergeantListeriQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sergeant Lister Quest 0 - Kill 10 Creton Warriors
            //--------------------------------------------------------------------------------------------------
            bool gt_SergeantListerQuest0Kill10CretonWarriors_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                int lv_pPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;CretonWarrior&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
                    if ((gv_players[lv_pPI].quests.sergeantListerQuests[0].progress == 1)) {
                        gv_players[lv_pPI].quests.sergeantListerQuests[0].kills += 1;
                        ObjectiveSetName(gv_players[lv_pPI].quests.sergeantListerQuests[0].objective, (StringExternal(&quot;Param/Value/D42CEA13&quot;) + (IntToText((10 - gv_players[lv_pPI].quests.sergeantListerQuests[0].kills)) + StringExternal(&quot;Param/Value/61137D94&quot;))));
                        if ((gv_players[lv_pPI].quests.sergeantListerQuests[0].kills == 10)) {
                            gv_players[lv_pPI].quests.sergeantListerQuests[0].progress = 2;
                            ObjectiveSetState(gv_players[lv_pPI].quests.sergeantListerQuests[0].objective, c_objectiveStateCompleted);
                            TextTagSetText(gv_players[lv_pPI].quests.sergeantListerQuests[0].textTag, StringExternal(&quot;Param/Value/D2C09EC1&quot;));
                        }
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SergeantListerQuest0Kill10CretonWarriors_Init () {
                gt_SergeantListerQuest0Kill10CretonWarriors = TriggerCreate(&quot;gt_SergeantListerQuest0Kill10CretonWarriors_Func&quot;);
                TriggerAddEventUnitDied(gt_SergeantListerQuest0Kill10CretonWarriors, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sergeant Lister Quest 0 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_SergeantListerQuest0RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4923)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.sergeantListerQuests[0].progress == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.sergeantListerQuests[0].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-SergeantLister0-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.sergeantListerQuests[0].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.sergeantListerQuests[0].objective);
                gv_players[lv_tPI].quests.sergeantListerQuests[0].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                gf_AddExperience(gv_players[lv_tPI].dragon, 750.0);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 5000));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E523125A&quot;));
                TextTagDestroy(gv_players[lv_tPI].quests.sergeantListerQuests[0].textTag);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SergeantListerQuest0RewardAccept_Init () {
                gt_SergeantListerQuest0RewardAccept = TriggerCreate(&quot;gt_SergeantListerQuest0RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_SergeantListerQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Greed Quest 0 - Talk to Greed
            //--------------------------------------------------------------------------------------------------
            bool gt_GreedQuest0TalktoGreed_Func (bool testConds, bool runActions) {
                int auto05F674F6_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSelect(gv_players[lv_qPI].dragon, EventPlayer(), true);
                if ((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4924)), 3.0)) == true)) {
                    auto05F674F6_val = gv_players[lv_qPI].quests.greedQuests[0].progress;
                    if (auto05F674F6_val == 0) {
                        gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/67477194&quot;), StringExternal(&quot;Param/Value/156DA52C&quot;), StringExternal(&quot;Param/Value/301CAD94&quot;), StringExternal(&quot;Param/Value/3F89894F&quot;));
                    }
                    else if (auto05F674F6_val == 1) {
                        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/A1694ED4&quot;));
                    }
                    else if (auto05F674F6_val == 2) {
                        gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/7897B78A&quot;), StringExternal(&quot;Param/Value/2B4A19AF&quot;));
                        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4924)), c_animNameDefault, &quot;Jump&quot;, 0, c_animTimeDefault);
                    }
                    else {
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GreedQuest0TalktoGreed_Init () {
                gt_GreedQuest0TalktoGreed = TriggerCreate(&quot;gt_GreedQuest0TalktoGreed_Func&quot;);
                TriggerAddEventUnitSelected(gt_GreedQuest0TalktoGreed, UnitRefFromUnit(UnitFromId(4924)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Greed  Quest 0 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_GreedQuest0QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4924)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.greedQuests[0].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.greedQuests[0].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/8FAD68D6&quot;), StringExternal(&quot;Param/Value/9168B955&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.greedQuests[0].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.greedQuests[0].textTag, StringToText(&quot;&quot;));
                MinimapPing(PlayerGroupSingle(EventPlayer()), UnitGetPosition(UnitFromId(4937)), 15.0, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GreedQuest0QuestAccept_Init () {
                gt_GreedQuest0QuestAccept = TriggerCreate(&quot;gt_GreedQuest0QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_GreedQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Greed Quest 0 - Find Mister Scruffers
            //--------------------------------------------------------------------------------------------------
            bool gt_GreedQuest0FindMisterScruffers_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(EventUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
                        return false;
                    }
                    if (!((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.greedQuests[0].progress == 1))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_qPI].quests.greedQuests[0].progress = 2;
                ObjectiveSetState(gv_players[lv_qPI].quests.greedQuests[0].objective, c_objectiveStateCompleted);
                TextTagSetText(gv_players[lv_qPI].quests.greedQuests[0].textTag, StringExternal(&quot;Param/Value/1B0CFA23&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GreedQuest0FindMisterScruffers_Init () {
                gt_GreedQuest0FindMisterScruffers = TriggerCreate(&quot;gt_GreedQuest0FindMisterScruffers_Func&quot;);
                TriggerAddEventUnitRegion(gt_GreedQuest0FindMisterScruffers, null, RegionCircle(UnitGetPosition(UnitFromId(4937)), 3.0), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Greed Quest 0 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_GreedQuest0RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4924)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.greedQuests[0].progress == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.greedQuests[0].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Greed0-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.greedQuests[0].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.greedQuests[0].objective);
                gv_players[lv_tPI].quests.greedQuests[0].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                gf_AddExperience(gv_players[lv_tPI].dragon, 1500.0);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 10000));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/10B63590&quot;));
                TextTagDestroy(gv_players[lv_tPI].quests.greedQuests[0].textTag);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GreedQuest0RewardAccept_Init () {
                gt_GreedQuest0RewardAccept = TriggerCreate(&quot;gt_GreedQuest0RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_GreedQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Madeleine Quest 0 - Talk to Madeleine
            //--------------------------------------------------------------------------------------------------
            bool gt_MadeleineQuest0TalktoMadeleine_Func (bool testConds, bool runActions) {
                int autoC2B1B1C3_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSelect(gv_players[lv_qPI].dragon, EventPlayer(), true);
                if ((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4945)), 3.0)) == true)) {
                    autoC2B1B1C3_val = gv_players[lv_qPI].quests.madelineQuests[0].progress;
                    if (autoC2B1B1C3_val == 0) {
                        gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/EBE16247&quot;), StringExternal(&quot;Param/Value/724DC8F1&quot;), StringExternal(&quot;Param/Value/C5689B89&quot;), StringExternal(&quot;Param/Value/89D4B089&quot;));
                    }
                    else if (autoC2B1B1C3_val == 1) {
                        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/584E83EC&quot;));
                    }
                    else if (autoC2B1B1C3_val == 2) {
                        gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/AEEC4072&quot;), StringExternal(&quot;Param/Value/36BF1515&quot;));
                        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4945)), c_animNameDefault, &quot;Jump&quot;, 0, c_animTimeDefault);
                    }
                    else {
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MadeleineQuest0TalktoMadeleine_Init () {
                gt_MadeleineQuest0TalktoMadeleine = TriggerCreate(&quot;gt_MadeleineQuest0TalktoMadeleine_Func&quot;);
                TriggerAddEventUnitSelected(gt_MadeleineQuest0TalktoMadeleine, UnitRefFromUnit(UnitFromId(4945)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Madeleine Quest 0 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_MadeleineQuest0QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4945)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.madelineQuests[0].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.madelineQuests[0].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/A4E28FF5&quot;), StringExternal(&quot;Param/Value/9F56823C&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.madelineQuests[0].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.madelineQuests[0].textTag, StringToText(&quot;&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MadeleineQuest0QuestAccept_Init () {
                gt_MadeleineQuest0QuestAccept = TriggerCreate(&quot;gt_MadeleineQuest0QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_MadeleineQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Madeleine Quest 0 - Kill 30 Karramarros
            //--------------------------------------------------------------------------------------------------
            bool gt_MadeleineQuest0Kill30Karramarros_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                int lv_pPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;Karramarro&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
                    if ((gv_players[lv_pPI].quests.madelineQuests[0].progress == 1)) {
                        gv_players[lv_pPI].quests.madelineQuests[0].kills += 1;
                        ObjectiveSetName(gv_players[lv_pPI].quests.madelineQuests[0].objective, (StringExternal(&quot;Param/Value/FBCDD588&quot;) + (IntToText((30 - gv_players[lv_pPI].quests.madelineQuests[0].kills)) + StringExternal(&quot;Param/Value/C04FAF36&quot;))));
                        if ((gv_players[lv_pPI].quests.madelineQuests[0].kills == 30)) {
                            gv_players[lv_pPI].quests.madelineQuests[0].progress = 2;
                            ObjectiveSetState(gv_players[lv_pPI].quests.madelineQuests[0].objective, c_objectiveStateCompleted);
                            TextTagSetText(gv_players[lv_pPI].quests.madelineQuests[0].textTag, StringExternal(&quot;Param/Value/AF200266&quot;));
                        }
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MadeleineQuest0Kill30Karramarros_Init () {
                gt_MadeleineQuest0Kill30Karramarros = TriggerCreate(&quot;gt_MadeleineQuest0Kill30Karramarros_Func&quot;);
                TriggerAddEventUnitDied(gt_MadeleineQuest0Kill30Karramarros, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Madeleine Quest 0 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_MadeleineQuest0RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4945)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.madelineQuests[0].progress == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.madelineQuests[0].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Madeleine0-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.madelineQuests[0].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.madelineQuests[0].objective);
                gv_players[lv_tPI].quests.madelineQuests[0].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                gf_AddExperience(gv_players[lv_tPI].dragon, 1500.0);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 7500));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/F3203442&quot;));
                TextTagDestroy(gv_players[lv_tPI].quests.madelineQuests[0].textTag);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MadeleineQuest0RewardAccept_Init () {
                gt_MadeleineQuest0RewardAccept = TriggerCreate(&quot;gt_MadeleineQuest0RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_MadeleineQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Malin Quest 0 - Talk to Malin
            //--------------------------------------------------------------------------------------------------
            bool gt_MalinQuest0TalktoMalin_Func (bool testConds, bool runActions) {
                int auto23E309C6_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(2516)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                auto23E309C6_val = gv_players[lv_qPI].quests.malinQuests[0].progress;
                if (auto23E309C6_val == 0) {
                    gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/BE16FE16&quot;), StringExternal(&quot;Param/Value/C5D45F44&quot;), StringExternal(&quot;Param/Value/7EDB808B&quot;), StringExternal(&quot;Param/Value/95014774&quot;));
                }
                else if (auto23E309C6_val == 1) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/AA5D2DAB&quot;));
                }
                else if (auto23E309C6_val == 2) {
                    gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/38B53DC8&quot;), StringExternal(&quot;Param/Value/B4F7F0B0&quot;));
                }
                else if (auto23E309C6_val == 1) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/09B716BE&quot;));
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MalinQuest0TalktoMalin_Init () {
                gt_MalinQuest0TalktoMalin = TriggerCreate(&quot;gt_MalinQuest0TalktoMalin_Func&quot;);
                TriggerAddEventUnitSelected(gt_MalinQuest0TalktoMalin, UnitRefFromUnit(UnitFromId(2516)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_MalinQuest0TalktoMalin, UnitRefFromUnit(UnitFromId(2516)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_MalinQuest0TalktoMalin, UnitRefFromUnit(UnitFromId(2516)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Malin Quest 0 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_MalinQuest0QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(2516)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.malinQuests[0].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.malinQuests[0].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/2C399FC9&quot;), StringExternal(&quot;Param/Value/2FDE90B5&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.malinQuests[0].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.malinQuests[0].textTag, StringToText(&quot;&quot;));
                if ((gv_robus == UnitFromId(632))) {
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Robus&quot;, 0, 15, PointFromId(4140), UnitGetPosition(UnitFromId(2516)));
                    gv_robus = UnitLastCreated();
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MalinQuest0QuestAccept_Init () {
                gt_MalinQuest0QuestAccept = TriggerCreate(&quot;gt_MalinQuest0QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_MalinQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Malin Quest 0 - Kill Robus
            //--------------------------------------------------------------------------------------------------
            bool gt_MalinQuest0KillRobus_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_robus = UnitFromId(632);
                UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionFromId(264), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_qPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
                    if ((gv_players[lv_qPI].quests.malinQuests[0].progress == 1)) {
                        gv_players[lv_qPI].quests.malinQuests[0].progress = 2;
                        ObjectiveSetState(gv_players[lv_qPI].quests.malinQuests[0].objective, c_objectiveStateCompleted);
                        TextTagSetText(gv_players[lv_qPI].quests.malinQuests[0].textTag, StringExternal(&quot;Param/Value/2BF560CD&quot;));
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MalinQuest0KillRobus_Init () {
                gt_MalinQuest0KillRobus = TriggerCreate(&quot;gt_MalinQuest0KillRobus_Func&quot;);
                TriggerAddEventUnitDied(gt_MalinQuest0KillRobus, UnitRefFromVariable(&quot;gv_robus&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Malin Quest 0 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_MalinQuest0RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(2516)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.malinQuests[0].progress == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.malinQuests[0].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Malin0-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.malinQuests[0].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.malinQuests[0].objective);
                gv_players[lv_tPI].quests.malinQuests[0].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/DAC0C4F2&quot;));
                UnitInventoryCreate(gv_players[lv_tPI].dragon, &quot;CarrionNeedles&quot;);
                gf_AddExperience(gv_players[lv_tPI].dragon, 2000);
                TextTagDestroy(gv_players[lv_tPI].quests.malinQuests[0].textTag);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MalinQuest0RewardAccept_Init () {
                gt_MalinQuest0RewardAccept = TriggerCreate(&quot;gt_MalinQuest0RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_MalinQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Amp Quest 0 - Talk to Amp
            //--------------------------------------------------------------------------------------------------
            bool gt_AmpQuest0TalktoAmp_Func (bool testConds, bool runActions) {
                int auto7EF011A8_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSelect(gv_players[lv_qPI].dragon, EventPlayer(), true);
                if ((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(444)), 3.0)) == true)) {
                    auto7EF011A8_val = gv_players[lv_qPI].quests.ampQuests[0].progress;
                    if (auto7EF011A8_val == 0) {
                        gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/B3EC85D5&quot;), StringExternal(&quot;Param/Value/9595576E&quot;), StringExternal(&quot;Param/Value/F9E6F4B2&quot;), StringExternal(&quot;Param/Value/769AE758&quot;));
                    }
                    else if (auto7EF011A8_val == 1) {
                        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), (StringExternal(&quot;Param/Value/90233918&quot;) + (IntToText(((PlayerGroupCount(gv_humanPlayers) * 25) - gv_unitKills[3])) + StringExternal(&quot;Param/Value/5C36486F&quot;))));
                    }
                    else if (auto7EF011A8_val == 2) {
                        gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/73D38BE2&quot;), StringExternal(&quot;Param/Value/7540A50F&quot;));
                        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(444)), c_animNameDefault, &quot;Jump&quot;, 0, c_animTimeDefault);
                    }
                    else {
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AmpQuest0TalktoAmp_Init () {
                gt_AmpQuest0TalktoAmp = TriggerCreate(&quot;gt_AmpQuest0TalktoAmp_Func&quot;);
                TriggerAddEventUnitSelected(gt_AmpQuest0TalktoAmp, UnitRefFromUnit(UnitFromId(444)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Amp Quest 0 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_AmpQuest0QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(444)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.ampQuests[0].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.ampQuests[0].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/F5DB17C5&quot;), StringExternal(&quot;Param/Value/F2B500F3&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.ampQuests[0].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.ampQuests[0].textTag, StringToText(&quot;&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AmpQuest0QuestAccept_Init () {
                gt_AmpQuest0QuestAccept = TriggerCreate(&quot;gt_AmpQuest0QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_AmpQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Amp Quest 0 - Kill an Elite Creton Warrior
            //--------------------------------------------------------------------------------------------------
            bool gt_AmpQuest0KillanEliteCretonWarrior_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                int lv_pPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;EliteCretonWarrior&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
                    if ((gv_players[lv_pPI].quests.ampQuests[0].progress == 1)) {
                        gv_players[lv_pPI].quests.ampQuests[0].progress = 2;
                        ObjectiveSetState(gv_players[lv_pPI].quests.ampQuests[0].objective, c_objectiveStateCompleted);
                        TextTagSetText(gv_players[lv_pPI].quests.ampQuests[0].textTag, StringExternal(&quot;Param/Value/2C21F4B5&quot;));
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AmpQuest0KillanEliteCretonWarrior_Init () {
                gt_AmpQuest0KillanEliteCretonWarrior = TriggerCreate(&quot;gt_AmpQuest0KillanEliteCretonWarrior_Func&quot;);
                TriggerAddEventUnitDied(gt_AmpQuest0KillanEliteCretonWarrior, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Amp Quest 0 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_AmpQuest0RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(444)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.ampQuests[0].progress == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.ampQuests[0].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Amp0-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.ampQuests[0].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.ampQuests[0].objective);
                gv_players[lv_tPI].quests.ampQuests[0].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                gf_AddExperience(gv_players[lv_tPI].dragon, 2000.0);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 8000));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/4C1BFB18&quot;));
                TextTagDestroy(gv_players[lv_tPI].quests.ampQuests[0].textTag);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AmpQuest0RewardAccept_Init () {
                gt_AmpQuest0RewardAccept = TriggerCreate(&quot;gt_AmpQuest0RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_AmpQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Altoss Quest 0 - Talk to Altoss
            //--------------------------------------------------------------------------------------------------
            bool gt_AltossQuest0TalktoAltoss_Func (bool testConds, bool runActions) {
                int autoCE3B070D_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSelect(gv_players[lv_qPI].dragon, EventPlayer(), true);
                if ((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4946)), 3.0)) == true)) {
                    autoCE3B070D_val = gv_players[lv_qPI].quests.altossQuests[0].progress;
                    if (autoCE3B070D_val == 0) {
                        gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/88FA96CE&quot;), StringExternal(&quot;Param/Value/8996F279&quot;), StringExternal(&quot;Param/Value/D41137B8&quot;), StringExternal(&quot;Param/Value/53399252&quot;));
                    }
                    else if (autoCE3B070D_val == 1) {
                        gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/ECF4A654&quot;));
                    }
                    else if (autoCE3B070D_val == 2) {
                        gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/053D639D&quot;), StringExternal(&quot;Param/Value/5B4290DE&quot;));
                        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4946)), c_animNameDefault, &quot;Jump&quot;, 0, c_animTimeDefault);
                    }
                    else {
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AltossQuest0TalktoAltoss_Init () {
                gt_AltossQuest0TalktoAltoss = TriggerCreate(&quot;gt_AltossQuest0TalktoAltoss_Func&quot;);
                TriggerAddEventUnitSelected(gt_AltossQuest0TalktoAltoss, UnitRefFromUnit(UnitFromId(4946)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Altoss Quest 0 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_AltossQuest0QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4946)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.altossQuests[0].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.altossQuests[0].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/C8693973&quot;), StringToText(&quot;&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.altossQuests[0].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.altossQuests[0].textTag, StringToText(&quot;&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AltossQuest0QuestAccept_Init () {
                gt_AltossQuest0QuestAccept = TriggerCreate(&quot;gt_AltossQuest0QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_AltossQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Altoss Quest 0 - Kill 15 Odvratans
            //--------------------------------------------------------------------------------------------------
            bool gt_AltossQuest0Kill15Odvratans_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                int lv_pPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                    if (!((UnitGetType(EventUnit()) == &quot;Odvratan&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_pPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
                    if ((gv_players[lv_pPI].quests.altossQuests[0].progress == 1)) {
                        gv_players[lv_pPI].quests.altossQuests[0].kills += 1;
                        ObjectiveSetName(gv_players[lv_pPI].quests.altossQuests[0].objective, (StringExternal(&quot;Param/Value/A082B51B&quot;) + (IntToText((15 - gv_players[lv_pPI].quests.altossQuests[0].kills)) + StringExternal(&quot;Param/Value/21D0C555&quot;))));
                        if ((gv_players[lv_pPI].quests.altossQuests[0].kills == 15)) {
                            gv_players[lv_pPI].quests.altossQuests[0].progress = 2;
                            ObjectiveSetState(gv_players[lv_pPI].quests.altossQuests[0].objective, c_objectiveStateCompleted);
                            TextTagSetText(gv_players[lv_pPI].quests.altossQuests[0].textTag, StringExternal(&quot;Param/Value/733E3133&quot;));
                        }
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AltossQuest0Kill15Odvratans_Init () {
                gt_AltossQuest0Kill15Odvratans = TriggerCreate(&quot;gt_AltossQuest0Kill15Odvratans_Func&quot;);
                TriggerAddEventUnitDied(gt_AltossQuest0Kill15Odvratans, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Altoss Quest 0 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_AltossQuest0RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4946)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.altossQuests[0].progress == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.altossQuests[0].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Altoss0-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.altossQuests[0].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.altossQuests[0].objective);
                gv_players[lv_tPI].quests.altossQuests[0].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                gf_AddExperience(gv_players[lv_tPI].dragon, 3500.0);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 17500));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/15B40177&quot;));
                TextTagDestroy(gv_players[lv_tPI].quests.altossQuests[0].textTag);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AltossQuest0RewardAccept_Init () {
                gt_AltossQuest0RewardAccept = TriggerCreate(&quot;gt_AltossQuest0RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_AltossQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Illisus Locust Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_IllisusLocustSpawn_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupCount(UnitGroup(&quot;Karramarro&quot;, 15, RegionFromId(239), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt; 5))) {
                        return false;
                    }
                    if (!(((libNtve_gf_UnitInRegion(gv_players[0].dragon, RegionFromId(239)) == true) || (libNtve_gf_UnitInRegion(gv_players[1].dragon, RegionFromId(239)) == true) || (libNtve_gf_UnitInRegion(gv_players[2].dragon, RegionFromId(239)) == true) || (libNtve_gf_UnitInRegion(gv_players[3].dragon, RegionFromId(239)) == true)))) {
                        return false;
                    }
                    if (!((UnitGetType(gv_illisus) == &quot;Illisus&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitCreate(1, &quot;Karramarro&quot;, 0, 15, UnitGetPosition(gv_illisus), libNtve_gf_RandomAngle());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_IllisusLocustSpawn_Init () {
                gt_IllisusLocustSpawn = TriggerCreate(&quot;gt_IllisusLocustSpawn_Func&quot;);
                TriggerAddEventTimePeriodic(gt_IllisusLocustSpawn, 2.5, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Oleum Quest 0 - Talk to Oleum
            //--------------------------------------------------------------------------------------------------
            bool gt_OleumQuest0TalktoOleum_Func (bool testConds, bool runActions) {
                int auto8D30A0C7_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4381)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                auto8D30A0C7_val = gv_players[lv_qPI].quests.oleumQuests[0].progress;
                if (auto8D30A0C7_val == 0) {
                    gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/0AA64FA6&quot;), StringExternal(&quot;Param/Value/3E211E4A&quot;), StringExternal(&quot;Param/Value/CAA545D2&quot;), StringExternal(&quot;Param/Value/1630D13E&quot;));
                }
                else if (auto8D30A0C7_val == 1) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/3411017D&quot;));
                }
                else if (auto8D30A0C7_val == 2) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/779D797B&quot;));
                }
                else if (auto8D30A0C7_val == 3) {
                    gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/DB3EEE78&quot;), StringExternal(&quot;Param/Value/61359ACF&quot;));
                }
                else if (auto8D30A0C7_val == 4) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/7CEBCED8&quot;));
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OleumQuest0TalktoOleum_Init () {
                gt_OleumQuest0TalktoOleum = TriggerCreate(&quot;gt_OleumQuest0TalktoOleum_Func&quot;);
                TriggerAddEventUnitSelected(gt_OleumQuest0TalktoOleum, UnitRefFromUnit(UnitFromId(4381)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_OleumQuest0TalktoOleum, UnitRefFromUnit(UnitFromId(4381)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_OleumQuest0TalktoOleum, UnitRefFromUnit(UnitFromId(4381)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Oleum Quest 0 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_OleumQuest0QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4381)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.oleumQuests[0].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.oleumQuests[0].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/1DBB83B2&quot;), StringExternal(&quot;Param/Value/8803AD2E&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.oleumQuests[0].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.oleumQuests[0].textTag, StringToText(&quot;&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OleumQuest0QuestAccept_Init () {
                gt_OleumQuest0QuestAccept = TriggerCreate(&quot;gt_OleumQuest0QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_OleumQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Oleum Quest 0 - Find Crew 137
            //--------------------------------------------------------------------------------------------------
            bool gt_OleumQuest0FindCrew137_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(EventUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
                        return false;
                    }
                    if (!((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.oleumQuests[0].progress == 1))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_qPI].quests.oleumQuests[0].progress = 2;
                ObjectiveSetName(gv_players[lv_qPI].quests.oleumQuests[0].objective, StringExternal(&quot;Param/Value/517FDC8E&quot;));
                if ((gv_illisus == UnitFromId(632))) {
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Illisus&quot;, 0, 15, RegionGetCenter(RegionFromId(231)), UnitGetPosition(UnitFromId(4381)));
                    gv_illisus = UnitLastCreated();
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OleumQuest0FindCrew137_Init () {
                gt_OleumQuest0FindCrew137 = TriggerCreate(&quot;gt_OleumQuest0FindCrew137_Func&quot;);
                TriggerAddEventUnitRegion(gt_OleumQuest0FindCrew137, null, RegionFromId(231), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Oleum Quest 0 - Kill Illisus
            //--------------------------------------------------------------------------------------------------
            bool gt_OleumQuest0KillIllisus_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_illisus = UnitFromId(632);
                UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, null, UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_qPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
                    if ((gv_players[lv_qPI].quests.oleumQuests[0].progress == 2)) {
                        gv_players[lv_qPI].quests.oleumQuests[0].progress = 3;
                        ObjectiveSetState(gv_players[lv_qPI].quests.oleumQuests[0].objective, c_objectiveStateCompleted);
                        TextTagSetText(gv_players[lv_qPI].quests.oleumQuests[0].textTag, StringExternal(&quot;Param/Value/9D2545A5&quot;));
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OleumQuest0KillIllisus_Init () {
                gt_OleumQuest0KillIllisus = TriggerCreate(&quot;gt_OleumQuest0KillIllisus_Func&quot;);
                TriggerAddEventUnitDied(gt_OleumQuest0KillIllisus, UnitRefFromVariable(&quot;gv_illisus&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Oleum Quest 0 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_OleumQuest0RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(4381)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.oleumQuests[0].progress == 3))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.oleumQuests[0].progress = 4;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Oleum0-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.oleumQuests[0].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.oleumQuests[0].objective);
                gv_players[lv_tPI].quests.oleumQuests[0].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                gf_AddExperience(gv_players[lv_tPI].dragon, 2000.0);
                UnitInventoryCreate(gv_players[lv_tPI].dragon, &quot;MinerArmor&quot;);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/5DEC9FB0&quot;));
                TextTagDestroy(gv_players[lv_tPI].quests.oleumQuests[0].textTag);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OleumQuest0RewardAccept_Init () {
                gt_OleumQuest0RewardAccept = TriggerCreate(&quot;gt_OleumQuest0RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_OleumQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Seryn Quest 0 - Talk to Seryn
            //--------------------------------------------------------------------------------------------------
            bool gt_SerynQuest0TalktoSeryn_Func (bool testConds, bool runActions) {
                int auto542CA1D6_val;
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(2671)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.talking == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                auto542CA1D6_val = gv_players[lv_qPI].quests.serynQuests[0].progress;
                if (auto542CA1D6_val == 0) {
                    gf_OpenQuestDialog(EventPlayer(), StringExternal(&quot;Param/Value/CE4C241E&quot;), StringExternal(&quot;Param/Value/30903FF0&quot;), StringExternal(&quot;Param/Value/A2DA0541&quot;), StringExternal(&quot;Param/Value/87EFAAF6&quot;));
                }
                else if (auto542CA1D6_val == 1) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/69F3DB8A&quot;));
                }
                else if (auto542CA1D6_val == 2) {
                    gf_OpenRewardDialog(EventPlayer(), StringExternal(&quot;Param/Value/B25D8810&quot;), StringExternal(&quot;Param/Value/FCCCCCE3&quot;));
                }
                else if (auto542CA1D6_val == 3) {
                    gf_OpenTalkDialog(EventPlayer(), UnitTypeGetName(UnitGetType(EventUnit())), StringExternal(&quot;Param/Value/6D032057&quot;));
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SerynQuest0TalktoSeryn_Init () {
                gt_SerynQuest0TalktoSeryn = TriggerCreate(&quot;gt_SerynQuest0TalktoSeryn_Func&quot;);
                TriggerAddEventUnitSelected(gt_SerynQuest0TalktoSeryn, UnitRefFromUnit(UnitFromId(2671)), c_playerAny, true);
                TriggerAddEventUnitClick(gt_SerynQuest0TalktoSeryn, UnitRefFromUnit(UnitFromId(2671)), c_playerAny);
                TriggerAddEventUnitHighlight(gt_SerynQuest0TalktoSeryn, UnitRefFromUnit(UnitFromId(2671)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Seryn Quest 0 - Quest Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_SerynQuest0QuestAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.questDialog.accept) || (EventDialogControl() == gv_players[1].quests.questDialog.accept) || (EventDialogControl() == gv_players[2].quests.questDialog.accept) || (EventDialogControl() == gv_players[3].quests.questDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(2671)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.serynQuests[0].progress == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.serynQuests[0].progress = 1;
                ObjectiveCreateForPlayers(StringExternal(&quot;Param/Value/0AEE9B5F&quot;), StringExternal(&quot;Param/Value/A5AA44D2&quot;), c_objectiveStateActive, false, PlayerGroupSingle(EventPlayer()));
                gv_players[lv_tPI].quests.serynQuests[0].objective = ObjectiveLastCreated();
                gf_CloseQuestDialog(EventPlayer());
                TextTagSetText(gv_players[lv_tPI].quests.serynQuests[0].textTag, StringToText(&quot;&quot;));
                if ((gv_shadowSeryn == UnitFromId(632))) {
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;ShadowSeryn&quot;, 0, 15, RegionRandomPoint(RegionFromId(274)), UnitGetPosition(UnitFromId(2671)));
                    gv_shadowSeryn = UnitLastCreated();
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SerynQuest0QuestAccept_Init () {
                gt_SerynQuest0QuestAccept = TriggerCreate(&quot;gt_SerynQuest0QuestAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_SerynQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Seryn Quest 0 - Kill Seryn&apos;s Shadow
            //--------------------------------------------------------------------------------------------------
            bool gt_SerynQuest0KillSerynsShadow_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_qPI;
                // Variable Initialization
                lv_qPI = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_shadowSeryn = UnitFromId(632);
                UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, null, UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_qPI = (UnitGetOwner(UnitGroupLoopCurrent()) - 1);
                    if ((gv_players[lv_qPI].quests.serynQuests[0].progress == 1)) {
                        gv_players[lv_qPI].quests.serynQuests[0].progress = 2;
                        ObjectiveSetState(gv_players[lv_qPI].quests.serynQuests[0].objective, c_objectiveStateCompleted);
                        TextTagSetText(gv_players[lv_qPI].quests.serynQuests[0].textTag, StringExternal(&quot;Param/Value/FE6219AA&quot;));
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SerynQuest0KillSerynsShadow_Init () {
                gt_SerynQuest0KillSerynsShadow = TriggerCreate(&quot;gt_SerynQuest0KillSerynsShadow_Func&quot;);
                TriggerAddEventUnitDied(gt_SerynQuest0KillSerynsShadow, UnitRefFromVariable(&quot;gv_shadowSeryn&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Seryn Quest 0 - Reward Accept
            //--------------------------------------------------------------------------------------------------
            bool gt_SerynQuest0RewardAccept_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                unit lv_tempArmor;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Conditions
                if (testConds) {
                    if (!(((EventDialogControl() == gv_players[0].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[1].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[2].quests.rewardDialog.accept) || (EventDialogControl() == gv_players[3].quests.rewardDialog.accept)))) {
                        return false;
                    }
                    if (!((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(UnitFromId(2671)), 3.0)) == true))) {
                        return false;
                    }
                    if (!((gv_players[(EventPlayer() - 1)].quests.serynQuests[0].progress == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[lv_tPI].quests.serynQuests[0].progress = 3;
                BankValueSetFromInt(gv_players[lv_tPI].banks.dragonBank, &quot;SQ-Seryn0-0&quot;, PlayerHandle(EventPlayer()), gv_players[lv_tPI].quests.serynQuests[0].progress);
                ObjectiveDestroy(gv_players[lv_tPI].quests.serynQuests[0].objective);
                gv_players[lv_tPI].quests.serynQuests[0].objective = c_invalidObjectiveId;
                gf_CloseRewardDialog(EventPlayer());
                gf_AddExperience(gv_players[lv_tPI].dragon, 3250.0);
                UnitInventoryCreate(gv_players[lv_tPI].dragon, &quot;16M04N19E01R01&quot;);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/002A804B&quot;));
                TextTagDestroy(gv_players[lv_tPI].quests.serynQuests[0].textTag);
                libNtve_gf_AttachModelToUnit(UnitFromId(2671), &quot;ArtifactActivated&quot;, &quot;Ref_Origin&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SerynQuest0RewardAccept_Init () {
                gt_SerynQuest0RewardAccept = TriggerCreate(&quot;gt_SerynQuest0RewardAccept_Func&quot;);
                TriggerAddEventDialogControl(gt_SerynQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Chaos Unit Types
            //--------------------------------------------------------------------------------------------------
            bool gt_ChaosUnitTypes_Func (bool testConds, bool runActions) {
                int i;
                // Actions
                if (!runActions) {
                    return true;
                }
                   for(i = 0; i&lt;=18; i += 1){
                    gv_enemyUnitTypes[i] = &quot;Impetus&quot;;
                }
                //gv_enemyUnitTypes[0] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[1] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[2] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[3] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[4] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[5] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[6] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[7] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[8] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[9] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[10] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[11] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[12] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[13] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[14] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[15] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[16] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[17] = &quot;Impetus&quot;;
                //gv_enemyUnitTypes[18] = &quot;Impetus&quot;;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ChaosUnitTypes_Init () {
                int i = 0;
                gt_ChaosUnitTypes = TriggerCreate(&quot;gt_ChaosUnitTypes_Func&quot;);
                
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Syrital&apos;s Hatch
            //--------------------------------------------------------------------------------------------------
            bool gt_SyritalsHatch_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;SyritalsTalons&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_syritalsHatchActive = true;
                if ((gv_syritalsHatchActive == true) &amp;&amp; (gv_guardiansHatchActive == true) &amp;&amp; (gv_sremagsisHatchActive == true) &amp;&amp; (gv_machinaDePlagamsHatchActive == true) &amp;&amp; (gv_zauberersHatchActive == true)) {
                    SoundPlay(SoundLink(&quot;THorner03Tychus00046&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/6138A008&quot;));
                    TriggerEnable(gt_Chaos, true);
                    TriggerExecute(gt_ChaosUnitTypes, false, false);
                    UnitRemove(gv_zauberersCrystal);
                }
                else {
                    SoundPlay(SoundLink(&quot;Hatchery_Explode&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SyritalsHatch_Init () {
                gt_SyritalsHatch = TriggerCreate(&quot;gt_SyritalsHatch_Func&quot;);
                TriggerAddEventUnitRegion(gt_SyritalsHatch, null, RegionFromId(287), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Guardian&apos;s Hatch
            //--------------------------------------------------------------------------------------------------
            bool gt_GuardiansHatch_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetType(EventUnit()) == &quot;TolicsFireOrb&quot;) || (UnitGetType(EventUnit()) == &quot;KorlicsFrozenBlade&quot;) || (UnitGetType(EventUnit()) == &quot;MadawcsElectricArmor&quot;)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_guardiansHatchActive = true;
                if ((gv_syritalsHatchActive == true) &amp;&amp; (gv_guardiansHatchActive == true) &amp;&amp; (gv_sremagsisHatchActive == true) &amp;&amp; (gv_machinaDePlagamsHatchActive == true) &amp;&amp; (gv_zauberersHatchActive == true)) {
                    SoundPlay(SoundLink(&quot;THorner03Tychus00046&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/2872F80B&quot;));
                    TriggerEnable(gt_Chaos, true);
                    TriggerExecute(gt_ChaosUnitTypes, false, false);
                    UnitRemove(gv_zauberersCrystal);
                }
                else {
                    SoundPlay(SoundLink(&quot;Hatchery_Explode&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GuardiansHatch_Init () {
                gt_GuardiansHatch = TriggerCreate(&quot;gt_GuardiansHatch_Func&quot;);
                TriggerAddEventUnitRegion(gt_GuardiansHatch, null, RegionFromId(286), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sremagsi&apos;s Hatch
            //--------------------------------------------------------------------------------------------------
            bool gt_SremagsisHatch_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetType(EventUnit()) == &quot;SremagsisTentacles&quot;)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_sremagsisHatchActive = true;
                if ((gv_syritalsHatchActive == true) &amp;&amp; (gv_guardiansHatchActive == true) &amp;&amp; (gv_sremagsisHatchActive == true) &amp;&amp; (gv_machinaDePlagamsHatchActive == true) &amp;&amp; (gv_zauberersHatchActive == true)) {
                    SoundPlay(SoundLink(&quot;THorner03Tychus00046&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/F92D1A24&quot;));
                    TriggerEnable(gt_Chaos, true);
                    TriggerExecute(gt_ChaosUnitTypes, false, false);
                    UnitRemove(gv_zauberersCrystal);
                }
                else {
                    SoundPlay(SoundLink(&quot;Hatchery_Explode&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SremagsisHatch_Init () {
                gt_SremagsisHatch = TriggerCreate(&quot;gt_SremagsisHatch_Func&quot;);
                TriggerAddEventUnitRegion(gt_SremagsisHatch, null, RegionFromId(285), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Machina De Plagam&apos;s Hatch
            //--------------------------------------------------------------------------------------------------
            bool gt_MachinaDePlagamsHatch_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetType(EventUnit()) == &quot;PlagamArmor&quot;)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_machinaDePlagamsHatchActive = true;
                if ((gv_syritalsHatchActive == true) &amp;&amp; (gv_guardiansHatchActive == true) &amp;&amp; (gv_sremagsisHatchActive == true) &amp;&amp; (gv_machinaDePlagamsHatchActive == true) &amp;&amp; (gv_zauberersHatchActive == true)) {
                    SoundPlay(SoundLink(&quot;THorner03Tychus00046&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/76349601&quot;));
                    TriggerEnable(gt_Chaos, true);
                    TriggerExecute(gt_ChaosUnitTypes, false, false);
                    UnitRemove(gv_zauberersCrystal);
                }
                else {
                    SoundPlay(SoundLink(&quot;Hatchery_Explode&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MachinaDePlagamsHatch_Init () {
                gt_MachinaDePlagamsHatch = TriggerCreate(&quot;gt_MachinaDePlagamsHatch_Func&quot;);
                TriggerAddEventUnitRegion(gt_MachinaDePlagamsHatch, null, RegionFromId(284), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Zauberer&apos;s Hatch
            //--------------------------------------------------------------------------------------------------
            bool gt_ZauberersHatch_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetType(EventUnit()) == &quot;FluxCapacitor&quot;) || (UnitGetType(EventUnit()) == &quot;OblivionArmor&quot;) || (UnitGetType(EventUnit()) == &quot;OblivionClaws&quot;) || (UnitGetType(EventUnit()) == &quot;OblivionSpines&quot;)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_zauberersHatchActive = true;
                if ((gv_syritalsHatchActive == true) &amp;&amp; (gv_guardiansHatchActive == true) &amp;&amp; (gv_sremagsisHatchActive == true) &amp;&amp; (gv_machinaDePlagamsHatchActive == true) &amp;&amp; (gv_zauberersHatchActive == true)) {
                    SoundPlay(SoundLink(&quot;THorner03Tychus00046&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/53604CFB&quot;));
                    TriggerEnable(gt_Chaos, true);
                    TriggerExecute(gt_ChaosUnitTypes, false, false);
                    UnitRemove(gv_zauberersCrystal);
                }
                else {
                    SoundPlay(SoundLink(&quot;Hatchery_Explode&quot;, -1), PlayerGroupAll(), 100.0, 0.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ZauberersHatch_Init () {
                gt_ZauberersHatch = TriggerCreate(&quot;gt_ZauberersHatch_Func&quot;);
                TriggerAddEventUnitRegion(gt_ZauberersHatch, null, RegionFromId(283), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Arena Text 1
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnArenaText1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/D73DB820&quot;), 24, PointFromId(840), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnArenaText1_Init () {
                gt_SpawnArenaText1 = TriggerCreate(&quot;gt_SpawnArenaText1_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_SpawnArenaText1, null, PointFromId(840), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Arena Text 2
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnArenaText2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/3F0C33B9&quot;), 24, PointFromId(841), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnArenaText2_Init () {
                gt_SpawnArenaText2 = TriggerCreate(&quot;gt_SpawnArenaText2_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_SpawnArenaText2, null, PointFromId(841), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero Leaves Arena 1
            //--------------------------------------------------------------------------------------------------
            bool gt_HeroLeavesArena1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((gv_matchGoingOn == false) &amp;&amp; (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupRemove(gv_contestant1Group, gv_contestant1);
                gv_contestant1 = UnitFromId(632);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HeroLeavesArena1_Init () {
                gt_HeroLeavesArena1 = TriggerCreate(&quot;gt_HeroLeavesArena1_Func&quot;);
                TriggerAddEventUnitRegion(gt_HeroLeavesArena1, UnitRefFromVariable(&quot;gv_contestant1&quot;), RegionFromId(80), false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero Leaves Arena 2
            //--------------------------------------------------------------------------------------------------
            bool gt_HeroLeavesArena2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((gv_matchGoingOn == false) &amp;&amp; (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupRemove(gv_contestant2Group, gv_contestant2);
                gv_contestant2 = UnitFromId(630);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HeroLeavesArena2_Init () {
                gt_HeroLeavesArena2 = TriggerCreate(&quot;gt_HeroLeavesArena2_Func&quot;);
                TriggerAddEventUnitRegion(gt_HeroLeavesArena2, UnitRefFromVariable(&quot;gv_contestant2&quot;), RegionFromId(81), false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero Enters Arena 1
            //--------------------------------------------------------------------------------------------------
            bool gt_HeroEntersArena1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGroupCount(gv_contestant1Group, c_unitCountAlive) == 0) &amp;&amp; (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true) &amp;&amp; (UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_contestant1 = EventUnit();
                UnitGroupAdd(gv_contestant1Group, gv_contestant1);
                if ((gv_matchGoingOn == false)) {
                    if ((UnitGroupCount(gv_contestant2Group, c_unitCountAlive) == 1)) {
                        gv_respawnPoint[(UnitGetOwner(gv_contestant1) - 1)] = PointFromId(799);
                        gv_respawnPoint[(UnitGetOwner(gv_contestant2) - 1)] = PointFromId(799);
                        libNtve_gf_PauseUnit(gv_contestant1, true);
                        libNtve_gf_PauseUnit(gv_contestant2, true);
                        gv_matchGoingOn = true;
                        TextTagDestroy(gv_arenaWaitingTextTag);
                        UnitSetPosition(gv_contestant1, RegionGetCenter(RegionFromId(78)), false);
                        UnitSetPosition(gv_contestant2, RegionGetCenter(RegionFromId(79)), false);
                        CameraLockInput(UnitGetOwner(gv_contestant1), true);
                        CameraLockInput(UnitGetOwner(gv_contestant2), true);
                        CameraPan(UnitGetOwner(gv_contestant1), RegionGetCenter(RegionFromId(78)), 0.0, -1, 10, false);
                        CameraPan(UnitGetOwner(gv_contestant2), RegionGetCenter(RegionFromId(79)), 0.0, -1, 10, false);
                        UnitIssueOrder(gv_contestant1, Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                        UnitIssueOrder(gv_contestant2, Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                        UnitIssueOrder(gv_contestant1, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                        UnitIssueOrder(gv_contestant2, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(UnitGetOwner(gv_contestant1)) + (StringExternal(&quot;Param/Value/FD8424B6&quot;) + PlayerName(UnitGetOwner(gv_contestant2)))));
                        Wait(4.0, c_timeReal);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00020&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00020&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/CBDB183B&quot;));
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E65F377F&quot;));
                        Wait(1.0, c_timeReal);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00019&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00019&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/D680D068&quot;));
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/7DAB2D45&quot;));
                        Wait(1.0, c_timeReal);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00018&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00018&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/A40C6F3E&quot;));
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/92A1F572&quot;));
                        Wait(1.0, c_timeReal);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00017&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00017&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E057B9BE&quot;));
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/1601047B&quot;));
                        Wait(1.0, c_timeReal);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00016&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00016&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/C30FACB4&quot;));
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/C71179B0&quot;));
                        Wait(1.0, c_timeReal);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00012&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00012&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E44FA671&quot;));
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/4156CCA3&quot;));
                        libNtve_gf_SetAlliance(UnitGetOwner(gv_contestant1), UnitGetOwner(gv_contestant2), libNtve_ge_AllianceSetting_Enemy);
                        libNtve_gf_PauseUnit(gv_contestant1, false);
                        libNtve_gf_PauseUnit(gv_contestant2, false);
                        CameraLockInput(UnitGetOwner(gv_contestant1), false);
                        CameraLockInput(UnitGetOwner(gv_contestant2), false);
                        VisRevealerCreate(1, RegionFromId(77));
                        VisRevealerCreate(2, RegionFromId(77));
                        VisRevealerCreate(3, RegionFromId(77));
                        VisRevealerCreate(4, RegionFromId(77));
                        PlayerGroupAdd(gv_playersintheArena, UnitGetOwner(gv_contestant1));
                        PlayerGroupAdd(gv_playersintheArena, UnitGetOwner(gv_contestant2));
                    }
                    else {
                        TextTagCreate(StringExternal(&quot;Param/Value/C3ABD438&quot;), 24, PointFromId(842), 1.0, true, true, PlayerGroupAll());
                        gv_arenaWaitingTextTag = TextTagLastCreated();
                        TextTagSetTime(gv_arenaWaitingTextTag, c_textTagTimeDuration, 5.0);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HeroEntersArena1_Init () {
                gt_HeroEntersArena1 = TriggerCreate(&quot;gt_HeroEntersArena1_Func&quot;);
                TriggerAddEventUnitRegion(gt_HeroEntersArena1, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;), RegionFromId(80), true);
                TriggerAddEventUnitRegion(gt_HeroEntersArena1, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;), RegionFromId(80), true);
                TriggerAddEventUnitRegion(gt_HeroEntersArena1, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;), RegionFromId(80), true);
                TriggerAddEventUnitRegion(gt_HeroEntersArena1, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;), RegionFromId(80), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero Enters Arena 2
            //--------------------------------------------------------------------------------------------------
            bool gt_HeroEntersArena2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGroupCount(gv_contestant2Group, c_unitCountAlive) == 0) &amp;&amp; (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true) &amp;&amp; (UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_contestant2 = EventUnit();
                UnitGroupAdd(gv_contestant2Group, gv_contestant2);
                if ((gv_matchGoingOn == false)) {
                    if ((UnitGroupCount(gv_contestant1Group, c_unitCountAlive) == 1)) {
                        gv_respawnPoint[(UnitGetOwner(gv_contestant1) - 1)] = PointFromId(799);
                        gv_respawnPoint[(UnitGetOwner(gv_contestant2) - 1)] = PointFromId(799);
                        libNtve_gf_PauseUnit(gv_contestant1, true);
                        libNtve_gf_PauseUnit(gv_contestant2, true);
                        gv_matchGoingOn = true;
                        TextTagDestroy(gv_arenaWaitingTextTag);
                        UnitSetPosition(gv_contestant1, RegionGetCenter(RegionFromId(78)), false);
                        UnitSetPosition(gv_contestant2, RegionGetCenter(RegionFromId(79)), false);
                        CameraLockInput(UnitGetOwner(gv_contestant1), true);
                        CameraLockInput(UnitGetOwner(gv_contestant2), true);
                        CameraPan(UnitGetOwner(gv_contestant1), RegionGetCenter(RegionFromId(78)), 0.0, -1, 10, false);
                        CameraPan(UnitGetOwner(gv_contestant2), RegionGetCenter(RegionFromId(79)), 0.0, -1, 10, false);
                        UnitIssueOrder(gv_contestant1, Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                        UnitIssueOrder(gv_contestant2, Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                        UnitIssueOrder(gv_contestant1, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                        UnitIssueOrder(gv_contestant2, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(UnitGetOwner(gv_contestant1)) + (StringExternal(&quot;Param/Value/515280CE&quot;) + PlayerName(UnitGetOwner(gv_contestant2)))));
                        Wait(4.0, c_timeReal);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00020&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00020&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/486C1EB8&quot;));
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/F8E544B6&quot;));
                        Wait(1.0, c_timeReal);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00019&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00019&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E5B6B20B&quot;));
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/8DD508CD&quot;));
                        Wait(1.0, c_timeReal);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00018&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00018&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/4B31DF10&quot;));
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/D11ADA5E&quot;));
                        Wait(1.0, c_timeReal);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00017&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00017&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/4DE1EE78&quot;));
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/4F348A52&quot;));
                        Wait(1.0, c_timeReal);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00016&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00016&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/313BFA96&quot;));
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/3B3F826B&quot;));
                        Wait(1.0, c_timeReal);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00012&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
                        SoundPlay(SoundLink(&quot;ModUtilityVoiceModUtilityVoice00012&quot;, -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/10A1BB94&quot;));
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/1A107626&quot;));
                        libNtve_gf_SetAlliance(UnitGetOwner(gv_contestant1), UnitGetOwner(gv_contestant2), libNtve_ge_AllianceSetting_Enemy);
                        libNtve_gf_PauseUnit(gv_contestant1, false);
                        libNtve_gf_PauseUnit(gv_contestant2, false);
                        CameraLockInput(UnitGetOwner(gv_contestant1), false);
                        CameraLockInput(UnitGetOwner(gv_contestant2), false);
                        VisRevealerCreate(1, RegionFromId(77));
                        VisRevealerCreate(2, RegionFromId(77));
                        VisRevealerCreate(3, RegionFromId(77));
                        VisRevealerCreate(4, RegionFromId(77));
                    }
                    else {
                        TextTagCreate(StringExternal(&quot;Param/Value/3F2866C3&quot;), 24, PointFromId(842), 1.0, true, true, PlayerGroupAll());
                        gv_arenaWaitingTextTag = TextTagLastCreated();
                        TextTagSetTime(gv_arenaWaitingTextTag, c_textTagTimeDuration, 5.0);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HeroEntersArena2_Init () {
                gt_HeroEntersArena2 = TriggerCreate(&quot;gt_HeroEntersArena2_Func&quot;);
                TriggerAddEventUnitRegion(gt_HeroEntersArena2, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;), RegionFromId(81), true);
                TriggerAddEventUnitRegion(gt_HeroEntersArena2, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;), RegionFromId(81), true);
                TriggerAddEventUnitRegion(gt_HeroEntersArena2, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;), RegionFromId(81), true);
                TriggerAddEventUnitRegion(gt_HeroEntersArena2, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;), RegionFromId(81), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Contestant 1 Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_Contestant1Dies_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_winningAmmount;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[(UnitGetOwner(gv_contestant2) - 1)].stats.arena.wins += 1;
                gv_players[(UnitGetOwner(gv_contestant1) - 1)].stats.arena.losses += 1;
                libNtve_gf_SetAlliance(UnitGetOwner(gv_contestant1), UnitGetOwner(gv_contestant2), libNtve_ge_AllianceSetting_AllyWithSharedVision);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(UnitGetOwner(gv_contestant2)) + (StringExternal(&quot;Param/Value/E5ACB15C&quot;) + (IntToText(gv_players[(UnitGetOwner(gv_contestant2) - 1)].stats.level) + (StringExternal(&quot;Param/Value/A43FC730&quot;) + (PlayerName(UnitGetOwner(gv_contestant1)) + (StringExternal(&quot;Param/Value/54DD5501&quot;) + (IntToText(gv_players[(UnitGetOwner(gv_contestant1) - 1)].stats.level) + (StringExternal(&quot;Param/Value/F17C3378&quot;) + (FixedToText(UnitGetPropertyFixed(gv_contestant2, c_unitPropLife, c_unitPropCurrent), 2) + StringExternal(&quot;Param/Value/A494C013&quot;)))))))))));
                UnitSetPropertyFixed(gv_contestant2, c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(gv_contestant2, c_unitPropEnergyPercent, 100.0);
                UnitSetPropertyFixed(gv_contestant2, c_unitPropShieldsPercent, 100.0);
                lv_winningAmmount = (100.0 + (UnitGetPropertyFixed(gv_contestant1, c_unitPropLevel, c_unitPropCurrent) - UnitGetPropertyFixed(gv_contestant2, c_unitPropLevel, c_unitPropCurrent)));
                UnitGroupRemove(gv_contestant1Group, gv_contestant1);
                gv_contestant1 = UnitFromId(630);
                UnitSetPosition(gv_contestant2, PointFromId(844), false);
                UnitIssueOrder(gv_contestant2, Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                UnitIssueOrder(gv_contestant2, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                CameraPan(UnitGetOwner(gv_contestant2), PointFromId(844), 0.0, -1, 10, false);
                PlayerModifyPropertyInt(UnitGetOwner(gv_contestant2), c_playerPropVespene, c_playerPropOperAdd, FixedToInt(lv_winningAmmount));
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/F7D113B0&quot;) + (FixedToText(lv_winningAmmount, 0) + StringExternal(&quot;Param/Value/AE0C2D5D&quot;))));
                PlayerGroupClear(gv_playersintheArena);
                UnitGroupRemove(gv_contestant2Group, gv_contestant2);
                gv_contestant2 = null;
                gv_matchGoingOn = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Contestant1Dies_Init () {
                gt_Contestant1Dies = TriggerCreate(&quot;gt_Contestant1Dies_Func&quot;);
                TriggerAddEventUnitDied(gt_Contestant1Dies, UnitRefFromVariable(&quot;gv_contestant1&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Contestant 2 Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_Contestant2Dies_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_winningAmmount;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[(UnitGetOwner(gv_contestant1) - 1)].stats.arena.wins += 1;
                gv_players[(UnitGetOwner(gv_contestant2) - 1)].stats.arena.losses += 1;
                libNtve_gf_SetAlliance(UnitGetOwner(gv_contestant1), UnitGetOwner(gv_contestant2), libNtve_ge_AllianceSetting_AllyWithSharedVision);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(UnitGetOwner(gv_contestant1)) + (StringExternal(&quot;Param/Value/F48BA064&quot;) + (IntToText(gv_players[(UnitGetOwner(gv_contestant1) - 1)].stats.level) + (StringExternal(&quot;Param/Value/E1AF3427&quot;) + (PlayerName(UnitGetOwner(gv_contestant2)) + (StringExternal(&quot;Param/Value/D63E8112&quot;) + (IntToText(gv_players[(UnitGetOwner(gv_contestant2) - 1)].stats.level) + (StringExternal(&quot;Param/Value/EC586C99&quot;) + (FixedToText(UnitGetPropertyFixed(gv_contestant1, c_unitPropLife, c_unitPropCurrent), 2) + StringExternal(&quot;Param/Value/9B709EAA&quot;)))))))))));
                UnitSetPropertyFixed(gv_contestant1, c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(gv_contestant1, c_unitPropEnergyPercent, 100.0);
                UnitSetPropertyFixed(gv_contestant1, c_unitPropShieldsPercent, 100.0);
                lv_winningAmmount = (100.0 + (UnitGetPropertyFixed(gv_contestant2, c_unitPropLevel, c_unitPropCurrent) - UnitGetPropertyFixed(gv_contestant1, c_unitPropLevel, c_unitPropCurrent)));
                UnitGroupRemove(gv_contestant2Group, gv_contestant2);
                gv_contestant2 = UnitFromId(632);
                UnitSetPosition(gv_contestant1, PointFromId(844), false);
                UnitIssueOrder(gv_contestant1, Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                UnitIssueOrder(gv_contestant1, Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                CameraPan(UnitGetOwner(gv_contestant1), PointFromId(844), 0.0, -1, 10, false);
                PlayerModifyPropertyInt(UnitGetOwner(gv_contestant1), c_playerPropVespene, c_playerPropOperAdd, FixedToInt(lv_winningAmmount));
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/D7C69713&quot;) + (FixedToText(lv_winningAmmount, 0) + StringExternal(&quot;Param/Value/B81843D9&quot;))));
                PlayerGroupClear(gv_playersintheArena);
                UnitGroupRemove(gv_contestant1Group, gv_contestant1);
                gv_contestant1 = null;
                gv_matchGoingOn = false;
                CameraPan(UnitGetOwner(gv_contestant1), PointFromId(844), 0.0, -1, 10, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Contestant2Dies_Init () {
                gt_Contestant2Dies = TriggerCreate(&quot;gt_Contestant2Dies_Func&quot;);
                TriggerAddEventUnitDied(gt_Contestant2Dies, UnitRefFromVariable(&quot;gv_contestant2&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Open Inventory when click on stash
            //--------------------------------------------------------------------------------------------------
            bool gt_OpenInventorywhenclickonstash_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitAbilityExists(EventUnit(), &quot;StashInventory&quot;) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), &quot;Stash1&quot;, c_techCountCompleteOnly) &gt; 0)) {
                    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 1, true);
                }
                else {
                    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 1, false);
                }
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), &quot;Stash12&quot;, c_techCountCompleteOnly) &gt; 0)) {
                    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 2, true);
                }
                else {
                    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 2, false);
                }
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), &quot;Stash13&quot;, c_techCountCompleteOnly) &gt; 0)) {
                    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 3, true);
                }
                else {
                    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 3, false);
                }
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), &quot;Stash14&quot;, c_techCountCompleteOnly) &gt; 0)) {
                    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 4, true);
                }
                else {
                    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 4, false);
                }
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), &quot;Stash15&quot;, c_techCountCompleteOnly) &gt; 0)) {
                    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 5, true);
                }
                else {
                    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 5, false);
                }
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), &quot;Stash16&quot;, c_techCountCompleteOnly) &gt; 0)) {
                    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 6, true);
                }
                else {
                    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 6, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OpenInventorywhenclickonstash_Init () {
                gt_OpenInventorywhenclickonstash = TriggerCreate(&quot;gt_OpenInventorywhenclickonstash_Func&quot;);
                TriggerAddEventUnitSelected(gt_OpenInventorywhenclickonstash, UnitRefFromVariable(&quot;gv_stash[0]&quot;), c_playerAny, true);
                TriggerAddEventUnitSelected(gt_OpenInventorywhenclickonstash, UnitRefFromVariable(&quot;gv_stash[1]&quot;), c_playerAny, true);
                TriggerAddEventUnitSelected(gt_OpenInventorywhenclickonstash, UnitRefFromVariable(&quot;gv_stash[2]&quot;), c_playerAny, true);
                TriggerAddEventUnitSelected(gt_OpenInventorywhenclickonstash, UnitRefFromVariable(&quot;gv_stash[3]&quot;), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Drop stuff not unlocked yet
            //--------------------------------------------------------------------------------------------------
            bool gt_Dropstuffnotunlockedyet_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), &quot;Stash1&quot;, c_techCountCompleteOnly) == 0)) {
                    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 1)) {
                            UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
                            UnitInventoryRemove(UnitGroupLoopCurrent());
                            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/79C3CACF&quot;));
                        }
                    }
                    UnitGroupLoopEnd();
                }
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), &quot;Stash12&quot;, c_techCountCompleteOnly) == 0)) {
                    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 2)) {
                            UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
                            UnitInventoryRemove(UnitGroupLoopCurrent());
                            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/8A5A42C4&quot;));
                        }
                    }
                    UnitGroupLoopEnd();
                }
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), &quot;Stash13&quot;, c_techCountCompleteOnly) == 0)) {
                    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
                            UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
                            UnitInventoryRemove(UnitGroupLoopCurrent());
                            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/26EAADF9&quot;));
                        }
                    }
                    UnitGroupLoopEnd();
                }
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), &quot;Stash14&quot;, c_techCountCompleteOnly) == 0)) {
                    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 4)) {
                            UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
                            UnitInventoryRemove(UnitGroupLoopCurrent());
                            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/BFCA3806&quot;));
                        }
                    }
                    UnitGroupLoopEnd();
                }
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), &quot;Stash15&quot;, c_techCountCompleteOnly) == 0)) {
                    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 5)) {
                            UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
                            UnitInventoryRemove(UnitGroupLoopCurrent());
                            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/52EA9DC9&quot;));
                        }
                    }
                    UnitGroupLoopEnd();
                }
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), &quot;Stash16&quot;, c_techCountCompleteOnly) == 0)) {
                    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 6)) {
                            UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
                            UnitInventoryRemove(UnitGroupLoopCurrent());
                            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/CC44A819&quot;));
                        }
                    }
                    UnitGroupLoopEnd();
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Dropstuffnotunlockedyet_Init () {
                gt_Dropstuffnotunlockedyet = TriggerCreate(&quot;gt_Dropstuffnotunlockedyet_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_Dropstuffnotunlockedyet, UnitRefFromVariable(&quot;gv_stash[0]&quot;), c_unitInventoryChangeMoves, null);
                TriggerAddEventUnitInventoryChange(gt_Dropstuffnotunlockedyet, UnitRefFromVariable(&quot;gv_stash[1]&quot;), c_unitInventoryChangeMoves, null);
                TriggerAddEventUnitInventoryChange(gt_Dropstuffnotunlockedyet, UnitRefFromVariable(&quot;gv_stash[2]&quot;), c_unitInventoryChangeMoves, null);
                TriggerAddEventUnitInventoryChange(gt_Dropstuffnotunlockedyet, UnitRefFromVariable(&quot;gv_stash[3]&quot;), c_unitInventoryChangeMoves, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Potion Hotkey P1
            //--------------------------------------------------------------------------------------------------
            bool gt_PotionHotkeyP1_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_iPI;
                int lv_iP;
                unit lv_sHP;
                unit lv_mHP;
                unit lv_lHP;
                unit lv_gHP;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_iPI = 0;
                lv_iP = 1;
                UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_iPI].dragon));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;SmallHealthPotion&quot;)) {
                        lv_sHP = UnitGroupLoopCurrent();
                    }
                    else {
                        if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;MediumHealthPotion&quot;)) {
                            lv_mHP = UnitGroupLoopCurrent();
                        }
                        else {
                            if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;LargeHealthPotion&quot;)) {
                                lv_lHP = UnitGroupLoopCurrent();
                            }
                            else {
                                if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;GrandHealthPotion&quot;)) {
                                    lv_gHP = UnitGroupLoopCurrent();
                                }
                            }
                        }
                    }
                }
                UnitGroupLoopEnd();
                if (((lv_sHP != null) || (lv_mHP != null) || (lv_lHP != null) || (lv_gHP != null))) {
                    if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) != 0.0)) {
                        if ((UnitGetCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName) &lt;= 0.0)) {
                            if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 0.0) &amp;&amp; (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &lt;= 100.0)) {
                                if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0) &amp;&amp; (lv_sHP != null)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                    TextTagCreate(StringExternal(&quot;Param/Value/BCDAA2DF&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0) &amp;&amp; (lv_mHP != null)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                        TextTagCreate(StringExternal(&quot;Param/Value/AA4C7E34&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0) &amp;&amp; (lv_lHP != null)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/6C6D61A4&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0) &amp;&amp; (lv_gHP != null)) {
                                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                                TextTagCreate(StringExternal(&quot;Param/Value/67A573EC&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                            }
                                            else {
                                                TextTagCreate(StringExternal(&quot;Param/Value/9A1ABDEA&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 100.0) &amp;&amp; (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &lt;= 250.0)) {
                                    if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0) &amp;&amp; (lv_mHP != null)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                        TextTagCreate(StringExternal(&quot;Param/Value/35007132&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0) &amp;&amp; (lv_lHP != null)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/56B61472&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0) &amp;&amp; (lv_gHP != null)) {
                                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                                TextTagCreate(StringExternal(&quot;Param/Value/8BE2918B&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                            }
                                            else {
                                                if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0) &amp;&amp; (lv_sHP != null)) {
                                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                    UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                                    TextTagCreate(StringExternal(&quot;Param/Value/3D62AC12&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                }
                                                else {
                                                    TextTagCreate(StringExternal(&quot;Param/Value/C85EC397&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 250.0) &amp;&amp; (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &lt;= 500.0)) {
                                        if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0) &amp;&amp; (lv_lHP != null)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/36717869&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0) &amp;&amp; (lv_gHP != null)) {
                                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                                TextTagCreate(StringExternal(&quot;Param/Value/B988CA39&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                            }
                                            else {
                                                if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0) &amp;&amp; (lv_mHP != null)) {
                                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                    UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                                    TextTagCreate(StringExternal(&quot;Param/Value/04941F90&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                }
                                                else {
                                                    if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0) &amp;&amp; (lv_sHP != null)) {
                                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                        UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                                        TextTagCreate(StringExternal(&quot;Param/Value/EAF583BC&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                    }
                                                    else {
                                                        TextTagCreate(StringExternal(&quot;Param/Value/25ABBE34&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 500.0)) {
                                            if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0) &amp;&amp; (lv_gHP != null)) {
                                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                                TextTagCreate(StringExternal(&quot;Param/Value/6D80E3E6&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                            }
                                            else {
                                                if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0) &amp;&amp; (lv_lHP != null)) {
                                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                    UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                                    TextTagCreate(StringExternal(&quot;Param/Value/CF16A979&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                }
                                                else {
                                                    if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0) &amp;&amp; (lv_mHP != null)) {
                                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                        UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                                        TextTagCreate(StringExternal(&quot;Param/Value/3A0312A1&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                    }
                                                    else {
                                                        if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0) &amp;&amp; (lv_sHP != null)) {
                                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                            UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                                            TextTagCreate(StringExternal(&quot;Param/Value/0518148A&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                        }
                                                        else {
                                                            TextTagCreate(StringExternal(&quot;Param/Value/389CC43C&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            TextTagCreate(StringExternal(&quot;Param/Value/1F45E83A&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                        }
                    }
                    else {
                        TextTagCreate(StringExternal(&quot;Param/Value/F6872929&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    }
                }
                else {
                    TextTagCreate(StringExternal(&quot;Param/Value/BCD98EBD&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PotionHotkeyP1_Init () {
                gt_PotionHotkeyP1 = TriggerCreate(&quot;gt_PotionHotkeyP1_Func&quot;);
                TriggerAddEventButtonPressed(gt_PotionHotkeyP1, 1, &quot;UsePotion&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Potion Hotkey P2
            //--------------------------------------------------------------------------------------------------
            bool gt_PotionHotkeyP2_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_iPI;
                int lv_iP;
                unit lv_sHP;
                unit lv_mHP;
                unit lv_lHP;
                unit lv_gHP;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_iPI = 1;
                lv_iP = 2;
                UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_iPI].dragon));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;SmallHealthPotion&quot;)) {
                        lv_sHP = UnitGroupLoopCurrent();
                    }
                    else {
                        if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;MediumHealthPotion&quot;)) {
                            lv_mHP = UnitGroupLoopCurrent();
                        }
                        else {
                            if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;LargeHealthPotion&quot;)) {
                                lv_lHP = UnitGroupLoopCurrent();
                            }
                            else {
                                if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;GrandHealthPotion&quot;)) {
                                    lv_gHP = UnitGroupLoopCurrent();
                                }
                            }
                        }
                    }
                }
                UnitGroupLoopEnd();
                if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) != 0.0)) {
                    if ((UnitGetCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName) &lt;= 0.0)) {
                        if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 0.0) &amp;&amp; (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &lt;= 100.0)) {
                            if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                TextTagCreate(StringExternal(&quot;Param/Value/1D045780&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                    TextTagCreate(StringExternal(&quot;Param/Value/4647C1FD&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                        TextTagCreate(StringExternal(&quot;Param/Value/8CCF9F59&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/A3035116&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            TextTagCreate(StringExternal(&quot;Param/Value/921C5D2D&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 100.0) &amp;&amp; (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &lt;= 250.0)) {
                                if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                    TextTagCreate(StringExternal(&quot;Param/Value/ED6D1F51&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                        TextTagCreate(StringExternal(&quot;Param/Value/8C1AE928&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/BA9D3D10&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0)) {
                                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                                TextTagCreate(StringExternal(&quot;Param/Value/50714DAC&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                            }
                                            else {
                                                TextTagCreate(StringExternal(&quot;Param/Value/872DD75E&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 250.0) &amp;&amp; (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &lt;= 500.0)) {
                                    if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                        TextTagCreate(StringExternal(&quot;Param/Value/95D1F36E&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/553CAB51&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0)) {
                                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                                TextTagCreate(StringExternal(&quot;Param/Value/187F076C&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                            }
                                            else {
                                                if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0)) {
                                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                    UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                                    TextTagCreate(StringExternal(&quot;Param/Value/6AE3D28C&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                }
                                                else {
                                                    TextTagCreate(StringExternal(&quot;Param/Value/2B019AA6&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 500.0)) {
                                        if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/DCC6C75B&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0)) {
                                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                                TextTagCreate(StringExternal(&quot;Param/Value/E6512FED&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                            }
                                            else {
                                                if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0)) {
                                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                    UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                                    TextTagCreate(StringExternal(&quot;Param/Value/BDA99B77&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                }
                                                else {
                                                    if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0)) {
                                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                        UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                                        TextTagCreate(StringExternal(&quot;Param/Value/A108E2EB&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                    }
                                                    else {
                                                        TextTagCreate(StringExternal(&quot;Param/Value/00B4574D&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        TextTagCreate(StringExternal(&quot;Param/Value/3A4222B0&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    }
                }
                else {
                    TextTagCreate(StringExternal(&quot;Param/Value/5C863F6E&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PotionHotkeyP2_Init () {
                gt_PotionHotkeyP2 = TriggerCreate(&quot;gt_PotionHotkeyP2_Func&quot;);
                TriggerAddEventButtonPressed(gt_PotionHotkeyP2, 2, &quot;UsePotion&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Potion Hotkey P3
            //--------------------------------------------------------------------------------------------------
            bool gt_PotionHotkeyP3_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_iPI;
                int lv_iP;
                unit lv_sHP;
                unit lv_mHP;
                unit lv_lHP;
                unit lv_gHP;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_iPI = 2;
                lv_iP = 3;
                UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_iPI].dragon));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;SmallHealthPotion&quot;)) {
                        lv_sHP = UnitGroupLoopCurrent();
                    }
                    else {
                        if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;MediumHealthPotion&quot;)) {
                            lv_mHP = UnitGroupLoopCurrent();
                        }
                        else {
                            if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;LargeHealthPotion&quot;)) {
                                lv_lHP = UnitGroupLoopCurrent();
                            }
                            else {
                                if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;GrandHealthPotion&quot;)) {
                                    lv_gHP = UnitGroupLoopCurrent();
                                }
                            }
                        }
                    }
                }
                UnitGroupLoopEnd();
                if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) != 0.0)) {
                    if ((UnitGetCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName) &lt;= 0.0)) {
                        if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 0.0) &amp;&amp; (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &lt;= 100.0)) {
                            if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                TextTagCreate(StringExternal(&quot;Param/Value/CFB458AE&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                    TextTagCreate(StringExternal(&quot;Param/Value/5B70970A&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                        TextTagCreate(StringExternal(&quot;Param/Value/C322E4A6&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/E0D6114B&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            TextTagCreate(StringExternal(&quot;Param/Value/2B56444A&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 100.0) &amp;&amp; (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &lt;= 250.0)) {
                                if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                    TextTagCreate(StringExternal(&quot;Param/Value/BA82A05D&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                        TextTagCreate(StringExternal(&quot;Param/Value/6A25F76F&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/56AABACD&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0)) {
                                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                                TextTagCreate(StringExternal(&quot;Param/Value/7DCB126A&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                            }
                                            else {
                                                TextTagCreate(StringExternal(&quot;Param/Value/51467DAF&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 250.0) &amp;&amp; (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &lt;= 500.0)) {
                                    if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                        TextTagCreate(StringExternal(&quot;Param/Value/5DE1E23C&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/7CD8C421&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0)) {
                                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                                TextTagCreate(StringExternal(&quot;Param/Value/904ABFCA&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                            }
                                            else {
                                                if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0)) {
                                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                    UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                                    TextTagCreate(StringExternal(&quot;Param/Value/DD307554&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                }
                                                else {
                                                    TextTagCreate(StringExternal(&quot;Param/Value/876F8BB7&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 500.0)) {
                                        if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/4D82AEB8&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0)) {
                                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                                TextTagCreate(StringExternal(&quot;Param/Value/669315A2&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                            }
                                            else {
                                                if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0)) {
                                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                    UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                                    TextTagCreate(StringExternal(&quot;Param/Value/6AFDE531&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                }
                                                else {
                                                    if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0)) {
                                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                        UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                                        TextTagCreate(StringExternal(&quot;Param/Value/D5C2D65F&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                    }
                                                    else {
                                                        TextTagCreate(StringExternal(&quot;Param/Value/7E1BDB44&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        TextTagCreate(StringExternal(&quot;Param/Value/43CA2959&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    }
                }
                else {
                    TextTagCreate(StringExternal(&quot;Param/Value/65DC86E2&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PotionHotkeyP3_Init () {
                gt_PotionHotkeyP3 = TriggerCreate(&quot;gt_PotionHotkeyP3_Func&quot;);
                TriggerAddEventButtonPressed(gt_PotionHotkeyP3, 3, &quot;UsePotion&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Potion Hotkey P4
            //--------------------------------------------------------------------------------------------------
            bool gt_PotionHotkeyP4_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_iPI;
                int lv_iP;
                unit lv_sHP;
                unit lv_mHP;
                unit lv_lHP;
                unit lv_gHP;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_iPI = 3;
                lv_iP = 4;
                UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_iPI].dragon));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;SmallHealthPotion&quot;)) {
                        lv_sHP = UnitGroupLoopCurrent();
                    }
                    else {
                        if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;MediumHealthPotion&quot;)) {
                            lv_mHP = UnitGroupLoopCurrent();
                        }
                        else {
                            if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;LargeHealthPotion&quot;)) {
                                lv_lHP = UnitGroupLoopCurrent();
                            }
                            else {
                                if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;GrandHealthPotion&quot;)) {
                                    lv_gHP = UnitGroupLoopCurrent();
                                }
                            }
                        }
                    }
                }
                UnitGroupLoopEnd();
                if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) != 0.0)) {
                    if ((UnitGetCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName) &lt;= 0.0)) {
                        if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 0.0) &amp;&amp; (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &lt;= 100.0)) {
                            if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0)) {
                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                TextTagCreate(StringExternal(&quot;Param/Value/F02CB623&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                            }
                            else {
                                if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                    TextTagCreate(StringExternal(&quot;Param/Value/905A669C&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                        TextTagCreate(StringExternal(&quot;Param/Value/771E3B32&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/C253BDD1&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            TextTagCreate(StringExternal(&quot;Param/Value/670ACBDF&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 100.0) &amp;&amp; (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &lt;= 250.0)) {
                                if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0)) {
                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                    UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                    TextTagCreate(StringExternal(&quot;Param/Value/715A967C&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                }
                                else {
                                    if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                        TextTagCreate(StringExternal(&quot;Param/Value/9B7978D5&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/4E0BE1DE&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0)) {
                                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                                TextTagCreate(StringExternal(&quot;Param/Value/062C0495&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                            }
                                            else {
                                                TextTagCreate(StringExternal(&quot;Param/Value/7C5C7E95&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 250.0) &amp;&amp; (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &lt;= 500.0)) {
                                    if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0)) {
                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                        UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                        TextTagCreate(StringExternal(&quot;Param/Value/5525CF51&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                    }
                                    else {
                                        if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/C0EE73E8&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0)) {
                                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                                TextTagCreate(StringExternal(&quot;Param/Value/639D49EF&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                            }
                                            else {
                                                if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0)) {
                                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                    UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                                    TextTagCreate(StringExternal(&quot;Param/Value/2A9B4BEB&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                }
                                                else {
                                                    TextTagCreate(StringExternal(&quot;Param/Value/67799F63&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) &gt; 500.0)) {
                                        if ((UnitGetChargeUsed(lv_gHP, gv_stackChargeNames[3]) &lt; 4893.0)) {
                                            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;GrandHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                            UnitAddChargeUsed(lv_gHP, gv_stackChargeNames[3], 1.0);
                                            TextTagCreate(StringExternal(&quot;Param/Value/A1267830&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                        }
                                        else {
                                            if ((UnitGetChargeUsed(lv_lHP, gv_stackChargeNames[2]) &lt; 4893.0)) {
                                                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;LargeHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                UnitAddChargeUsed(lv_lHP, gv_stackChargeNames[2], 1.0);
                                                TextTagCreate(StringExternal(&quot;Param/Value/A28634A1&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                            }
                                            else {
                                                if ((UnitGetChargeUsed(lv_mHP, gv_stackChargeNames[1]) &lt; 4893.0)) {
                                                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;MediumHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                    UnitAddChargeUsed(lv_mHP, gv_stackChargeNames[1], 1.0);
                                                    TextTagCreate(StringExternal(&quot;Param/Value/23E2C494&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                }
                                                else {
                                                    if ((UnitGetChargeUsed(lv_sHP, gv_stackChargeNames[0]) &lt; 4893.0)) {
                                                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, &quot;SmallHealthPotion&quot;, gv_players[lv_iPI].dragon);
                                                        UnitAddChargeUsed(lv_sHP, gv_stackChargeNames[0], 1.0);
                                                        TextTagCreate(StringExternal(&quot;Param/Value/B4D4EA55&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                                                    }
                                                    else {
                                                        TextTagCreate(StringExternal(&quot;Param/Value/B9576EF6&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                                                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                                                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                                                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                                                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else {
                        TextTagCreate(StringExternal(&quot;Param/Value/68F72793&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    }
                }
                else {
                    TextTagCreate(StringExternal(&quot;Param/Value/6330997A&quot;), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PotionHotkeyP4_Init () {
                gt_PotionHotkeyP4 = TriggerCreate(&quot;gt_PotionHotkeyP4_Func&quot;);
                TriggerAddEventButtonPressed(gt_PotionHotkeyP4, 4, &quot;UsePotion&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Grand Orb of Anger Counter
            //--------------------------------------------------------------------------------------------------
            bool gt_GrandOrbofAngerCounter_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_numberofGrandOrbofAnger;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitInventoryGroup(gv_players[0].dragon));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 3) &amp;&amp; (UnitGetType(UnitGroupLoopCurrent()) == &quot;GrandOrbofAnger&quot;)) {
                        lv_numberofGrandOrbofAnger += 1;
                    }
                }
                UnitGroupLoopEnd();
                gv_grandOrbofAngerCount[0] = lv_numberofGrandOrbofAnger;
                lv_numberofGrandOrbofAnger = 0;
                UnitGroupLoopBegin(UnitInventoryGroup(gv_players[1].dragon));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;GrandOrbofAnger&quot;) &amp;&amp; (UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
                        lv_numberofGrandOrbofAnger += 1;
                    }
                }
                UnitGroupLoopEnd();
                gv_grandOrbofAngerCount[1] = lv_numberofGrandOrbofAnger;
                lv_numberofGrandOrbofAnger = 0;
                UnitGroupLoopBegin(UnitInventoryGroup(gv_players[2].dragon));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;GrandOrbofAnger&quot;) &amp;&amp; (UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
                        lv_numberofGrandOrbofAnger += 1;
                    }
                }
                UnitGroupLoopEnd();
                gv_grandOrbofAngerCount[2] = lv_numberofGrandOrbofAnger;
                lv_numberofGrandOrbofAnger = 0;
                UnitGroupLoopBegin(UnitInventoryGroup(gv_players[3].dragon));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;GrandOrbofAnger&quot;) &amp;&amp; (UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
                        lv_numberofGrandOrbofAnger += 1;
                    }
                }
                UnitGroupLoopEnd();
                gv_grandOrbofAngerCount[3] = lv_numberofGrandOrbofAnger;
                lv_numberofGrandOrbofAnger = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GrandOrbofAngerCounter_Init () {
                gt_GrandOrbofAngerCounter = TriggerCreate(&quot;gt_GrandOrbofAngerCounter_Func&quot;);
                TriggerAddEventTimePeriodic(gt_GrandOrbofAngerCounter, 10.0, c_timeReal);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Grand Orb of Anger Effect P1
            //--------------------------------------------------------------------------------------------------
            bool gt_GrandOrbofAngerEffectP1_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(3)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(126)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(127)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(128)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(129)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(130)) == false)) {
                    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(gv_players[lv_pI].dragon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[lv_pI].dragon), (gv_grandOrbofAngerCount[lv_pI] * 4.0)), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMassive) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), gv_players[lv_pI].dragon), c_orderQueueAddToEnd);
                    }
                    UnitGroupLoopEnd();
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GrandOrbofAngerEffectP1_Init () {
                gt_GrandOrbofAngerEffectP1 = TriggerCreate(&quot;gt_GrandOrbofAngerEffectP1_Func&quot;);
                TriggerAddEventTimePeriodic(gt_GrandOrbofAngerEffectP1, 5.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Grand Orb of Anger Effect P2
            //--------------------------------------------------------------------------------------------------
            bool gt_GrandOrbofAngerEffectP2_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pI;
                // Variable Initialization
                lv_pI = 1;
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(3)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(126)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(127)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(128)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(129)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(130)) == false)) {
                    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(gv_players[lv_pI].dragon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[lv_pI].dragon), (gv_grandOrbofAngerCount[lv_pI] * 4.0)), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMassive) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), gv_players[lv_pI].dragon), c_orderQueueAddToEnd);
                    }
                    UnitGroupLoopEnd();
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GrandOrbofAngerEffectP2_Init () {
                gt_GrandOrbofAngerEffectP2 = TriggerCreate(&quot;gt_GrandOrbofAngerEffectP2_Func&quot;);
                TriggerAddEventTimePeriodic(gt_GrandOrbofAngerEffectP2, 5.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Grand Orb of Anger Effect P3
            //--------------------------------------------------------------------------------------------------
            bool gt_GrandOrbofAngerEffectP3_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pI;
                // Variable Initialization
                lv_pI = 2;
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(3)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(126)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(127)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(128)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(129)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(130)) == false)) {
                    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(gv_players[lv_pI].dragon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[lv_pI].dragon), (gv_grandOrbofAngerCount[lv_pI] * 4.0)), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMassive) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), gv_players[lv_pI].dragon), c_orderQueueAddToEnd);
                    }
                    UnitGroupLoopEnd();
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GrandOrbofAngerEffectP3_Init () {
                gt_GrandOrbofAngerEffectP3 = TriggerCreate(&quot;gt_GrandOrbofAngerEffectP3_Func&quot;);
                TriggerAddEventTimePeriodic(gt_GrandOrbofAngerEffectP3, 5.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Grand Orb of Anger Effect P4
            //--------------------------------------------------------------------------------------------------
            bool gt_GrandOrbofAngerEffectP4_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pI;
                // Variable Initialization
                lv_pI = 3;
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(3)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(126)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(127)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(128)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(129)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(130)) == false)) {
                    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(gv_players[lv_pI].dragon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[lv_pI].dragon), (gv_grandOrbofAngerCount[lv_pI] * 4.0)), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterPlayer) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMassive) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), gv_players[lv_pI].dragon), c_orderQueueAddToEnd);
                    }
                    UnitGroupLoopEnd();
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GrandOrbofAngerEffectP4_Init () {
                gt_GrandOrbofAngerEffectP4 = TriggerCreate(&quot;gt_GrandOrbofAngerEffectP4_Func&quot;);
                TriggerAddEventTimePeriodic(gt_GrandOrbofAngerEffectP4, 5.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Player 1 Buys Occulus of Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_Player1BuysOcculusofWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventPlayer() == 1))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/45B25FC6&quot;));
                BankValueSetFromFlag(gv_players[0].banks.dragonBank, &quot;OOW&quot;, PlayerHandle(1), true);
                gv_occulusofWarning[0] = true;
                TriggerEnable(gt_OcculusPingPlayer1, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Player1BuysOcculusofWarning_Init () {
                gt_Player1BuysOcculusofWarning = TriggerCreate(&quot;gt_Player1BuysOcculusofWarning_Func&quot;);
                TriggerAddEventUnitAbility(gt_Player1BuysOcculusofWarning, null, AbilityCommand(&quot;ShardShop&quot;, 0), c_unitAbilStageComplete, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Player 2 Buys Occulus of Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_Player2BuysOcculusofWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventPlayer() == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(2), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/52F50202&quot;));
                BankValueSetFromFlag(gv_players[1].banks.dragonBank, &quot;OOW&quot;, PlayerHandle(2), true);
                gv_occulusofWarning[1] = true;
                TriggerEnable(gt_OcculusPingPlayer2, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Player2BuysOcculusofWarning_Init () {
                gt_Player2BuysOcculusofWarning = TriggerCreate(&quot;gt_Player2BuysOcculusofWarning_Func&quot;);
                TriggerAddEventUnitAbility(gt_Player2BuysOcculusofWarning, null, AbilityCommand(&quot;ShardShop&quot;, 0), c_unitAbilStageComplete, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Player 3 Buys Occulus of Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_Player3BuysOcculusofWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventPlayer() == 3))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(3), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/9996DFC0&quot;));
                BankValueSetFromFlag(gv_players[2].banks.dragonBank, &quot;OOW&quot;, PlayerHandle(3), true);
                gv_occulusofWarning[2] = true;
                TriggerEnable(gt_OcculusPingPlayer3, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Player3BuysOcculusofWarning_Init () {
                gt_Player3BuysOcculusofWarning = TriggerCreate(&quot;gt_Player3BuysOcculusofWarning_Func&quot;);
                TriggerAddEventUnitAbility(gt_Player3BuysOcculusofWarning, null, AbilityCommand(&quot;ShardShop&quot;, 0), c_unitAbilStageComplete, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Player 4 Buys Occulus of Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_Player4BuysOcculusofWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((EventPlayer() == 4))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(4), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/21D5DB64&quot;));
                BankValueSetFromFlag(gv_players[3].banks.dragonBank, &quot;OOW&quot;, PlayerHandle(4), true);
                gv_occulusofWarning[3] = true;
                TriggerEnable(gt_OcculusPingPlayer4, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Player4BuysOcculusofWarning_Init () {
                gt_Player4BuysOcculusofWarning = TriggerCreate(&quot;gt_Player4BuysOcculusofWarning_Func&quot;);
                TriggerAddEventUnitAbility(gt_Player4BuysOcculusofWarning, null, AbilityCommand(&quot;ShardShop&quot;, 0), c_unitAbilStageComplete, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Occulus Ping Player 1
            //--------------------------------------------------------------------------------------------------
            bool gt_OcculusPingPlayer1_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[0].dragon), 50.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 1000));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(1), &quot;PingNumeric0&quot;, UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
                    PingSetScale(PingLastCreated(), 0.2);
                    PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OcculusPingPlayer1_Init () {
                gt_OcculusPingPlayer1 = TriggerCreate(&quot;gt_OcculusPingPlayer1_Func&quot;);
                TriggerEnable(gt_OcculusPingPlayer1, false);
                TriggerAddEventTimePeriodic(gt_OcculusPingPlayer1, 5.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Occulus Ping Player 2
            //--------------------------------------------------------------------------------------------------
            bool gt_OcculusPingPlayer2_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroupAlliance(2, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[1].dragon), 50.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 1000));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(1), &quot;PingNumeric0&quot;, UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
                    PingSetScale(PingLastCreated(), 0.2);
                    PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OcculusPingPlayer2_Init () {
                gt_OcculusPingPlayer2 = TriggerCreate(&quot;gt_OcculusPingPlayer2_Func&quot;);
                TriggerEnable(gt_OcculusPingPlayer2, false);
                TriggerAddEventTimePeriodic(gt_OcculusPingPlayer2, 5.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Occulus Ping Player 3
            //--------------------------------------------------------------------------------------------------
            bool gt_OcculusPingPlayer3_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroupAlliance(3, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[2].dragon), 50.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 1000));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(1), &quot;PingNumeric0&quot;, UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
                    PingSetScale(PingLastCreated(), 0.2);
                    PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OcculusPingPlayer3_Init () {
                gt_OcculusPingPlayer3 = TriggerCreate(&quot;gt_OcculusPingPlayer3_Func&quot;);
                TriggerEnable(gt_OcculusPingPlayer3, false);
                TriggerAddEventTimePeriodic(gt_OcculusPingPlayer3, 5.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Occulus Ping Player 4
            //--------------------------------------------------------------------------------------------------
            bool gt_OcculusPingPlayer4_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroupAlliance(4, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[3].dragon), 50.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 1000));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(1), &quot;PingNumeric0&quot;, UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
                    PingSetScale(PingLastCreated(), 0.2);
                    PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OcculusPingPlayer4_Init () {
                gt_OcculusPingPlayer4 = TriggerCreate(&quot;gt_OcculusPingPlayer4_Func&quot;);
                TriggerEnable(gt_OcculusPingPlayer4, false);
                TriggerAddEventTimePeriodic(gt_OcculusPingPlayer4, 5.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Player Buys Facet of Revenge
            //--------------------------------------------------------------------------------------------------
            bool gt_PlayerBuysFacetofRevenge_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/EFCF1DB3&quot;));
                BankValueSetFromFlag(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;FOR&quot;, PlayerHandle(EventPlayer()), true);
                gv_facetofRevenge[(EventPlayer() - 1)] = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PlayerBuysFacetofRevenge_Init () {
                gt_PlayerBuysFacetofRevenge = TriggerCreate(&quot;gt_PlayerBuysFacetofRevenge_Func&quot;);
                TriggerAddEventUnitAbility(gt_PlayerBuysFacetofRevenge, null, AbilityCommand(&quot;ShardShop&quot;, 2), c_unitAbilStageComplete, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Player Buys Crystal of Rebirth
            //--------------------------------------------------------------------------------------------------
            bool gt_PlayerBuysCrystalofRebirth_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E513C8C7&quot;));
                BankValueSetFromFlag(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;COR&quot;, PlayerHandle(EventPlayer()), true);
                gv_crystalofRebirth[(EventPlayer() - 1)] = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PlayerBuysCrystalofRebirth_Init () {
                gt_PlayerBuysCrystalofRebirth = TriggerCreate(&quot;gt_PlayerBuysCrystalofRebirth_Func&quot;);
                TriggerAddEventUnitAbility(gt_PlayerBuysCrystalofRebirth, null, AbilityCommand(&quot;ShardShop&quot;, 1), c_unitAbilStageComplete, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Player Buys Jewel of Return
            //--------------------------------------------------------------------------------------------------
            bool gt_PlayerBuysJewelofReturn_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/95AF4D43&quot;));
                BankValueSetFromFlag(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;JOR&quot;, PlayerHandle(EventPlayer()), true);
                gv_jewelofReturn[(EventPlayer() - 1)] = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PlayerBuysJewelofReturn_Init () {
                gt_PlayerBuysJewelofReturn = TriggerCreate(&quot;gt_PlayerBuysJewelofReturn_Func&quot;);
                TriggerAddEventUnitAbility(gt_PlayerBuysJewelofReturn, null, AbilityCommand(&quot;ShardShop&quot;, 3), c_unitAbilStageComplete, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Player Buys Stone of Protection
            //--------------------------------------------------------------------------------------------------
            bool gt_PlayerBuysStoneofProtection_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/5C4BAF8F&quot;));
                BankValueSetFromFlag(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;SOR&quot;, PlayerHandle(EventPlayer()), true);
                gv_stoneofProtection[(EventPlayer() - 1)] = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PlayerBuysStoneofProtection_Init () {
                gt_PlayerBuysStoneofProtection = TriggerCreate(&quot;gt_PlayerBuysStoneofProtection_Func&quot;);
                TriggerAddEventUnitAbility(gt_PlayerBuysStoneofProtection, null, AbilityCommand(&quot;ShardShop&quot;, 5), c_unitAbilStageComplete, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Player Buys Ring of Quickening
            //--------------------------------------------------------------------------------------------------
            bool gt_PlayerBuysRingofQuickening_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/8AC4E98E&quot;));
                BankValueSetFromFlag(gv_players[(EventPlayer() - 1)].banks.dragonBank, &quot;ROQ&quot;, PlayerHandle(EventPlayer()), true);
                gv_ringofQuickening[(EventPlayer() - 1)] = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PlayerBuysRingofQuickening_Init () {
                gt_PlayerBuysRingofQuickening = TriggerCreate(&quot;gt_PlayerBuysRingofQuickening_Func&quot;);
                TriggerAddEventUnitAbility(gt_PlayerBuysRingofQuickening, null, AbilityCommand(&quot;ShardShop&quot;, 4), c_unitAbilStageComplete, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Tolic&apos;s Fire Orb Damage Response
            //--------------------------------------------------------------------------------------------------
            bool gt_TolicsFireOrbDamageResponse_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_numberTolicOrbs;
                int lv_randomNumber;
                int lv_thisTag;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitDamageSourceUnit())))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == &quot;TolicsFireOrb&quot;) &amp;&amp; (UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
                        lv_numberTolicOrbs += 1;
                    }
                }
                UnitGroupLoopEnd();
                if ((RandomFixed(0.0, 100.0) &lt;= (lv_numberTolicOrbs * 20.0))) {
                    UnitBehaviorAdd(EventUnitDamageSourceUnit(), &quot;Burning&quot;, EventUnit(), 1);
                    TextTagCreate(StringExternal(&quot;Param/Value/C8E11905&quot;), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, true, PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    lv_thisTag = TextTagLastCreated();
                    TextTagSetVelocity(lv_thisTag, 0.75, 270.0);
                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 0.00, 0.00));
                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                }
                lv_numberTolicOrbs = 0;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TolicsFireOrbDamageResponse_Init () {
                gt_TolicsFireOrbDamageResponse = TriggerCreate(&quot;gt_TolicsFireOrbDamageResponse_Func&quot;);
                TriggerAddEventUnitDamaged(gt_TolicsFireOrbDamageResponse, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
                TriggerAddEventUnitDamaged(gt_TolicsFireOrbDamageResponse, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
                TriggerAddEventUnitDamaged(gt_TolicsFireOrbDamageResponse, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
                TriggerAddEventUnitDamaged(gt_TolicsFireOrbDamageResponse, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Stack Charge Names
            //--------------------------------------------------------------------------------------------------
            bool gt_SetStackChargeNames_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_stackChargeNames[0] = &quot;Item/SmallHealthPotion&quot;;
                gv_stackChargeNames[1] = &quot;Item/MediumHealthPotion&quot;;
                gv_stackChargeNames[2] = &quot;Item/LargeHealthPotion&quot;;
                gv_stackChargeNames[3] = &quot;Item/GrandHealthPotion&quot;;
                gv_stackChargeNames[4] = &quot;Item/SmallAttackSpeedPotion&quot;;
                gv_stackChargeNames[5] = &quot;Item/MediumAttackSpeedPotion&quot;;
                gv_stackChargeNames[6] = &quot;Item/LargeAttackSpeedPotion&quot;;
                gv_stackChargeNames[7] = &quot;Item/GrandAttackSpeedPotion&quot;;
                gv_stackChargeNames[8] = &quot;Item/TownPortal&quot;;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetStackChargeNames_Init () {
                gt_SetStackChargeNames = TriggerCreate(&quot;gt_SetStackChargeNames_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Save Stack Counts On Inventory Edit
            //--------------------------------------------------------------------------------------------------
            bool gt_SaveStackCountsOnInventoryEdit_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_playersSetUp == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true) &amp;&amp; (gv_evolving[(UnitGetOwner(EventUnit()) - 1)] == false)) {
                    gf_SaveStackCounts(UnitGetOwner(EventUnit()));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SaveStackCountsOnInventoryEdit_Init () {
                gt_SaveStackCountsOnInventoryEdit = TriggerCreate(&quot;gt_SaveStackCountsOnInventoryEdit_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeLoses, null);
                TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeDrops, null);
                TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeSells, null);
                TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeGives, null);
                TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeExhausts, null);
                TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeGains, null);
                TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangePicksUp, null);
                TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeBuys, null);
                TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeReceives, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Save Stack Counts Periodically
            //--------------------------------------------------------------------------------------------------
            bool gt_SaveStackCountsPeriodically_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_playersSetUp == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_evolving[(PlayerGroupLoopCurrent() - 1)] == false)) {
                        gf_SaveStackCounts(PlayerGroupLoopCurrent());
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SaveStackCountsPeriodically_Init () {
                gt_SaveStackCountsPeriodically = TriggerCreate(&quot;gt_SaveStackCountsPeriodically_Func&quot;);
                TriggerAddEventTimePeriodic(gt_SaveStackCountsPeriodically, 5.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Town Portal
            //--------------------------------------------------------------------------------------------------
            bool gt_TownPortal_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                lv_triggeringPlayerIndex = (UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem())) - 1);
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnitInventoryItem()) == &quot;TownPortal&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((StringEqual(gv_locationString[lv_triggeringPlayerIndex], &quot;Ballan&quot;, c_stringCase) == true)) {
                    UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, &quot;TownPortal&quot;);
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/A9B50B40&quot;));
                    return true;
                }
                if ((StringEqual(gv_locationString[lv_triggeringPlayerIndex], &quot;Syrital&apos;s Lair&quot;, c_stringCase) == true)) {
                    UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, &quot;TownPortal&quot;);
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/610BC81D&quot;));
                    return true;
                }
                if ((StringEqual(gv_locationString[lv_triggeringPlayerIndex], &quot;Underground Forest&quot;, c_stringCase) == true)) {
                    UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, &quot;TownPortal&quot;);
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/12E3CCA2&quot;));
                    return true;
                }
                if ((StringEqual(gv_locationString[lv_triggeringPlayerIndex], &quot;Relamy Gorge&quot;, c_stringCase) == true)) {
                    UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, &quot;TownPortal&quot;);
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/42B004B8&quot;));
                    return true;
                }
                if ((StringEqual(gv_locationString[lv_triggeringPlayerIndex], &quot;???&quot;, c_stringCase) == true)) {
                    UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, &quot;TownPortal&quot;);
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/EBFF7D03&quot;));
                    return true;
                }
                if ((StringEqual(gv_locationString[lv_triggeringPlayerIndex], &quot;Infestation&quot;, c_stringCase) == true)) {
                    UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, &quot;TownPortal&quot;);
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/1F7CF99A&quot;));
                    return true;
                }
                //if ((UnitGroupHasUnit(gv_unitsthatdidDamagetoSyrital, gv_players[lv_triggeringPlayerIndex].dragon) == true)) {
                  //  UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, &quot;TownPortal&quot;);
                   // UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/FD1FB43C&quot;));
                    //return true;
              //  }
                //if ((UnitGroupHasUnit(gv_unitsthatdidDamagetoSremagsi, gv_players[lv_triggeringPlayerIndex].dragon) == true)) {
                  //  UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, &quot;TownPortal&quot;);
                  //  UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/746AD6C2&quot;));
                  // return true;
               // 
             if ((StringEqual(gv_locationString[lv_triggeringPlayerIndex], &quot;Machina De Plagam&apos;s Crater&quot;, c_stringCase) == true)) {
                    UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, &quot;TownPortal&quot;);
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/BD25568D&quot;));
                    return true;
                }
              //  if ((UnitGroupHasUnit(gv_unitsthatdidDamagetoMachinaDePlagam, gv_players[lv_triggeringPlayerIndex].dragon) == true)) {
               //     UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, &quot;TownPortal&quot;);
               //     UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/BD25568D&quot;));
               //     return true;
               // }
                if ((PlayerGroupHasPlayer(gv_playersInBattleWithZauberer2ndForm, UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))) == true)) {
                    UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, &quot;TownPortal&quot;);
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/D47362FB&quot;));
                    return true;
                }
                if ((PlayerGroupHasPlayer(gv_playersInBattleWithZauberer1stForm, UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))) == true)) {
                    UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, &quot;TownPortal&quot;);
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/7A32E589&quot;));
                    return true;
                }
                 if ((PlayerGroupHasPlayer(gv_playersinBattlewithGuardians, UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))) == true)) {
                    UnitInventoryCreate(gv_players[lv_triggeringPlayerIndex].dragon, &quot;TownPortal&quot;);
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/3B59D3E0&quot;));
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/4B9AC8CB&quot;));
                libNtve_gf_MakeUnitInvulnerable(gv_players[lv_triggeringPlayerIndex].dragon, true);
                libNtve_gf_PauseUnit(gv_players[lv_triggeringPlayerIndex].dragon, true);
                libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())));
                CameraPan(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem())), PointFromId(2508), 0.0, -1, 10.0, false);
                UnitSetPosition(gv_players[lv_triggeringPlayerIndex].dragon, PointFromId(2508), false);
                libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, PointFromId(2508));
                libNtve_gf_MakeUnitInvulnerable(gv_players[lv_triggeringPlayerIndex].dragon, false);
                libNtve_gf_PauseUnit(gv_players[lv_triggeringPlayerIndex].dragon, false);
                UnitBehaviorRemovePlayer(gv_players[lv_triggeringPlayerIndex].dragon, &quot;TimePenalty&quot;, UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem())), c_unitBehaviorCountAll);
                SoundtrackStop(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_soundtrackCategoryMusic, &quot;BiodomeTheme2&quot;, c_soundtrackCueAny, 0, false);
                gv_locationString[lv_triggeringPlayerIndex] = &quot;Ballan&quot;;
                gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TownPortal_Init () {
                gt_TownPortal = TriggerCreate(&quot;gt_TownPortal_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_TownPortal, null, c_unitInventoryChangeUses, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Unit drops item
            //--------------------------------------------------------------------------------------------------
            bool gt_Unitdropsitem_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetOwner(EventUnitInventoryItem(), 0, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Unitdropsitem_Init () {
                gt_Unitdropsitem = TriggerCreate(&quot;gt_Unitdropsitem_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_Unitdropsitem, null, c_unitInventoryChangeDrops, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Unit gains item
            //--------------------------------------------------------------------------------------------------
            bool gt_Unitgainsitem_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetOwner(EventUnitInventoryItem(), UnitGetOwner(EventUnit()), true);
                if (((UnitGetType(EventUnitInventoryItem()) == &quot;HerosMight&quot;))) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/50B63FB2&quot;));
                        UnitInventoryRemove(EventUnitInventoryItem());
                    }
                } else
                if ((UnitGetType(EventUnitInventoryItem()) == &quot;ModArmor&quot;)) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/00B671DA&quot;));
                        UnitInventoryRemove(EventUnitInventoryItem());
                    }
                } else
                if (UnitGetType(EventUnitInventoryItem()) == &quot;WingClaws&quot;) {
                    if (PlayerHandle(EventPlayer()) != &quot;&quot; &amp;&amp; PlayerName(EventPlayer()) == StringToText(&quot;Wingcrafter&quot;) &amp;&amp; !gf_IsAdmin(EventPlayer())) {
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/50B63FB2&quot;));
                        UnitInventoryRemove(EventUnitInventoryItem());
                    }
                } else
                if (((UnitGetType(EventUnitInventoryItem()) == &quot;DevilsFlamethrower&quot;))) {
                    if (PlayerHandle(EventPlayer()) != &quot;1-S2-1-2755172&quot; &amp;&amp; !gf_IsAdmin(EventPlayer())) {
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/CD8DEF38&quot;));
                        UnitInventoryRemove(EventUnitInventoryItem());
                    }
                } else
                if (((UnitGetType(EventUnitInventoryItem()) == &quot;MadawcsElectricArmor&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;ModArmor&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;PlagamArmor&quot;))) {
                    UnitSetPropertyFixed(UnitInventoryUnit(EventUnitInventoryItem()), c_unitPropShieldsPercent, 0.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Unitgainsitem_Init () {
                gt_Unitgainsitem = TriggerCreate(&quot;gt_Unitgainsitem_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_Unitgainsitem, null, c_unitInventoryChangeGains, null);
                TriggerAddEventUnitInventoryChange(gt_Unitgainsitem, null, c_unitInventoryChangePicksUp, null);
                TriggerAddEventUnitInventoryChange(gt_Unitgainsitem, null, c_unitInventoryChangeBuys, null);
                TriggerAddEventUnitInventoryChange(gt_Unitgainsitem, null, c_unitInventoryChangeReceives, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Shield Check
            //--------------------------------------------------------------------------------------------------
            bool gt_ShieldCheck_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitInventoryContainer(EventUnitInventoryItem()) == 2))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if (((UnitGetType(EventUnitInventoryItem()) == &quot;MadawcsElectricArmor&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;ModArmor&quot;) || (UnitGetType(EventUnitInventoryItem()) == &quot;PlagamArmor&quot;))) {
                    UnitSetPropertyFixed(UnitInventoryUnit(EventUnitInventoryItem()), c_unitPropShieldsPercent, 0.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ShieldCheck_Init () {
                gt_ShieldCheck = TriggerCreate(&quot;gt_ShieldCheck_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_ShieldCheck, null, c_unitInventoryChangeMoves, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Weapon Check
            //--------------------------------------------------------------------------------------------------
            bool gt_WeaponCheck_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_playersSetUp == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_RemoveWeapons(UnitInventoryUnit(EventUnitInventoryItem()));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WeaponCheck_Init () {
                gt_WeaponCheck = TriggerCreate(&quot;gt_WeaponCheck_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_WeaponCheck, null, c_unitInventoryChangeGains, null);
                TriggerAddEventUnitInventoryChange(gt_WeaponCheck, null, c_unitInventoryChangePicksUp, null);
                TriggerAddEventUnitInventoryChange(gt_WeaponCheck, null, c_unitInventoryChangeLoses, null);
                TriggerAddEventUnitInventoryChange(gt_WeaponCheck, null, c_unitInventoryChangeMoves, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Selling System Redux
            //--------------------------------------------------------------------------------------------------
            bool gt_SellingSystemRedux_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_mySlot;
                int lv_myContainer;
                int lv_myIndex;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_mySlot = UnitInventorySlot(EventUnitInventoryItem());
                lv_myContainer = UnitInventoryContainer(EventUnitInventoryItem());
                lv_myIndex = UnitInventoryIndex(EventUnitInventoryItem());
                if (((DistanceBetweenPoints(UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), UnitGetPosition(UnitFromId(240))) &gt; 20.0) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), UnitGetPosition(UnitFromId(1202))) &gt; 20.0) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), UnitGetPosition(UnitFromId(2777))) &gt; 20.0) &amp;&amp; (DistanceBetweenPoints(UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), UnitGetPosition(UnitFromId(660))) &gt; 20.0))) {
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/DDDE08EE&quot;));
                    UnitInventoryCreate(gv_players[(UnitGetOwner(EventUnitInventoryItem()) - 1)].dragon, UnitGetType(EventUnitInventoryItem()));
                    UnitInventoryMove(UnitInventoryLastCreated(), lv_myContainer, lv_mySlot);
                }
                else {
                    PlayerModifyPropertyInt(UnitGetOwner(EventUnitInventoryItem()), c_playerPropMinerals, c_playerPropOperAdd, (UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostMinerals) / 10));
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())), c_messageAreaSubtitle, ((UnitTypeGetName(UnitGetType(EventUnitInventoryItem())) + StringExternal(&quot;Param/Value/5AC0AC57&quot;)) + IntToText((UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostMinerals) / 10))));
                    TextTagCreate((StringExternal(&quot;Param/Value/E6C199C9&quot;) + IntToText((UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostMinerals) / 10))), 24, UnitGetPosition(gv_players[(UnitGetOwner(EventUnitInventoryItem()) - 1)].dragon), 1.0, true, true, PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())));
                    TextTagSetVelocity(TextTagLastCreated(), 0.75, 90.0);
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SellingSystemRedux_Init () {
                gt_SellingSystemRedux = TriggerCreate(&quot;gt_SellingSystemRedux_Func&quot;);
                TriggerAddEventUnitInventoryChange(gt_SellingSystemRedux, null, c_unitInventoryChangeSells, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Display Armor Shop Text Tag
            //--------------------------------------------------------------------------------------------------
            bool gt_DisplayArmorShopTextTag_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/E57A2F8D&quot;), 24, PointFromId(1216), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DisplayArmorShopTextTag_Init () {
                gt_DisplayArmorShopTextTag = TriggerCreate(&quot;gt_DisplayArmorShopTextTag_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_DisplayArmorShopTextTag, null, PointFromId(1216), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Display Weapon Shop Text Tag
            //--------------------------------------------------------------------------------------------------
            bool gt_DisplayWeaponShopTextTag_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/869F54FF&quot;), 24, PointFromId(1215), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DisplayWeaponShopTextTag_Init () {
                gt_DisplayWeaponShopTextTag = TriggerCreate(&quot;gt_DisplayWeaponShopTextTag_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_DisplayWeaponShopTextTag, null, PointFromId(1215), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Display Orb Shop Text Tag
            //--------------------------------------------------------------------------------------------------
            bool gt_DisplayOrbShopTextTag_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/E6685081&quot;), 24, PointFromId(1203), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DisplayOrbShopTextTag_Init () {
                gt_DisplayOrbShopTextTag = TriggerCreate(&quot;gt_DisplayOrbShopTextTag_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_DisplayOrbShopTextTag, null, PointFromId(1203), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Display Shard Shop Text Tag
            //--------------------------------------------------------------------------------------------------
            bool gt_DisplayShardShopTextTag_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/CB97CC80&quot;), 24, PointFromId(2778), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DisplayShardShopTextTag_Init () {
                gt_DisplayShardShopTextTag = TriggerCreate(&quot;gt_DisplayShardShopTextTag_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_DisplayShardShopTextTag, null, PointFromId(2778), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Display Stash Text Tag P1
            //--------------------------------------------------------------------------------------------------
            bool gt_DisplayStashTextTagP1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/D3D7C9C1&quot;), 24, PointFromId(4835), 1.0, true, true, PlayerGroupSingle(1));
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DisplayStashTextTagP1_Init () {
                gt_DisplayStashTextTagP1 = TriggerCreate(&quot;gt_DisplayStashTextTagP1_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_DisplayStashTextTagP1, null, PointFromId(4835), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Display Stash Text Tag P2
            //--------------------------------------------------------------------------------------------------
            bool gt_DisplayStashTextTagP2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/673F3B18&quot;), 24, PointFromId(4836), 1.0, true, true, PlayerGroupSingle(2));
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DisplayStashTextTagP2_Init () {
                gt_DisplayStashTextTagP2 = TriggerCreate(&quot;gt_DisplayStashTextTagP2_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_DisplayStashTextTagP2, null, PointFromId(4836), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Display Stash Text Tag P3
            //--------------------------------------------------------------------------------------------------
            bool gt_DisplayStashTextTagP3_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/FDEBF9A4&quot;), 24, PointFromId(4837), 1.0, true, true, PlayerGroupSingle(3));
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DisplayStashTextTagP3_Init () {
                gt_DisplayStashTextTagP3 = TriggerCreate(&quot;gt_DisplayStashTextTagP3_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_DisplayStashTextTagP3, null, PointFromId(4837), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Display Stash Text Tag P4
            //--------------------------------------------------------------------------------------------------
            bool gt_DisplayStashTextTagP4_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/4DBA1D44&quot;), 24, PointFromId(4838), 1.0, true, true, PlayerGroupSingle(4));
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DisplayStashTextTagP4_Init () {
                gt_DisplayStashTextTagP4 = TriggerCreate(&quot;gt_DisplayStashTextTagP4_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_DisplayStashTextTagP4, null, PointFromId(4838), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Underground Forest Enter
            //--------------------------------------------------------------------------------------------------
            bool gt_UndergroundForestEnter_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                PlayerGroupAdd(gv_playersinUndergroundForest, UnitGetOwner(EventUnit()));
                PlayerSetToDLighting(UnitGetOwner(EventUnit()), &quot;DesertWorldNight&quot;);
                SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;UndergroundForestTheme&quot;, c_soundtrackCueAny, 0, false);
                CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(273)), 0.0, -1, 10, false);
                UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(273)), false);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                //gv_locationText[lv_triggeringPlayerIndex] = &quot;Underground Forest&quot;;
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Underground Forest&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UndergroundForestEnter_Init () {
                gt_UndergroundForestEnter = TriggerCreate(&quot;gt_UndergroundForestEnter_Func&quot;);
                TriggerAddEventUnitRegion(gt_UndergroundForestEnter, null, RegionFromId(30), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Underground Forest Exit
            //--------------------------------------------------------------------------------------------------
            bool gt_UndergroundForestExit_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                fixed lv_robusLifePercent;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true) &amp;&amp; (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                PlayerGroupRemove(gv_playersinUndergroundForest, UnitGetOwner(EventUnit()));
                CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(272)), 0.0, -1, 10, false);
                PlayerSetToDLighting(UnitGetOwner(EventUnit()), &quot;Korhal&quot;);
                SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;CretonTheme&quot;, c_soundtrackCueAny, 0, false);
                UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(272)), false);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                //gv_locationText[lv_triggeringPlayerIndex] = &quot;Creton&quot;;
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Creton&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];    
                libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UndergroundForestExit_Init () {
                gt_UndergroundForestExit = TriggerCreate(&quot;gt_UndergroundForestExit_Func&quot;);
                TriggerAddEventUnitRegion(gt_UndergroundForestExit, null, RegionFromId(271), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Relamy Gorge Enter
            //--------------------------------------------------------------------------------------------------
            bool gt_RelamyGorgeEnter_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                PlayerGroupAdd(gv_playersinRelamyGorge, UnitGetOwner(EventUnit()));
                PlayerSetToDLighting(UnitGetOwner(EventUnit()), &quot;IceWorldNight&quot;);
                SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;RelamyGorgeTheme&quot;, c_soundtrackCueAny, 0, false);
                CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(232)), 0.0, -1, 10, false);
                UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(232)), false);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                //gv_locationText[lv_triggeringPlayerIndex] = &quot;Relamy Gorge&quot;;
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Relamy Gorge&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RelamyGorgeEnter_Init () {
                gt_RelamyGorgeEnter = TriggerCreate(&quot;gt_RelamyGorgeEnter_Func&quot;);
                TriggerAddEventUnitRegion(gt_RelamyGorgeEnter, null, RegionFromId(240), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Relamy Gorge Exit
            //--------------------------------------------------------------------------------------------------
            bool gt_RelamyGorgeExit_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                fixed lv_robusLifePercent;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true) &amp;&amp; (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                PlayerGroupRemove(gv_playersinRelamyGorge, UnitGetOwner(EventUnit()));
                CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(270)), 0.0, -1, 10, false);
                PlayerSetToDLighting(UnitGetOwner(EventUnit()), &quot;Korhal&quot;);
                SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;RelamyCaveTheme&quot;, c_soundtrackCueAny, 0, false);
                UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(270)), false);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                //gv_locationText[lv_triggeringPlayerIndex] = &quot;Relamy Pass&quot;;
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Relamy Pass&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RelamyGorgeExit_Init () {
                gt_RelamyGorgeExit = TriggerCreate(&quot;gt_RelamyGorgeExit_Func&quot;);
                TriggerAddEventUnitRegion(gt_RelamyGorgeExit, null, RegionFromId(269), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Relamy Cave Enter
            //--------------------------------------------------------------------------------------------------
            bool gt_RelamyCaveEnter_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                bool firstTimeInRelamyCave;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                PlayerGroupAdd(gv_playersinRelamyCave, UnitGetOwner(EventUnit()));
                PlayerSetToDLighting(UnitGetOwner(EventUnit()), &quot;Zerus&quot;);
                SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;RelamyTheme&quot;, c_soundtrackCueAny, 0, false);
                CameraPan(UnitGetOwner(EventUnit()), PointFromId(4072), 0.0, -1, 10, false);
                UnitSetPosition(EventUnit(), PointFromId(4072), false);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                //gv_locationText[lv_triggeringPlayerIndex] = &quot;???&quot;;
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;???&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &gt;= 1) &amp;&amp; firstTimeInRelamyCave) {
                    UnitSetPropertyFixed(gv_robus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_robus, c_unitPropLifeMax, c_unitPropCurrent) * UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
                    firstTimeInRelamyCave = false;
            }
                UnitSetPropertyFixed(gv_robus, c_unitPropLifePercent, 100.0);
                if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
                    UnitGroupLoopBegin(UnitGroup(&quot;Karramarro&quot;, 15, RegionFromId(264), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitKill(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RelamyCaveEnter_Init () {
                bool firstTimeInRelamyCave = true;
                gt_RelamyCaveEnter = TriggerCreate(&quot;gt_RelamyCaveEnter_Func&quot;);
                TriggerAddEventUnitRegion(gt_RelamyCaveEnter, null, RegionFromId(260), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Relamy Cave Exit
            //--------------------------------------------------------------------------------------------------
            bool gt_RelamyCaveExit_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                fixed lv_robusLifePercent;
                int multiplayerMultiplierHolder;
                int thisIsZero;
                int multiplayerMultiplier;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true) &amp;&amp; (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                PlayerGroupRemove(gv_playersinRelamyCave, UnitGetOwner(EventUnit()));
                CameraPan(UnitGetOwner(EventUnit()), PointFromId(4073), 0.0, -1, 10, false);
                PlayerSetToDLighting(UnitGetOwner(EventUnit()), &quot;Korhal&quot;);
                SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;RelamyCaveTheme&quot;, c_soundtrackCueAny, 0, false);
                UnitSetPosition(EventUnit(), PointFromId(4073), false);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
               //gv_locationText[lv_triggeringPlayerIndex] = &quot;Relamy Canyon&quot;;
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Relamy Canyon&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                lv_robusLifePercent = UnitGetPropertyFixed(gv_robus, c_unitPropLifePercent, c_unitPropCurrent);
                
                multiplayerMultiplier = UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                if(multiplayerMultiplier == thisIsZero){
                    multiplayerMultiplierHolder = 1;
                    } else{
                    multiplayerMultiplierHolder = UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                }
                
                UnitSetPropertyFixed(gv_robus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_robus, c_unitPropLifeMax, c_unitPropCurrent))* multiplayerMultiplierHolder); //* UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
                UnitSetPropertyFixed(gv_robus, c_unitPropLifePercent, lv_robusLifePercent);
               
                
                //UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) +1));
                //UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RelamyCaveExit_Init () {
                int multiplayerMultiplierHolder = 0;
                int thisIsZero = 0;
                int multiplayerMultiplier = 0;
                gt_RelamyCaveExit = TriggerCreate(&quot;gt_RelamyCaveExit_Func&quot;);
                TriggerAddEventUnitRegion(gt_RelamyCaveExit, null, RegionFromId(261), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Infestation Spawn Trigger
            //--------------------------------------------------------------------------------------------------
            bool gt_SetInfestationSpawnTrigger_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_infestationSpawnTrigger[0] = gt_SpawnEnemiesVerbotenInfestationPlayer1;
                gv_infestationSpawnTrigger[1] = gt_SpawnEnemiesVerbotenInfestationPlayer2;
                gv_infestationSpawnTrigger[2] = gt_SpawnEnemiesVerbotenInfestationPlayer3;
                gv_infestationSpawnTrigger[3] = gt_SpawnEnemiesVerbotenInfestationPlayer4;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetInfestationSpawnTrigger_Init () {
                gt_SetInfestationSpawnTrigger = TriggerCreate(&quot;gt_SetInfestationSpawnTrigger_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Verboten Infestation Enter
            //--------------------------------------------------------------------------------------------------
            bool gt_VerbotenInfestationEnter_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true) &amp;&amp; (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                TriggerExecute(gv_infestationSpawnTrigger[lv_triggeringPlayerIndex], true, true);
                PlayerGroupAdd(gv_playersinInfestation, UnitGetOwner(EventUnit()));
                gv_verbotenInfestationSpawned[lv_triggeringPlayerIndex] = true;
                PlayerSetToDLighting(UnitGetOwner(EventUnit()), &quot;Char&quot;);
                SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;InfestationTheme&quot;, c_soundtrackCueAny, 0, false);
                CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(64)), 0.0, -1, 10, false);
                UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(64)), false);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                //gv_locationText[lv_triggeringPlayerIndex] = &quot;Infestation&quot;;
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Infestation&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                gv_respawnPoint[lv_triggeringPlayerIndex] = RegionGetCenter(RegionFromId(64));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VerbotenInfestationEnter_Init () {
                gt_VerbotenInfestationEnter = TriggerCreate(&quot;gt_VerbotenInfestationEnter_Func&quot;);
                TriggerAddEventUnitRegion(gt_VerbotenInfestationEnter, null, RegionFromId(61), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Verboten Infestation Exit
            //--------------------------------------------------------------------------------------------------
            bool gt_VerbotenInfestationExit_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true) &amp;&amp; (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                PlayerGroupRemove(gv_playersinInfestation, UnitGetOwner(EventUnit()));
                CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(62)), 0.0, -1, 10, false);
                PlayerSetToDLighting(UnitGetOwner(EventUnit()), &quot;Korhal&quot;);
                SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;VerbotenTheme&quot;, c_soundtrackCueAny, 0, false);
                UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(62)), false);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                //gv_locationText[lv_triggeringPlayerIndex] = &quot;Verboten Forest&quot;;
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Verboten Forest&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                gv_respawnPoint[lv_triggeringPlayerIndex] = PointFromId(1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VerbotenInfestationExit_Init () {
                gt_VerbotenInfestationExit = TriggerCreate(&quot;gt_VerbotenInfestationExit_Func&quot;);
                TriggerAddEventUnitRegion(gt_VerbotenInfestationExit, null, RegionFromId(63), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Blizzard Freeze Chance
            //--------------------------------------------------------------------------------------------------
            bool gt_BlizzardFreezeChance_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((RandomFixed(0.0, 100.0) &lt;= (0.5 * UnitAbilityGetLevel(EventUnitDamageSourceUnit(), &quot;Blizzard&quot;)))) {
                    UnitBehaviorAdd(EventUnit(), &quot;Frozen&quot;, EventUnitDamageSourceUnit(), 1);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BlizzardFreezeChance_Init () {
                gt_BlizzardFreezeChance = TriggerCreate(&quot;gt_BlizzardFreezeChance_Func&quot;);
                TriggerAddEventUnitDamaged(gt_BlizzardFreezeChance, null, c_unitDamageTypeSpell, c_unitDamageNonFatal, &quot;BlizzardDamage&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Learn Fireball
            //--------------------------------------------------------------------------------------------------
            bool gt_LearnFireball_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.fireball = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, &quot;Fireball&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnFireball_Init () {
                gt_LearnFireball = TriggerCreate(&quot;gt_LearnFireball_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnFireball, null, AbilityCommand(&quot;LearnSkillsFire&quot;, 0), c_unitAbilStageAll, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Learn Fireclaws
            //--------------------------------------------------------------------------------------------------
            bool gt_LearnFireclaws_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.fireClaw = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, &quot;FireClaws&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnFireclaws_Init () {
                gt_LearnFireclaws = TriggerCreate(&quot;gt_LearnFireclaws_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnFireclaws, null, AbilityCommand(&quot;LearnSkillsFire&quot;, 1), c_unitAbilStageAll, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Learn Flameegg
            //--------------------------------------------------------------------------------------------------
            bool gt_LearnFlameegg_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.flameEgg = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, &quot;FlameEgg&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnFlameegg_Init () {
                gt_LearnFlameegg = TriggerCreate(&quot;gt_LearnFlameegg_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnFlameegg, null, AbilityCommand(&quot;LearnSkillsFire&quot;, 2), c_unitAbilStageAll, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Learn Inferno
            //--------------------------------------------------------------------------------------------------
            bool gt_LearnInferno_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.inferno = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, &quot;Inferno&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnInferno_Init () {
                gt_LearnInferno = TriggerCreate(&quot;gt_LearnInferno_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnInferno, null, AbilityCommand(&quot;LearnSkillsFire&quot;, 3), c_unitAbilStageAll, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Learn Nova
            //--------------------------------------------------------------------------------------------------
            bool gt_LearnNova_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.nova = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, &quot;Nova&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnNova_Init () {
                gt_LearnNova = TriggerCreate(&quot;gt_LearnNova_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnNova, null, AbilityCommand(&quot;LearnSkillsFire&quot;, 4), c_unitAbilStageAll, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Learn Frostspike
            //--------------------------------------------------------------------------------------------------
            bool gt_LearnFrostspike_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.frostSpike = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, &quot;FrostSpike&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnFrostspike_Init () {
                gt_LearnFrostspike = TriggerCreate(&quot;gt_LearnFrostspike_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnFrostspike, null, AbilityCommand(&quot;LearnSkillsIce&quot;, 0), c_unitAbilStageAll, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Learn Blizzard
            //--------------------------------------------------------------------------------------------------
            bool gt_LearnBlizzard_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.blizzard = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, &quot;Blizzard&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnBlizzard_Init () {
                gt_LearnBlizzard = TriggerCreate(&quot;gt_LearnBlizzard_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnBlizzard, null, AbilityCommand(&quot;LearnSkillsIce&quot;, 1), c_unitAbilStageAll, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Learn Subzero
            //--------------------------------------------------------------------------------------------------
            bool gt_LearnSubzero_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.subzero = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, &quot;SubZero&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnSubzero_Init () {
                gt_LearnSubzero = TriggerCreate(&quot;gt_LearnSubzero_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnSubzero, null, AbilityCommand(&quot;LearnSkillsIce&quot;, 2), c_unitAbilStageAll, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Learn Frozenarmor
            //--------------------------------------------------------------------------------------------------
            bool gt_LearnFrozenarmor_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.frozenArmour = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, &quot;FrozenArmor&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LearnFrozenarmor_Init () {
                gt_LearnFrozenarmor = TriggerCreate(&quot;gt_LearnFrozenarmor_Func&quot;);
                TriggerAddEventUnitAbility(gt_LearnFrozenarmor, null, AbilityCommand(&quot;LearnSkillsIce&quot;, 3), c_unitAbilStageAll, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Check Player is not eveolved
            //--------------------------------------------------------------------------------------------------
            bool gt_CheckPlayerisnoteveolved_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_playersSetUp == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    if ((UnitLevel(gv_players[lv_pPI].dragon) == 25) &amp;&amp; (UnitGetType(gv_players[lv_pPI].dragon) == &quot;BabyDragon&quot;)) {
                        gf_EvolvetoTeen(PlayerGroupLoopCurrent());
                    }
                    if ((UnitLevel(gv_players[lv_pPI].dragon) == 50) &amp;&amp; (UnitGetType(gv_players[lv_pPI].dragon) == &quot;TeenDragon&quot;)) {
                        gf_EvolvetoAdult(PlayerGroupLoopCurrent());
                    }
                    if ((UnitLevel(gv_players[lv_pPI].dragon) == 75) &amp;&amp; (UnitGetType(gv_players[lv_pPI].dragon) == &quot;AdultDragon&quot;)) {
                        gf_EvolvetoMaster(PlayerGroupLoopCurrent());
                    }
                    if ((UnitLevel(gv_players[lv_pPI].dragon) == 100) &amp;&amp; (UnitGetType(gv_players[lv_pPI].dragon) == &quot;MasterDragon&quot;)) {
                        gf_EvolvetoLegendary(PlayerGroupLoopCurrent());
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CheckPlayerisnoteveolved_Init () {
                gt_CheckPlayerisnoteveolved = TriggerCreate(&quot;gt_CheckPlayerisnoteveolved_Func&quot;);
                TriggerAddEventTimePeriodic(gt_CheckPlayerisnoteveolved, 10.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Dummy Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_DummyDies_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;DragonDummy&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitRemove(EventUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DummyDies_Init () {
                gt_DummyDies = TriggerCreate(&quot;gt_DummyDies_Func&quot;);
                TriggerAddEventUnitDied(gt_DummyDies, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Revive Dragon (Normal)
            //--------------------------------------------------------------------------------------------------
            bool gt_ReviveDragonNormal_Func (bool testConds, bool runActions) {
                int autoC8EE7902_ae;
                int autoC8EE7902_ai;
                // Variable Declarations
                int lv_levelCountdown;
                fixed lv_maxExp;
                int lv_tempAgility;
                int lv_tempDexterity;
                int lv_tempIntelligence;
                int lv_tempStrength;
                int lv_tempVitality;
                int lv_importantPlayerIndex;
                int lv_importantPlayer;
                int lv_strengthoftheDragon;
                int lv_mindoftheDragon;
                int lv_powerOverwhelming;
                int lv_rage;
                int lv_vampiricTendencies;
                int lv_zeal;
                int lv_n;
                unit lv_revenge;
                point lv_deadpoint;
                int lv_deathPlayer;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_playersSetUp == true))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(libNtve_gf_KillingUnit())) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_ShowHideBossBar(false, lv_importantPlayer);
                libNtve_gf_ShowHideBossBar(false, (lv_importantPlayer + 4));
                libNtve_gf_ShowHideBossBar(false, (lv_importantPlayer + 8));
                if ((gv_dragonDying[(UnitGetOwner(EventUnit()) - 1)] == false)) {
                    lv_importantPlayer = UnitGetOwner(EventUnit());
                    lv_importantPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                    lv_deathPlayer = UnitGetOwner(libNtve_gf_KillingUnit());
                    lv_deadpoint = UnitGetPosition(EventUnit());
                    gv_gold[lv_importantPlayerIndex] = PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals);
                    lv_levelCountdown = gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.level;
                    lv_levelCountdown = gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.level;
                    lv_levelCountdown = (lv_levelCountdown - 1);
                    lv_tempVitality = gv_players[lv_importantPlayerIndex].stats.vitality;
                    lv_tempStrength = gv_players[lv_importantPlayerIndex].stats.strength;
                    lv_tempIntelligence = gv_players[lv_importantPlayerIndex].stats.intelligence;
                    lv_tempDexterity = gv_players[lv_importantPlayerIndex].stats.dexterity;
                    lv_tempAgility = gv_players[lv_importantPlayerIndex].stats.agility;
                    while ((lv_levelCountdown &gt; 0)) {
                        lv_maxExp += (lv_levelCountdown * 100.0);
                        lv_levelCountdown = (lv_levelCountdown - 1);
                    }
                    if ((gv_facetofRevenge[lv_importantPlayerIndex] == true) &amp;&amp; (UnitGetOwner(libNtve_gf_KillingUnit()) != 16)) {
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;DragonDummy&quot;, c_unitCreateIgnorePlacement, lv_importantPlayer, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
                        lv_revenge = UnitLastCreated();
                        UnitBehaviorAdd(lv_revenge, &quot;Intelligence&quot;, EventUnit(), 500);
                        UnitAbilityChangeLevel(lv_revenge, &quot;Nova&quot;, 20);
                        UnitAbilityEnable(lv_revenge, &quot;Nova&quot;, true);
                        UnitIssueOrder(lv_revenge, Order(AbilityCommand(&quot;Nova&quot;, 0)), c_orderQueueReplace);
                    }
                    libNtve_gf_ShowHideBossBar(false, lv_importantPlayer);
                    SoundPlay(SoundLink(&quot;DragonDeath&quot;, -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lv_importantPlayer) + (StringExternal(&quot;Param/Value/58B61D3F&quot;) + (IntToText((gv_players[lv_importantPlayerIndex].stats.level - 0)) + ((StringExternal(&quot;Param/Value/37C93D65&quot;) + UnitTypeGetName(UnitGetType(EventUnit()))) + (StringExternal(&quot;Param/Value/79A9A1A7&quot;) + UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit()))))))));
                    if ((gv_ringofQuickening[lv_importantPlayerIndex] == true)) {
                        TimerStart(gv_dyingTimer[lv_importantPlayerIndex], 15.0, false, c_timeReal);
                        TimerWindowCreate(gv_dyingTimer[lv_importantPlayerIndex], StringExternal(&quot;Param/Value/976FC4D2&quot;), true, false);
                        gv_dyingTimerWindow[lv_importantPlayerIndex] = TimerWindowLastCreated();
                        TimerWindowShow(gv_dyingTimerWindow[lv_importantPlayerIndex], PlayerGroupAll(), false);
                        TimerWindowShow(gv_dyingTimerWindow[lv_importantPlayerIndex], PlayerGroupSingle(lv_importantPlayer), true);
                        libNtve_gf_WaitForTimer(gv_dyingTimer[lv_importantPlayerIndex], 0.0, false);
                        TimerWindowDestroy(gv_dyingTimerWindow[lv_importantPlayerIndex]);
                    }
                    else {
                        TimerStart(gv_dyingTimer[lv_importantPlayerIndex], 30.0, false, c_timeReal);
                        TimerWindowCreate(gv_dyingTimer[lv_importantPlayerIndex], StringExternal(&quot;Param/Value/E2363CFF&quot;), true, false);
                        gv_dyingTimerWindow[lv_importantPlayerIndex] = TimerWindowLastCreated();
                        TimerWindowShow(gv_dyingTimerWindow[lv_importantPlayerIndex], PlayerGroupAll(), false);
                        TimerWindowShow(gv_dyingTimerWindow[lv_importantPlayerIndex], PlayerGroupSingle(lv_importantPlayer), true);
                        libNtve_gf_WaitForTimer(gv_dyingTimer[lv_importantPlayerIndex], 0.0, false);
                        TimerWindowDestroy(gv_dyingTimerWindow[lv_importantPlayerIndex]);
                    }
                    if ((gv_crystalofRebirth[lv_importantPlayerIndex] == false)) {
                        PlayerModifyPropertyInt(lv_importantPlayer, c_playerPropMinerals, c_playerPropOperSubtract, (gv_gold[lv_importantPlayerIndex] / 20));
                        UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/084751AF&quot;) + (IntToText((gv_gold[lv_importantPlayerIndex] / 20)) + StringExternal(&quot;Param/Value/D0C92283&quot;))));
                    }
                    else {
                        PlayerModifyPropertyInt(lv_importantPlayer, c_playerPropMinerals, c_playerPropOperSubtract, (gv_gold[lv_importantPlayerIndex] / 40));
                        UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/0ED69490&quot;) + (IntToText((gv_gold[lv_importantPlayerIndex] / 40)) + StringExternal(&quot;Param/Value/1B6BBEA5&quot;))));
                    }
                    if ((gv_jewelofReturn[lv_importantPlayerIndex] == true) &amp;&amp; (UnitGroupHasUnit(gv_unitsthatdidDamagetoSyrital, gv_players[lv_importantPlayerIndex].dragon) == false) &amp;&amp; (UnitGroupHasUnit(gv_unitsthatdidDamagetoSremagsi, gv_players[lv_importantPlayerIndex].dragon) == false) &amp;&amp; (UnitGroupHasUnit(gv_unitsthatdidDamagetoMachinaDePlagam, gv_players[lv_importantPlayerIndex].dragon) == false) &amp;&amp; (PlayerGroupHasPlayer(gv_playersinBattlewithGuardians, lv_importantPlayer) == false) &amp;&amp; (PlayerGroupHasPlayer(gv_playersInBattleWithZauberer1stForm, lv_importantPlayer) == false) &amp;&amp; (PlayerGroupHasPlayer(gv_playersInBattleWithZauberer2ndForm, lv_importantPlayer) == false) &amp;&amp; (PlayerGroupHasPlayer(gv_playersInBioDome, lv_importantPlayer) == false) &amp;&amp; (PlayerGroupHasPlayer(gv_playersintheArena, lv_importantPlayer) == false) &amp;&amp; (lv_deathPlayer != 16)) {
                        UnitSetPosition(gv_players[lv_importantPlayerIndex].dragon, lv_deadpoint, false);
                        UnitRevive(gv_players[lv_importantPlayerIndex].dragon);
                        libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
                        libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
                        UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropLifePercent, 50.0);
                        UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropEnergyPercent, 0.0);
                        UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropShields, 0.0);
                        UnitSetPosition(gv_players[lv_importantPlayerIndex].dragon, lv_deadpoint, false);
                    }
                    else {
                        UnitSetPosition(gv_players[lv_importantPlayerIndex].dragon, gv_respawnPoint[lv_importantPlayerIndex], false);
                        UnitRevive(gv_players[lv_importantPlayerIndex].dragon);
                        libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
                        libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
                        UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropLifePercent, 50.0);
                        UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropEnergyPercent, 0.0);
                        UnitSetPropertyFixed(gv_players[lv_importantPlayerIndex].dragon, c_unitPropShields, 0.0);
                        UnitSetPosition(gv_players[lv_importantPlayerIndex].dragon, gv_respawnPoint[lv_importantPlayerIndex], false);
                    }
                    CameraPan(lv_importantPlayer, UnitGetPosition(gv_players[lv_importantPlayerIndex].dragon), 0.0, -1, 10, false);
                    if ((gv_stoneofProtection[lv_importantPlayerIndex] == true)) {
                        UnitGroupLoopBegin(UnitGroupAlliance(lv_importantPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[lv_importantPlayerIndex].dragon), 10.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            UnitBehaviorAdd(UnitGroupLoopCurrent(), &quot;Paused&quot;, gv_players[lv_importantPlayerIndex].dragon, 1);
                        }
                        UnitGroupLoopEnd();
                    }
                    while ((lv_tempVitality &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;AddVitality&quot;, lv_importantPlayer, 1);
                        lv_tempVitality = (lv_tempVitality - 1);
                    }
                    while ((lv_tempStrength &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;AddStrength&quot;, lv_importantPlayer, 1);
                        lv_tempStrength = (lv_tempStrength - 1);
                    }
                    while ((lv_tempIntelligence &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;AddIntelligence&quot;, lv_importantPlayer, 1);
                        lv_tempIntelligence = (lv_tempIntelligence - 1);
                    }
                    while ((lv_tempDexterity &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;AddDexterity&quot;, lv_importantPlayer, 1);
                        lv_tempDexterity = (lv_tempDexterity - 1);
                    }
                    while ((lv_tempAgility &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;AddAgility&quot;, lv_importantPlayer, 1);
                        lv_tempAgility = (lv_tempAgility - 1);
                    }
                    autoC8EE7902_ae = gv_players[lv_importantPlayerIndex].stats.reborn.count;
                    autoC8EE7902_ai = 1;
                    lv_n = 1;
                    for ( ; ( (autoC8EE7902_ai &gt;= 0 &amp;&amp; lv_n &lt;= autoC8EE7902_ae) || (autoC8EE7902_ai &lt;= 0 &amp;&amp; lv_n &gt;= autoC8EE7902_ae) ) ; lv_n += autoC8EE7902_ai ) {
                        UnitBehaviorAdd(gv_players[lv_importantPlayerIndex].dragon, &quot;BlessingofDrache&quot;, gv_players[lv_importantPlayerIndex].dragon, 1);
                    }
                    if ((gv_fireSkin[lv_importantPlayerIndex] == true)) {
                        UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;FireSkin&quot;, lv_importantPlayer, 1);
                    }
                    if ((gv_allSeeingEye[lv_importantPlayerIndex] == true)) {
                        UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;AllSeeingEye&quot;, lv_importantPlayer, 1);
                    }
                    gf_ReapplyBuffs(lv_importantPlayer);
                    BankValueSetFromUnit(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].dragon);
                    UnitIssueOrder(gv_players[lv_importantPlayerIndex].dragon, Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                    libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
                    libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Full);
                    libNtve_gf_UnitRemoveCooldown(gv_players[lv_importantPlayerIndex].dragon, gv_aSPCooldownName);
                    gv_autosavePrevention[lv_importantPlayerIndex] = false;
                    gf_StatCheck(lv_importantPlayer);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReviveDragonNormal_Init () {
                gt_ReviveDragonNormal = TriggerCreate(&quot;gt_ReviveDragonNormal_Func&quot;);
                TriggerAddEventUnitDied(gt_ReviveDragonNormal, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;));
                TriggerAddEventUnitDied(gt_ReviveDragonNormal, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;));
                TriggerAddEventUnitDied(gt_ReviveDragonNormal, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;));
                TriggerAddEventUnitDied(gt_ReviveDragonNormal, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Revive Dragon (PvP)
            //--------------------------------------------------------------------------------------------------
            bool gt_ReviveDragonPvP_Func (bool testConds, bool runActions) {
                int auto7DAAFB49_ae;
                int auto7DAAFB49_ai;
                // Variable Declarations
                int lv_levelCountdown;
                fixed lv_maxExp;
                int lv_tempAgility;
                int lv_tempDexterity;
                int lv_tempIntelligence;
                int lv_tempStrength;
                int lv_tempVitality;
                int lv_importantPlayerIndex;
                int lv_importantPlayer;
                int lv_strengthoftheDragon;
                int lv_mindoftheDragon;
                int lv_powerOverwhelming;
                int lv_rage;
                int lv_vampiricTendencies;
                int lv_zeal;
                int lv_n;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_playersSetUp == true))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(libNtve_gf_KillingUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_dragonDying[(UnitGetOwner(EventUnit()) - 1)] == false)) {
                    lv_importantPlayer = UnitGetOwner(EventUnit());
                    lv_importantPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                    libNtve_gf_ShowHideBossBar(false, lv_importantPlayer);
                    libNtve_gf_ShowHideBossBar(false, (lv_importantPlayer + 4));
                    libNtve_gf_ShowHideBossBar(false, (lv_importantPlayer + 8));
                    SoundPlay(SoundLink(&quot;DragonDeath&quot;, -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                    lv_levelCountdown = gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.level;
                    while ((lv_levelCountdown &gt; 0)) {
                        lv_maxExp += (lv_levelCountdown * 100.0);
                        lv_levelCountdown = (lv_levelCountdown - 1);
                    }
                    UnitSetPosition(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, PointFromId(2508), false);
                    UnitRevive(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon);
                    libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
                    libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
                    UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
                    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 0.0);
                    UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 0.0);
                    UnitSetPosition(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, gv_respawnPoint[lv_importantPlayerIndex], false);
                    CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon), 0.0, -1, 10, false);
                    lv_levelCountdown = gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.level;
                    lv_levelCountdown = (lv_levelCountdown - 1);
                    lv_tempVitality = gv_players[lv_importantPlayerIndex].stats.vitality;
                    lv_tempStrength = gv_players[lv_importantPlayerIndex].stats.strength;
                    lv_tempIntelligence = gv_players[lv_importantPlayerIndex].stats.intelligence;
                    lv_tempDexterity = gv_players[lv_importantPlayerIndex].stats.dexterity;
                    lv_tempAgility = gv_players[lv_importantPlayerIndex].stats.agility;
                    while ((lv_tempVitality &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;AddVitality&quot;, lv_importantPlayer, 1);
                        lv_tempVitality = (lv_tempVitality - 1);
                    }
                    while ((lv_tempStrength &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;AddStrength&quot;, lv_importantPlayer, 1);
                        lv_tempStrength = (lv_tempStrength - 1);
                    }
                    while ((lv_tempIntelligence &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;AddIntelligence&quot;, lv_importantPlayer, 1);
                        lv_tempIntelligence = (lv_tempIntelligence - 1);
                    }
                    while ((lv_tempDexterity &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;AddDexterity&quot;, lv_importantPlayer, 1);
                        lv_tempDexterity = (lv_tempDexterity - 1);
                    }
                    while ((lv_tempAgility &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;AddAgility&quot;, lv_importantPlayer, 1);
                        lv_tempAgility = (lv_tempAgility - 1);
                    }
                    auto7DAAFB49_ae = gv_players[lv_importantPlayerIndex].stats.reborn.count;
                    auto7DAAFB49_ai = 1;
                    lv_n = 1;
                    for ( ; ( (auto7DAAFB49_ai &gt;= 0 &amp;&amp; lv_n &lt;= auto7DAAFB49_ae) || (auto7DAAFB49_ai &lt;= 0 &amp;&amp; lv_n &gt;= auto7DAAFB49_ae) ) ; lv_n += auto7DAAFB49_ai ) {
                        UnitBehaviorAdd(gv_players[lv_importantPlayerIndex].dragon, &quot;BlessingofDrache&quot;, gv_players[lv_importantPlayerIndex].dragon, 1);
                    }
                    if ((gv_fireSkin[lv_importantPlayerIndex] == true)) {
                        UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;FireSkin&quot;, lv_importantPlayer, 1);
                    }
                    if ((gv_allSeeingEye[lv_importantPlayerIndex] == true)) {
                        UnitBehaviorAddPlayer(gv_players[lv_importantPlayerIndex].dragon, &quot;AllSeeingEye&quot;, lv_importantPlayer, 1);
                    }
                    gf_ReapplyBuffs(UnitGetOwner(EventUnit()));
                    BankValueSetFromUnit(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon);
                    UnitIssueOrder(gv_players[lv_importantPlayerIndex].dragon, Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                    libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
                    libNtve_gf_ChangeUnitDamage(gv_players[lv_importantPlayerIndex].dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Full);
                    libNtve_gf_UnitRemoveCooldown(gv_players[lv_importantPlayerIndex].dragon, gv_aSPCooldownName);
                    gv_autosavePrevention[lv_importantPlayerIndex] = false;
                    gf_StatCheck(lv_importantPlayer);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ReviveDragonPvP_Init () {
                gt_ReviveDragonPvP = TriggerCreate(&quot;gt_ReviveDragonPvP_Func&quot;);
                TriggerAddEventUnitDied(gt_ReviveDragonPvP, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;));
                TriggerAddEventUnitDied(gt_ReviveDragonPvP, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;));
                TriggerAddEventUnitDied(gt_ReviveDragonPvP, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;));
                TriggerAddEventUnitDied(gt_ReviveDragonPvP, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Up Attribute Dialog
            //--------------------------------------------------------------------------------------------------
            bool gt_SetUpAttributeDialog_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                DialogCreate(200, 65, c_anchorBottomRight, 425, 215, true);
                gv_players[0].stats.attributeDialog.state = DialogLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_players[0].stats.attributeDialog.state, 200, 30, c_anchorTop, 25, 5, StringExternal(&quot;Param/Value/E8D04C14&quot;), Color(100,100,100), false, 2.0);
                libNtve_gf_CreateDialogItemLabel(gv_players[0].stats.attributeDialog.state, 200, 25, c_anchorBottom, 90, 15, StringToText(gv_attributeText[0]), Color(22*100/255,128*100/255,0), false, 2.0);
                gv_players[0].stats.attributeDialog.textBox = DialogControlLastCreated();
                DialogSetVisible(gv_players[0].stats.attributeDialog.state, PlayerGroupSingle(1), true);
                DialogCreate(200, 65, c_anchorBottomRight, 400, 200, true);
                gv_players[1].stats.attributeDialog.state = DialogLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_players[1].stats.attributeDialog.state, 200, 30, c_anchorTop, 25, 5, StringExternal(&quot;Param/Value/51EFD861&quot;), Color(100,100,100), false, 2.0);
                libNtve_gf_CreateDialogItemLabel(gv_players[1].stats.attributeDialog.state, 200, 25, c_anchorBottom, 90, 15, StringToText(gv_attributeText[1]), Color(22*100/255,128*100/255,0), false, 2.0);
                gv_players[1].stats.attributeDialog.textBox = DialogControlLastCreated();
                DialogSetVisible(gv_players[1].stats.attributeDialog.state, PlayerGroupSingle(2), true);
                DialogCreate(200, 65, c_anchorBottomRight, 400, 200, true);
                gv_players[2].stats.attributeDialog.state = DialogLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_players[2].stats.attributeDialog.state, 200, 30, c_anchorTop, 25, 5, StringExternal(&quot;Param/Value/4872BA9E&quot;), Color(100,100,100), false, 2.0);
                libNtve_gf_CreateDialogItemLabel(gv_players[2].stats.attributeDialog.state, 200, 25, c_anchorBottom, 90, 15, StringToText(gv_attributeText[2]), Color(22*100/255,128*100/255,0), false, 2.0);
                gv_players[2].stats.attributeDialog.textBox = DialogControlLastCreated();
                DialogSetVisible(gv_players[2].stats.attributeDialog.state, PlayerGroupSingle(3), true);
                DialogCreate(200, 65, c_anchorBottomRight, 400, 200, true);
                gv_players[3].stats.attributeDialog.state = DialogLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_players[3].stats.attributeDialog.state, 200, 30, c_anchorTop, 25, 5, StringExternal(&quot;Param/Value/9EA6C311&quot;), Color(100,100,100), false, 2.0);
                libNtve_gf_CreateDialogItemLabel(gv_players[3].stats.attributeDialog.state, 200, 25, c_anchorBottom, 90, 15, StringToText(gv_attributeText[3]), Color(22*100/255,128*100/255,0), false, 2.0);
                gv_players[3].stats.attributeDialog.textBox = DialogControlLastCreated();
                DialogSetVisible(gv_players[3].stats.attributeDialog.state, PlayerGroupSingle(4), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetUpAttributeDialog_Init () {
                gt_SetUpAttributeDialog = TriggerCreate(&quot;gt_SetUpAttributeDialog_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Level 0 Check
            //--------------------------------------------------------------------------------------------------
            bool gt_Level0Check_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                    if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent) &lt; 0.0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetType(EventUnit()) == &quot;MasterDragon&quot;)) {
                    UnitSetPropertyFixed(EventUnit(), c_unitPropLevel, 99.0);
                    UnitSetPropertyFixed(EventUnit(), c_unitPropXP, 499999.0);
                }
                if ((UnitGetType(EventUnit()) == &quot;LegendaryDragon&quot;)) {
                    UnitSetPropertyFixed(EventUnit(), c_unitPropLevel, 100.0);
                    UnitSetPropertyFixed(EventUnit(), c_unitPropXP, 0.0);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Level0Check_Init () {
                gt_Level0Check = TriggerCreate(&quot;gt_Level0Check_Func&quot;);
                TriggerAddEventUnitGainExperience(gt_Level0Check, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Level Up
            //--------------------------------------------------------------------------------------------------
            bool gt_LevelUp_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_evolving[(UnitGetOwner(EventUnit()) - 1)] == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_LevelUp(UnitGetOwner(EventUnit()));
                gf_StatCheck(UnitGetOwner(EventUnit()));
                if ((UnitLevel(EventUnit()) == 25) &amp;&amp; ((UnitGetType(EventUnit()) == &quot;BabyDragon&quot;) || (UnitGetType(EventUnit()) == &quot;BabyIceDragon&quot;))) {
                    gf_EvolvetoTeen(UnitGetOwner(EventUnit()));
                }
                else {
                    if ((UnitLevel(EventUnit()) == 50) &amp;&amp; ((UnitGetType(EventUnit()) == &quot;TeenDragon&quot;) || (UnitGetType(EventUnit()) == &quot;TeenIceDragon&quot;))) {
                        gf_EvolvetoAdult(UnitGetOwner(EventUnit()));
                    }
                    else {
                        if ((UnitLevel(EventUnit()) == 75) &amp;&amp; ((UnitGetType(EventUnit()) == &quot;AdultDragon&quot;) || (UnitGetType(EventUnit()) == &quot;AdultIceDragon&quot;))) {
                            gf_EvolvetoMaster(UnitGetOwner(EventUnit()));
                        }
                        else {
                            if ((UnitLevel(EventUnit()) == 100) &amp;&amp; ((UnitGetType(EventUnit()) == &quot;MasterDragon&quot;) || (UnitGetType(EventUnit()) == &quot;MasterIceDragon&quot;))) {
                                gf_EvolvetoLegendary(UnitGetOwner(EventUnit()));
                            }
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LevelUp_Init () {
                gt_LevelUp = TriggerCreate(&quot;gt_LevelUp_Func&quot;);
                TriggerAddEventUnitGainLevel(gt_LevelUp, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Evolution Check
            //--------------------------------------------------------------------------------------------------
            bool gt_EvolutionCheck_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitLevel(EventUnit()) == 25) &amp;&amp; ((UnitGetType(EventUnit()) == &quot;BabyDragon&quot;) || (UnitGetType(EventUnit()) == &quot;BabyIceDragon&quot;))) {
                    gf_EvolvetoTeen(UnitGetOwner(EventUnit()));
                }
                else {
                    if ((UnitLevel(EventUnit()) == 50) &amp;&amp; ((UnitGetType(EventUnit()) == &quot;TeenDragon&quot;) || (UnitGetType(EventUnit()) == &quot;TeenIceDragon&quot;))) {
                        gf_EvolvetoAdult(UnitGetOwner(EventUnit()));
                    }
                    else {
                        if ((UnitLevel(EventUnit()) == 75) &amp;&amp; ((UnitGetType(EventUnit()) == &quot;AdultDragon&quot;) || (UnitGetType(EventUnit()) == &quot;AdultIceDragon&quot;))) {
                            gf_EvolvetoMaster(UnitGetOwner(EventUnit()));
                        }
                        else {
                            if ((UnitLevel(EventUnit()) == 100) &amp;&amp; ((UnitGetType(EventUnit()) == &quot;MasterDragon&quot;) || (UnitGetType(EventUnit()) == &quot;MasterIceDragon&quot;))) {
                                gf_EvolvetoLegendary(UnitGetOwner(EventUnit()));
                            }
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EvolutionCheck_Init () {
                gt_EvolutionCheck = TriggerCreate(&quot;gt_EvolutionCheck_Func&quot;);
                TriggerAddEventUnitRegion(gt_EvolutionCheck, null, RegionFromId(258), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Agility+1
            //--------------------------------------------------------------------------------------------------
            bool gt_Agility1_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(EventUnit());
                if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints &gt; 0.0)) {
                    SoundPlay(SoundLink(&quot;UI_ChallengeCountdown&quot;, -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints - 1.0);
                    BankValueSetFromFixed(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, &quot;AP&quot;, PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.attributePoints);
                    gv_attributeText[lv_triggeringPlayerIndex] = FixedToString(gv_players[lv_triggeringPlayerIndex].stats.attributePoints, 0);
                    libNtve_gf_SetDialogItemText(gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributeDialog.textBox, StringToText(gv_attributeText[(UnitGetOwner(EventUnit()) - 1)]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    UnitBehaviorAddPlayer(EventUnit(), &quot;AddAgility&quot;, UnitGetOwner(EventUnit()), 1);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.agility = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.agility + 1);
                    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints == 0.0)) {
                        gf_HideStats(EventUnit());
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_triggeringPlayer), c_messageAreaError, StringExternal(&quot;Param/Value/EAFC558B&quot;));
                }
                if ((gv_players[lv_triggeringPlayerIndex].stats.agility == 100)) {
                    UnitAbilityShow(EventUnit(), &quot;Agility1&quot;, false);
                }
                while (gv_players[lv_triggeringPlayerIndex].banks.accessing) {
                    Wait(1.0, c_timeGame);
                }
                gv_players[lv_triggeringPlayerIndex].banks.accessing = true;
                BankValueSetFromInt(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, &quot;Ag&quot;, PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.agility);
                gv_players[lv_triggeringPlayerIndex].banks.accessing = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Agility1_Init () {
                gt_Agility1 = TriggerCreate(&quot;gt_Agility1_Func&quot;);
                TriggerAddEventUnitAbility(gt_Agility1, null, AbilityCommand(&quot;Agility1&quot;, 0), c_abilEffectStageFinish, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Dexterity+1
            //--------------------------------------------------------------------------------------------------
            bool gt_Dexterity1_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(EventUnit());
                if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints &gt; 0.0)) {
                    SoundPlay(SoundLink(&quot;UI_ChallengeCountdown&quot;, -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints - 1.0);
                    BankValueSetFromFixed(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, &quot;AP&quot;, PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.attributePoints);
                    gv_attributeText[lv_triggeringPlayerIndex] = FixedToString(gv_players[lv_triggeringPlayerIndex].stats.attributePoints, 0);
                    libNtve_gf_SetDialogItemText(gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributeDialog.textBox, StringToText(gv_attributeText[(UnitGetOwner(EventUnit()) - 1)]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    UnitBehaviorAddPlayer(EventUnit(), &quot;AddDexterity&quot;, UnitGetOwner(EventUnit()), 1);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.dexterity = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.dexterity + 1);
                    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints == 0.0)) {
                        gf_HideStats(EventUnit());
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_triggeringPlayer), c_messageAreaError, StringExternal(&quot;Param/Value/925025D3&quot;));
                }
                while (gv_players[lv_triggeringPlayerIndex].banks.accessing) {
                    Wait(1.0, c_timeGame);
                }
                gv_players[lv_triggeringPlayerIndex].banks.accessing = true;
                BankValueSetFromInt(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, &quot;De&quot;, PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.dexterity);
                gv_players[lv_triggeringPlayerIndex].banks.accessing = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Dexterity1_Init () {
                gt_Dexterity1 = TriggerCreate(&quot;gt_Dexterity1_Func&quot;);
                TriggerAddEventUnitAbility(gt_Dexterity1, null, AbilityCommand(&quot;Dexterity1&quot;, 0), c_abilEffectStageFinish, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Intelligence+1
            //--------------------------------------------------------------------------------------------------
            bool gt_Intelligence1_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(EventUnit());
                if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints &gt; 0.0)) {
                    SoundPlay(SoundLink(&quot;UI_ChallengeCountdown&quot;, -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints - 1.0);
                    BankValueSetFromFixed(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, &quot;AP&quot;, PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.attributePoints);
                    gv_attributeText[lv_triggeringPlayerIndex] = FixedToString(gv_players[lv_triggeringPlayerIndex].stats.attributePoints, 0);
                    libNtve_gf_SetDialogItemText(gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributeDialog.textBox, StringToText(gv_attributeText[(UnitGetOwner(EventUnit()) - 1)]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    UnitBehaviorAddPlayer(EventUnit(), &quot;AddIntelligence&quot;, UnitGetOwner(EventUnit()), 1);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.intelligence = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.intelligence + 1);
                    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints == 0.0)) {
                        gf_HideStats(EventUnit());
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaError, StringExternal(&quot;Param/Value/6DCD7D69&quot;));
                }
                while (gv_players[lv_triggeringPlayerIndex].banks.accessing) {
                    Wait(1.0, c_timeGame);
                }
                gv_players[lv_triggeringPlayerIndex].banks.accessing = true;
                BankValueSetFromInt(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, &quot;Int&quot;, PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.intelligence);
                gv_players[lv_triggeringPlayerIndex].banks.accessing = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Intelligence1_Init () {
                gt_Intelligence1 = TriggerCreate(&quot;gt_Intelligence1_Func&quot;);
                TriggerAddEventUnitAbility(gt_Intelligence1, null, AbilityCommand(&quot;Intelligence1&quot;, 0), c_abilEffectStageFinish, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Strength+1
            //--------------------------------------------------------------------------------------------------
            bool gt_Strength1_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(EventUnit());
                if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints &gt; 0.0)) {
                    SoundPlay(SoundLink(&quot;UI_ChallengeCountdown&quot;, -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints - 1.0);
                    BankValueSetFromFixed(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, &quot;AP&quot;, PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.attributePoints);
                    gv_attributeText[lv_triggeringPlayerIndex] = FixedToString(gv_players[lv_triggeringPlayerIndex].stats.attributePoints, 0);
                    libNtve_gf_SetDialogItemText(gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributeDialog.textBox, StringToText(gv_attributeText[(UnitGetOwner(EventUnit()) - 1)]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    UnitBehaviorAddPlayer(EventUnit(), &quot;AddStrength&quot;, UnitGetOwner(EventUnit()), 1);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.strength = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.strength + 1);
                    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints == 0.0)) {
                        gf_HideStats(EventUnit());
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_triggeringPlayer), c_messageAreaError, StringExternal(&quot;Param/Value/E289DC4A&quot;));
                }
                while (gv_players[lv_triggeringPlayerIndex].banks.accessing) {
                    Wait(1.0, c_timeGame);
                }
               
                gv_players[lv_triggeringPlayerIndex].banks.accessing = true;
                BankValueSetFromInt(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, &quot;Str&quot;, PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.strength);
                gv_players[lv_triggeringPlayerIndex].banks.accessing = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Strength1_Init () {
                gt_Strength1 = TriggerCreate(&quot;gt_Strength1_Func&quot;);
                TriggerAddEventUnitAbility(gt_Strength1, null, AbilityCommand(&quot;Strength1&quot;, 0), c_abilEffectStageFinish, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Vitality+1
            //--------------------------------------------------------------------------------------------------
            bool gt_Vitality1_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(EventUnit());
                if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints &gt; 0.0)) {
                    SoundPlay(SoundLink(&quot;UI_ChallengeCountdown&quot;, -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints - 1.0);
                    BankValueSetFromFixed(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, &quot;AP&quot;, PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.attributePoints);
                    gv_attributeText[lv_triggeringPlayerIndex] = FixedToString(gv_players[lv_triggeringPlayerIndex].stats.attributePoints, 0);
                    libNtve_gf_SetDialogItemText(gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributeDialog.textBox, StringToText(gv_attributeText[(UnitGetOwner(EventUnit()) - 1)]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    UnitBehaviorAddPlayer(EventUnit(), &quot;AddVitality&quot;, UnitGetOwner(EventUnit()), 1);
                    gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.vitality = (gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.vitality + 1);
                    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.attributePoints == 0.0)) {
                        gf_HideStats(EventUnit());
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_triggeringPlayer), c_messageAreaError, StringExternal(&quot;Param/Value/5188E700&quot;));
                }
                while (gv_players[lv_triggeringPlayerIndex].banks.accessing) {
                    Wait(1.0, c_timeGame);
                }
                gv_players[lv_triggeringPlayerIndex].banks.accessing = true;
                BankValueSetFromInt(gv_players[lv_triggeringPlayerIndex].banks.dragonBank, &quot;Vi&quot;, PlayerHandle(lv_triggeringPlayer), gv_players[lv_triggeringPlayerIndex].stats.vitality);
                gv_players[lv_triggeringPlayerIndex].banks.accessing = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Vitality1_Init () {
                gt_Vitality1 = TriggerCreate(&quot;gt_Vitality1_Func&quot;);
                TriggerAddEventUnitAbility(gt_Vitality1, null, AbilityCommand(&quot;Vitality1&quot;, 0), c_abilEffectStageFinish, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Update Buffs
            //--------------------------------------------------------------------------------------------------
            bool gt_UpdateBuffs_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    gf_ReapplyBuffs(PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UpdateBuffs_Init () {
                gt_UpdateBuffs = TriggerCreate(&quot;gt_UpdateBuffs_Func&quot;);
                TriggerAddEventTimePeriodic(gt_UpdateBuffs, 10.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Show Talents
            //--------------------------------------------------------------------------------------------------
            bool gt_ShowTalents_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(EventUnit());
                lib1_gf_ShowHideTalentTree(lv_triggeringPlayer);
                gf_ReapplyBuffs(lv_triggeringPlayer);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ShowTalents_Init () {
                gt_ShowTalents = TriggerCreate(&quot;gt_ShowTalents_Func&quot;);
                TriggerAddEventUnitAbility(gt_ShowTalents, null, AbilityCommand(&quot;Talents&quot;, 0), c_unitAbilStageExecute, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set isIdle On
            //--------------------------------------------------------------------------------------------------
            bool gt_SetisIdleOn_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_isIdle[(UnitGetOwner(EventUnit()) - 1)] = true;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetisIdleOn_Init () {
                gt_SetisIdleOn = TriggerCreate(&quot;gt_SetisIdleOn_Func&quot;);
                TriggerAddEventUnitBecomesIdle(gt_SetisIdleOn, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;), true);
                TriggerAddEventUnitBecomesIdle(gt_SetisIdleOn, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;), true);
                TriggerAddEventUnitBecomesIdle(gt_SetisIdleOn, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;), true);
                TriggerAddEventUnitBecomesIdle(gt_SetisIdleOn, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set isIdle Off
            //--------------------------------------------------------------------------------------------------
            bool gt_SetisIdleOff_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_isIdle[(UnitGetOwner(EventUnit()) - 1)] = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetisIdleOff_Init () {
                gt_SetisIdleOff = TriggerCreate(&quot;gt_SetisIdleOff_Func&quot;);
                TriggerAddEventUnitBecomesIdle(gt_SetisIdleOff, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;), false);
                TriggerAddEventUnitBecomesIdle(gt_SetisIdleOff, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;), false);
                TriggerAddEventUnitBecomesIdle(gt_SetisIdleOff, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;), false);
                TriggerAddEventUnitBecomesIdle(gt_SetisIdleOff, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;), false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Defend Yourself
            //--------------------------------------------------------------------------------------------------
            bool gt_DefendYourself_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_isIdle[(UnitGetOwner(EventUnit()) - 1)] == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DefendYourself_Init () {
                gt_DefendYourself = TriggerCreate(&quot;gt_DefendYourself_Func&quot;);
                TriggerAddEventUnitAttacked2(gt_DefendYourself, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;), null);
                TriggerAddEventUnitAttacked2(gt_DefendYourself, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;), null);
                TriggerAddEventUnitAttacked2(gt_DefendYourself, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;), null);
                TriggerAddEventUnitAttacked2(gt_DefendYourself, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;), null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Frost Spike
            //--------------------------------------------------------------------------------------------------
            bool gt_FrostSpike_Func (bool testConds, bool runActions) {
                // Variable Declarations
                actor lv_actor;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_CreateModelAtPoint(&quot;SelendisInterceptorAttackImpact&quot;, UnitGetPosition(EventUnit()));
                libNtve_gf_AttachModelToUnit(EventUnit(), &quot;SelendisInterceptorAttackImpact&quot;, &quot;Ref_Center&quot;);
                SoundPlayAtPoint(SoundLink(&quot;Bilestrider_AttackImpact&quot;, -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FrostSpike_Init () {
                gt_FrostSpike = TriggerCreate(&quot;gt_FrostSpike_Func&quot;);
                TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, &quot;FrostSpikeDamageLevel1&quot;);
                TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, &quot;FrostSpikeDamageLevel10&quot;);
                TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, &quot;FrostSpikeDamageLevel&quot;);
                TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, &quot;FrostSpikeDamageLevel3&quot;);
                TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, &quot;FrostSpikeDamageLevel4&quot;);
                TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, &quot;FrostSpikeDamageLevel5&quot;);
                TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, &quot;FrostSpikeDamageLevel6&quot;);
                TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, &quot;FrostSpikeDamageLevel7&quot;);
                TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, &quot;FrostSpikeDamageLevel8&quot;);
                TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, &quot;FrostSpikeDamageLevel9&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Syrital - Talons Burning
            //--------------------------------------------------------------------------------------------------
            bool gt_SyritalTalonsBurning_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_RandomEffectonAttack(10.0, 1, &quot;Burning2&quot;, EventUnit(), EventUnitDamageSourceUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SyritalTalonsBurning_Init () {
                gt_SyritalTalonsBurning = TriggerCreate(&quot;gt_SyritalTalonsBurning_Func&quot;);
                TriggerAddEventUnitDamaged(gt_SyritalTalonsBurning, null, c_unitDamageTypeAny, c_unitDamageNonFatal, &quot;Talons2&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Robus - Spawn Allies
            //--------------------------------------------------------------------------------------------------
            bool gt_RobusSpawnAllies_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnitDamageSourceUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGroupCount(UnitGroup(&quot;Karramarro&quot;, 15, RegionFromId(264), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0)) {
                    gf_RandomlySpawnAllies((5.0 / UnitGroupCount(UnitGroup(&quot;Karramarro&quot;, 15, RegionFromId(264), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), 1, &quot;Karramarro&quot;, EventUnit(), EventUnitDamageSourceUnit());
                }
                else {
                    gf_RandomlySpawnAllies(10.0, 1, &quot;Karramarro&quot;, EventUnit(), EventUnitDamageSourceUnit());
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RobusSpawnAllies_Init () {
                gt_RobusSpawnAllies = TriggerCreate(&quot;gt_RobusSpawnAllies_Func&quot;);
                TriggerAddEventUnitDamaged(gt_RobusSpawnAllies, UnitRefFromVariable(&quot;gv_robus&quot;), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Robus - Carrion Needles Poison
            //--------------------------------------------------------------------------------------------------
            bool gt_RobusCarrionNeedlesPoison_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_RandomEffectonAttack(10.0, 1, &quot;Poisoned&quot;, EventUnit(), EventUnitDamageSourceUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RobusCarrionNeedlesPoison_Init () {
                gt_RobusCarrionNeedlesPoison = TriggerCreate(&quot;gt_RobusCarrionNeedlesPoison_Func&quot;);
                TriggerAddEventUnitDamaged(gt_RobusCarrionNeedlesPoison, null, c_unitDamageTypeAny, c_unitDamageNonFatal, &quot;CarrionNeedles&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sremagsi - Tentacle Disorientation
            //--------------------------------------------------------------------------------------------------
            bool gt_SremagsiTentacleDisorientation_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_RandomEffectonAttack(10.0, 1, &quot;Disorientated&quot;, EventUnit(), EventUnitDamageSourceUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SremagsiTentacleDisorientation_Init () {
                gt_SremagsiTentacleDisorientation = TriggerCreate(&quot;gt_SremagsiTentacleDisorientation_Func&quot;);
                TriggerAddEventUnitDamaged(gt_SremagsiTentacleDisorientation, null, c_unitDamageTypeAny, c_unitDamageNonFatal, &quot;TenteclesDamage&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero - Carrion Needles Poison
            //--------------------------------------------------------------------------------------------------
            bool gt_HeroCarrionNeedlesPoison_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_RandomEffectonAttack(2.5, 1, &quot;Poisoned&quot;, EventUnit(), EventUnitDamageSourceUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HeroCarrionNeedlesPoison_Init () {
                gt_HeroCarrionNeedlesPoison = TriggerCreate(&quot;gt_HeroCarrionNeedlesPoison_Func&quot;);
                TriggerAddEventUnitDamaged(gt_HeroCarrionNeedlesPoison, null, c_unitDamageTypeAny, c_unitDamageNonFatal, &quot;CarrionNeedles&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero - Sremagsi&apos;s Tentacles Disorientated
            //--------------------------------------------------------------------------------------------------
            bool gt_HeroSremagsisTentaclesDisorientated_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_RandomEffectonAttack(2.5, 1, &quot;Poisoned&quot;, EventUnit(), EventUnitDamageSourceUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HeroSremagsisTentaclesDisorientated_Init () {
                gt_HeroSremagsisTentaclesDisorientated = TriggerCreate(&quot;gt_HeroSremagsisTentaclesDisorientated_Func&quot;);
                TriggerAddEventUnitDamaged(gt_HeroSremagsisTentaclesDisorientated, null, c_unitDamageTypeAny, c_unitDamageNonFatal, &quot;SremagsisTentacles&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Nosferatu&apos;s Logic
            //--------------------------------------------------------------------------------------------------
            bool gt_NosferatusLogic_Func (bool testConds, bool runActions) {
                int autoD08DB74B_val;
                // Variable Declarations
                int lv_randomNum;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_randomNum = RandomInt(0, 3);
                autoD08DB74B_val = lv_randomNum;
                if (autoD08DB74B_val == 0) {
                    UnitIssueOrder(gv_nosferatu, Order(AbilityCommand(&quot;Nova&quot;, 0)), c_orderQueueReplace);
                    UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueAddToEnd);
                }
                else if (autoD08DB74B_val == 1) {
                    UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand(&quot;Inferno&quot;, 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
                    UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueAddToEnd);
                }
                else if (autoD08DB74B_val == 2) {
                    UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand(&quot;GravitonPrison&quot;, 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
                    UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueAddToEnd);
                }
                else if (autoD08DB74B_val == 3) {
                    UnitIssueOrder(gv_nosferatu, OrderTargetingPoint(AbilityCommand(&quot;HybridBlink&quot;, 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                    UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueAddToEnd);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_NosferatusLogic_Init () {
                gt_NosferatusLogic = TriggerCreate(&quot;gt_NosferatusLogic_Func&quot;);
                TriggerEnable(gt_NosferatusLogic, false);
                TriggerAddEventTimePeriodic(gt_NosferatusLogic, 5.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Nosferatu Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_NosferatuDies_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_NosferatusLogic, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_NosferatuDies_Init () {
                gt_NosferatuDies = TriggerCreate(&quot;gt_NosferatuDies_Func&quot;);
                TriggerAddEventUnitDied(gt_NosferatuDies, UnitRefFromVariable(&quot;gv_nosferatu&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Nosferatu death count
            //--------------------------------------------------------------------------------------------------
            bool gt_Nosferatudeathcount_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(libNtve_gf_KillingUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_nosferatusDeathCount &gt;= 10000)) {
                    gv_nosferatusDeathCount = 0;
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Impetus&quot;, 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Impetus&quot;, 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Impetus&quot;, 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Impetus&quot;, 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Impetus&quot;, 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Nosferatu&quot;, 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
                    gv_nosferatu = UnitLastCreated();
                    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_nosferatu), 10.0, Color(25.10, 0.00, 0.00));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/8234D839&quot;));
                    TriggerEnable(gt_NosferatusLogic, true);
                }
                else {
                    gv_nosferatusDeathCount += 1;
                }
                gf_NosferatusRelic(UnitGetOwner(libNtve_gf_KillingUnit()), libNtve_gf_KillingUnit(), UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropLifeMax));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Nosferatudeathcount_Init () {
                gt_Nosferatudeathcount = TriggerCreate(&quot;gt_Nosferatudeathcount_Func&quot;);
                TriggerAddEventUnitDied(gt_Nosferatudeathcount, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Greed is Good
            //--------------------------------------------------------------------------------------------------
            bool gt_GreedisGood_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_killResouces;
                fixed lv_giGLevel;
                int lv_thisTag;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(libNtve_gf_KillingUnit())) == true)) {
                    lv_killResouces = UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent);
                    lv_giGLevel = UnitBehaviorCount(libNtve_gf_KillingUnit(), &quot;GreedIsGood&quot;);
                    PlayerModifyPropertyInt(UnitGetOwner(libNtve_gf_KillingUnit()), c_playerPropMinerals, c_playerPropOperAdd, FixedToInt(((lv_giGLevel * 0.05) * lv_killResouces)));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GreedisGood_Init () {
                gt_GreedisGood = TriggerCreate(&quot;gt_GreedisGood_Func&quot;);
                TriggerAddEventUnitDied(gt_GreedisGood, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Quick Learner
            //--------------------------------------------------------------------------------------------------
            bool gt_QuickLearner_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_killExperience;
                fixed lv_qLLevel;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_killExperience = UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent);
                lv_qLLevel = UnitBehaviorCount(libNtve_gf_KillingUnit(), &quot;QuickLearner&quot;);
                gf_AddExperience(libNtve_gf_KillingUnit(), ((lv_qLLevel * 0.01) * UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_QuickLearner_Init () {
                gt_QuickLearner = TriggerCreate(&quot;gt_QuickLearner_Func&quot;);
                TriggerAddEventUnitDied(gt_QuickLearner, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero takes melee damage
            //--------------------------------------------------------------------------------------------------
            bool gt_Herotakesmeleedamage_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_randomNumber;
                int lv_thisTag;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_randomNumber = RandomFixed(0.0, 100.0);
                if (((lv_randomNumber &gt;= 0.0) &amp;&amp; (lv_randomNumber &lt; ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.reborn.dodge * 0.1) + (UnitBehaviorCount(EventUnit(), &quot;Agility&quot;) * 0.1))))) {
                    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
                    TextTagCreate(StringExternal(&quot;Param/Value/4906195F&quot;), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                    lv_thisTag = TextTagLastCreated();
                    TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 50.20, 100.00));
                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                }
                else {
                    gf_Rage(EventUnit(), EventUnitDamageAmount());
                    gf_RealmSwitch(EventUnit(), EventUnitDamageSourceUnit());
                    if ((UnitBehaviorCount(EventUnit(), &quot;SpikedScales&quot;) &gt; 0)) {
                        UnitDamage(EventUnitDamageSourceUnit(), EventUnitDamageEffect(), EventUnitDamageSourceUnit(), (-1.0 * (EventUnitDamageAmount() * (0.09 * UnitBehaviorCount(EventUnit(), &quot;SpikedScales&quot;)))));
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Herotakesmeleedamage_Init () {
                gt_Herotakesmeleedamage = TriggerCreate(&quot;gt_Herotakesmeleedamage_Func&quot;);
                TriggerAddEventUnitDamaged(gt_Herotakesmeleedamage, null, c_unitDamageTypeMelee, c_unitDamageNonFatal, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero takes ranged damage
            //--------------------------------------------------------------------------------------------------
            bool gt_Herotakesrangeddamage_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_randomNumber;
                int lv_thisTag;
                unit lv_target;
                unit lv_dummy;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_randomNumber = RandomFixed(0.0, 100.0);
                if (((lv_randomNumber &gt;= 0.0) &amp;&amp; (lv_randomNumber &lt; ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.reborn.dodge * 0.1) + (UnitBehaviorCount(EventUnit(), &quot;Agility&quot;) * 0.1))))) {
                    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
                    TextTagCreate(StringExternal(&quot;Param/Value/E743D0C8&quot;), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                    lv_thisTag = TextTagLastCreated();
                    TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 50.20, 100.00));
                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                }
                else {
                    gf_Rage(EventUnit(), EventUnitDamageAmount());
                    gf_RealmSwitch(EventUnit(), EventUnitDamageSourceUnit());
                    lv_randomNumber = RandomFixed(0.0, 100.0);
                    if ((lv_randomNumber &lt; (1.0 * UnitBehaviorCount(EventUnit(), &quot;Retaliation&quot;)))) {
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;DragonDummy&quot;, 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitDamageSourceUnit()));
                        lv_dummy = UnitLastCreated();
                        UnitBehaviorAdd(lv_dummy, &quot;Intelligence&quot;, lv_dummy, (UnitBehaviorCount(EventUnit(), &quot;Intelligence&quot;) - 1));
                        if ((UnitAbilityGetLevel(EventUnit(), &quot;Nova&quot;) &gt;= 1)) {
                            UnitAbilityChangeLevel(lv_dummy, &quot;Nova&quot;, FixedToInt(UnitAbilityGetLevel(EventUnit(), &quot;Nova&quot;)));
                        }
                        else {
                            UnitAbilityChangeLevel(lv_dummy, &quot;Nova&quot;, 1);
                        }
                        UnitAbilityEnable(lv_dummy, &quot;Nova&quot;, true);
                        UnitIssueOrder(lv_dummy, Order(AbilityCommand(&quot;Nova&quot;, 0)), c_orderQueueReplace);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Herotakesrangeddamage_Init () {
                gt_Herotakesrangeddamage = TriggerCreate(&quot;gt_Herotakesrangeddamage_Func&quot;);
                TriggerAddEventUnitDamaged(gt_Herotakesrangeddamage, null, c_unitDamageTypeRanged, c_unitDamageNonFatal, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero takes spell damage
            //--------------------------------------------------------------------------------------------------
            bool gt_Herotakesspelldamage_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_randomNumber;
                int lv_thisTag;
                unit lv_target;
                unit lv_dummy;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_Rage(EventUnit(), EventUnitDamageAmount());
                gf_RealmSwitch(EventUnit(), EventUnitDamageSourceUnit());
                lv_randomNumber = RandomFixed(0.0, 100.0);
                if ((lv_randomNumber &lt; (1.0 * UnitBehaviorCount(EventUnit(), &quot;Retaliation&quot;)))) {
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;DragonDummy&quot;, 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitDamageSourceUnit()));
                    lv_dummy = UnitLastCreated();
                    UnitBehaviorAdd(lv_dummy, &quot;Intelligence&quot;, lv_dummy, (UnitBehaviorCount(EventUnit(), &quot;Intelligence&quot;) - 1));
                    UnitAbilityChangeLevel(lv_dummy, &quot;Nova&quot;, FixedToInt(UnitAbilityGetLevel(EventUnit(), &quot;Nova&quot;)));
                    UnitAbilityEnable(lv_dummy, &quot;Nova&quot;, true);
                    UnitIssueOrder(lv_dummy, Order(AbilityCommand(&quot;Nova&quot;, 0)), c_orderQueueReplace);
                }
                lv_randomNumber = RandomFixed(0.0, 100.0);
                if ((lv_randomNumber &lt; (1.0 * UnitBehaviorCount(EventUnit(), &quot;AbsorbMana&quot;)))) {
                    UnitAbilityReset(EventUnit(), AbilityCommand(&quot;Fireball&quot;, 0), c_spendLocationAll);
                    UnitAbilityReset(EventUnit(), AbilityCommand(&quot;FireClaws&quot;, 0), c_spendLocationAll);
                    UnitAbilityReset(EventUnit(), AbilityCommand(&quot;FlameEgg&quot;, 0), c_spendLocationAll);
                    UnitAbilityReset(EventUnit(), AbilityCommand(&quot;Nova&quot;, 0), c_spendLocationAll);
                    UnitAbilityReset(EventUnit(), AbilityCommand(&quot;Inferno&quot;, 0), c_spendLocationAll);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Herotakesspelldamage_Init () {
                gt_Herotakesspelldamage = TriggerCreate(&quot;gt_Herotakesspelldamage_Func&quot;);
                TriggerAddEventUnitDamaged(gt_Herotakesspelldamage, null, c_unitDamageTypeSpell, c_unitDamageNonFatal, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero takes splash damage
            //--------------------------------------------------------------------------------------------------
            bool gt_Herotakessplashdamage_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_Rage(EventUnit(), EventUnitDamageAmount());
                gf_RealmSwitch(EventUnit(), EventUnitDamageSourceUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Herotakessplashdamage_Init () {
                gt_Herotakessplashdamage = TriggerCreate(&quot;gt_Herotakessplashdamage_Func&quot;);
                TriggerAddEventUnitDamaged(gt_Herotakessplashdamage, null, c_unitDamageTypeSplash, c_unitDamageNonFatal, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero Miss ranged
            //--------------------------------------------------------------------------------------------------
            bool gt_HeroMissranged_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_randomNumber;
                int lv_thisTag;
                unitgroup lv_surroundingUnits;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                lv_surroundingUnits = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnitDamageSourceUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_randomNumber = RandomFixed(0.0, 100.0);
                if ((lv_randomNumber &gt; (75.0 + ((gv_players[(UnitGetOwner(EventUnitDamageSourceUnit()) - 1)].stats.reborn.miss * 0.1) + (UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;Dexterity&quot;) * 0.05))))) {
                    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) &lt;= 0.0)) {
                        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
                        TextTagCreate(StringExternal(&quot;Param/Value/9BDF1BE1&quot;), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                        lv_thisTag = TextTagLastCreated();
                        TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                    }
                }
                else {
                    lv_randomNumber = RandomFixed(0.0, 100.0);
                    if (((lv_randomNumber &lt; (0.2 * UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;Dexterity&quot;))))) {
                        UnitDamage(EventUnitDamageSourceUnit(), &quot;CriticalStrike&quot;, EventUnit(), (EventUnitDamageAmount() * (0.004 * UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;Strength&quot;))));
                        libNtve_gf_CreateModelAtPoint(&quot;FrenzyStartImpact&quot;, UnitGetPosition(EventUnit()));
                        TextTagCreate(StringExternal(&quot;Param/Value/0B6294CD&quot;), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                        lv_thisTag = TextTagLastCreated();
                        TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HeroMissranged_Init () {
                gt_HeroMissranged = TriggerCreate(&quot;gt_HeroMissranged_Func&quot;);
                TriggerAddEventUnitDamaged(gt_HeroMissranged, null, c_unitDamageTypeRanged, c_unitDamageNonFatal, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero Miss melee
            //--------------------------------------------------------------------------------------------------
            bool gt_HeroMissmelee_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_randomNumber;
                int lv_thisTag;
                unitgroup lv_surroundingUnits;
                fixed lv_vTGainMax;
                fixed lv_pOGainMax;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                lv_surroundingUnits = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(EventUnit())), UnitGetOwner(EventUnitDamageSourceUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_randomNumber = RandomFixed(0.0, 100.0);
                if ((lv_randomNumber &gt; (75.0 + ((gv_players[(UnitGetOwner(EventUnitDamageSourceUnit()) - 1)].stats.reborn.miss * 0.1) + (UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;Dexterity&quot;) * 0.05))))) {
                    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) &lt;= 0.0)) {
                        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
                        TextTagCreate(StringExternal(&quot;Param/Value/6979B884&quot;), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                        lv_thisTag = TextTagLastCreated();
                        TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                    }
                }
                else {
                    if ((EventUnitDamageEffect() != &quot;OnFire&quot;)) {
                        lv_vTGainMax = (EventUnitDamageAmount() * (0.01 * UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;VampiricTendencies&quot;)));
                        UnitSetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLife, c_unitPropCurrent) + lv_vTGainMax));
                        if ((lv_vTGainMax &gt; 0.0)) {
                            TextTagCreate(FixedToText(lv_vTGainMax, 0), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, true, PlayerGroupAll());
                            lv_thisTag = TextTagLastCreated();
                            TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
                            TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 100.00, 0.00));
                            TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
                        }
                        lv_pOGainMax = (EventUnitDamageAmount() * (0.01 * UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;PowerOverwhelming&quot;)));
                        UnitSetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropEnergy, c_unitPropCurrent) + lv_pOGainMax));
                        if ((lv_pOGainMax &gt; 0.0)) {
                            TextTagCreate(FixedToText(lv_pOGainMax, 0), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, true, PlayerGroupAll());
                            lv_thisTag = TextTagLastCreated();
                            TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
                            TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 100.00, 100.00));
                            TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
                        }
                    }
                    lv_randomNumber = RandomFixed(0.0, 100.0);
                    if (((lv_randomNumber &lt; (0.2 * UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;Dexterity&quot;))))) {
                        if ((EventUnitDamageEffect() != &quot;CriticalStrike&quot;)) {
                            if ((UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;CriticalCrepitus&quot;) &gt; 0)) {
                                UnitDamage(EventUnitDamageSourceUnit(), &quot;CriticalCrepitusDamage&quot;, EventUnit(), (EventUnitDamageAmount() * (0.004 * UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;Strength&quot;))));
                                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, UnitGetPosition(EventUnit()));
                                TextTagCreate(StringExternal(&quot;Param/Value/B416B1B4&quot;), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                                lv_thisTag = TextTagLastCreated();
                                TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                                TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                                TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                                lv_surroundingUnits = UnitGroupAlliance(UnitGetOwner(EventUnitDamageSourceUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                UnitGroupRemove(lv_surroundingUnits, EventUnit());
                                UnitGroupLoopBegin(lv_surroundingUnits);
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    UnitDamage(EventUnitDamageSourceUnit(), &quot;CriticalCrepitusDamage&quot;, UnitGroupLoopCurrent(), ((0.05 * UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;CriticalCrepitus&quot;)) * (EventUnitDamageAmount() * (0.004 * UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;Strength&quot;)))));
                                    libNtve_gf_CreateModelAtPoint(&quot;FrenzyStartImpact&quot;, UnitGetPosition(UnitGroupLoopCurrent()));
                                    TextTagCreate(StringExternal(&quot;Param/Value/BB36AEC9&quot;), 24, UnitGetPosition(UnitGroupLoopCurrent()), 1.0, true, true, PlayerGroupAll());
                                    lv_thisTag = TextTagLastCreated();
                                    TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                                }
                                UnitGroupLoopEnd();
                            }
                            else {
                                UnitDamage(EventUnitDamageSourceUnit(), &quot;CriticalStrike&quot;, EventUnit(), (EventUnitDamageAmount() * (0.004 * UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;Strength&quot;))));
                                libNtve_gf_CreateModelAtPoint(&quot;FrenzyStartImpact&quot;, UnitGetPosition(EventUnit()));
                                TextTagCreate(StringExternal(&quot;Param/Value/F3D40B26&quot;), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                                lv_thisTag = TextTagLastCreated();
                                TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                                TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                                TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                            }
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HeroMissmelee_Init () {
                gt_HeroMissmelee = TriggerCreate(&quot;gt_HeroMissmelee_Func&quot;);
                TriggerAddEventUnitDamaged(gt_HeroMissmelee, null, c_unitDamageTypeMelee, c_unitDamageNonFatal, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero Miss melee (1 Shot)
            //--------------------------------------------------------------------------------------------------
            bool gt_HeroMissmelee1Shot_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_randomNumber;
                int lv_thisTag;
                unitgroup lv_surroundingUnits;
                fixed lv_vTGainMax;
                fixed lv_pOGainMax;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                lv_surroundingUnits = UnitGroupEmpty();
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(EventUnit())), UnitGetOwner(EventUnitDamageSourceUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((EventUnitDamageEffect() != &quot;OnFire&quot;)) {
                    lv_vTGainMax = (EventUnitDamageAmount() * (0.01 * UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;VampiricTendencies&quot;)));
                    UnitSetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLife, c_unitPropCurrent) + lv_vTGainMax));
                    if ((lv_vTGainMax &gt; 0.0)) {
                        TextTagCreate(FixedToText(lv_vTGainMax, 0), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, true, PlayerGroupAll());
                        lv_thisTag = TextTagLastCreated();
                        TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
                        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 100.00, 0.00));
                        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
                    }
                    lv_pOGainMax = (EventUnitDamageAmount() * (0.01 * UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;PowerOverwhelming&quot;)));
                    UnitSetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropEnergy, c_unitPropCurrent) + lv_pOGainMax));
                    if ((lv_pOGainMax &gt; 0.0)) {
                        TextTagCreate(FixedToText(lv_pOGainMax, 0), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, true, PlayerGroupAll());
                        lv_thisTag = TextTagLastCreated();
                        TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
                        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 100.00, 100.00));
                        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HeroMissmelee1Shot_Init () {
                gt_HeroMissmelee1Shot = TriggerCreate(&quot;gt_HeroMissmelee1Shot_Func&quot;);
                TriggerAddEventUnitDamaged(gt_HeroMissmelee1Shot, null, c_unitDamageTypeMelee, c_unitDamageFatal, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero gives ranged damage
            //--------------------------------------------------------------------------------------------------
            bool gt_Herogivesrangeddamage_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) != 0))) {
                        return false;
                    }
                    if (!((UnitGetOwner(EventUnitDamageSourceUnit()) != 16))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(EventUnit())), UnitGetOwner(EventUnitDamageSourceUnit())) == true)) {
                    gf_StickyShot(EventUnitDamageSourceUnit(), EventUnit());
                    gf_DualWield(EventUnitDamageSourceUnit(), EventUnit(), EventUnitDamageEffect(), EventUnitDamageAmount());
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Herogivesrangeddamage_Init () {
                gt_Herogivesrangeddamage = TriggerCreate(&quot;gt_Herogivesrangeddamage_Func&quot;);
                TriggerAddEventUnitDamaged(gt_Herogivesrangeddamage, null, c_unitDamageTypeRanged, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Dark Dissulto
            //--------------------------------------------------------------------------------------------------
            bool gt_DarkDissulto_Func (bool testConds, bool runActions) {
                // Variable Declarations
                fixed lv_randomNumber;
                int lv_thisTag;
                unitgroup lv_surroundingUnits;
                actor lv_abilityActor;
                unit lv_target;
                unit lv_dummy;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                lv_surroundingUnits = UnitGroupEmpty();
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_randomNumber = RandomFixed(0.0, 100.0);
                if ((lv_randomNumber &lt;= (2.5 * UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;DarkDissulto&quot;)))) {
                    if (((EventUnitDamageEffect() == &quot;FireballDamage&quot;) || (EventUnitDamageEffect() == &quot;FireballDamageLevel10&quot;) || (EventUnitDamageEffect() == &quot;FireballDamage2&quot;) || (EventUnitDamageEffect() == &quot;FireballDamageLevel3&quot;) || (EventUnitDamageEffect() == &quot;FireballDamageLevel4&quot;) || (EventUnitDamageEffect() == &quot;FireballDamageLevel5&quot;) || (EventUnitDamageEffect() == &quot;FireballDamageLevel6&quot;) || (EventUnitDamageEffect() == &quot;FireballDamageLevel7&quot;) || (EventUnitDamageEffect() == &quot;FireballDamageLevel8&quot;) || (EventUnitDamageEffect() == &quot;FireballDamageLevel9&quot;))) {
                        lv_surroundingUnits = UnitGroupAlliance(UnitGetOwner(EventUnitDamageSourceUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 9.5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                        UnitGroupRemove(lv_surroundingUnits, EventUnit());
                        if ((UnitGroupCount(lv_surroundingUnits, c_unitCountAlive) &gt; 0)) {
                            lv_target = UnitGroupClosestToPoint(lv_surroundingUnits, UnitGetPosition(EventUnit()));
                            TextTagCreate(StringExternal(&quot;Param/Value/B80726D6&quot;), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                            lv_thisTag = TextTagLastCreated();
                            TextTagSetVelocity(lv_thisTag, 0.75, 0.0);
                            TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
                            TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                            TextTagCreate(StringExternal(&quot;Param/Value/33A50692&quot;), 24, UnitGetPosition(lv_target), 1.0, true, true, PlayerGroupAll());
                            lv_thisTag = TextTagLastCreated();
                            TextTagSetVelocity(lv_thisTag, 0.75, 180.0);
                            TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
                            TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                            libNtve_gf_UnitCreateFacingPoint(1, &quot;DragonDummy&quot;, 0, UnitGetOwner(EventUnitDamageSourceUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(lv_target));
                            lv_dummy = UnitLastCreated();
                            UnitBehaviorAdd(lv_dummy, &quot;DarkDissulto&quot;, lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;DarkDissulto&quot;) - 1));
                            UnitBehaviorAdd(lv_dummy, &quot;Intelligence&quot;, lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;Intelligence&quot;) - 1));
                            UnitAbilityChangeLevel(lv_dummy, &quot;Fireball&quot;, FixedToInt(UnitAbilityGetLevel(EventUnitDamageSourceUnit(), &quot;Fireball&quot;)));
                            UnitAbilityEnable(lv_dummy, &quot;Fireball&quot;, true);
                            UnitIssueOrder(lv_dummy, OrderTargetingUnit(AbilityCommand(&quot;Fireball&quot;, 0), lv_target), c_orderQueueReplace);
                        }
                    }
                    else {
                        if (((EventUnitDamageEffect() == &quot;FlameEggLevel1&quot;) || (EventUnitDamageEffect() == &quot;FlameEggLevel10Damage&quot;) || (EventUnitDamageEffect() == &quot;FlameEggLevel2&quot;) || (EventUnitDamageEffect() == &quot;FlameEggLevel3&quot;) || (EventUnitDamageEffect() == &quot;FlameEggLevel4&quot;) || (EventUnitDamageEffect() == &quot;FlameEggLevel5&quot;) || (EventUnitDamageEffect() == &quot;FlameEggLevel6&quot;) || (EventUnitDamageEffect() == &quot;FlameEggLevel7&quot;) || (EventUnitDamageEffect() == &quot;FlameEggLevel8&quot;) || (EventUnitDamageEffect() == &quot;FlameEggLevel9&quot;))) {
                            lv_surroundingUnits = UnitGroupAlliance(UnitGetOwner(EventUnitDamageSourceUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                            UnitGroupRemove(lv_surroundingUnits, EventUnit());
                            if ((UnitGroupCount(lv_surroundingUnits, c_unitCountAlive) &gt; 0)) {
                                lv_target = UnitGroupClosestToPoint(lv_surroundingUnits, UnitGetPosition(EventUnit()));
                                TextTagCreate(StringExternal(&quot;Param/Value/3B61BACC&quot;), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                                lv_thisTag = TextTagLastCreated();
                                TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                                TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                                TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                                TextTagCreate(StringExternal(&quot;Param/Value/29D50265&quot;), 24, UnitGetPosition(lv_target), 1.0, true, true, PlayerGroupAll());
                                lv_thisTag = TextTagLastCreated();
                                TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                                TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                                TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                                libNtve_gf_UnitCreateFacingPoint(1, &quot;DragonDummy&quot;, 0, UnitGetOwner(EventUnitDamageSourceUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(lv_target));
                                lv_dummy = UnitLastCreated();
                                UnitBehaviorAdd(lv_dummy, &quot;DarkDissulto&quot;, lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;DarkDissulto&quot;) - 1));
                                UnitBehaviorAdd(lv_dummy, &quot;Intelligence&quot;, lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;Intelligence&quot;) - 1));
                                UnitAbilityChangeLevel(lv_dummy, &quot;FlameEgg&quot;, FixedToInt(UnitAbilityGetLevel(EventUnitDamageSourceUnit(), &quot;FlameEgg&quot;)));
                                UnitAbilityEnable(lv_dummy, &quot;FlameEgg&quot;, true);
                                UnitIssueOrder(lv_dummy, OrderTargetingPoint(AbilityCommand(&quot;FlameEgg&quot;, 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
                            }
                        }
                        else {
                            if (((EventUnitDamageEffect() == &quot;FrostSpikeDamageLevel1&quot;) || (EventUnitDamageEffect() == &quot;FrostSpikeDamageLevel10&quot;) || (EventUnitDamageEffect() == &quot;FrostSpikeDamageLevel&quot;) || (EventUnitDamageEffect() == &quot;FrostSpikeDamageLevel3&quot;) || (EventUnitDamageEffect() == &quot;FrostSpikeDamageLevel4&quot;) || (EventUnitDamageEffect() == &quot;FrostSpikeDamageLevel5&quot;) || (EventUnitDamageEffect() == &quot;FrostSpikeDamageLevel6&quot;) || (EventUnitDamageEffect() == &quot;FrostSpikeDamageLevel7&quot;) || (EventUnitDamageEffect() == &quot;FrostSpikeDamageLevel8&quot;) || (EventUnitDamageEffect() == &quot;FrostSpikeDamageLevel9&quot;))) {
                                lv_surroundingUnits = UnitGroupAlliance(UnitGetOwner(EventUnitDamageSourceUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0);
                                UnitGroupRemove(lv_surroundingUnits, EventUnit());
                                if ((UnitGroupCount(lv_surroundingUnits, c_unitCountAlive) &gt; 0)) {
                                    lv_target = UnitGroupClosestToPoint(lv_surroundingUnits, UnitGetPosition(EventUnit()));
                                    TextTagCreate(StringExternal(&quot;Param/Value/75BACF39&quot;), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                                    lv_thisTag = TextTagLastCreated();
                                    TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                                    TextTagCreate(StringExternal(&quot;Param/Value/4970FF75&quot;), 24, UnitGetPosition(lv_target), 1.0, true, true, PlayerGroupAll());
                                    lv_thisTag = TextTagLastCreated();
                                    TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
                                    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
                                    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                                    libNtve_gf_UnitCreateFacingPoint(1, &quot;DragonDummy&quot;, 0, UnitGetOwner(EventUnitDamageSourceUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(lv_target));
                                    lv_dummy = UnitLastCreated();
                                    UnitBehaviorAdd(lv_dummy, &quot;DarkDissulto&quot;, lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;DarkDissulto&quot;) - 1));
                                    UnitBehaviorAdd(lv_dummy, &quot;Intelligence&quot;, lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), &quot;Intelligence&quot;) - 1));
                                    UnitAbilityChangeLevel(lv_dummy, &quot;FrostSpike&quot;, FixedToInt(UnitAbilityGetLevel(EventUnitDamageSourceUnit(), &quot;FrostSpike&quot;)));
                                    UnitAbilityEnable(lv_dummy, &quot;FrostSpike&quot;, true);
                                    UnitIssueOrder(lv_dummy, OrderTargetingUnit(AbilityCommand(&quot;FrostSpike&quot;, 0), lv_target), c_orderQueueReplace);
                                }
                            }
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DarkDissulto_Init () {
                gt_DarkDissulto = TriggerCreate(&quot;gt_DarkDissulto_Func&quot;);
                TriggerAddEventUnitDamaged(gt_DarkDissulto, null, c_unitDamageTypeSpell, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy AI (Attacked)
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyAIAttacked_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((EventUnitTarget() == UnitFromId(2511))) {
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), Point((PointGetX(UnitGetPosition(EventUnit())) + (PointGetX(UnitGetPosition(EventUnit())) - PointGetX(UnitGetPosition(EventUnitTarget())))), (PointGetY(UnitGetPosition(EventUnit())) + (PointGetY(UnitGetPosition(EventUnit())) - PointGetY(UnitGetPosition(EventUnitTarget())))))), c_orderQueueReplace);
                }
                else {
                    if ((EventUnitTarget() == UnitFromId(1597))) {
                        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), Point((PointGetX(UnitGetPosition(EventUnit())) + (PointGetX(UnitGetPosition(EventUnit())) - PointGetX(UnitGetPosition(EventUnitTarget())))), (PointGetY(UnitGetPosition(EventUnit())) + (PointGetY(UnitGetPosition(EventUnit())) - PointGetY(UnitGetPosition(EventUnitTarget())))))), c_orderQueueReplace);
                    }
                    else {
                        if ((EventUnitTarget() == UnitFromId(1976))) {
                            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), Point((PointGetX(UnitGetPosition(EventUnit())) + (PointGetX(UnitGetPosition(EventUnit())) - PointGetX(UnitGetPosition(EventUnitTarget())))), (PointGetY(UnitGetPosition(EventUnit())) + (PointGetY(UnitGetPosition(EventUnit())) - PointGetY(UnitGetPosition(EventUnitTarget())))))), c_orderQueueReplace);
                        }
                        else {
                            UnitGroupLoopBegin(UnitGroupAlliance(15, c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), (FixedToInt(UnitGetPropertyFixed(EventUnitTarget(), c_unitPropLevel, c_unitPropCurrent)) / 10.0)), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), EventUnitTarget()), c_orderQueueAddToEnd);
                            }
                            UnitGroupLoopEnd();
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyAIAttacked_Init () {
                gt_EnemyAIAttacked = TriggerCreate(&quot;gt_EnemyAIAttacked_Func&quot;);
                TriggerAddEventUnitAttacked(gt_EnemyAIAttacked, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy AI (Lava) 1
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyAILava1_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueAddToFront);
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), RegionRandomPoint(RegionFromId(255))), c_orderQueueAddToFront);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyAILava1_Init () {
                gt_EnemyAILava1 = TriggerCreate(&quot;gt_EnemyAILava1_Func&quot;);
                TriggerAddEventUnitRegion(gt_EnemyAILava1, null, RegionFromId(252), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy AI (Lava) 2
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyAILava2_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueAddToFront);
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), RegionRandomPoint(RegionFromId(256))), c_orderQueueAddToFront);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyAILava2_Init () {
                gt_EnemyAILava2 = TriggerCreate(&quot;gt_EnemyAILava2_Func&quot;);
                TriggerAddEventUnitRegion(gt_EnemyAILava2, null, RegionFromId(253), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy AI (Lava) 3
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyAILava3_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueAddToFront);
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), RegionRandomPoint(RegionFromId(257))), c_orderQueueAddToFront);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyAILava3_Init () {
                gt_EnemyAILava3 = TriggerCreate(&quot;gt_EnemyAILava3_Func&quot;);
                TriggerAddEventUnitRegion(gt_EnemyAILava3, null, RegionFromId(254), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy AI (Nest)
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemyAINest_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueAddToFront);
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), RegionRandomPoint(RegionFromId(259))), c_orderQueueAddToFront);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnemyAINest_Init () {
                gt_EnemyAINest = TriggerCreate(&quot;gt_EnemyAINest_Func&quot;);
                TriggerAddEventUnitRegion(gt_EnemyAINest, null, RegionFromId(258), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enemy Skill Response
            //--------------------------------------------------------------------------------------------------
            bool gt_EnemySkillResponse_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterSelf) | (1 &lt;&lt; c_targetFilterAlly) | (1 &lt;&lt; c_targetFilterNeutral) | (1 &lt;&lt; c_targetFilterLight) | (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)) | (1 &lt;&lt; (c_targetFilterInvulnerable - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), EventUnit()), c_orderQueueAddToEnd);
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnemySkillResponse_Init () {
                gt_EnemySkillResponse = TriggerCreate(&quot;gt_EnemySkillResponse_Func&quot;);
                TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;), AbilityCommand(&quot;Nova&quot;, 0), c_unitAbilStageAll, false);
                TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;), AbilityCommand(&quot;Nova&quot;, 0), c_unitAbilStageAll, false);
                TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;), AbilityCommand(&quot;Nova&quot;, 0), c_unitAbilStageAll, false);
                TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;), AbilityCommand(&quot;Nova&quot;, 0), c_unitAbilStageAll, false);
                TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;), AbilityCommand(&quot;Inferno&quot;, 0), c_unitAbilStageAll, false);
                TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;), AbilityCommand(&quot;Inferno&quot;, 0), c_unitAbilStageAll, false);
                TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;), AbilityCommand(&quot;Inferno&quot;, 0), c_unitAbilStageAll, false);
                TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;), AbilityCommand(&quot;Inferno&quot;, 0), c_unitAbilStageAll, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Zauberer&apos;s Favor
            //--------------------------------------------------------------------------------------------------
            bool gt_ZauberersFavor_Func (bool testConds, bool runActions) {
                string auto8B028ADB_val;
                // Variable Declarations
                int buffCount;
                int i;
                int j;
                
                string lv_deadUnit;
                int lv_unitIndex;
                // Variable Initialization
                lv_deadUnit = UnitGetType(EventUnit());
                // Conditions
                
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                   
                    }
                    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
                       
            return false;
                    }
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(libNtve_gf_KillingUnit())) == true))) {
                    
             return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                i = 0;
                j = 0;
                auto8B028ADB_val = lv_deadUnit;
                  
                    
                if (auto8B028ADB_val == &quot;SmallSheep&quot;) {
                    lv_unitIndex = 0;
             
                }
                else if (auto8B028ADB_val == &quot;Srepti&quot;) {
                    lv_unitIndex = 1;
                }
                else if (auto8B028ADB_val == &quot;Vogel&quot;) {
                    lv_unitIndex = 2;
                }
                else if (auto8B028ADB_val == &quot;CretonWarrior&quot;) {
                    lv_unitIndex = 3;
                }
                else if (auto8B028ADB_val == &quot;Karramarro&quot;) {
                    lv_unitIndex = 4;
                }
                else if (auto8B028ADB_val == &quot;CretonWatcher&quot;) {
                    lv_unitIndex = 5;
                }
                else if (auto8B028ADB_val == &quot;Alakdan&quot;) {
                    lv_unitIndex = 6;
                }
                else if (auto8B028ADB_val == &quot;Gagamba&quot;) {
                    lv_unitIndex = 7;
                }
                else if (auto8B028ADB_val == &quot;Odvratan&quot;) {
                    lv_unitIndex = 8;
                }
                else if (auto8B028ADB_val == &quot;Anguis&quot;) {
                    lv_unitIndex = 9;
                }
                else if (auto8B028ADB_val == &quot;Pervolo&quot;) {
                    lv_unitIndex = 10;
                }
                else if (auto8B028ADB_val == &quot;EliteCretonWarrior&quot;) {
                    lv_unitIndex = 11;
                }
                else if (auto8B028ADB_val == &quot;EliteCretonWatcher&quot;) {
                    lv_unitIndex = 12;
                }
                else if (auto8B028ADB_val == &quot;CretonWarMachine&quot;) {
                    lv_unitIndex = 13;
                }
              else if (auto8B028ADB_val == &quot;Impetus&quot;) {
                    lv_unitIndex = 19;
                }
              else if (auto8B028ADB_val == &quot;Mortuus&quot;) {
                    lv_unitIndex = 20;
                }
                else {
                //UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(&quot;How did you call this?&quot;));
                }
                if(gv_enemyDeathCounts[lv_unitIndex] &lt;= 255){
                   gv_enemyDeathCounts[lv_unitIndex] += 1;}
                UnitGroupLoopBegin(UnitGroup(UnitGetType(EventUnit()), 15, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                
                 for(i = UnitBehaviorCount(UnitGroupLoopCurrent(), &quot;ZauberersFavor&quot;); i &lt;= gv_enemyDeathCounts[lv_unitIndex]; i +=1){
                        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), &quot;ZauberersFavor&quot;, 15, 1);
                        //j += 1;
                    }
                
                   //Instead of removing all stacks and reappyling all stacks +1, see how many stacks each unit is short from what the buff is supposed to be at, and add that many.
                   // UnitBehaviorRemovePlayer(UnitGroupLoopCurrent(), &quot;ZauberersFavor&quot;, 15, c_unitBehaviorCountAll);
                   // if(UnitBehaviorCount(UnitGroupLoopCurrent(), &quot;ZauberersFavor&quot;) &lt;= gv_enemyDeathCounts[lv_unitIndex]){
                    //}
                    //UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), &quot;ZauberersFavor&quot;, 15, 1);
              
                //DebugStuff UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(auto8B028ADB_val) +   StringToText(&quot; is in slot &quot;) + IntToText(lv_unitIndex) + StringToText(&quot; which has this many stacks &quot;) +  IntToText(gv_enemyDeathCounts[lv_unitIndex])+ StringToText(&quot; and has called: &quot;) + IntToText(j));
                }
                UnitGroupLoopEnd();
                
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ZauberersFavor_Init () {
                int i = 0;
                int j = 0;
                int positionInUnitTypeArray = 0;
                gt_ZauberersFavor = TriggerCreate(&quot;gt_ZauberersFavor_Func&quot;);
                TriggerAddEventUnitDied(gt_ZauberersFavor, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Count Unit Deaths
            //--------------------------------------------------------------------------------------------------
            bool gt_CountUnitDeaths_Func (bool testConds, bool runActions) {
                string auto5FB0BE3D_val;
                int i;
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                
                auto5FB0BE3D_val = UnitGetType(EventUnit());
                for (i = 0; i&lt;=20; i +=1){
                    if (auto5FB0BE3D_val == gv_enemyUnitTypes[i]) {
                    gv_unitKills[i] += 1;
                    break;
                    } 
                    else {
                        }
                }
                 //if (auto5FB0BE3D_val == gv_enemyUnitTypes[i]) {
                 //   gv_unitKills[i] += 1;
               // }
                //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[1]) {
                //    gv_unitKills[1] += 1;
                //}
                //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[2]) {
               //     gv_unitKills[2] += 1;
               // }
               // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[3]) {
               //     gv_unitKills[3] += 1;
               // }
               // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[4]) {
               //     gv_unitKills[4] += 1;
               // }
                //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[5]) {
                //    gv_unitKills[5] += 1;
                //}
                //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[6]) {
                //    gv_unitKills[6] += 1;
               // }
               // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[7]) {
               //     gv_unitKills[7] += 1;
               // }
                //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[8]) {
                //    gv_unitKills[8] += 1;
               // }
                //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[9]) {
                //    gv_unitKills[9] += 1;
               // }
               // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[10]) {
               //     gv_unitKills[10] += 1;
               // }
               // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[11]) {
               //     gv_unitKills[11] += 1;
               // }
               // else {
               // }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CountUnitDeaths_Init () {
                int i = 0;
                gt_CountUnitDeaths = TriggerCreate(&quot;gt_CountUnitDeaths_Func&quot;);
                TriggerAddEventUnitDied(gt_CountUnitDeaths, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Elite Creton Warrior
            //--------------------------------------------------------------------------------------------------
            bool gt_EliteCretonWarrior_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == 15) &amp;&amp; (UnitGetType(EventUnit()) == gv_enemyUnitTypes[3]) &amp;&amp; (gv_unitKills[3] == (25 * PlayerGroupCount(gv_humanPlayers)))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_unitKills[3] = 0;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/1DFF29CC&quot;));
                UnitCreate(1, &quot;EliteCretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0)), 270.0);
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingBoss&quot;, UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, &quot;Angry&quot;, 0, c_animTimeDefault);
                Wait(2.0, c_timeGame);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), libNtve_gf_KillingUnit()), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EliteCretonWarrior_Init () {
                gt_EliteCretonWarrior = TriggerCreate(&quot;gt_EliteCretonWarrior_Func&quot;);
                TriggerAddEventUnitDied(gt_EliteCretonWarrior, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Elite Creton Watcher
            //--------------------------------------------------------------------------------------------------
            bool gt_EliteCretonWatcher_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == 15) &amp;&amp; (UnitGetType(EventUnit()) == gv_enemyUnitTypes[5]) &amp;&amp; (gv_unitKills[5] == (25 * PlayerGroupCount(gv_humanPlayers)))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_unitKills[5] = 0;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/B3030916&quot;));
                UnitCreate(1, &quot;EliteCretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0)), 270.0);
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingBoss&quot;, UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, &quot;Angry&quot;, 0, c_animTimeDefault);
                Wait(2.0, c_timeGame);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), libNtve_gf_KillingUnit()), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EliteCretonWatcher_Init () {
                gt_EliteCretonWatcher = TriggerCreate(&quot;gt_EliteCretonWatcher_Func&quot;);
                TriggerAddEventUnitDied(gt_EliteCretonWatcher, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Large Sheep
            //--------------------------------------------------------------------------------------------------
            bool gt_LargeSheep_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    
                    if (!(((UnitGetOwner(EventUnit()) == 15) &amp;&amp; gv_enemyUnitTypes[0] == &quot;SmallSheep&quot; &amp;&amp; (UnitGetType(EventUnit()) == gv_enemyUnitTypes[0]) &amp;&amp; (gv_unitKills[0] == (25 * PlayerGroupCount(gv_humanPlayers)))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
               
                gv_unitKills[0] = 0;
              
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/DECEF3FA&quot;));
                UnitCreate(1, &quot;LargeSheep&quot;, 0, 15, RegionRandomPoint(RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0)), 270.0);
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingBoss&quot;, UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, &quot;Angry&quot;, 0, c_animTimeDefault);
                Wait(2.0, c_timeGame);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), libNtve_gf_KillingUnit()), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LargeSheep_Init () {
                gt_LargeSheep = TriggerCreate(&quot;gt_LargeSheep_Func&quot;);
                TriggerAddEventUnitDied(gt_LargeSheep, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Alpha Srepti
            //--------------------------------------------------------------------------------------------------
            bool gt_AlphaSrepti_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == 15) &amp;&amp; (UnitGetType(EventUnit()) == gv_enemyUnitTypes[1]) &amp;&amp; (gv_unitKills[1] == (25 * PlayerGroupCount(gv_humanPlayers)))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_unitKills[1] = 0;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/5E035CF9&quot;));
                UnitCreate(1, &quot;AlphaSrepti&quot;, 0, 15, RegionRandomPoint(RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0)), 270.0);
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), &quot;PingBoss&quot;, UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, &quot;Angry&quot;, 0, c_animTimeDefault);
                Wait(2.0, c_timeGame);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), libNtve_gf_KillingUnit()), c_orderQueueReplace);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AlphaSrepti_Init () {
                gt_AlphaSrepti = TriggerCreate(&quot;gt_AlphaSrepti_Func&quot;);
                TriggerAddEventUnitDied(gt_AlphaSrepti, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Given Melee Damage Text Tag
            //--------------------------------------------------------------------------------------------------
            bool gt_GivenMeleeDamageTextTag_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_thisTag;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) == 15))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(FixedToText(EventUnitDamageAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                lv_thisTag = TextTagLastCreated();
                TextTagSetVelocity(lv_thisTag, 0.75, 75.0);
                TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 100.00, 100.00));
                TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GivenMeleeDamageTextTag_Init () {
                gt_GivenMeleeDamageTextTag = TriggerCreate(&quot;gt_GivenMeleeDamageTextTag_Func&quot;);
                TriggerAddEventUnitDamaged(gt_GivenMeleeDamageTextTag, null, c_unitDamageTypeAny, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Recieved Melee Damage Text Tag
            //--------------------------------------------------------------------------------------------------
            bool gt_RecievedMeleeDamageTextTag_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_thisTag;
                // Variable Initialization
                lv_thisTag = c_textTagNone;
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(FixedToText(EventUnitDamageAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
                lv_thisTag = TextTagLastCreated();
                TextTagSetVelocity(lv_thisTag, 0.75, 105.0);
                TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RecievedMeleeDamageTextTag_Init () {
                gt_RecievedMeleeDamageTextTag = TriggerCreate(&quot;gt_RecievedMeleeDamageTextTag_Func&quot;);
                TriggerAddEventUnitDamaged(gt_RecievedMeleeDamageTextTag, null, c_unitDamageTypeAny, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Zauberer&apos;s Minions Unit Types
            //--------------------------------------------------------------------------------------------------
            bool gt_SetZauberersMinionsUnitTypes_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_zauberersMinionsUnitTypes[0] = &quot;DemonicSheep&quot;;
                gv_zauberersMinionsUnitTypes[1] = &quot;DemonicSrepti&quot;;
                gv_zauberersMinionsUnitTypes[2] = &quot;CretonWarlord&quot;;
                gv_zauberersMinionsUnitTypes[3] = &quot;Stercore&quot;;
                gv_zauberersMinionsUnitTypes[4] = &quot;Impetus&quot;;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetZauberersMinionsUnitTypes_Init () {
                gt_SetZauberersMinionsUnitTypes = TriggerCreate(&quot;gt_SetZauberersMinionsUnitTypes_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Zauberer&apos;s Regions
            //--------------------------------------------------------------------------------------------------
            bool gt_SetZauberersRegions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_zauberersRegions[0] = RegionFromId(203);
                gv_zauberersRegions[1] = RegionFromId(204);
                gv_zauberersRegions[2] = RegionFromId(205);
                gv_zauberersRegions[3] = RegionFromId(206);
                gv_zauberersRegions[4] = RegionFromId(207);
                gv_zauberersRegions[5] = RegionFromId(208);
                gv_zauberersRegions[6] = RegionFromId(209);
                gv_zauberersRegions[7] = RegionFromId(210);
                gv_zauberersRegions[8] = RegionFromId(213);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetZauberersRegions_Init () {
                gt_SetZauberersRegions = TriggerCreate(&quot;gt_SetZauberersRegions_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Zauberer&apos;s Minions
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnZauberersMinions_Func (bool testConds, bool runActions) {
                fixed auto2FFAA3D0_ae;
                fixed auto2FFAA3D0_ai;
                fixed auto227D18B5_ae;
                fixed auto227D18B5_ai;
                // Variable Declarations
                fixed lv_numPlayers;
                int lv_randomSkill;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((gv_livingDragonsFightingZauberer1stForm &gt;= 1) || (gv_livingDragonsFightingZauberer2ndForm &gt;= 1)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                auto2FFAA3D0_ae = gv_livingDragonsFightingZauberer1stForm;
                auto2FFAA3D0_ai = 1.0;
                lv_numPlayers = 1.0;
                for ( ; ( (auto2FFAA3D0_ai &gt;= 0 &amp;&amp; lv_numPlayers &lt;= auto2FFAA3D0_ae) || (auto2FFAA3D0_ai &lt;= 0 &amp;&amp; lv_numPlayers &gt;= auto2FFAA3D0_ae) ) ; lv_numPlayers += auto2FFAA3D0_ai ) {
                    UnitCreate(1, gv_zauberersMinionsUnitTypes[RandomInt(0, 4)], c_unitCreateIgnorePlacement, 15, RegionRandomPoint(gv_zauberersRegions[RandomInt(0, 8)]), libNtve_gf_RandomAngle());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_dragonInBattleWithZauberer1stForm, c_unitCountAlive)), c_orderQueueReplace);
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_zauberersMinions, UnitLastCreated());
                }
                auto227D18B5_ae = gv_livingDragonsFightingZauberer2ndForm;
                auto227D18B5_ai = 1.0;
                lv_numPlayers = 1.0;
                for ( ; ( (auto227D18B5_ai &gt;= 0 &amp;&amp; lv_numPlayers &lt;= auto227D18B5_ae) || (auto227D18B5_ai &lt;= 0 &amp;&amp; lv_numPlayers &gt;= auto227D18B5_ae) ) ; lv_numPlayers += auto227D18B5_ai ) {
                    UnitCreate(1, gv_zauberersMinionsUnitTypes[RandomInt(0, 4)], c_unitCreateIgnorePlacement, 15, RegionRandomPoint(gv_zauberersRegions[RandomInt(0, 8)]), libNtve_gf_RandomAngle());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_dragonInBattleWithZauberer2ndForm, c_unitCountAlive)), c_orderQueueReplace);
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_zauberersMinions, UnitLastCreated());
                    UnitCreate(1, gv_zauberersMinionsUnitTypes[RandomInt(0, 4)], c_unitCreateIgnorePlacement, 15, RegionRandomPoint(gv_zauberersRegions[RandomInt(0, 8)]), libNtve_gf_RandomAngle());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_dragonInBattleWithZauberer2ndForm, c_unitCountAlive)), c_orderQueueReplace);
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_zauberersMinions, UnitLastCreated());
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnZauberersMinions_Init () {
                gt_SpawnZauberersMinions = TriggerCreate(&quot;gt_SpawnZauberersMinions_Func&quot;);
                TriggerEnable(gt_SpawnZauberersMinions, false);
                TriggerAddEventTimePeriodic(gt_SpawnZauberersMinions, 20.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Dragon Dies in Zauberer 1
            //--------------------------------------------------------------------------------------------------
            bool gt_DragonDiesinZauberer1_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_c;
                int lv_tPI;
                int lv_tP;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) != 16) &amp;&amp; (PlayerGroupHasPlayer(gv_playersInBattleWithZauberer1stForm, UnitGetOwner(EventUnit())) == true) &amp;&amp; (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_tPI = (UnitGetOwner(EventUnit()) - 1);
                lv_tP = UnitGetOwner(EventUnit());
                PlayerGroupRemove(gv_playersInBattleWithZauberer1stForm, lv_tP);
                CameraLockInput(lv_tP, false);
                SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryCombat, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryVoice, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategorySpell, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryAmbient, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryAmbient, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryUI, 100.0, 1.0);
                SoundtrackStop(PlayerGroupSingle(lv_tP), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupSingle(lv_tP), c_soundtrackCategoryMusic, &quot;BiodomeTheme&quot;, c_soundtrackCueAny, 0, false);
                VisRevealerDestroy(gv_zauberer1stFormRevealer[lv_tPI]);
                gv_livingDragonsFightingZauberer1stForm -= 1;
                libNtve_gf_ShowHideBossBar(false, lv_tP);
                if ((gv_livingDragonsFightingZauberer1stForm &lt;= 0)) {
                    gv_livingDragonsFightingZauberer1stForm = 0;
                    UnitRemove(gv_zauberer1stForm);
                    TriggerEnable(gt_SpawnZauberersMinions, false);
                    UnitCreate(1, &quot;CrystalofVenadas&quot;, 0, 15, gv_zauberersCrystalLocation, 270.0);
                    gv_zauberersCrystal = UnitLastCreated();
                    UnitGroupLoopBegin(gv_zauberersMinions);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitKill(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    TriggerEnable(gt_TeleporttoBioDome, true);
                    TriggerEnable(gt_TeleporttoCreton, true);
                }
                gv_autosavePrevention[lv_tPI] = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DragonDiesinZauberer1_Init () {
                gt_DragonDiesinZauberer1 = TriggerCreate(&quot;gt_DragonDiesinZauberer1_Func&quot;);
                TriggerAddEventUnitDied(gt_DragonDiesinZauberer1, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Dragon Dies in Zauberer 2
            //--------------------------------------------------------------------------------------------------
            bool gt_DragonDiesinZauberer2_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_c;
                int lv_tPI;
                int lv_tP;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) != 16) &amp;&amp; (PlayerGroupHasPlayer(gv_playersInBattleWithZauberer2ndForm, UnitGetOwner(EventUnit())) == true) &amp;&amp; (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_tPI = (UnitGetOwner(EventUnit()) - 1);
                lv_tP = UnitGetOwner(EventUnit());
                PlayerGroupRemove(gv_playersInBattleWithZauberer2ndForm, lv_tP);
                CameraLockInput(lv_tP, false);
                SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryCombat, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryVoice, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategorySpell, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryAmbient, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryAmbient, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(lv_tP), c_soundCategoryUI, 100.0, 1.0);
                SoundtrackStop(PlayerGroupSingle(lv_tP), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupSingle(lv_tP), c_soundtrackCategoryMusic, &quot;BiodomeTheme&quot;, c_soundtrackCueAny, 0, false);
                VisRevealerDestroy(gv_zauberer1stFormRevealer[lv_tPI]);
                gv_livingDragonsFightingZauberer2ndForm -= 1;
                libNtve_gf_ShowHideBossBar(false, lv_tP);
                if ((gv_livingDragonsFightingZauberer2ndForm &lt;= 0)) {
                    gv_livingDragonsFightingZauberer2ndForm = 0;
                    UnitRemove(gv_zauberer2ndForm);
                    TriggerEnable(gt_SpawnZauberersMinions, false);
                    UnitCreate(1, &quot;CrystalofVenadas&quot;, 0, 15, gv_zauberersCrystalLocation, 270.0);
                    gv_zauberersCrystal = UnitLastCreated();
                    UnitGroupLoopBegin(gv_zauberersMinions);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitKill(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    TriggerEnable(gt_TeleporttoBioDome, true);
                    TriggerEnable(gt_TeleporttoCreton, true);
                    UnitRemove(gv_TimeWarpBot);
                }
                gv_autosavePrevention[lv_tPI] = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DragonDiesinZauberer2_Init () {
                gt_DragonDiesinZauberer2 = TriggerCreate(&quot;gt_DragonDiesinZauberer2_Func&quot;);
                TriggerAddEventUnitDied(gt_DragonDiesinZauberer2, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Zauberer 1st Form
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnZauberer1stForm_Func (bool testConds, bool runActions) {
                int autoAF98452D_val;
                int autoF7D1EF20_n;
                int autoF7D1EF20_i;
                // Variable Declarations
                int lv_pickedPlayerIndex;
                int lv_spawnPoint;
                int lv_numPlayers;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_zaubererFirstFormAlreadyDead[(UnitGetOwner(libNtve_gf_KillingUnit()) - 1)] == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TeleporttoBioDome, false);
                TriggerEnable(gt_TeleporttoCreton, false);
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(214)), 0.0, -1, 10, false);
                    CameraLockInput(PlayerGroupLoopCurrent(), true);
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    gv_inCinematic[lv_pickedPlayerIndex] = true;
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(214));
                    gv_zauberer1stFormRevealer[lv_pickedPlayerIndex] = VisRevealerLastCreated();
                    libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
                    UnitGroupAdd(gv_dragonInBattleWithZauberer1stForm, gv_players[lv_pickedPlayerIndex].dragon);
                    PlayerGroupAdd(gv_playersInBattleWithZauberer1stForm, PlayerGroupLoopCurrent());
                    gv_livingDragonsFightingZauberer1stForm += 1;
                    autoAF98452D_val = lv_spawnPoint;
                    if (autoAF98452D_val == 0) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(205)), false);
                    }
                    else if (autoAF98452D_val == 1) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(210)), false);
                    }
                    else if (autoAF98452D_val == 2) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(207)), false);
                    }
                    else if (autoAF98452D_val == 3) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(213)), false);
                    }
                    else {
                    }
                    lv_spawnPoint += 1;
                }
                PlayerGroupLoopEnd();
                libNtve_gf_HideGameUI(false, gv_playersInBattleWithZauberer1stForm);
                PlayerGroupLoopBegin(gv_playersInBattleWithZauberer1stForm);
               // for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    //gv_autosavePrevention[(PlayerGroupLoopCurrent() - 1)] = true;
               // }
                PlayerGroupLoopEnd();
                TransmissionSend(gv_playersInBattleWithZauberer1stForm, TransmissionSourceFromModel(&quot;TassadarPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/5CE524CE&quot;), StringExternal(&quot;Param/Value/881CE2C2&quot;), 5.0, c_transmissionDurationSet, true);
                Wait(1.0, c_timeReal);
                autoF7D1EF20_n = 30;
                for (autoF7D1EF20_i = 1; autoF7D1EF20_i &lt;= autoF7D1EF20_n; autoF7D1EF20_i += 1) {
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    Wait(0.1, c_timeReal);
                }
                libNtve_gf_UnitCreateFacingPoint(1, &quot;Zauberer&quot;, 0, 15, RegionGetCenter(RegionFromId(203)), UnitGetPosition(libNtve_gf_KillingUnit()));
                gv_zauberer1stForm = UnitLastCreated();
                libNtve_gf_PauseUnit(gv_zauberer1stForm, true);
                PlayerGroupLoopBegin(gv_playersInBattleWithZauberer1stForm);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_DisplayBossBar(PlayerGroupLoopCurrent(), &quot;Assets\\Textures\\tassadarportrait_static.dds&quot;, StringExternal(&quot;Param/Value/60280CA1&quot;), 100, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    libNtve_gf_SetBossBarBoss(PlayerGroupLoopCurrent(), gv_zauberer1stForm, true);
                    libNtve_gf_SetBossBarRace(PlayerGroupLoopCurrent(), libNtve_ge_BossBarRace_Protoss, true);
                    libNtve_gf_MoveBossBar(PlayerGroupLoopCurrent(), c_anchorTop, 0, 125);
                }
                PlayerGroupLoopEnd();
                UnitGroupLoopBegin(gv_dragonInBattleWithZauberer1stForm);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
                }
                UnitGroupLoopEnd();
                PlayerGroupLoopBegin(gv_playersInBattleWithZauberer1stForm);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    gv_inCinematic[lv_pickedPlayerIndex] = false;
                    CameraLockInput(PlayerGroupLoopCurrent(), false);
                }
                PlayerGroupLoopEnd();
                libNtve_gf_PauseUnit(gv_zauberer1stForm, false);
                libNtve_gf_HideGameUI(true, gv_playersInBattleWithZauberer1stForm);
                SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategoryCombat, 10.0, 1.0);
                SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategoryVoice, 10.0, 1.0);
                SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategorySpell, 10.0, 1.0);
                SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategoryAmbient, 10.0, 1.0);
                SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategoryUI, 10.0, 1.0);
                SoundtrackStop(gv_playersInBattleWithZauberer1stForm, c_soundtrackCategoryMusic, true);
                SoundtrackPlay(gv_playersInBattleWithZauberer1stForm, c_soundtrackCategoryMusic, &quot;ZauberersTheme&quot;, c_soundtrackCueAny, 0, false);
                TriggerEnable(gt_SpawnZauberersMinions, true);
                TriggerEnable(gt_Zauberer1stFormAI, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnZauberer1stForm_Init () {
                gt_SpawnZauberer1stForm = TriggerCreate(&quot;gt_SpawnZauberer1stForm_Func&quot;);
                TriggerAddEventUnitDied(gt_SpawnZauberer1stForm, UnitRefFromVariable(&quot;gv_zauberersCrystal&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Zauberer 1st Form Death
            //--------------------------------------------------------------------------------------------------
            bool gt_Zauberer1stFormDeath_Func (bool testConds, bool runActions) {
                int auto366A1295_val;
                int auto65FF19DA_n;
                int auto65FF19DA_i;
                // Variable Declarations
                int lv_pickedPlayerIndex;
                int lv_spawnPoint;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Zauberer&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_SpawnZauberersMinions, false);
                UnitGroupLoopBegin(gv_zauberersMinions);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(gv_dragonInBattleWithZauberer1stForm);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 20);
                    if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].state == 1)) {
                        gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].state = 2;
                        BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, &quot;SQ9&quot;, PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].state);
                    }
                }
                UnitGroupLoopEnd();
                UnitGroupClear(gv_dragonInBattleWithZauberer1stForm);
                PlayerGroupClear(gv_playersInBattleWithZauberer1stForm);
                gv_livingDragonsFightingZauberer1stForm = 0;
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                   // gv_autosavePrevention[(PlayerGroupLoopCurrent() - 1)] = true;
                    libNtve_gf_ShowHideBossBar(false, PlayerGroupLoopCurrent());
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
                    auto366A1295_val = lv_spawnPoint;
                    if (auto366A1295_val == 0) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(205)), false);
                    }
                    else if (auto366A1295_val == 1) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(210)), false);
                    }
                    else if (auto366A1295_val == 2) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(207)), false);
                    }
                    else if (auto366A1295_val == 3) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(213)), false);
                    }
                    else {
                    }
                    lv_spawnPoint += 1;
                }
                PlayerGroupLoopEnd();
                libNtve_gf_HideGameUI(false, gv_playersInBioDome);
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    gv_inCinematic[lv_pickedPlayerIndex] = true;
                    CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(214)), 5.0, -1, 10, false);
                    CameraLockInput(PlayerGroupLoopCurrent(), true);
                }
                PlayerGroupLoopEnd();
                TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel(&quot;TassadarPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/3E75D4E4&quot;), StringExternal(&quot;Param/Value/4BAB0F7C&quot;), 5.0, c_transmissionDurationSet, false);
                auto65FF19DA_n = 80;
                for (auto65FF19DA_i = 1; auto65FF19DA_i &lt;= auto65FF19DA_n; auto65FF19DA_i += 1) {
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    Wait(0.1, c_timeReal);
                }
                gv_zaubererFirstFormAlreadyDead[0] = true;
                Wait(1.0, c_timeReal);
                TriggerExecute(gt_SpawnZauberer2ndFormNormalWay, true, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Zauberer1stFormDeath_Init () {
                gt_Zauberer1stFormDeath = TriggerCreate(&quot;gt_Zauberer1stFormDeath_Func&quot;);
                TriggerAddEventUnitDied(gt_Zauberer1stFormDeath, UnitRefFromVariable(&quot;gv_zauberer1stForm&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Zauberer 1st Form AI
            //--------------------------------------------------------------------------------------------------
            bool gt_Zauberer1stFormAI_Func (bool testConds, bool runActions) {
                int auto5D248BF3_val;
                // Variable Declarations
                int lv_randomSkill;
                unit lv_target;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_randomSkill = RandomInt(0, 2);
                lv_target = UnitGroupRandomUnit(gv_dragonInBattleWithZauberer1stForm, c_unitCountAlive);
                auto5D248BF3_val = lv_randomSkill;
                if (auto5D248BF3_val == 0) {
                    UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand(&quot;ZaubererFireball&quot;, 0), lv_target), c_orderQueueReplace);
                    UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_target), c_orderQueueAddToEnd);
                }
                else if (auto5D248BF3_val == 1) {
                    UnitIssueOrder(gv_zauberer1stForm, OrderTargetingPoint(AbilityCommand(&quot;PsiStorm&quot;, 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
                    UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_target), c_orderQueueAddToEnd);
                }
                else if (auto5D248BF3_val == 2) {
                    UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand(&quot;HybridCPlasmaBlast&quot;, 0), lv_target), c_orderQueueReplace);
                    UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_target), c_orderQueueAddToEnd);
                }
                else {
                    UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_target), c_orderQueueReplace);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Zauberer1stFormAI_Init () {
                gt_Zauberer1stFormAI = TriggerCreate(&quot;gt_Zauberer1stFormAI_Func&quot;);
                TriggerEnable(gt_Zauberer1stFormAI, false);
                TriggerAddEventTimePeriodic(gt_Zauberer1stFormAI, 10.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Zauberer 2nd Form (Normal Way)
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnZauberer2ndFormNormalWay_Func (bool testConds, bool runActions) {
                int autoE6D0D4FE_val;
                // Variable Declarations
                int lv_pickedPlayerIndex;
                int lv_spawnPoint;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    //gv_autosavePrevention[(PlayerGroupLoopCurrent() - 1)] = true;
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    UnitGroupAdd(gv_dragonInBattleWithZauberer2ndForm, gv_players[lv_pickedPlayerIndex].dragon);
                    PlayerGroupAdd(gv_playersInBattleWithZauberer2ndForm, PlayerGroupLoopCurrent());
                    gv_livingDragonsFightingZauberer2ndForm += 1;
                    UnitSetPropertyFixed(gv_players[lv_pickedPlayerIndex].dragon, c_unitPropLifePercent, 100.0);
                    UnitSetPropertyFixed(gv_players[lv_pickedPlayerIndex].dragon, c_unitPropEnergyPercent, 100.0);
                    UnitSetPropertyFixed(gv_players[lv_pickedPlayerIndex].dragon, c_unitPropShieldsPercent, 100.0);
                    autoE6D0D4FE_val = lv_spawnPoint;
                    if (autoE6D0D4FE_val == 0) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(205)), false);
                    }
                    else if (autoE6D0D4FE_val == 1) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(210)), false);
                    }
                    else if (autoE6D0D4FE_val == 2) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(207)), false);
                    }
                    else if (autoE6D0D4FE_val == 3) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(213)), false);
                    }
                    else {
                    }
                    lv_spawnPoint += 1;
                }
                PlayerGroupLoopEnd();
                TransmissionSend(gv_playersInBattleWithZauberer2ndForm, TransmissionSourceFromModel(&quot;HybridProtossPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/56A8C6FF&quot;), StringExternal(&quot;Param/Value/1B366F05&quot;), 5.0, c_transmissionDurationSet, true);
                Wait(3.0, c_timeGame);
                libNtve_gf_UnitCreateFacingPoint(1, &quot;Zauberer2&quot;, 0, 15, RegionGetCenter(RegionFromId(203)), UnitGetPosition(gv_zauberer2ndForm));
                gv_zauberer2ndForm = UnitLastCreated();
                libNtve_gf_PauseUnit(gv_zauberer2ndForm, true);
                PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_DisplayBossBar(PlayerGroupLoopCurrent(), &quot;Assets\\Textures\\btn-unit-xelnaga-destroyer.dds&quot;, StringExternal(&quot;Param/Value/62B8B3DD&quot;), 100, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    libNtve_gf_SetBossBarBoss(PlayerGroupLoopCurrent(), gv_zauberer2ndForm, true);
                    libNtve_gf_SetBossBarRace(PlayerGroupLoopCurrent(), libNtve_ge_BossBarRace_Protoss, true);
                    libNtve_gf_MoveBossBar(PlayerGroupLoopCurrent(), c_anchorTop, 0, 125);
                }
                PlayerGroupLoopEnd();
                UnitGroupLoopBegin(gv_dragonInBattleWithZauberer2ndForm);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
                }
                UnitGroupLoopEnd();
                PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    CameraLockInput(PlayerGroupLoopCurrent(), false);
                    gv_inCinematic[lv_pickedPlayerIndex] = false;
                }
                PlayerGroupLoopEnd();
                libNtve_gf_PauseUnit(gv_zauberer2ndForm, false);
                libNtve_gf_HideGameUI(true, gv_playersInBattleWithZauberer2ndForm);
                TriggerEnable(gt_SpawnZauberersMinions, true);
                TriggerEnable(gt_Zauberer2ndFormAI, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnZauberer2ndFormNormalWay_Init () {
                gt_SpawnZauberer2ndFormNormalWay = TriggerCreate(&quot;gt_SpawnZauberer2ndFormNormalWay_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Zauberer 2nd Form (Special)
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnZauberer2ndFormSpecial_Func (bool testConds, bool runActions) {
                int autoAE86F50E_val;
                int auto111DE31D_n;
                int auto111DE31D_i;
                // Variable Declarations
                int lv_pickedPlayerIndex;
                int lv_spawnPoint;
                int lv_numPlayers;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_zaubererFirstFormAlreadyDead[(UnitGetOwner(libNtve_gf_KillingUnit()) - 1)] == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TeleporttoBioDome, false);
                TriggerEnable(gt_TeleporttoCreton, false);
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    //gv_autosavePrevention[(PlayerGroupLoopCurrent() - 1)] = true;
                    CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(214)), 5.0, -1, 10, false);
                    CameraLockInput(PlayerGroupLoopCurrent(), true);
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    gv_inCinematic[lv_pickedPlayerIndex] = true;
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(214));
                    gv_zauberer1stFormRevealer[lv_pickedPlayerIndex] = VisRevealerLastCreated();
                    libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
                    UnitGroupAdd(gv_dragonInBattleWithZauberer2ndForm, gv_players[lv_pickedPlayerIndex].dragon);
                    PlayerGroupAdd(gv_playersInBattleWithZauberer2ndForm, PlayerGroupLoopCurrent());
                    gv_livingDragonsFightingZauberer2ndForm += 1;
                    autoAE86F50E_val = lv_spawnPoint;
                    if (autoAE86F50E_val == 0) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(205)), false);
                    }
                    else if (autoAE86F50E_val == 1) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(210)), false);
                    }
                    else if (autoAE86F50E_val == 2) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(207)), false);
                    }
                    else if (autoAE86F50E_val == 3) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(213)), false);
                    }
                    else {
                    }
                    lv_spawnPoint += 1;
                }
                PlayerGroupLoopEnd();
                libNtve_gf_HideGameUI(false, gv_playersInBattleWithZauberer2ndForm);
                TransmissionSend(gv_playersInBattleWithZauberer2ndForm, TransmissionSourceFromModel(&quot;HybridProtossPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/074636AE&quot;), StringExternal(&quot;Param/Value/3C0A34BC&quot;), 5.0, c_transmissionDurationSet, true);
                Wait(1.0, c_timeReal);
                auto111DE31D_n = 30;
                for (auto111DE31D_i = 1; auto111DE31D_i &lt;= auto111DE31D_n; auto111DE31D_i += 1) {
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionRandomPoint(RegionFromId(214)));
                    Wait(0.1, c_timeReal);
                }
                libNtve_gf_UnitCreateFacingPoint(1, &quot;Zauberer2&quot;, 0, 15, RegionGetCenter(RegionFromId(203)), UnitGetPosition(libNtve_gf_KillingUnit()));
                gv_zauberer2ndForm = UnitLastCreated();
                libNtve_gf_PauseUnit(gv_zauberer2ndForm, true);
                PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_DisplayBossBar(PlayerGroupLoopCurrent(), &quot;Assets\\Textures\\tassadarportrait_static.dds&quot;, StringExternal(&quot;Param/Value/A4EF394E&quot;), 100, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    libNtve_gf_SetBossBarBoss(PlayerGroupLoopCurrent(), gv_zauberer2ndForm, true);
                    libNtve_gf_SetBossBarRace(PlayerGroupLoopCurrent(), libNtve_ge_BossBarRace_Protoss, true);
                    libNtve_gf_MoveBossBar(PlayerGroupLoopCurrent(), c_anchorTop, 0, 125);
                }
                PlayerGroupLoopEnd();
                UnitGroupLoopBegin(gv_dragonInBattleWithZauberer2ndForm);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
                }
                UnitGroupLoopEnd();
                PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    gv_inCinematic[lv_pickedPlayerIndex] = false;
                    CameraLockInput(PlayerGroupLoopCurrent(), false);
                }
                PlayerGroupLoopEnd();
                libNtve_gf_PauseUnit(gv_zauberer2ndForm, false);
                libNtve_gf_HideGameUI(true, gv_playersInBattleWithZauberer2ndForm);
                SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategoryCombat, 10.0, 1.0);
                SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategoryVoice, 10.0, 1.0);
                SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategorySpell, 10.0, 1.0);
                SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategoryAmbient, 10.0, 1.0);
                SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategoryUI, 10.0, 1.0);
                SoundtrackStop(gv_playersInBattleWithZauberer2ndForm, c_soundtrackCategoryMusic, true);
                SoundtrackPlay(gv_playersInBattleWithZauberer2ndForm, c_soundtrackCategoryMusic, &quot;ZauberersTheme&quot;, c_soundtrackCueAny, 0, false);
                TriggerEnable(gt_SpawnZauberersMinions, true);
                TriggerEnable(gt_Zauberer2ndFormAI, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnZauberer2ndFormSpecial_Init () {
                gt_SpawnZauberer2ndFormSpecial = TriggerCreate(&quot;gt_SpawnZauberer2ndFormSpecial_Func&quot;);
                TriggerAddEventUnitDied(gt_SpawnZauberer2ndFormSpecial, UnitRefFromVariable(&quot;gv_zauberersCrystal&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Zauberer 2nd Form Death
            //--------------------------------------------------------------------------------------------------
            bool gt_Zauberer2ndFormDeath_Func (bool testConds, bool runActions) {
                int auto157376FC_val;
                // Variable Declarations
                int lv_pickedPlayerIndex;
                int lv_spawnPoint;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((UnitGetType(EventUnit()) == &quot;Zauberer2&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    gv_inCinematic[lv_pickedPlayerIndex] = true;
                    CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(214)), 5.0, -1, 10, false);
                    CameraLockInput(PlayerGroupLoopCurrent(), true);
                }
                PlayerGroupLoopEnd();
                TriggerEnable(gt_SpawnZauberersMinions, false);
                UnitGroupLoopBegin(gv_zauberersMinions);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 30);
                    libNtve_gf_ShowHideBossBar(false, PlayerGroupLoopCurrent());
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
                    if ((UnitLevel(gv_players[lv_pickedPlayerIndex].dragon) != 100)) {
                        gf_AddExperience(gv_players[lv_pickedPlayerIndex].dragon, 23000.0);
                    }
                    auto157376FC_val = lv_spawnPoint;
                    if (auto157376FC_val == 0) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(205)), false);
                    }
                    else if (auto157376FC_val == 1) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(210)), false);
                    }
                    else if (auto157376FC_val == 2) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(207)), false);
                    }
                    else if (auto157376FC_val == 3) {
                        UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, RegionGetCenter(RegionFromId(213)), false);
                    }
                    else {
                    }
                    lv_spawnPoint += 1;
                }
                PlayerGroupLoopEnd();
                UnitGroupLoopBegin(gv_dragonInBattleWithZauberer2ndForm);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].state == 2)) {
                        gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].state = 3;
                        ObjectiveSetState(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].objective, c_objectiveStateCompleted);
                        ObjectiveDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].objective);
                        BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, &quot;SQ9&quot;, PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].state);
                        PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[9].ping);
                    }
                }
                UnitGroupLoopEnd();
                libNtve_gf_HideGameUI(false, gv_playersInBattleWithZauberer2ndForm);
                TransmissionSend(gv_playersInBattleWithZauberer2ndForm, TransmissionSourceFromModel(&quot;HybridProtossPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/8984FD5F&quot;), StringExternal(&quot;Param/Value/C033FA05&quot;), 5.0, c_transmissionDurationSet, true);
                UnitGroupLoopBegin(gv_dragonInBattleWithZauberer2ndForm);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
                    CameraLockInput(UnitGetOwner(UnitGroupLoopCurrent()), false);
                }
                UnitGroupLoopEnd();
                //UnitCreate(1, &quot;gv_TimeWarpBot&quot;, 0, 15, gv_TimeWarpBotLocation, 270.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle,StringExternal(&quot;Param/Value/506A51FE&quot;));
                UnitCreate(1, &quot;TimeWarpBot&quot;, c_unitCreateIgnorePlacement, 15, RegionRandomPoint(RegionFromName(&quot;Boss Fight Warp Out Zone&quot;)), libNtve_gf_RandomAngle());
                gv_TimeWarpBot = UnitLastCreated();
                libNtve_gf_HideGameUI(true, gv_playersInBattleWithZauberer2ndForm);
                TimerStart(gv_zaubererTimer, 15.0, false, c_timeReal);
                TimerWindowCreate(gv_zaubererTimer, StringExternal(&quot;Param/Value/7035D573&quot;), true, false);
                gv_zaubererTimerWindow = TimerWindowLastCreated();
                TimerWindowShow(gv_zaubererTimerWindow, PlayerGroupAll(), false);
                TimerWindowShow(gv_zaubererTimerWindow, gv_playersInBioDome, true);
                libNtve_gf_WaitForTimer(gv_zaubererTimer, 0.0, false);
                TimerWindowDestroy(gv_zaubererTimerWindow);
                libNtve_gf_AddPlayerGroupToPlayerGroup(gv_playersInBioDome, gv_playerswatchingendingcinematic);
                //TriggerExecute(gt_EndingCinematic, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Zauberer2ndFormDeath_Init () {
                gt_Zauberer2ndFormDeath = TriggerCreate(&quot;gt_Zauberer2ndFormDeath_Func&quot;);
                TriggerAddEventUnitDied(gt_Zauberer2ndFormDeath, UnitRefFromVariable(&quot;gv_zauberer2ndForm&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Warp Out From Boss Arena
            //--------------------------------------------------------------------------------------------------
            bool gt_WarpOutFromBossArena_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                TriggerExecute(gt_DragonDiesinZauberer2, false, true);
                
                
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WarpOutFromBossArena_Init () {
                gt_WarpOutFromBossArena = TriggerCreate(&quot;gt_WarpOutFromBossArena_Func&quot;);
               TriggerAddEventUnitDied(gt_WarpOutFromBossArena, UnitRefFromVariable(&quot;gv_TimeWarpBot&quot;));
               
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Zauberer 2nd Form AI
            //--------------------------------------------------------------------------------------------------
            bool gt_Zauberer2ndFormAI_Func (bool testConds, bool runActions) {
                int auto6D220EA7_val;
                // Variable Declarations
                int lv_randomSkill;
                unit lv_target;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_randomSkill = RandomInt(0, 4);
                lv_target = UnitGroupRandomUnit(gv_dragonInBattleWithZauberer2ndForm, c_unitCountAlive);
                auto6D220EA7_val = lv_randomSkill;
                if (auto6D220EA7_val == 0) {
                    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand(&quot;ZaubererFireball&quot;, 0), lv_target), c_orderQueueReplace);
                    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_target), c_orderQueueAddToEnd);
                }
                else if (auto6D220EA7_val == 1) {
                    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand(&quot;FireClaws&quot;, 0), lv_target), c_orderQueueReplace);
                    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_target), c_orderQueueAddToEnd);
                }
                else if (auto6D220EA7_val == 2) {
                    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand(&quot;Inferno&quot;, 0), lv_target), c_orderQueueReplace);
                    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_target), c_orderQueueAddToEnd);
                }
                else if (auto6D220EA7_val == 3) {
                    UnitIssueOrder(gv_zauberer2ndForm, Order(AbilityCommand(&quot;Nova&quot;, 0)), c_orderQueueReplace);
                    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_target), c_orderQueueAddToEnd);
                }
                else if (auto6D220EA7_val == 4) {
                    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingPoint(AbilityCommand(&quot;FlameEgg&quot;, 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
                    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_target), c_orderQueueAddToEnd);
                }
                else {
                    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), lv_target), c_orderQueueReplace);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Zauberer2ndFormAI_Init () {
                gt_Zauberer2ndFormAI = TriggerCreate(&quot;gt_Zauberer2ndFormAI_Func&quot;);
                TriggerEnable(gt_Zauberer2ndFormAI, false);
                TriggerAddEventTimePeriodic(gt_Zauberer2ndFormAI, 10.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Machina De Plagam Set health
            //--------------------------------------------------------------------------------------------------
            bool gt_MachinaDePlagamSethealth_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_machinaDePlagam = UnitFromId(1711);
                UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(PlayerGroupActive()))));
                UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropShieldsMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(PlayerGroupActive()))));
                UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropEnergyMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropEnergyMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(PlayerGroupActive()))));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MachinaDePlagamSethealth_Init () {
                gt_MachinaDePlagamSethealth = TriggerCreate(&quot;gt_MachinaDePlagamSethealth_Func&quot;);
                TriggerAddEventTimeElapsed(gt_MachinaDePlagamSethealth, 5.0, c_timeReal);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Machina De Plagam Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateMachinaDePlagamWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagDestroy(gv_machinaDePlagamWarning[(UnitGetOwner(EventUnit()) - 1)]);
                TextTagCreate(StringExternal(&quot;Param/Value/81DA56B8&quot;), 24, PointFromId(2664), 1.0, true, true, PlayerGroupSingle(UnitGetOwner(EventUnit())));
                gv_machinaDePlagamWarning[(UnitGetOwner(EventUnit()) - 1)] = TextTagLastCreated();
                TextTagSetTime(gv_machinaDePlagamWarning[(UnitGetOwner(EventUnit()) - 1)], c_textTagTimeDuration, 524288.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateMachinaDePlagamWarning_Init () {
                gt_CreateMachinaDePlagamWarning = TriggerCreate(&quot;gt_CreateMachinaDePlagamWarning_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_CreateMachinaDePlagamWarning, null, PointFromId(2664), 25.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Destroy Machina De Plagam Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_DestroyMachinaDePlagamWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagDestroy(gv_machinaDePlagamWarning[(UnitGetOwner(EventUnit()) - 1)]);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DestroyMachinaDePlagamWarning_Init () {
                gt_DestroyMachinaDePlagamWarning = TriggerCreate(&quot;gt_DestroyMachinaDePlagamWarning_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_DestroyMachinaDePlagamWarning, null, PointFromId(2664), 25.0, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hero attacks Machina De Plagam
            //--------------------------------------------------------------------------------------------------
            bool gt_HeroattacksMachinaDePlagam_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupHasUnit(gv_unitsthatdidDamagetoMachinaDePlagam, EventUnitTarget()) == false))) {
                        return false;
                    }
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnitTarget())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupAdd(gv_unitsthatdidDamagetoMachinaDePlagam, EventUnitTarget());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HeroattacksMachinaDePlagam_Init () {
                gt_HeroattacksMachinaDePlagam = TriggerCreate(&quot;gt_HeroattacksMachinaDePlagam_Func&quot;);
                TriggerAddEventUnitAttacked2(gt_HeroattacksMachinaDePlagam, UnitRefFromVariable(&quot;gv_machinaDePlagam&quot;), null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Machina De Plagam Enter
            //--------------------------------------------------------------------------------------------------
            bool gt_MachinaDePlagamEnter_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(EventUnit());
                if ((gv_machinaDePlagamisDead == false)) {
                    gv_inFightwithMachinaDePlagam[lv_triggeringPlayerIndex] = true;
                    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryCombat, 10.0, 1.0);
                    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, 10.0, 1.0);
                    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategorySpell, 10.0, 1.0);
                    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 10.0, 1.0);
                    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryUI, 10.0, 1.0);
                    SoundtrackStop(PlayerGroupSingle(lv_triggeringPlayer), c_soundtrackCategoryMusic, false);
                    SoundPlay(SoundLink(&quot;MachinaDePlagamTheme&quot;, -1), PlayerGroupSingle(lv_triggeringPlayer), 100.0, 0.0);
                    gv_machinaDePlagamsTheme[lv_triggeringPlayerIndex] = SoundLastPlayed();
                    libNtve_gf_DisplayBossBar(lv_triggeringPlayer, &quot;Assets\\Textures\\colossusportrait_static.dds&quot;, StringExternal(&quot;Param/Value/72B4CF70&quot;), 100, PlayerGroupSingle(lv_triggeringPlayer));
                    libNtve_gf_SetBossBarBoss(lv_triggeringPlayer, gv_machinaDePlagam, true);
                    libNtve_gf_SetBossBarRace(lv_triggeringPlayer, libNtve_ge_BossBarRace_Protoss, true);
                    libNtve_gf_MoveBossBar(lv_triggeringPlayer, c_anchorTop, 0, 150);
                gv_locationString[lv_triggeringPlayerIndex] = &quot;Machina De Plagam&apos;s Crater&quot;;
                gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MachinaDePlagamEnter_Init () {
                gt_MachinaDePlagamEnter = TriggerCreate(&quot;gt_MachinaDePlagamEnter_Func&quot;);
                TriggerAddEventUnitRegion(gt_MachinaDePlagamEnter, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;), RegionFromId(227), true);
                TriggerAddEventUnitRegion(gt_MachinaDePlagamEnter, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;), RegionFromId(227), true);
                TriggerAddEventUnitRegion(gt_MachinaDePlagamEnter, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;), RegionFromId(227), true);
                TriggerAddEventUnitRegion(gt_MachinaDePlagamEnter, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;), RegionFromId(227), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Machina De Plagam Leave
            //--------------------------------------------------------------------------------------------------
            bool gt_MachinaDePlagamLeave_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(EventUnit());
                gv_inFightwithMachinaDePlagam[lv_triggeringPlayerIndex] = false;
                UnitGroupRemove(gv_unitsthatdidDamagetoMachinaDePlagam, EventUnit());
                SoundStop(gv_machinaDePlagamsTheme[lv_triggeringPlayerIndex], true);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryCombat, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategorySpell, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryUI, 100.0, 1.0);
                SoundtrackStop(PlayerGroupSingle(lv_triggeringPlayerIndex), c_soundtrackCategoryMusic, false);
                libNtve_gf_ShowHideBossBar(false, lv_triggeringPlayer);
                gv_locationString[lv_triggeringPlayerIndex] = &quot;Creton Trench&quot;;
                gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MachinaDePlagamLeave_Init () {
                gt_MachinaDePlagamLeave = TriggerCreate(&quot;gt_MachinaDePlagamLeave_Func&quot;);
                TriggerAddEventUnitRegion(gt_MachinaDePlagamLeave, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;), RegionFromId(227), false);
                TriggerAddEventUnitRegion(gt_MachinaDePlagamLeave, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;), RegionFromId(227), false);
                TriggerAddEventUnitRegion(gt_MachinaDePlagamLeave, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;), RegionFromId(227), false);
                TriggerAddEventUnitRegion(gt_MachinaDePlagamLeave, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;), RegionFromId(227), false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Machina De Plagam Dragon Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_MachinaDePlagamDragonDies_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_inFightwithMachinaDePlagam[(UnitGetOwner(EventUnit()) - 1)] == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(EventUnit());
                gv_inFightwithMachinaDePlagam[lv_triggeringPlayerIndex] = false;
                SoundStop(gv_machinaDePlagamsTheme[lv_triggeringPlayerIndex], true);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryCombat, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategorySpell, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryUI, 100.0, 1.0);
                SoundtrackStop(PlayerGroupSingle(lv_triggeringPlayerIndex), c_soundtrackCategoryMusic, false);
                libNtve_gf_ShowHideBossBar(false, lv_triggeringPlayer);
                UnitGroupRemove(gv_unitsthatdidDamagetoMachinaDePlagam, EventUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MachinaDePlagamDragonDies_Init () {
                gt_MachinaDePlagamDragonDies = TriggerCreate(&quot;gt_MachinaDePlagamDragonDies_Func&quot;);
                TriggerAddEventUnitDied(gt_MachinaDePlagamDragonDies, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;));
                TriggerAddEventUnitDied(gt_MachinaDePlagamDragonDies, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;));
                TriggerAddEventUnitDied(gt_MachinaDePlagamDragonDies, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;));
                TriggerAddEventUnitDied(gt_MachinaDePlagamDragonDies, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Machina De Plagam Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_MachinaDePlagamDies_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(EventUnit()));
                lv_triggeringPlayerIndex = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(libNtve_gf_KillingUnit());
                SoundStop(gv_machinaDePlagamsTheme[0], true);
                SoundStop(gv_machinaDePlagamsTheme[1], true);
                SoundStop(gv_machinaDePlagamsTheme[2], true);
                SoundStop(gv_machinaDePlagamsTheme[3], true);
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_inFightwithMachinaDePlagam[(PlayerGroupLoopCurrent() - 1)] == true)) {
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryCombat, 100.0, 1.0);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryVoice, 100.0, 1.0);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategorySpell, 100.0, 1.0);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryAmbient, 100.0, 1.0);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryAmbient, 100.0, 1.0);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryUI, 100.0, 1.0);
                        gv_inFightwithMachinaDePlagam[(PlayerGroupLoopCurrent() - 1)] = false;
                        libNtve_gf_ShowHideBossBar(false, PlayerGroupLoopCurrent());
                    }
                }
                PlayerGroupLoopEnd();
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/B1865E9F&quot;));
                UnitGroupLoopBegin(gv_machinaDePlagamsBackup);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(UnitGroupLoopCurrent()));
                }
                UnitGroupLoopEnd();
                gv_machinaDePlagamisDead = true;
                TriggerEnable(gt_MachinaDePlagamRespawn, true);
                UnitGroupLoopBegin(gv_unitsthatdidDamagetoMachinaDePlagam);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_AddExperience(UnitGroupLoopCurrent(), 9000.0);
                    PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 15);
                    if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[7].state == 2)) {
                        gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[7].state = 3;
                        ObjectiveSetName(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[7].objective, StringExternal(&quot;Param/Value/BDB7145A&quot;));
                        SoundPlay(SoundLink(&quot;Alert_UniObjectiveUpdate&quot;, -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), 100.0, 0.0);
                        BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, &quot;SQ7&quot;, PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[7].state);
                        TextTagCreate(StringExternal(&quot;Param/Value/836C72B8&quot;), 72, UnitGetPosition(UnitFromId(2595)), 6.0, true, true, PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())));
                        gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[7].textTag = TextTagLastCreated();
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
                        TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2595), 2.5);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                        PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[7].ping);
                        PingCreate(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), &quot;PingObjective&quot;, UnitGetPosition(UnitFromId(2595)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                        gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[7].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                    }
                }
                UnitGroupLoopEnd();
                UnitGroupClear(gv_unitsthatdidDamagetoMachinaDePlagam);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MachinaDePlagamDies_Init () {
                gt_MachinaDePlagamDies = TriggerCreate(&quot;gt_MachinaDePlagamDies_Func&quot;);
                TriggerAddEventUnitDied(gt_MachinaDePlagamDies, UnitRefFromVariable(&quot;gv_machinaDePlagam&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Machina De Plagam Respawn
            //--------------------------------------------------------------------------------------------------
            bool gt_MachinaDePlagamRespawn_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(227), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(227), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(227), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(227), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((gv_machinaDePlagamisDead == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/22DAF5ED&quot;));
                UnitCreate(1, &quot;MachinaDePlagam&quot;, 0, 15, RegionGetCenter(RegionFromId(227)), 270.0);
                gv_machinaDePlagam = UnitLastCreated();
                gv_machinaDePlagamisDead = false;
                UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(PlayerGroupActive()))));
                UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropShieldsMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(PlayerGroupActive()))));
                UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropEnergyMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropEnergyMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(PlayerGroupActive()))));
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MachinaDePlagamRespawn_Init () {
                gt_MachinaDePlagamRespawn = TriggerCreate(&quot;gt_MachinaDePlagamRespawn_Func&quot;);
                TriggerEnable(gt_MachinaDePlagamRespawn, false);
                TriggerAddEventTimePeriodic(gt_MachinaDePlagamRespawn, 180.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Machina De Plagam Backup
            //--------------------------------------------------------------------------------------------------
            bool gt_MachinaDePlagamBackup_Func (bool testConds, bool runActions) {
                int autoB07D01D8_val;
                // Variable Declarations
                int lv_randomEnemy;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((gv_machinaDePlagamisDead == false))) {
                        return false;
                    }
                    if (!(((gv_inFightwithMachinaDePlagam[0] == true) || (gv_inFightwithMachinaDePlagam[1] == true) || (gv_inFightwithMachinaDePlagam[2] == true) || (gv_inFightwithMachinaDePlagam[3] == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((PlayerGroupCount(gv_humanPlayers) == 1)) {
                    lv_randomEnemy = RandomInt(0, 1);
                }
                else {
                    if ((PlayerGroupCount(gv_humanPlayers) == 2)) {
                        lv_randomEnemy = RandomInt(0, 3);
                    }
                    else {
                        if ((PlayerGroupCount(gv_humanPlayers) == 3)) {
                            lv_randomEnemy = RandomInt(0, 5);
                        }
                        else {
                            if ((PlayerGroupCount(gv_humanPlayers) == 4)) {
                                lv_randomEnemy = RandomInt(0, 6);
                            }
                        }
                    }
                }
                autoB07D01D8_val = lv_randomEnemy;
                if (autoB07D01D8_val == 0) {
                    UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
                }
                else if (autoB07D01D8_val == 1) {
                    UnitCreate(1, &quot;CretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
                }
                else if (autoB07D01D8_val == 2) {
                    UnitCreate(1, &quot;EliteCretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
                }
                else if (autoB07D01D8_val == 3) {
                    UnitCreate(1, &quot;EliteCretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
                }
                else if (autoB07D01D8_val == 4) {
                    UnitCreate(1, &quot;CretonWarMachine&quot;, 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
                }
                else if (autoB07D01D8_val == 5) {
                    UnitCreate(1, &quot;CretonWarlord&quot;, 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
                }
                else if (autoB07D01D8_val == 6) {
                    UnitCreate(1, &quot;Impetus&quot;, 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
                }
                else {
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MachinaDePlagamBackup_Init () {
                gt_MachinaDePlagamBackup = TriggerCreate(&quot;gt_MachinaDePlagamBackup_Func&quot;);
                TriggerAddEventTimePeriodic(gt_MachinaDePlagamBackup, 5.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Unit attacks Sremagsi
            //--------------------------------------------------------------------------------------------------
            bool gt_UnitattacksSremagsi_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGroupHasUnit(gv_unitsthatdidDamagetoSremagsi, EventUnitDamageSourceUnit()) == false) &amp;&amp; ((UnitGetOwner(EventUnitDamageSourceUnit()) == 1) || (UnitGetOwner(EventUnitDamageSourceUnit()) == 2) || (UnitGetOwner(EventUnitDamageSourceUnit()) == 3) || (UnitGetOwner(EventUnitDamageSourceUnit()) == 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupAdd(gv_unitsthatdidDamagetoSremagsi, EventUnitDamageSourceUnit());
                
                VisRevealerCreate(15, RegionFromId(228));
                VisRevealerCreate(15, RegionFromId(229));
                VisRevealerCreate(15, RegionFromId(230));
                if (((libNtve_gf_UnitInRegion(EventUnitTarget(), RegionFromId(228)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(EventUnitTarget(), RegionFromId(229)) == false) &amp;&amp; (libNtve_gf_UnitInRegion(EventUnitTarget(), RegionFromId(230)) == false))) {
                    UnitSetPosition(EventUnitTarget(), RegionRandomPoint(RegionFromId(241)), false);
                    //CameraPan(UnitGetOwner(EventUnitTarget()), RegionGetCenter(RegionFromId(241)), 2.0, -1, 10.0, false);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UnitattacksSremagsi_Init () {
                gt_UnitattacksSremagsi = TriggerCreate(&quot;gt_UnitattacksSremagsi_Func&quot;);
                TriggerAddEventUnitDamaged(gt_UnitattacksSremagsi, UnitRefFromVariable(&quot;gv_sremagsi&quot;), c_unitDamageTypeAny, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sremagsi set health
            //--------------------------------------------------------------------------------------------------
            bool gt_Sremagsisethealth_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetPropertyFixed(gv_sremagsi, c_unitPropLifeMax, (UnitGetPropertyFixed(UnitFromId(1151), c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
                UnitSetPropertyFixed(gv_sremagsi, c_unitPropLifePercent, 100.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Sremagsisethealth_Init () {
                gt_Sremagsisethealth = TriggerCreate(&quot;gt_Sremagsisethealth_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sremagsi Lair Enter
            //--------------------------------------------------------------------------------------------------
            bool gt_SremagsiLairEnter_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                int lv_tP;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_tP = UnitGetOwner(EventUnit());
                lv_tPI = (UnitGetOwner(EventUnit()) - 1);
                if ((gv_sremagsiDead == false)) {
                    gv_inFightWithSremagsi[lv_tPI] = true;
                    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;SremagsisTheme&quot;, c_soundtrackCueAny, 0, false);
                    libNtve_gf_DisplayBossBar(lv_tP, &quot;Assets\\Textures\\btn-unit-zerg-leviathan.dds&quot;, StringExternal(&quot;Param/Value/6DD637A1&quot;), 100, PlayerGroupSingle(lv_tP));
                    libNtve_gf_SetBossBarBoss(lv_tP, gv_sremagsi, true);
                    libNtve_gf_SetBossBarRace(lv_tP, libNtve_ge_BossBarRace_Zerg, true);
                    libNtve_gf_MoveBossBar(lv_tP, c_anchorTop, 0, 150);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SremagsiLairEnter_Init () {
                gt_SremagsiLairEnter = TriggerCreate(&quot;gt_SremagsiLairEnter_Func&quot;);
                TriggerAddEventUnitRegion(gt_SremagsiLairEnter, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;), RegionFromId(212), true);
                TriggerAddEventUnitRegion(gt_SremagsiLairEnter, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;), RegionFromId(212), true);
                TriggerAddEventUnitRegion(gt_SremagsiLairEnter, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;), RegionFromId(212), true);
                TriggerAddEventUnitRegion(gt_SremagsiLairEnter, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;), RegionFromId(212), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sremagsi Lair Exit
            //--------------------------------------------------------------------------------------------------
            bool gt_SremagsiLairExit_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(EventUnit());
                gv_inFightWithSremagsi[lv_triggeringPlayerIndex] = false;
                SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;InfestationTheme&quot;, c_soundtrackCueAny, 0, false);
                libNtve_gf_ShowHideBossBar(false, lv_triggeringPlayer);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SremagsiLairExit_Init () {
                gt_SremagsiLairExit = TriggerCreate(&quot;gt_SremagsiLairExit_Func&quot;);
                TriggerAddEventUnitRegion(gt_SremagsiLairExit, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;), RegionFromId(211), true);
                TriggerAddEventUnitRegion(gt_SremagsiLairExit, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;), RegionFromId(211), true);
                TriggerAddEventUnitRegion(gt_SremagsiLairExit, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;), RegionFromId(211), true);
                TriggerAddEventUnitRegion(gt_SremagsiLairExit, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;), RegionFromId(211), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sremagsi Dragon Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_SremagsiDragonDies_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((gv_inFightWithSremagsi[(UnitGetOwner(EventUnit()) - 1)] == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_inFightWithSremagsi[(UnitGetOwner(EventUnit()) - 1)] = false;
                SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                libNtve_gf_ShowHideBossBar(false, UnitGetOwner(EventUnit()));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SremagsiDragonDies_Init () {
                gt_SremagsiDragonDies = TriggerCreate(&quot;gt_SremagsiDragonDies_Func&quot;);
                TriggerAddEventUnitDied(gt_SremagsiDragonDies, UnitRefFromVariable(&quot;gv_players[0].dragon&quot;));
                TriggerAddEventUnitDied(gt_SremagsiDragonDies, UnitRefFromVariable(&quot;gv_players[1].dragon&quot;));
                TriggerAddEventUnitDied(gt_SremagsiDragonDies, UnitRefFromVariable(&quot;gv_players[2].dragon&quot;));
                TriggerAddEventUnitDied(gt_SremagsiDragonDies, UnitRefFromVariable(&quot;gv_players[3].dragon&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sremagsi Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_SremagsiDies_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/7BA0B288&quot;));
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_inFightWithSremagsi[(PlayerGroupLoopCurrent() - 1)] == true)) {
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryCombat, 100.0, 1.0);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryVoice, 100.0, 1.0);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategorySpell, 100.0, 1.0);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryAmbient, 100.0, 1.0);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryUI, 100.0, 1.0);
                        SoundtrackStop(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryMusic, true);
                        SoundtrackPlay(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryMusic, &quot;InfestationTheme&quot;, c_soundtrackCueAny, 0, false);
                        libNtve_gf_ShowHideBossBar(false, PlayerGroupLoopCurrent());
                        
                    }
                }
                PlayerGroupLoopEnd();
                UnitGroupLoopBegin(gv_unitsthatdidDamagetoSremagsi);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_AddExperience(UnitGroupLoopCurrent(), 5000.0);
                    PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 10);
                    if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[5].state == 2)) {
                        gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[5].state = 3;
                        BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, &quot;SQ5&quot;, PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[5].state);
                        ObjectiveSetName(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[5].objective, StringExternal(&quot;Param/Value/A62D176F&quot;));
                        PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[5].ping);
                        PingCreate(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), &quot;PingObjective&quot;, RegionGetCenter(RegionFromId(224)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                        gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[5].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                        SoundPlay(SoundLink(&quot;Alert_UniObjectiveUpdate&quot;, -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), 100.0, 0.0);
                        TextTagCreate(StringExternal(&quot;Param/Value/F1D75D0F&quot;), 72, UnitGetPosition(UnitFromId(1597)), 6.0, true, true, PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())));
                        gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[5].textTag = TextTagLastCreated();
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
                        TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1597), 5.0);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                    }
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;InfestedEgg&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;InfestedEgg2&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitGroupLoopBegin(UnitGroup(&quot;Carcinode&quot;, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                UnitKill(UnitFromId(2640));
                gv_inFightWithSremagsi[0] = false;
                gv_inFightWithSremagsi[1] = false;
                gv_inFightWithSremagsi[2] = false;
                gv_inFightWithSremagsi[3] = false;
                gv_sremagsiDead = true;
                TriggerEnable(gt_SremagsiRespawn, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SremagsiDies_Init () {
                gt_SremagsiDies = TriggerCreate(&quot;gt_SremagsiDies_Func&quot;);
                TriggerAddEventUnitDied(gt_SremagsiDies, UnitRefFromVariable(&quot;gv_sremagsi&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Sremagsi Respawn
            //--------------------------------------------------------------------------------------------------
            bool gt_SremagsiRespawn_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(228), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(229), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(230), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(228), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(229), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(230), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(228), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(229), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(230), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(228), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(229), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(230), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((gv_sremagsiDead == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/ACB85EF4&quot;));
                UnitCreate(1, &quot;Sremagsi&quot;, 0, 15, PointFromId(2665), 270.0);
                gv_sremagsi = UnitLastCreated();
                gv_sremagsiDead = false;
                UnitSetPropertyFixed(gv_sremagsi, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_sremagsi, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
                UnitSetPropertyFixed(gv_sremagsi, c_unitPropLifePercent, 100.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SremagsiRespawn_Init () {
                gt_SremagsiRespawn = TriggerCreate(&quot;gt_SremagsiRespawn_Func&quot;);
                TriggerEnable(gt_SremagsiRespawn, false);
                TriggerAddEventTimePeriodic(gt_SremagsiRespawn, 180.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Count Players Greater than 25
            //--------------------------------------------------------------------------------------------------
            bool gt_CountPlayersGreaterthan25_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetPropertyFixed(gv_players[0].dragon, c_unitPropLevel, c_unitPropCurrent) &gt;= 25.0)) {
                    gv_numPlayersHigherThan25 += 1;
                }
                if ((UnitGetPropertyFixed(gv_players[1].dragon, c_unitPropLevel, c_unitPropCurrent) &gt;= 25.0)) {
                    gv_numPlayersHigherThan25 += 1;
                }
                if ((UnitGetPropertyFixed(gv_players[2].dragon, c_unitPropLevel, c_unitPropCurrent) &gt;= 25.0)) {
                    gv_numPlayersHigherThan25 += 1;
                }
                if ((UnitGetPropertyFixed(gv_players[3].dragon, c_unitPropLevel, c_unitPropCurrent) &gt;= 25.0)) {
                    gv_numPlayersHigherThan25 += 1;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CountPlayersGreaterthan25_Init () {
                gt_CountPlayersGreaterthan25 = TriggerCreate(&quot;gt_CountPlayersGreaterthan25_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Guardian Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_GuardianSpawn_Func (bool testConds, bool runActions) {
                int auto6BC8ADC5_ae;
                int auto6BC8ADC5_ai;
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                int lv_c;
                int lv_d;
                // Variable Initialization
                // Actions
                statueSpawned = false;
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) == true)) {
                        if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state == 2)) {
                            ObjectiveSetName(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].objective, StringExternal(&quot;Param/Value/7BD4D7A8&quot;));
                            SoundPlay(SoundLink(&quot;Alert_UniObjectiveUpdate&quot;, -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), 100.0, 0.0);
                            PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping);
                            PingCreate(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), &quot;PingBoss&quot;, RegionGetCenter(RegionFromId(17)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
                            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping = PingLastCreated();
                            PingSetScale(PingLastCreated(), 0.5);
                        }
                    }
                }
                UnitGroupLoopEnd();
                TriggerExecute(gt_CountPlayersGreaterthan25, false, true);
                if ((libNtve_gf_UnitInRegion(gv_players[0].dragon, RegionFromId(17)) == true)) {
                    VisRevealerCreate(1, RegionFromId(17));
                    gv_guardianRevealers[0] = VisRevealerLastCreated();
                    libNtve_gf_PauseUnit(gv_players[0].dragon, true);
                    UnitGroupAdd(gv_dragonsInBattleWithGuardians, gv_players[0].dragon);
                    PlayerGroupAdd(gv_playersinBattlewithGuardians, 1);
                    CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 1), true);
                    CameraPan(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 1), RegionGetCenter(RegionFromId(48)), 5.0, -1, 10, false);
                    gv_inFightWithGaurdians[0] = true;
                    UnitSetPosition(gv_players[0].dragon, RegionGetCenter(RegionFromId(48)), false);
                    gv_livingDragonsinGaurdian += 1;
                }
                if ((libNtve_gf_UnitInRegion(gv_players[1].dragon, RegionFromId(17)) == true)) {
                    VisRevealerCreate(2, RegionFromId(17));
                    gv_guardianRevealers[1] = VisRevealerLastCreated();
                    libNtve_gf_PauseUnit(gv_players[1].dragon, true);
                    UnitGroupAdd(gv_dragonsInBattleWithGuardians, gv_players[1].dragon);
                    PlayerGroupAdd(gv_playersinBattlewithGuardians, 2);
                    CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 2), true);
                    CameraPan(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 2), RegionGetCenter(RegionFromId(48)), 5.0, -1, 10, false);
                    gv_inFightWithGaurdians[1] = true;
                    UnitSetPosition(gv_players[1].dragon, RegionGetCenter(RegionFromId(48)), false);
                    gv_livingDragonsinGaurdian += 1;
                }
                if ((libNtve_gf_UnitInRegion(gv_players[2].dragon, RegionFromId(17)) == true)) {
                    VisRevealerCreate(3, RegionFromId(17));
                    gv_guardianRevealers[2] = VisRevealerLastCreated();
                    libNtve_gf_PauseUnit(gv_players[2].dragon, true);
                    UnitGroupAdd(gv_dragonsInBattleWithGuardians, gv_players[2].dragon);
                    PlayerGroupAdd(gv_playersinBattlewithGuardians, 3);
                    CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 3), true);
                    CameraPan(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 3), RegionGetCenter(RegionFromId(48)), 5.0, -1, 10, false);
                    gv_inFightWithGaurdians[2] = true;
                    UnitSetPosition(gv_players[2].dragon, RegionGetCenter(RegionFromId(48)), false);
                    gv_livingDragonsinGaurdian += 1;
                }
                if ((libNtve_gf_UnitInRegion(gv_players[3].dragon, RegionFromId(17)) == true)) {
                    VisRevealerCreate(4, RegionFromId(17));
                    gv_guardianRevealers[3] = VisRevealerLastCreated();
                    libNtve_gf_PauseUnit(gv_players[3].dragon, true);
                    UnitGroupAdd(gv_dragonsInBattleWithGuardians, gv_players[3].dragon);
                    PlayerGroupAdd(gv_playersinBattlewithGuardians, 4);
                    CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 4), true);
                    CameraPan(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 4), RegionGetCenter(RegionFromId(48)), 5.0, -1, 10, false);
                    gv_inFightWithGaurdians[3] = true;
                    UnitSetPosition(gv_players[3].dragon, RegionGetCenter(RegionFromId(48)), false);
                    gv_livingDragonsinGaurdian += 1;
                }
                libNtve_gf_CreateModelAtPoint(&quot;TimeWarpLaunch&quot;, RegionGetCenter(RegionFromId(48)));
                Wait(1.7, c_timeReal);
                libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionGetCenter(RegionFromId(26)));
                libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionGetCenter(RegionFromId(45)));
                libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, RegionGetCenter(RegionFromId(46)));
                Wait(0.7, c_timeReal);
                auto6BC8ADC5_ae = 8;
                auto6BC8ADC5_ai = 1;
                lv_c = 1;
                for ( ; ( (auto6BC8ADC5_ai &gt;= 0 &amp;&amp; lv_c &lt;= auto6BC8ADC5_ae) || (auto6BC8ADC5_ai &lt;= 0 &amp;&amp; lv_c &gt;= auto6BC8ADC5_ae) ) ; lv_c += auto6BC8ADC5_ai ) {
                    UnitCreate(1, &quot;MineralField&quot;, 0, 0, RegionGetCenter(RegionFromId(47)), 270.0);
                    gv_mineralBlocks[lv_c] = UnitLastCreated();
                }
                libNtve_gf_UnitCreateFacingPoint(1, &quot;Korlic&quot;, 0, 15, RegionGetCenter(RegionFromId(26)), UnitGetPosition(libNtve_gf_KillingUnit()));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
                gv_korlic = UnitLastCreated();
                UnitGroupAdd(gv_guardians, gv_korlic);
                libNtve_gf_PauseUnit(gv_korlic, true);
                libNtve_gf_UnitCreateFacingPoint(1, &quot;Madawc&quot;, 0, 15, RegionGetCenter(RegionFromId(45)), UnitGetPosition(libNtve_gf_KillingUnit()));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
                gv_madawc = UnitLastCreated();
                UnitGroupAdd(gv_guardians, gv_madawc);
                libNtve_gf_PauseUnit(gv_madawc, true);
                libNtve_gf_UnitCreateFacingPoint(1, &quot;Tolic&quot;, 0, 15, RegionGetCenter(RegionFromId(46)), UnitGetPosition(libNtve_gf_KillingUnit()));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
                gv_tolic = UnitLastCreated();
                UnitGroupAdd(gv_guardians, gv_tolic);
                libNtve_gf_PauseUnit(gv_tolic, true);
                SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryCombat, 75.0, 1.0);
                SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryVoice, 10.0, 1.0);
                SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategorySpell, 75.0, 1.0);
                SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 10.0, 1.0);
                SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryUI, 10.0, 1.0);
                SoundtrackStop(gv_playersinBattlewithGuardians, c_soundtrackCategoryMusic, false);
                SoundPlay(SoundLink(&quot;GuardiansTheme&quot;, -1), gv_playersinBattlewithGuardians, 100.0, 0.0);
                gv_guardiansTheme = SoundLastPlayed();
                gv_numGaurdiansDead = 0;
                PlayerGroupLoopBegin(gv_playersinBattlewithGuardians);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_DisplayBossBar((PlayerGroupLoopCurrent() + 0), &quot;Assets\\Textures\\zealotportrait_static.dds&quot;, StringExternal(&quot;Param/Value/0FC70240&quot;), 100, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    libNtve_gf_SetBossBarBoss((PlayerGroupLoopCurrent() + 0), gv_tolic, true);
                    libNtve_gf_SetBossBarRace((PlayerGroupLoopCurrent() + 0), libNtve_ge_BossBarRace_Protoss, true);
                    libNtve_gf_MoveBossBar((PlayerGroupLoopCurrent() + 0), c_anchorTop, 0, 125);
                    libNtve_gf_DisplayBossBar((PlayerGroupLoopCurrent() + 4), &quot;Assets\\Textures\\darktemplarportrait_static.dds&quot;, StringExternal(&quot;Param/Value/AD8A41AB&quot;), 100, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    libNtve_gf_SetBossBarBoss((PlayerGroupLoopCurrent() + 4), gv_korlic, true);
                    libNtve_gf_SetBossBarRace((PlayerGroupLoopCurrent() + 4), libNtve_ge_BossBarRace_Protoss, true);
                    libNtve_gf_MoveBossBar((PlayerGroupLoopCurrent() + 4), c_anchorTop, -500, 125);
                    libNtve_gf_DisplayBossBar((PlayerGroupLoopCurrent() + 8), &quot;Assets\\Textures\\hightemplarportrait_static.dds&quot;, StringExternal(&quot;Param/Value/931C43C1&quot;), 100, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    libNtve_gf_SetBossBarBoss((PlayerGroupLoopCurrent() + 8), gv_madawc, true);
                    libNtve_gf_SetBossBarRace((PlayerGroupLoopCurrent() + 8), libNtve_ge_BossBarRace_Protoss, true);
                    libNtve_gf_MoveBossBar((PlayerGroupLoopCurrent() + 8), c_anchorTop, 500, 125);
                }
                PlayerGroupLoopEnd();
                if ((libNtve_gf_UnitInRegion(gv_players[0].dragon, RegionFromId(17)) == true)) {
                    libNtve_gf_PauseUnit(gv_players[0].dragon, false);
                    CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 1), false);
                }
                if ((libNtve_gf_UnitInRegion(gv_players[1].dragon, RegionFromId(17)) == true)) {
                    libNtve_gf_PauseUnit(gv_players[1].dragon, false);
                    CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 2), false);
                }
                if ((libNtve_gf_UnitInRegion(gv_players[2].dragon, RegionFromId(17)) == true)) {
                    libNtve_gf_PauseUnit(gv_players[2].dragon, false);
                    CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 3), false);
                }
                if ((libNtve_gf_UnitInRegion(gv_players[3].dragon, RegionFromId(17)) == true)) {
                    libNtve_gf_PauseUnit(gv_players[3].dragon, false);
                    CameraLockInput(PlayerGroupPlayer(gv_playersinBattlewithGuardians, 4), false);
                }
                libNtve_gf_PauseUnit(gv_korlic, false);
                UnitIssueOrder(gv_korlic, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(47))), c_orderQueueReplace);
                libNtve_gf_PauseUnit(gv_madawc, false);
                UnitIssueOrder(gv_madawc, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(47))), c_orderQueueReplace);
                libNtve_gf_PauseUnit(gv_tolic, false);
                UnitIssueOrder(gv_tolic, OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionGetCenter(RegionFromId(47))), c_orderQueueReplace);
                gv_guardiansDead = false;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GuardianSpawn_Init () {
                gt_GuardianSpawn = TriggerCreate(&quot;gt_GuardianSpawn_Func&quot;);
                TriggerAddEventUnitDied(gt_GuardianSpawn, UnitRefFromVariable(&quot;gv_zauberersStatue&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Korlic Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_KorlicDies_Func (bool testConds, bool runActions) {
                int autoF042D0AF_ae;
                int autoF042D0AF_ai;
                // Variable Declarations
                int lv_u;
                int lv_c;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_ShowHideBossBar(false, (UnitGetOwner(UnitGroupLoopCurrent()) + 4));
                }
                UnitGroupLoopEnd();
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/D0262864&quot;));
                libNtve_gf_CreateModelAtPoint(&quot;MothershipTeleportOut&quot;, UnitGetPosition(EventUnit()));
                gv_numGaurdiansDead += 1;
                if ((gv_numGaurdiansDead == 3)) {
                    UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitLevel(UnitGroupLoopCurrent()) != 100)) {
                            gf_AddExperience(UnitGroupLoopCurrent(), 1500.0);
                        }
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 5);
                        if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state == 2)) {
                            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state = 3;
                            ObjectiveSetDescription(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].objective, StringExternal(&quot;Param/Value/A3560FB6&quot;));
                            ObjectiveSetName(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].objective, StringExternal(&quot;Param/Value/7ED2B133&quot;));
                            SoundPlay(SoundLink(&quot;Alert_UniObjectiveUpdate&quot;, -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), 100.0, 0.0);
                            BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, &quot;SQ4&quot;, PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state);
                            TextTagCreate(StringExternal(&quot;Param/Value/EB4B3E34&quot;), 72, UnitGetPosition(UnitFromId(1976)), 6.0, true, true, PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())));
                            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].textTag = TextTagLastCreated();
                            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                            TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
                            TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1976), 5.0);
                            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                            PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping);
                            PingCreate(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), &quot;PingObjective&quot;, RegionGetCenter(RegionFromId(225)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping = PingLastCreated();
                            PingSetScale(PingLastCreated(), 0.5);
                        }
                    }
                    UnitGroupLoopEnd();
                    VisRevealerDestroy(gv_guardianRevealers[0]);
                    VisRevealerDestroy(gv_guardianRevealers[1]);
                    VisRevealerDestroy(gv_guardianRevealers[2]);
                    VisRevealerDestroy(gv_guardianRevealers[3]);
                    SoundStop(gv_guardiansTheme, true);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryCombat, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryVoice, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategorySpell, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryUI, 100.0, 1.0);
                    SoundtrackPlay(gv_playersinBattlewithGuardians, c_soundtrackCategoryMusic, &quot;RelamyCaveTheme&quot;, c_soundtrackCueAny, 0, false);
                    gv_inFightWithGaurdians[0] = false;
                    gv_inFightWithGaurdians[1] = false;
                    gv_inFightWithGaurdians[2] = false;
                    gv_inFightWithGaurdians[3] = false;
                    UnitGroupClear(gv_dragonsInBattleWithGuardians);
                    PlayerGroupClear(gv_playersinBattlewithGuardians);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/5FC4FC56&quot;));
                    gv_guardiansDead = true;
                    autoF042D0AF_ae = 8;
                    autoF042D0AF_ai = 1;
                    lv_c = 1;
                    for ( ; ( (autoF042D0AF_ai &gt;= 0 &amp;&amp; lv_c &lt;= autoF042D0AF_ae) || (autoF042D0AF_ai &lt;= 0 &amp;&amp; lv_c &gt;= autoF042D0AF_ae) ) ; lv_c += autoF042D0AF_ai ) {
                        UnitRemove(gv_mineralBlocks[lv_c]);
                    }
                    TriggerEnable(gt_GuardianRespawn, true);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_KorlicDies_Init () {
                gt_KorlicDies = TriggerCreate(&quot;gt_KorlicDies_Func&quot;);
                TriggerAddEventUnitDied(gt_KorlicDies, UnitRefFromVariable(&quot;gv_korlic&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Tolic Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_TolicDies_Func (bool testConds, bool runActions) {
                int auto7DC75DFB_ae;
                int auto7DC75DFB_ai;
                // Variable Declarations
                int lv_u;
                int lv_c;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_ShowHideBossBar(false, (UnitGetOwner(UnitGroupLoopCurrent()) + 0));
                }
                UnitGroupLoopEnd();
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/75DA4E32&quot;));
                libNtve_gf_CreateModelAtPoint(&quot;MothershipTeleportOut&quot;, UnitGetPosition(EventUnit()));
                gv_numGaurdiansDead += 1;
                if ((gv_numGaurdiansDead == 3)) {
                    UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitLevel(UnitGroupLoopCurrent()) != 100)) {
                            gf_AddExperience(UnitGroupLoopCurrent(), 3000.0);
                        }
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 5);
                        if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state == 2)) {
                            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state = 3;
                            ObjectiveSetDescription(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].objective, StringExternal(&quot;Param/Value/648B2509&quot;));
                            ObjectiveSetName(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].objective, StringExternal(&quot;Param/Value/627202CB&quot;));
                            SoundPlay(SoundLink(&quot;Alert_UniObjectiveUpdate&quot;, -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), 100.0, 0.0);
                            BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, &quot;SQ4&quot;, PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state);
                            TextTagCreate(StringExternal(&quot;Param/Value/CB9B21A6&quot;), 72, UnitGetPosition(UnitFromId(1976)), 6.0, true, true, PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())));
                            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].textTag = TextTagLastCreated();
                            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                            TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
                            TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1976), 5.0);
                            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                            PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping);
                            PingCreate(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), &quot;PingObjective&quot;, RegionGetCenter(RegionFromId(225)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping = PingLastCreated();
                            PingSetScale(PingLastCreated(), 0.5);
                        }
                    }
                    UnitGroupLoopEnd();
                    VisRevealerDestroy(gv_guardianRevealers[0]);
                    VisRevealerDestroy(gv_guardianRevealers[1]);
                    VisRevealerDestroy(gv_guardianRevealers[2]);
                    VisRevealerDestroy(gv_guardianRevealers[3]);
                    SoundStop(gv_guardiansTheme, true);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryCombat, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryVoice, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategorySpell, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryUI, 100.0, 1.0);
                    SoundtrackPlay(gv_playersinBattlewithGuardians, c_soundtrackCategoryMusic, &quot;RelamyCaveTheme&quot;, c_soundtrackCueAny, 0, false);
                    gv_inFightWithGaurdians[0] = false;
                    gv_inFightWithGaurdians[1] = false;
                    gv_inFightWithGaurdians[2] = false;
                    gv_inFightWithGaurdians[3] = false;
                    UnitGroupClear(gv_dragonsInBattleWithGuardians);
                    PlayerGroupClear(gv_playersinBattlewithGuardians);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/289CA76C&quot;));
                    gv_guardiansDead = true;
                    TriggerEnable(gt_GuardianRespawn, true);
                    auto7DC75DFB_ae = 8;
                    auto7DC75DFB_ai = 1;
                    lv_c = 1;
                    for ( ; ( (auto7DC75DFB_ai &gt;= 0 &amp;&amp; lv_c &lt;= auto7DC75DFB_ae) || (auto7DC75DFB_ai &lt;= 0 &amp;&amp; lv_c &gt;= auto7DC75DFB_ae) ) ; lv_c += auto7DC75DFB_ai ) {
                        UnitRemove(gv_mineralBlocks[lv_c]);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TolicDies_Init () {
                gt_TolicDies = TriggerCreate(&quot;gt_TolicDies_Func&quot;);
                TriggerAddEventUnitDied(gt_TolicDies, UnitRefFromVariable(&quot;gv_tolic&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Madawc Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_MadawcDies_Func (bool testConds, bool runActions) {
                int auto0CF0135C_ae;
                int auto0CF0135C_ai;
                // Variable Declarations
                int lv_u;
                int lv_c;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_ShowHideBossBar(false, (UnitGetOwner(UnitGroupLoopCurrent()) + 8));
                }
                UnitGroupLoopEnd();
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E1F8BA32&quot;));
                libNtve_gf_CreateModelAtPoint(&quot;MothershipTeleportOut&quot;, UnitGetPosition(EventUnit()));
                gv_numGaurdiansDead += 1;
                if ((gv_numGaurdiansDead == 3)) {
                    UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitLevel(UnitGroupLoopCurrent()) != 100)) {
                            gf_AddExperience(UnitGroupLoopCurrent(), 3000.0);
                        }
                    }
                    UnitGroupLoopEnd();
                    UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 5);
                        if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state == 2)) {
                            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state = 3;
                            ObjectiveSetDescription(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].objective, StringExternal(&quot;Param/Value/144AD99C&quot;));
                            ObjectiveSetName(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].objective, StringExternal(&quot;Param/Value/0A386C3E&quot;));
                            SoundPlay(SoundLink(&quot;Alert_UniObjectiveUpdate&quot;, -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), 100.0, 0.0);
                            BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, &quot;SQ4&quot;, PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].state);
                            TextTagCreate(StringExternal(&quot;Param/Value/7FB42C35&quot;), 72, UnitGetPosition(UnitFromId(1976)), 6.0, true, true, PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())));
                            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].textTag = TextTagLastCreated();
                            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                            TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
                            TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1976), 5.0);
                            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                            PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping);
                            PingCreate(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), &quot;PingObjective&quot;, RegionGetCenter(RegionFromId(225)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                            gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[4].ping = PingLastCreated();
                            PingSetScale(PingLastCreated(), 0.5);
                        }
                    }
                    UnitGroupLoopEnd();
                    VisRevealerDestroy(gv_guardianRevealers[0]);
                    VisRevealerDestroy(gv_guardianRevealers[1]);
                    VisRevealerDestroy(gv_guardianRevealers[2]);
                    VisRevealerDestroy(gv_guardianRevealers[3]);
                    SoundStop(gv_guardiansTheme, true);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryCombat, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryVoice, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategorySpell, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
                    SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryUI, 100.0, 1.0);
                    SoundtrackPlay(gv_playersinBattlewithGuardians, c_soundtrackCategoryMusic, &quot;RelamyCaveTheme&quot;, c_soundtrackCueAny, 0, false);
                    gv_inFightWithGaurdians[0] = false;
                    gv_inFightWithGaurdians[1] = false;
                    gv_inFightWithGaurdians[2] = false;
                    gv_inFightWithGaurdians[3] = false;
                    UnitGroupClear(gv_dragonsInBattleWithGuardians);
                    PlayerGroupClear(gv_playersinBattlewithGuardians);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/66537BB6&quot;));
                    gv_guardiansDead = true;
                    TriggerEnable(gt_GuardianRespawn, true);
                    auto0CF0135C_ae = 8;
                    auto0CF0135C_ai = 1;
                    lv_c = 1;
                    for ( ; ( (auto0CF0135C_ai &gt;= 0 &amp;&amp; lv_c &lt;= auto0CF0135C_ae) || (auto0CF0135C_ai &lt;= 0 &amp;&amp; lv_c &gt;= auto0CF0135C_ae) ) ; lv_c += auto0CF0135C_ai ) {
                        UnitRemove(gv_mineralBlocks[lv_c]);
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MadawcDies_Init () {
                gt_MadawcDies = TriggerCreate(&quot;gt_MadawcDies_Func&quot;);
                TriggerAddEventUnitDied(gt_MadawcDies, UnitRefFromVariable(&quot;gv_madawc&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: No Dragons in Gaurdian
            //--------------------------------------------------------------------------------------------------
            bool gt_NoDragonsinGaurdian_Func (bool testConds, bool runActions) {
                int autoB2DE0A59_ae;
                int autoB2DE0A59_ai;
                // Variable Declarations
                int lv_c;
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) != 16) &amp;&amp; (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) &amp;&amp; (gv_inFightWithGaurdians[(UnitGetOwner(EventUnit()) - 1)] == true)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(EventUnit());
                gv_inFightWithGaurdians[lv_triggeringPlayerIndex] = false;
                UnitGroupRemove(gv_dragonsInBattleWithGuardians, EventUnit());
                SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryCombat, 100.0, 1.0);
                SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryVoice, 100.0, 1.0);
                SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategorySpell, 100.0, 1.0);
                SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
                SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
                SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryUI, 100.0, 1.0);
                libNtve_gf_ShowHideBossBar(false, (lv_triggeringPlayer + 0));
                libNtve_gf_ShowHideBossBar(false, (lv_triggeringPlayer + 4));
                libNtve_gf_ShowHideBossBar(false, (lv_triggeringPlayer + 8));
                VisRevealerDestroy(gv_guardianRevealers[lv_triggeringPlayerIndex]);
                gv_livingDragonsinGaurdian -= 1;
                if (((gv_livingDragonsinGaurdian &lt;= 0))) {
                    gv_livingDragonsinGaurdian = 0;
                    gv_numGaurdiansDead = 0;
                    UnitRemove(gv_korlic);
                    UnitRemove(gv_madawc);
                    UnitRemove(gv_tolic);
                    autoB2DE0A59_ae = 8;
                    autoB2DE0A59_ai = 1;
                    lv_c = 1;
                    for ( ; ( (autoB2DE0A59_ai &gt;= 0 &amp;&amp; lv_c &lt;= autoB2DE0A59_ae) || (autoB2DE0A59_ai &lt;= 0 &amp;&amp; lv_c &gt;= autoB2DE0A59_ae) ) ; lv_c += autoB2DE0A59_ai ) {
                        UnitRemove(gv_mineralBlocks[lv_c]);
                    }
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;ZauberersStatue&quot;, 0, 0, RegionGetCenter(RegionFromId(48)), RegionGetCenter(RegionFromId(47)));
                    gv_zauberersStatue = UnitLastCreated();
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_NoDragonsinGaurdian_Init () {
                gt_NoDragonsinGaurdian = TriggerCreate(&quot;gt_NoDragonsinGaurdian_Func&quot;);
                TriggerAddEventUnitDied(gt_NoDragonsinGaurdian, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Guardian Respawn
            //--------------------------------------------------------------------------------------------------
            bool gt_GuardianRespawn_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(17), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(17), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(17), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(17), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((gv_guardiansDead == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/2292C61E&quot;));
                libNtve_gf_UnitCreateFacingPoint(1, &quot;ZauberersStatue&quot;, 0, 0, RegionGetCenter(RegionFromId(48)), RegionGetCenter(RegionFromId(47)));
                gv_zauberersStatue = UnitLastCreated();
                statueSpawned = true;
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GuardianRespawn_Init () {
                gt_GuardianRespawn = TriggerCreate(&quot;gt_GuardianRespawn_Func&quot;);
                TriggerEnable(gt_GuardianRespawn, false);
                TriggerAddEventTimePeriodic(gt_GuardianRespawn, 180.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Unit attacks Syrital
            //--------------------------------------------------------------------------------------------------
            bool gt_UnitattacksSyrital_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGroupHasUnit(gv_unitsthatdidDamagetoSyrital, EventUnitDamageSourceUnit()) == false) &amp;&amp; ((UnitGetOwner(EventUnitDamageSourceUnit()) == 1) || (UnitGetOwner(EventUnitDamageSourceUnit()) == 2) || (UnitGetOwner(EventUnitDamageSourceUnit()) == 3) || (UnitGetOwner(EventUnitDamageSourceUnit()) == 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupAdd(gv_unitsthatdidDamagetoSyrital, EventUnitDamageSourceUnit());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_UnitattacksSyrital_Init () {
                gt_UnitattacksSyrital = TriggerCreate(&quot;gt_UnitattacksSyrital_Func&quot;);
                TriggerAddEventUnitDamaged(gt_UnitattacksSyrital, UnitRefFromVariable(&quot;gv_syrital&quot;), c_unitDamageTypeAny, c_unitDamageEither, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Syrital Health
            //--------------------------------------------------------------------------------------------------
            bool gt_SetSyritalHealth_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetPropertyFixed(gv_syrital, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_syrital, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetSyritalHealth_Init () {
                gt_SetSyritalHealth = TriggerCreate(&quot;gt_SetSyritalHealth_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Syrital Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateSyritalWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/0959DEC6&quot;), 24, PointFromId(302), 1.0, true, true, PlayerGroupAll());
                gv_syritalWarning = TextTagLastCreated();
                TextTagSetTime(gv_syritalWarning, c_textTagTimeDuration, 524288.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateSyritalWarning_Init () {
                gt_CreateSyritalWarning = TriggerCreate(&quot;gt_CreateSyritalWarning_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_CreateSyritalWarning, null, PointFromId(302), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Syrital Enter
            //--------------------------------------------------------------------------------------------------
            bool gt_SyritalEnter_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(EventUnit());
                if ((gv_syritalDead == false)) {
                    gv_inFightwithSyrital[lv_triggeringPlayerIndex] = true;
                    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryCombat, 10.0, 1.0);
                    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, 10.0, 1.0);
                    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategorySpell, 10.0, 1.0);
                    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 10.0, 1.0);
                    SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryUI, 10.0, 1.0);
                    SoundtrackStop(PlayerGroupSingle(lv_triggeringPlayer), c_soundtrackCategoryMusic, false);
                    SoundPlay(SoundLink(&quot;SyritalBattleTheme&quot;, -1), PlayerGroupSingle(lv_triggeringPlayer), 100.0, 0.0);
                    gv_syritalsTheme[lv_triggeringPlayerIndex] = SoundLastPlayed();
                    libNtve_gf_DisplayBossBar(lv_triggeringPlayer, &quot;Assets\\Textures\\btn-unit-zerg-queen.dds&quot;, StringExternal(&quot;Param/Value/9DDB595D&quot;), 100, PlayerGroupSingle(lv_triggeringPlayer));
                    libNtve_gf_SetBossBarBoss(lv_triggeringPlayer, gv_syrital, true);
                    libNtve_gf_SetBossBarRace(lv_triggeringPlayer, libNtve_ge_BossBarRace_Zerg, true);
                    libNtve_gf_MoveBossBar(lv_triggeringPlayer, c_anchorTop, 0, 150);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SyritalEnter_Init () {
                gt_SyritalEnter = TriggerCreate(&quot;gt_SyritalEnter_Func&quot;);
                TriggerAddEventUnitRegion(gt_SyritalEnter, null, RegionFromId(5), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Syrital Leave
            //--------------------------------------------------------------------------------------------------
            bool gt_SyritalLeave_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((UnitGetOwner(EventUnit()) != 16))) {
                        return false;
                    }
                    if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(EventUnit());
                gv_inFightwithSyrital[lv_triggeringPlayerIndex] = false;
                SoundStop(gv_syritalsTheme[lv_triggeringPlayerIndex], true);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryCombat, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategorySpell, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryUI, 100.0, 1.0);
                SoundtrackStop(PlayerGroupSingle(lv_triggeringPlayerIndex), c_soundtrackCategoryMusic, false);
                libNtve_gf_ShowHideBossBar(false, lv_triggeringPlayer);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SyritalLeave_Init () {
                gt_SyritalLeave = TriggerCreate(&quot;gt_SyritalLeave_Func&quot;);
                TriggerAddEventUnitRegion(gt_SyritalLeave, null, RegionFromId(5), false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Syrital Dragon Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_SyritalDragonDies_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
                        return false;
                    }
                    if (!((gv_inFightwithSyrital[(UnitGetOwner(EventUnit()) - 1)] == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(EventUnit());
                gv_inFightwithSyrital[lv_triggeringPlayerIndex] = false;
                SoundStop(gv_syritalsTheme[lv_triggeringPlayerIndex], true);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryCombat, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryVoice, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategorySpell, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryAmbient, 100.0, 1.0);
                SoundChannelSetVolume(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundCategoryUI, 100.0, 1.0);
                SoundtrackStop(PlayerGroupSingle(lv_triggeringPlayerIndex), c_soundtrackCategoryMusic, false);
                libNtve_gf_ShowHideBossBar(false, lv_triggeringPlayer);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SyritalDragonDies_Init () {
                gt_SyritalDragonDies = TriggerCreate(&quot;gt_SyritalDragonDies_Func&quot;);
                TriggerAddEventUnitDied(gt_SyritalDragonDies, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Syrital Dies
            //--------------------------------------------------------------------------------------------------
            bool gt_SyritalDies_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (UnitGetOwner(libNtve_gf_KillingUnit()) - 1);
                lv_triggeringPlayer = UnitGetOwner(libNtve_gf_KillingUnit());
                SoundStop(gv_syritalsTheme[0], true);
                SoundStop(gv_syritalsTheme[1], true);
                SoundStop(gv_syritalsTheme[2], true);
                SoundStop(gv_syritalsTheme[3], true);
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_inFightwithSyrital[(PlayerGroupLoopCurrent() - 1)] == true)) {
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryCombat, 100.0, 1.0);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryVoice, 100.0, 1.0);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategorySpell, 100.0, 1.0);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryAmbient, 100.0, 1.0);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryAmbient, 100.0, 1.0);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryUI, 100.0, 1.0);
                        gv_inFightwithSyrital[(PlayerGroupLoopCurrent() - 1)] = false;
                        libNtve_gf_ShowHideBossBar(false, PlayerGroupLoopCurrent());
                    }
                }
                PlayerGroupLoopEnd();
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/D94B490A&quot;));
                gv_syritalDead = true;
                TriggerEnable(gt_SyritalRespawn, true);
                UnitGroupLoopBegin(gv_unitsthatdidDamagetoSyrital);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_AddExperience(UnitGroupLoopCurrent(), 500.0);
                    PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 1);
                    if ((gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].state == 1)) {
                        gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].state = 2;
                        ObjectiveSetDescription(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].objective, StringExternal(&quot;Param/Value/31DF3212&quot;));
                        ObjectiveSetName(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].objective, StringExternal(&quot;Param/Value/05FD217C&quot;));
                        SoundPlay(SoundLink(&quot;Alert_UniObjectiveUpdate&quot;, -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), 100.0, 0.0);
                        BankValueSetFromInt(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].banks.dragonBank, &quot;SQ1&quot;, PlayerHandle(UnitGetOwner(UnitGroupLoopCurrent())), gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].state);
                        TextTagCreate(StringExternal(&quot;Param/Value/3A58ACB6&quot;), 72, UnitGetPosition(UnitFromId(2511)), 6.0, true, true, PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())));
                        gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].textTag = TextTagLastCreated();
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
                        TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2511), 5.0);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
                        PingDestroy(gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].ping);
                        PingCreate(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), &quot;PingObjective&quot;, RegionGetCenter(RegionFromId(216)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
                        gv_players[(UnitGetOwner(UnitGroupLoopCurrent()) - 1)].quests.storyQuests[1].ping = PingLastCreated();
                        PingSetScale(PingLastCreated(), 0.5);
                    }
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SyritalDies_Init () {
                gt_SyritalDies = TriggerCreate(&quot;gt_SyritalDies_Func&quot;);
                TriggerAddEventUnitDied(gt_SyritalDies, UnitRefFromVariable(&quot;gv_syrital&quot;));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Syrital Respawn
            //--------------------------------------------------------------------------------------------------
            bool gt_SyritalRespawn_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(5), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0), c_unitCountAlive) &lt;= 0))) {
                        return false;
                    }
                    if (!((gv_syritalDead == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/5743AE9F&quot;));
                UnitCreate(1, &quot;Syrital&quot;, 0, 15, RegionGetCenter(RegionFromId(5)), 270.0);
                gv_syrital = UnitLastCreated();
                UnitSetPropertyFixed(gv_syrital, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_syrital, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
                UnitSetPropertyFixed(gv_syrital, c_unitPropLifePercent, 100.0);
                gv_syritalDead = false;
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SyritalRespawn_Init () {
                gt_SyritalRespawn = TriggerCreate(&quot;gt_SyritalRespawn_Func&quot;);
                TriggerEnable(gt_SyritalRespawn, false);
                TriggerAddEventTimePeriodic(gt_SyritalRespawn, 180.0, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Enemies
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnEnemies_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tempradon;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitCreate(1, &quot;Srepti&quot;, 0, 15, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[0], UnitLastCreated());
                UnitCreate(1, &quot;Srepti&quot;, 0, 15, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[0], UnitLastCreated());
                UnitCreate(1, &quot;SmallSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[0], UnitLastCreated());
                UnitCreate(1, &quot;SmallSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[0], UnitLastCreated());
                UnitCreate(1, &quot;Srepti&quot;, 0, 15, RegionRandomPoint(RegionFromId(2)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[1], UnitLastCreated());
                UnitCreate(1, &quot;Srepti&quot;, 0, 15, RegionRandomPoint(RegionFromId(2)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[1], UnitLastCreated());
                UnitCreate(1, &quot;SmallSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(2)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[1], UnitLastCreated());
                UnitCreate(1, &quot;SmallSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(2)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[1], UnitLastCreated());
                UnitCreate(1, &quot;SmallSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[2], UnitLastCreated());
                UnitCreate(1, &quot;SmallSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[2], UnitLastCreated());
                UnitCreate(1, &quot;SmallSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[2], UnitLastCreated());
                UnitCreate(1, &quot;SmallSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(49)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[3], UnitLastCreated());
                UnitCreate(1, &quot;SmallSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(49)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[3], UnitLastCreated());
                UnitCreate(1, &quot;SmallSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(50)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[4], UnitLastCreated());
                UnitCreate(1, &quot;SmallSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(50)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[4], UnitLastCreated());
                UnitCreate(1, &quot;Vogel&quot;, 0, 15, RegionRandomPoint(RegionFromId(18)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyPassUnits[1], UnitLastCreated());
                UnitCreate(1, &quot;Vogel&quot;, 0, 15, RegionRandomPoint(RegionFromId(19)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyPassUnits[2], UnitLastCreated());
                UnitCreate(1, &quot;Vogel&quot;, 0, 15, RegionRandomPoint(RegionFromId(20)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyPassUnits[3], UnitLastCreated());
                UnitCreate(1, &quot;Vogel&quot;, 0, 15, RegionRandomPoint(RegionFromId(268)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyGorgeUnits[0], UnitLastCreated());
                UnitCreate(1, &quot;Vogel&quot;, 0, 15, RegionRandomPoint(RegionFromId(21)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyGorgeUnits[1], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(27)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyGorgeUnits[2], UnitLastCreated());
                UnitCreate(1, &quot;Vogel&quot;, 0, 15, RegionRandomPoint(RegionFromId(28)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyGorgeUnits[3], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(29)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyGorgeUnits[4], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(265)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyGorgeUnits[5], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(266)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyGorgeUnits[6], UnitLastCreated());
                UnitCreate(1, &quot;Srepti&quot;, 0, 15, RegionRandomPoint(RegionFromId(267)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyGorgeUnits[7], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(7)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[0], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(7)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[0], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(7)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[0], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(9)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[1], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(9)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[1], UnitLastCreated());
                UnitCreate(1, &quot;Karramarro&quot;, 0, 15, RegionRandomPoint(RegionFromId(9)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[1], UnitLastCreated());
                UnitCreate(1, &quot;Karramarro&quot;, 0, 15, RegionRandomPoint(RegionFromId(9)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[1], UnitLastCreated());
                UnitCreate(1, &quot;Karramarro&quot;, 0, 15, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[2], UnitLastCreated());
                UnitCreate(1, &quot;Karramarro&quot;, 0, 15, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[2], UnitLastCreated());
                UnitCreate(1, &quot;Karramarro&quot;, 0, 15, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[2], UnitLastCreated());
                UnitCreate(1, &quot;Karramarro&quot;, 0, 15, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[2], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(11)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[3], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(11)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[3], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(11)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[3], UnitLastCreated());
                UnitCreate(1, &quot;CretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionFromId(12)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[0], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(12)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[0], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(12)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[0], UnitLastCreated());
                UnitCreate(1, &quot;CretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionFromId(13)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[1], UnitLastCreated());
                UnitCreate(1, &quot;CretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionFromId(13)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[1], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(13)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[1], UnitLastCreated());
                UnitCreate(1, &quot;CretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionFromId(14)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[2], UnitLastCreated());
                UnitCreate(1, &quot;CretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionFromId(14)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[2], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(14)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[2], UnitLastCreated());
                UnitCreate(1, &quot;CretonWarrior&quot;, 0, 15, RegionRandomPoint(RegionFromId(14)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[2], UnitLastCreated());
                UnitCreate(1, &quot;CretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionFromId(15)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[3], UnitLastCreated());
                UnitCreate(1, &quot;CretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionFromId(15)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[3], UnitLastCreated());
                UnitCreate(1, &quot;CretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionFromId(15)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[3], UnitLastCreated());
                UnitCreate(1, &quot;CretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionFromId(16)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[4], UnitLastCreated());
                UnitCreate(1, &quot;CretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionFromId(16)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[4], UnitLastCreated());
                UnitCreate(1, &quot;CretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionFromId(16)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[4], UnitLastCreated());
                UnitCreate(1, &quot;CretonWatcher&quot;, 0, 15, RegionRandomPoint(RegionFromId(16)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[4], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(51)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[0], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(51)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[0], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(51)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[0], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(51)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[0], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(52)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[1], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(52)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[1], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(52)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[1], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(53)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[2], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(53)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[2], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(53)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[2], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[3], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[3], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[3], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(55)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[4], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(55)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[4], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(57)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[6], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(57)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[6], UnitLastCreated());
                UnitCreate(1, &quot;Alakdan&quot;, 0, 15, RegionRandomPoint(RegionFromId(57)), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[6], UnitLastCreated());
                UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[0]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_undergroundForestUnits[0], UnitLastCreated());
                UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[1]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_undergroundForestUnits[1], UnitLastCreated());
                UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[2]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_undergroundForestUnits[2], UnitLastCreated());
                UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[3]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_undergroundForestUnits[3], UnitLastCreated());
                UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[4]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_undergroundForestUnits[4], UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnEnemies_Init () {
                gt_SpawnEnemies = TriggerCreate(&quot;gt_SpawnEnemies_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set up Bio Dome Wasteland Regions
            //--------------------------------------------------------------------------------------------------
            bool gt_SetupBioDomeWastelandRegions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_bioDomeWastelandRegions[0] = RegionFromId(151);
                gv_bioDomeWastelandRegions[1] = RegionFromId(152);
                gv_bioDomeWastelandRegions[2] = RegionFromId(153);
                gv_bioDomeWastelandRegions[3] = RegionFromId(154);
                gv_bioDomeWastelandRegions[4] = RegionFromId(155);
                gv_bioDomeWastelandRegions[5] = RegionFromId(156);
                gv_bioDomeWastelandRegions[6] = RegionFromId(157);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetupBioDomeWastelandRegions_Init () {
                gt_SetupBioDomeWastelandRegions = TriggerCreate(&quot;gt_SetupBioDomeWastelandRegions_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Enemies Bio Dome Wasteland
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnEnemiesBioDomeWasteland_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_unitTypeNum;
                int lv_locationNum;
                int lv_numunitstospawn;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                while ((lv_numunitstospawn &lt;= (7 + PlayerGroupCount(gv_playersInBioDome)))) {
                    lv_unitTypeNum = RandomInt(12, 13);
                    lv_locationNum = RandomInt(0, 6);
                    UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_bioDomeWastelandRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                    UnitGroupAdd(gv_bioDomeWastelandUnits[lv_locationNum], UnitLastCreated());
                    lv_numunitstospawn += 1;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnEnemiesBioDomeWasteland_Init () {
                gt_SpawnEnemiesBioDomeWasteland = TriggerCreate(&quot;gt_SpawnEnemiesBioDomeWasteland_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Respawn Bio Dome Wasteland
            //--------------------------------------------------------------------------------------------------
            bool gt_RespawnBioDomeWasteland_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_randomRegion;
                int lv_randomUnit;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((((UnitGroupHasUnit(gv_bioDomeWastelandUnits[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_bioDomeWastelandUnits[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_bioDomeWastelandUnits[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_bioDomeWastelandUnits[3], EventUnit()) == true) || (UnitGroupHasUnit(gv_bioDomeWastelandUnits[4], EventUnit()) == true) || (UnitGroupHasUnit(gv_bioDomeWastelandUnits[5], EventUnit()) == true) || (UnitGroupHasUnit(gv_bioDomeWastelandUnits[6], EventUnit()) == true)) &amp;&amp; (UnitGetOwner(EventUnit()) == 15)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_randomRegion = RandomInt(0, 6);
                lv_randomUnit = RandomInt(12, 13);
                UnitRemove(EventUnit());
                UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_bioDomeWastelandRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RespawnBioDomeWasteland_Init () {
                gt_RespawnBioDomeWasteland = TriggerCreate(&quot;gt_RespawnBioDomeWasteland_Func&quot;);
                TriggerAddEventUnitDied(gt_RespawnBioDomeWasteland, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set up Creton Tranch Regions
            //--------------------------------------------------------------------------------------------------
            bool gt_SetupCretonTranchRegions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_cretonTrenchRegions[0] = RegionFromId(136);
                gv_cretonTrenchRegions[1] = RegionFromId(137);
                gv_cretonTrenchRegions[2] = RegionFromId(138);
                gv_cretonTrenchRegions[3] = RegionFromId(139);
                gv_cretonTrenchRegions[4] = RegionFromId(131);
                gv_cretonTrenchRegions[5] = RegionFromId(132);
                gv_cretonTrenchRegions[6] = RegionFromId(140);
                gv_cretonTrenchRegions[7] = RegionFromId(141);
                gv_cretonTrenchRegions[8] = RegionFromId(143);
                gv_cretonTrenchRegions[9] = RegionFromId(144);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetupCretonTranchRegions_Init () {
                gt_SetupCretonTranchRegions = TriggerCreate(&quot;gt_SetupCretonTranchRegions_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Enemies Creton Trench
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnEnemiesCretonTrench_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_unitTypeNum;
                int lv_locationNum;
                int lv_numunitstospawn;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                while ((lv_numunitstospawn &lt;= 10)) {
                    lv_unitTypeNum = 11;
                    lv_locationNum = RandomInt(0, 9);
                    UnitCreate(1, &quot;CretonWarMachine&quot;, 0, 15, RegionRandomPoint(gv_cretonTrenchRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                    UnitGroupAdd(gv_cretonTrenchUnits[lv_locationNum], UnitLastCreated());
                    lv_numunitstospawn += 1;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnEnemiesCretonTrench_Init () {
                gt_SpawnEnemiesCretonTrench = TriggerCreate(&quot;gt_SpawnEnemiesCretonTrench_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Respawn Creton Trench
            //--------------------------------------------------------------------------------------------------
            bool gt_RespawnCretonTrench_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_randomRegion;
                int lv_randomUnit;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((((UnitGroupHasUnit(gv_cretonTrenchUnits[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonTrenchUnits[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonTrenchUnits[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonTrenchUnits[3], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonTrenchUnits[4], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonTrenchUnits[5], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonTrenchUnits[6], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonTrenchUnits[7], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonTrenchUnits[8], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonTrenchUnits[9], EventUnit()) == true)) &amp;&amp; (UnitGetOwner(EventUnit()) == 15)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(10.0, c_timeReal);
                lv_randomRegion = RandomInt(0, 9);
                lv_randomUnit = RandomInt(11, 11);
                UnitRemove(EventUnit());
                UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_cretonTrenchRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_cretonTrenchUnits[lv_randomRegion], UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RespawnCretonTrench_Init () {
                gt_RespawnCretonTrench = TriggerCreate(&quot;gt_RespawnCretonTrench_Func&quot;);
                TriggerAddEventUnitDied(gt_RespawnCretonTrench, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set up Creton Regions
            //--------------------------------------------------------------------------------------------------
            bool gt_SetupCretonRegions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_cretonRegions[0] = RegionFromId(82);
                gv_cretonRegions[1] = RegionFromId(83);
                gv_cretonRegions[2] = RegionFromId(92);
                gv_cretonRegions[3] = RegionFromId(93);
                gv_cretonRegions[4] = RegionFromId(94);
                gv_cretonRegions[5] = RegionFromId(95);
                gv_cretonRegions[6] = RegionFromId(96);
                gv_cretonRegions[7] = RegionFromId(97);
                gv_cretonRegions[8] = RegionFromId(106);
                gv_cretonRegions[9] = RegionFromId(107);
                gv_cretonRegions[10] = RegionFromId(108);
                gv_cretonRegions[11] = RegionFromId(109);
                gv_cretonRegions[12] = RegionFromId(110);
                gv_cretonRegions[13] = RegionFromId(111);
                gv_cretonRegions[14] = RegionFromId(112);
                gv_cretonRegions[15] = RegionFromId(113);
                gv_cretonRegions[16] = RegionFromId(114);
                gv_cretonRegions[17] = RegionFromId(115);
                gv_cretonRegions[18] = RegionFromId(116);
                gv_cretonRegions[19] = RegionFromId(117);
                gv_cretonRegions[20] = RegionFromId(118);
                gv_cretonRegions[21] = RegionFromId(119);
                gv_cretonRegions[22] = RegionFromId(120);
                gv_cretonRegions[23] = RegionFromId(99);
                gv_cretonRegions[24] = RegionFromId(100);
                gv_cretonRegions[25] = RegionFromId(101);
                gv_cretonRegions[26] = RegionFromId(102);
                gv_cretonRegions[27] = RegionFromId(103);
                gv_cretonRegions[28] = RegionFromId(104);
                gv_cretonRegions[29] = RegionFromId(105);
                gv_cretonRegions[30] = RegionFromId(84);
                gv_cretonRegions[31] = RegionFromId(85);
                gv_cretonRegions[32] = RegionFromId(86);
                gv_cretonRegions[33] = RegionFromId(87);
                gv_cretonRegions[34] = RegionFromId(88);
                gv_cretonRegions[35] = RegionFromId(89);
                gv_cretonRegions[36] = RegionFromId(90);
                gv_cretonRegions[37] = RegionFromId(91);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetupCretonRegions_Init () {
                gt_SetupCretonRegions = TriggerCreate(&quot;gt_SetupCretonRegions_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Enemies Creton
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnEnemiesCreton_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_unitTypeNum;
                int lv_locationNum;
                int lv_numunitstospawn;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4)) &amp;&amp; (gv_cretonSpawned == false)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_cretonSpawned = true;
                while ((lv_numunitstospawn &lt;= (gv_ofHumanPlayers * 15))) {
                    lv_unitTypeNum = RandomInt(9, 11);
                    lv_locationNum = RandomInt(0, 37);
                    UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_cretonRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                    UnitGroupAdd(gv_cretonUnits[lv_locationNum], UnitLastCreated());
                    lv_numunitstospawn += 1;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnEnemiesCreton_Init () {
                gt_SpawnEnemiesCreton = TriggerCreate(&quot;gt_SpawnEnemiesCreton_Func&quot;);
                TriggerAddEventUnitRegion(gt_SpawnEnemiesCreton, null, RegionFromId(98), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Respawn Creton
            //--------------------------------------------------------------------------------------------------
            bool gt_RespawnCreton_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_randomRegion;
                int lv_randomUnit;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((((UnitGroupHasUnit(gv_cretonUnits[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[3], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[4], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[5], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[6], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[7], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[8], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[9], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[10], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[11], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[12], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[13], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[14], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[15], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[16], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[17], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[18], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[19], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[20], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[21], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[22], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[23], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[24], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[25], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[26], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[27], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[28], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[29], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[30], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[31], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[32], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[33], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[34], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[35], EventUnit()) == true) || (UnitGroupHasUnit(gv_cretonUnits[37], EventUnit()) == true)) &amp;&amp; (UnitGetOwner(EventUnit()) == 15)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(10.0, c_timeReal);
                lv_randomRegion = RandomInt(0, 37);
                lv_randomUnit = RandomInt(9, 11);
                UnitRemove(EventUnit());
                UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_cretonRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_cretonUnits[lv_randomRegion], UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RespawnCreton_Init () {
                gt_RespawnCreton = TriggerCreate(&quot;gt_RespawnCreton_Func&quot;);
                TriggerAddEventUnitDied(gt_RespawnCreton, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Verboten Infestation Regions
            //--------------------------------------------------------------------------------------------------
            bool gt_SetVerbotenInfestationRegions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_verbotenInfestationsRegions[0] = RegionFromId(65);
                gv_verbotenInfestationsRegions[1] = RegionFromId(66);
                gv_verbotenInfestationsRegions[2] = RegionFromId(67);
                gv_verbotenInfestationsRegions[3] = RegionFromId(68);
                gv_verbotenInfestationsRegions[4] = RegionFromId(69);
                gv_verbotenInfestationsRegions[5] = RegionFromId(70);
                gv_verbotenInfestationsRegions[6] = RegionFromId(71);
                gv_verbotenInfestationsRegions[7] = RegionFromId(72);
                gv_verbotenInfestationsRegions[8] = RegionFromId(73);
                gv_verbotenInfestationsRegions[9] = RegionFromId(74);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetVerbotenInfestationRegions_Init () {
                gt_SetVerbotenInfestationRegions = TriggerCreate(&quot;gt_SetVerbotenInfestationRegions_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Enemies Verboten Infestation Player 1
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnEnemiesVerbotenInfestationPlayer1_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_unitTypeNum;
                int lv_locationNum;
                int maxAreaSpawns;
                // Variable Initialization
                    lv_locationNum = 0;
                    maxAreaSpawns = 0;
                // Conditions
                if (testConds) {
                    if (!((gv_verbotenInfestationSpawned[0] == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                    
                //Spawns enemies in areas 0 -&gt; 9, spawns twice in each, and changes the enemy type every 2 regions
                for(maxAreaSpawns = 0; maxAreaSpawns &lt;= 20; maxAreaSpawns +=1){
                    if(maxAreaSpawns % 2 == 0){
                    lv_unitTypeNum = RandomInt(16, 18);
                
                        if(maxAreaSpawns != 0) {
                            lv_locationNum += 1;
                            }
                    }
                 UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                 UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                
                }
                maxAreaSpawns = 0;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
               // lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
               // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
               // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
               // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnEnemiesVerbotenInfestationPlayer1_Init () {
                int maxAreaSpawns = 0;
                gt_SpawnEnemiesVerbotenInfestationPlayer1 = TriggerCreate(&quot;gt_SpawnEnemiesVerbotenInfestationPlayer1_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Enemies Verboten Infestation Player 2
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnEnemiesVerbotenInfestationPlayer2_Func (bool testConds, bool runActions) {
                 // Variable Declarations
                int lv_unitTypeNum;
                int lv_locationNum;
                int maxAreaSpawns;
                // Variable Initialization
                    lv_locationNum = 0;
                    maxAreaSpawns = 0;
                // Conditions
                if (testConds) {
                    if (!((gv_verbotenInfestationSpawned[1] == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                //Spawns enemies in areas 0 -&gt; 9, spawns twice in each, and changes the enemy type every 2 regions
                for(maxAreaSpawns = 0; maxAreaSpawns &lt;= 20; maxAreaSpawns +=1){
                    if(maxAreaSpawns % 2 == 0){
                    lv_unitTypeNum = RandomInt(16, 18);
                
                        if(maxAreaSpawns != 0) {
                            lv_locationNum += 1;
                            }
                    }
                 UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                 UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                
                }
                maxAreaSpawns = 0;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
               // lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
               // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
               // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
               // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnEnemiesVerbotenInfestationPlayer2_Init () {
                int maxAreaSpawns = 0;
                gt_SpawnEnemiesVerbotenInfestationPlayer2 = TriggerCreate(&quot;gt_SpawnEnemiesVerbotenInfestationPlayer2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Enemies Verboten Infestation Player 3
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnEnemiesVerbotenInfestationPlayer3_Func (bool testConds, bool runActions) {
               // Variable Declarations
                int lv_unitTypeNum;
                int lv_locationNum;
                int maxAreaSpawns;
                // Variable Initialization
                    lv_locationNum = 0;
                    maxAreaSpawns = 0;
                // Conditions
                if (testConds) {
                    if (!((gv_verbotenInfestationSpawned[2] == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                //Spawns enemies in areas 0 -&gt; 9, spawns twice in each, and changes the enemy type every 2 regions
                for(maxAreaSpawns = 0; maxAreaSpawns &lt;= 20; maxAreaSpawns +=1){
                    if(maxAreaSpawns % 2 == 0){
                    lv_unitTypeNum = RandomInt(16, 18);
                
                        if(maxAreaSpawns != 0) {
                            lv_locationNum += 1;
                            }
                    }
                 UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                 UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                
                }
                maxAreaSpawns = 0;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
               // lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
               // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
               // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
               // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnEnemiesVerbotenInfestationPlayer3_Init () {
                int maxAreaSpawns = 0;
                gt_SpawnEnemiesVerbotenInfestationPlayer3 = TriggerCreate(&quot;gt_SpawnEnemiesVerbotenInfestationPlayer3_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Enemies Verboten Infestation Player 4
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnEnemiesVerbotenInfestationPlayer4_Func (bool testConds, bool runActions) {
               // Variable Declarations
                int lv_unitTypeNum;
                int lv_locationNum;
                int maxAreaSpawns;
                // Variable Initialization
                    lv_locationNum = 0;
                    maxAreaSpawns = 0;
                // Conditions
                if (testConds) {
                    if (!((gv_verbotenInfestationSpawned[3] == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                //Spawns enemies in areas 0 -&gt; 9, spawns twice in each, and changes the enemy type every 2 regions
                for(maxAreaSpawns = 0; maxAreaSpawns &lt;= 20; maxAreaSpawns +=1){
                    if(maxAreaSpawns % 2 == 0){
                    lv_unitTypeNum = RandomInt(16, 18);
                
                        if(maxAreaSpawns != 0) {
                            lv_locationNum += 1;
                            }
                    }
                 UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                 UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                
                }
                maxAreaSpawns = 0;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
               // lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
               // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
               // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
                //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                //lv_locationNum += 1;
                //lv_unitTypeNum = RandomInt(16, 18);
                //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
               // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
               // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnEnemiesVerbotenInfestationPlayer4_Init () {
                int maxAreaSpawns = 0;
                gt_SpawnEnemiesVerbotenInfestationPlayer4 = TriggerCreate(&quot;gt_SpawnEnemiesVerbotenInfestationPlayer4_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Respawn Verboten Infestation
            //--------------------------------------------------------------------------------------------------
            bool gt_RespawnVerbotenInfestation_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_randomRegion;
                int lv_randomUnit;
                int lv_randomUnitAmount;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((((UnitGroupHasUnit(gv_verbotenInfestationUnits[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenInfestationUnits[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenInfestationUnits[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenInfestationUnits[3], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenInfestationUnits[4], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenInfestationUnits[5], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenInfestationUnits[6], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenInfestationUnits[7], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenInfestationUnits[8], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenInfestationUnits[9], EventUnit()) == true)) &amp;&amp; (UnitGetOwner(EventUnit()) == 15)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(10.0, c_timeReal);
                lv_randomRegion = RandomInt(0, 9);
                lv_randomUnit = RandomInt(16, 18);
                lv_randomUnitAmount = RandomInt(1,2);
                UnitRemove(EventUnit());
                UnitCreate(lv_randomUnitAmount, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenInfestationUnits[lv_randomRegion], UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RespawnVerbotenInfestation_Init () {
                int lv_randomUnitAmount = 0;
                gt_RespawnVerbotenInfestation = TriggerCreate(&quot;gt_RespawnVerbotenInfestation_Func&quot;);
                TriggerAddEventUnitDied(gt_RespawnVerbotenInfestation, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Verboten Forest Regions
            //--------------------------------------------------------------------------------------------------
            bool gt_SetVerbotenForestRegions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_verbotenForestRegions[0] = RegionFromId(51);
                gv_verbotenForestRegions[1] = RegionFromId(52);
                gv_verbotenForestRegions[2] = RegionFromId(53);
                gv_verbotenForestRegions[3] = RegionFromId(54);
                gv_verbotenForestRegions[4] = RegionFromId(55);
                gv_verbotenForestRegions[5] = RegionFromId(56);
                gv_verbotenForestRegions[6] = RegionFromId(57);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetVerbotenForestRegions_Init () {
                gt_SetVerbotenForestRegions = TriggerCreate(&quot;gt_SetVerbotenForestRegions_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Respawn Verboten Forest
            //--------------------------------------------------------------------------------------------------
            bool gt_RespawnVerbotenForest_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_randomRegion;
                int lv_randomUnit;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((((UnitGroupHasUnit(gv_verbotenForestUnits[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenForestUnits[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenForestUnits[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenForestUnits[3], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenForestUnits[4], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenForestUnits[5], EventUnit()) == true) || (UnitGroupHasUnit(gv_verbotenForestUnits[6], EventUnit()) == true)) &amp;&amp; (UnitGetOwner(EventUnit()) == 15)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(10.0, c_timeReal);
                UnitRemove(EventUnit());
                lv_randomRegion = RandomInt(0, 6);
                lv_randomUnit = RandomInt(6, 8);
                UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_verbotenForestRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_verbotenForestUnits[lv_randomRegion], UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RespawnVerbotenForest_Init () {
                gt_RespawnVerbotenForest = TriggerCreate(&quot;gt_RespawnVerbotenForest_Func&quot;);
                TriggerAddEventUnitDied(gt_RespawnVerbotenForest, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Wasteland Regions
            //--------------------------------------------------------------------------------------------------
            bool gt_SetWastelandRegions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_wastelandRegions[0] = RegionFromId(1);
                gv_wastelandRegions[1] = RegionFromId(2);
                gv_wastelandRegions[2] = RegionFromId(4);
                gv_wastelandRegions[3] = RegionFromId(49);
                gv_wastelandRegions[4] = RegionFromId(50);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetWastelandRegions_Init () {
                gt_SetWastelandRegions = TriggerCreate(&quot;gt_SetWastelandRegions_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Respawn Wasteland
            //--------------------------------------------------------------------------------------------------
            bool gt_RespawnWasteland_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_randomRegion;
                int lv_randomUnit;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((((UnitGroupHasUnit(gv_wastelandUnitGroups[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_wastelandUnitGroups[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_wastelandUnitGroups[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_wastelandUnitGroups[3], EventUnit()) == true) || (UnitGroupHasUnit(gv_wastelandUnitGroups[4], EventUnit()) == true)) &amp;&amp; (UnitGetOwner(EventUnit()) == 15)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(10.0, c_timeReal);
                lv_randomRegion = RandomInt(0, 4);
                lv_randomUnit = RandomInt(0, 1);
                UnitRemove(EventUnit());
                UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_wastelandRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_wastelandUnitGroups[lv_randomRegion], UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RespawnWasteland_Init () {
                gt_RespawnWasteland = TriggerCreate(&quot;gt_RespawnWasteland_Func&quot;);
                TriggerAddEventUnitDied(gt_RespawnWasteland, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Relamy Pass Regions
            //--------------------------------------------------------------------------------------------------
            bool gt_SetRelamyPassRegions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_relamyPassRegions[0] = RegionFromId(8);
                gv_relamyPassRegions[1] = RegionFromId(18);
                gv_relamyPassRegions[2] = RegionFromId(19);
                gv_relamyPassRegions[3] = RegionFromId(20);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetRelamyPassRegions_Init () {
                gt_SetRelamyPassRegions = TriggerCreate(&quot;gt_SetRelamyPassRegions_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Respawn Relamy Pass
            //--------------------------------------------------------------------------------------------------
            bool gt_RespawnRelamyPass_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_randomRegion;
                int lv_randomUnit;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((((UnitGroupHasUnit(gv_relamyPassUnits[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyPassUnits[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyPassUnits[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyPassUnits[3], EventUnit()) == true)) &amp;&amp; (UnitGetOwner(EventUnit()) == 15)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(10.0, c_timeReal);
                UnitRemove(EventUnit());
                lv_randomRegion = RandomInt(0, 3);
                lv_randomUnit = RandomInt(1, 2);
                UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_relamyPassRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyPassUnits[lv_randomRegion], UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RespawnRelamyPass_Init () {
                gt_RespawnRelamyPass = TriggerCreate(&quot;gt_RespawnRelamyPass_Func&quot;);
                TriggerAddEventUnitDied(gt_RespawnRelamyPass, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Relamy Gorge Regions
            //--------------------------------------------------------------------------------------------------
            bool gt_SetRelamyGorgeRegions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_relamyGorgeRegions[0] = RegionFromId(268);
                gv_relamyGorgeRegions[1] = RegionFromId(21);
                gv_relamyGorgeRegions[2] = RegionFromId(27);
                gv_relamyGorgeRegions[3] = RegionFromId(28);
                gv_relamyGorgeRegions[4] = RegionFromId(29);
                gv_relamyGorgeRegions[5] = RegionFromId(265);
                gv_relamyGorgeRegions[6] = RegionFromId(266);
                gv_relamyGorgeRegions[7] = RegionFromId(267);
                gv_relamyGorgeUnitTypes[0] = &quot;Vogel&quot;;
                gv_relamyGorgeUnitTypes[1] = &quot;Nepa&quot;;
                gv_relamyGorgeUnitTypes[2] = &quot;CretonWarrior&quot;;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetRelamyGorgeRegions_Init () {
                gt_SetRelamyGorgeRegions = TriggerCreate(&quot;gt_SetRelamyGorgeRegions_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Respawn Relamy Gorge
            //--------------------------------------------------------------------------------------------------
            bool gt_RespawnRelamyGorge_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_randomRegion;
                int lv_randomUnit;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((((UnitGroupHasUnit(gv_relamyGorgeUnits[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyGorgeUnits[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyGorgeUnits[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyGorgeUnits[3], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyGorgeUnits[4], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyGorgeUnits[5], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyGorgeUnits[6], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyGorgeUnits[7], EventUnit()) == true)) &amp;&amp; (UnitGetOwner(EventUnit()) == 15)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(10.0, c_timeReal);
                UnitRemove(EventUnit());
                lv_randomRegion = RandomInt(0, 7);
                lv_randomUnit = RandomInt(0, 2);
                UnitCreate(1, gv_relamyGorgeUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_relamyGorgeRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyGorgeUnits[lv_randomRegion], UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RespawnRelamyGorge_Init () {
                gt_RespawnRelamyGorge = TriggerCreate(&quot;gt_RespawnRelamyGorge_Func&quot;);
                TriggerAddEventUnitDied(gt_RespawnRelamyGorge, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Relamy Canyon Regions
            //--------------------------------------------------------------------------------------------------
            bool gt_SetRelamyCanyonRegions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_relamyCanyonRegions[0] = RegionFromId(7);
                gv_relamyCanyonRegions[1] = RegionFromId(9);
                gv_relamyCanyonRegions[2] = RegionFromId(10);
                gv_relamyCanyonRegions[3] = RegionFromId(11);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetRelamyCanyonRegions_Init () {
                gt_SetRelamyCanyonRegions = TriggerCreate(&quot;gt_SetRelamyCanyonRegions_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Respawn Relamy Canyon
            //--------------------------------------------------------------------------------------------------
            bool gt_RespawnRelamyCanyon_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_randomRegion;
                int lv_randomUnit;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((((UnitGroupHasUnit(gv_relamyCanyonUnits[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyCanyonUnits[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyCanyonUnits[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyCanyonUnits[3], EventUnit()) == true)) &amp;&amp; (UnitGetOwner(EventUnit()) == 15)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(10.0, c_timeReal);
                UnitRemove(EventUnit());
                lv_randomRegion = RandomInt(0, 3);
                lv_randomUnit = RandomInt(3, 4);
                UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_relamyCanyonRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyCanyonUnits[lv_randomRegion], UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RespawnRelamyCanyon_Init () {
                gt_RespawnRelamyCanyon = TriggerCreate(&quot;gt_RespawnRelamyCanyon_Func&quot;);
                TriggerAddEventUnitDied(gt_RespawnRelamyCanyon, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Relamy Hills Regions
            //--------------------------------------------------------------------------------------------------
            bool gt_SetRelamyHillsRegions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_relamyHillsRegions[0] = RegionFromId(12);
                gv_relamyHillsRegions[1] = RegionFromId(13);
                gv_relamyHillsRegions[2] = RegionFromId(14);
                gv_relamyHillsRegions[3] = RegionFromId(15);
                gv_relamyHillsRegions[4] = RegionFromId(16);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetRelamyHillsRegions_Init () {
                gt_SetRelamyHillsRegions = TriggerCreate(&quot;gt_SetRelamyHillsRegions_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Respawn Relamy Hills
            //--------------------------------------------------------------------------------------------------
            bool gt_RespawnRelamyHills_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_randomRegion;
                int lv_randomUnit;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((((UnitGroupHasUnit(gv_relamyHillsUnits[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyHillsUnits[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyHillsUnits[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyHillsUnits[3], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyHillsUnits[4], EventUnit()) == true)) &amp;&amp; (UnitGetOwner(EventUnit()) == 15)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(10.0, c_timeReal);
                UnitRemove(EventUnit());
                lv_randomRegion = RandomInt(0, 4);
                lv_randomUnit = RandomInt(3, 5);
                UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_relamyHillsRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_relamyHillsUnits[lv_randomRegion], UnitLastCreated());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RespawnRelamyHills_Init () {
                gt_RespawnRelamyHills = TriggerCreate(&quot;gt_RespawnRelamyHills_Func&quot;);
                TriggerAddEventUnitDied(gt_RespawnRelamyHills, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Underground Forest Regions
            //--------------------------------------------------------------------------------------------------
            bool gt_SetUndergroundForestRegions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_undergroundForestRegions[0] = RegionFromId(275);
                gv_undergroundForestRegions[1] = RegionFromId(276);
                gv_undergroundForestRegions[2] = RegionFromId(277);
                gv_undergroundForestRegions[3] = RegionFromId(278);
                gv_undergroundForestRegions[4] = RegionFromId(279);
                gv_undergroundForestRegions[5] = RegionFromId(280);
                gv_undergroundForestRegions[6] = RegionFromId(281);
                gv_undergroundForestRegions[7] = RegionFromId(282);
                gv_undergroundForestUnitTypes[0] = &quot;Veneno&quot;;
                gv_undergroundForestUnitTypes[1] = &quot;Teredo&quot;;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetUndergroundForestRegions_Init () {
                gt_SetUndergroundForestRegions = TriggerCreate(&quot;gt_SetUndergroundForestRegions_Func&quot;);
                TriggerAddEventMapInit(gt_SetUndergroundForestRegions);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Respawn Underground Forest
            //--------------------------------------------------------------------------------------------------
            bool gt_RespawnUndergroundForest_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_randomRegion;
                int lv_randomUnit;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((((UnitGroupHasUnit(gv_undergroundForestUnits[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_undergroundForestUnits[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_undergroundForestUnits[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_undergroundForestUnits[3], EventUnit()) == true) || (UnitGroupHasUnit(gv_undergroundForestUnits[4], EventUnit()) == true) || (UnitGroupHasUnit(gv_undergroundForestUnits[5], EventUnit()) == true) || (UnitGroupHasUnit(gv_undergroundForestUnits[6], EventUnit()) == true) || (UnitGroupHasUnit(gv_undergroundForestUnits[7], EventUnit()) == true)) &amp;&amp; (UnitGetOwner(EventUnit()) == 15)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                Wait(10.0, c_timeReal);
                UnitRemove(EventUnit());
                lv_randomRegion = RandomInt(0, 7);
                lv_randomUnit = RandomInt(0, 1);
                UnitGroupAdd(gv_undergroundForestUnits[lv_randomRegion], UnitLastCreated());
                UnitCreate(1, gv_undergroundForestUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RespawnUndergroundForest_Init () {
                gt_RespawnUndergroundForest = TriggerCreate(&quot;gt_RespawnUndergroundForest_Func&quot;);
                TriggerAddEventUnitDied(gt_RespawnUndergroundForest, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Wasteland Wander Control
            //--------------------------------------------------------------------------------------------------
            bool gt_WastelandWanderControl_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == 15) &amp;&amp; ((UnitGroupHasUnit(gv_wastelandUnitGroups[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_wastelandUnitGroups[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_wastelandUnitGroups[2], EventUnit()) == true))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGroupHasUnit(gv_wastelandUnitGroups[0], EventUnit()) == true)) {
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(1))), c_orderQueueReplace);
                }
                else {
                    if ((UnitGroupHasUnit(gv_wastelandUnitGroups[1], EventUnit()) == true)) {
                        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(2))), c_orderQueueReplace);
                    }
                    else {
                        if ((UnitGroupHasUnit(gv_wastelandUnitGroups[2], EventUnit()) == true)) {
                            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(4))), c_orderQueueReplace);
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WastelandWanderControl_Init () {
                gt_WastelandWanderControl = TriggerCreate(&quot;gt_WastelandWanderControl_Func&quot;);
                TriggerAddEventUnitRegion(gt_WastelandWanderControl, null, RegionFromId(32), true);
                TriggerAddEventUnitRegion(gt_WastelandWanderControl, null, RegionFromId(36), true);
                TriggerAddEventUnitRegion(gt_WastelandWanderControl, null, RegionFromId(37), true);
                TriggerAddEventUnitRegion(gt_WastelandWanderControl, null, RegionFromId(41), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Relamy Pass Wander Control
            //--------------------------------------------------------------------------------------------------
            bool gt_RelamyPassWanderControl_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == 15) &amp;&amp; ((UnitGroupHasUnit(gv_relamyPassUnits[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyPassUnits[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyPassUnits[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyPassUnits[3], EventUnit()) == true))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGroupHasUnit(gv_relamyPassUnits[0], EventUnit()) == true)) {
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(8))), c_orderQueueReplace);
                }
                else {
                    if ((UnitGroupHasUnit(gv_relamyPassUnits[1], EventUnit()) == true)) {
                        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(18))), c_orderQueueReplace);
                    }
                    else {
                        if ((UnitGroupHasUnit(gv_relamyPassUnits[2], EventUnit()) == true)) {
                            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(19))), c_orderQueueReplace);
                        }
                        else {
                            if ((UnitGroupHasUnit(gv_relamyPassUnits[3], EventUnit()) == true)) {
                                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueReplace);
                            }
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RelamyPassWanderControl_Init () {
                gt_RelamyPassWanderControl = TriggerCreate(&quot;gt_RelamyPassWanderControl_Func&quot;);
                TriggerAddEventUnitRegion(gt_RelamyPassWanderControl, null, RegionFromId(31), true);
                TriggerAddEventUnitRegion(gt_RelamyPassWanderControl, null, RegionFromId(33), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Relamy Gorge Wander Control
            //--------------------------------------------------------------------------------------------------
            bool gt_RelamyGorgeWanderControl_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == 15) &amp;&amp; ((UnitGroupHasUnit(gv_relamyGorgeUnits[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyGorgeUnits[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyGorgeUnits[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyGorgeUnits[3], EventUnit()) == true))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGroupHasUnit(gv_relamyGorgeUnits[0], EventUnit()) == true)) {
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(21))), c_orderQueueReplace);
                }
                else {
                    if ((UnitGroupHasUnit(gv_relamyGorgeUnits[1], EventUnit()) == true)) {
                        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(27))), c_orderQueueReplace);
                    }
                    else {
                        if ((UnitGroupHasUnit(gv_relamyGorgeUnits[2], EventUnit()) == true)) {
                            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(28))), c_orderQueueReplace);
                        }
                        else {
                            if ((UnitGroupHasUnit(gv_relamyGorgeUnits[3], EventUnit()) == true)) {
                                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(29))), c_orderQueueReplace);
                            }
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RelamyGorgeWanderControl_Init () {
                gt_RelamyGorgeWanderControl = TriggerCreate(&quot;gt_RelamyGorgeWanderControl_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Relamy Canyon Wander Control
            //--------------------------------------------------------------------------------------------------
            bool gt_RelamyCanyonWanderControl_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == 15) &amp;&amp; ((UnitGroupHasUnit(gv_relamyCanyonUnits[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyCanyonUnits[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyCanyonUnits[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyCanyonUnits[3], EventUnit()) == true))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGroupHasUnit(gv_relamyCanyonUnits[0], EventUnit()) == true)) {
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
                }
                else {
                    if ((UnitGroupHasUnit(gv_relamyCanyonUnits[1], EventUnit()) == true)) {
                        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(9))), c_orderQueueReplace);
                    }
                    else {
                        if ((UnitGroupHasUnit(gv_relamyCanyonUnits[2], EventUnit()) == true)) {
                            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(10))), c_orderQueueReplace);
                        }
                        else {
                            if ((UnitGroupHasUnit(gv_relamyCanyonUnits[3], EventUnit()) == true)) {
                                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(11))), c_orderQueueReplace);
                            }
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RelamyCanyonWanderControl_Init () {
                gt_RelamyCanyonWanderControl = TriggerCreate(&quot;gt_RelamyCanyonWanderControl_Func&quot;);
                TriggerAddEventUnitRegion(gt_RelamyCanyonWanderControl, null, RegionFromId(34), true);
                TriggerAddEventUnitRegion(gt_RelamyCanyonWanderControl, null, RegionFromId(40), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Relamy Hills Wander Control
            //--------------------------------------------------------------------------------------------------
            bool gt_RelamyHillsWanderControl_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == 15) &amp;&amp; ((UnitGroupHasUnit(gv_relamyHillsUnits[0], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyHillsUnits[1], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyHillsUnits[2], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyHillsUnits[3], EventUnit()) == true) || (UnitGroupHasUnit(gv_relamyHillsUnits[4], EventUnit()) == true))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGroupHasUnit(gv_relamyHillsUnits[0], EventUnit()) == true)) {
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
                }
                else {
                    if ((UnitGroupHasUnit(gv_relamyHillsUnits[1], EventUnit()) == true)) {
                        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(13))), c_orderQueueReplace);
                    }
                    else {
                        if ((UnitGroupHasUnit(gv_relamyHillsUnits[2], EventUnit()) == true)) {
                            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueReplace);
                        }
                        else {
                            if ((UnitGroupHasUnit(gv_relamyHillsUnits[3], EventUnit()) == true)) {
                                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
                            }
                            else {
                                if ((UnitGroupHasUnit(gv_relamyHillsUnits[4], EventUnit()) == true)) {
                                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;attack&quot;, 0), RegionRandomPoint(RegionFromId(16))), c_orderQueueReplace);
                                }
                            }
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RelamyHillsWanderControl_Init () {
                gt_RelamyHillsWanderControl = TriggerCreate(&quot;gt_RelamyHillsWanderControl_Func&quot;);
                TriggerAddEventUnitRegion(gt_RelamyHillsWanderControl, null, RegionFromId(35), true);
                TriggerAddEventUnitRegion(gt_RelamyHillsWanderControl, null, RegionFromId(47), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Waypoint Dialog
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateWaypointDialog_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                DialogCreate(260, 400, c_anchorCenter, 250, 0, true);
                gv_waypointDialog = DialogLastCreated();
                DialogSetTitle(gv_waypointDialog, StringExternal(&quot;Param/Value/0ECE1424&quot;));
                libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 75, StringExternal(&quot;Param/Value/B7FA03F5&quot;), StringExternal(&quot;Param/Value/BD18A03E&quot;), &quot;&quot;);
                gv_wastelandDialogButton = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 125, StringExternal(&quot;Param/Value/4DDEC3F1&quot;), StringExternal(&quot;Param/Value/513D3FB6&quot;), &quot;&quot;);
                gv_ballanDialogButton = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 175, StringExternal(&quot;Param/Value/1785397A&quot;), StringExternal(&quot;Param/Value/401F8A01&quot;), &quot;&quot;);
                gv_relamyDialogButton = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 225, StringExternal(&quot;Param/Value/52F3119C&quot;), StringExternal(&quot;Param/Value/5978C91C&quot;), &quot;&quot;);
                gv_verbotenDialogButton = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 275, StringExternal(&quot;Param/Value/66E7D47B&quot;), StringExternal(&quot;Param/Value/4F3939B7&quot;), &quot;&quot;);
                gv_cretonDialogButton = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 100, 50, c_anchorTop, 0, 325, StringExternal(&quot;Param/Value/9B2E411E&quot;), StringExternal(&quot;Param/Value/1F3BFF86&quot;), &quot;&quot;);
                gv_closeWaypointDialogButton = DialogControlLastCreated();
                DialogControlSetVisible(gv_ballanDialogButton, PlayerGroupAll(), false);
                DialogControlSetVisible(gv_cretonDialogButton, PlayerGroupAll(), false);
                DialogControlSetVisible(gv_relamyDialogButton, PlayerGroupAll(), false);
                DialogControlSetVisible(gv_verbotenDialogButton, PlayerGroupAll(), false);
                DialogControlSetVisible(gv_wastelandDialogButton, PlayerGroupAll(), false);
                DialogSetVisible(gv_waypointDialog, PlayerGroupAll(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateWaypointDialog_Init () {
                gt_CreateWaypointDialog = TriggerCreate(&quot;gt_CreateWaypointDialog_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Load Waypoints
            //--------------------------------------------------------------------------------------------------
            bool gt_LoadWaypoints_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_ppi;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_ppi = (PlayerGroupLoopCurrent() - 1);
                    gv_unlockedWaypoints[lv_ppi][0] = BankValueGetAsFlag(gv_players[lv_ppi].banks.dragonBank, &quot;WP0&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                    gv_unlockedWaypoints[lv_ppi][1] = BankValueGetAsFlag(gv_players[lv_ppi].banks.dragonBank, &quot;WP1&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                    gv_unlockedWaypoints[lv_ppi][2] = BankValueGetAsFlag(gv_players[lv_ppi].banks.dragonBank, &quot;WP2&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                    gv_unlockedWaypoints[lv_ppi][3] = BankValueGetAsFlag(gv_players[lv_ppi].banks.dragonBank, &quot;WP3&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                    gv_unlockedWaypoints[lv_ppi][4] = BankValueGetAsFlag(gv_players[lv_ppi].banks.dragonBank, &quot;WP4&quot;, PlayerHandle(PlayerGroupLoopCurrent()));
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LoadWaypoints_Init () {
                gt_LoadWaypoints = TriggerCreate(&quot;gt_LoadWaypoints_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Player Selects Waypoint
            //--------------------------------------------------------------------------------------------------
            bool gt_PlayerSelectsWaypoint_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSelect(EventUnit(), EventPlayer(), false);
                if ((libNtve_gf_UnitInRegion(gv_players[(EventPlayer() - 1)].dragon, RegionCircle(UnitGetPosition(EventUnit()), 2.0)) == true)) {
                    gf_ShowWaypointDialog(EventPlayer());
                }
                UnitSelect(gv_players[lv_tPI].dragon, EventPlayer(), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PlayerSelectsWaypoint_Init () {
                gt_PlayerSelectsWaypoint = TriggerCreate(&quot;gt_PlayerSelectsWaypoint_Func&quot;);
                TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(1199)), c_playerAny, true);
                TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(1201)), c_playerAny, true);
                TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(607)), c_playerAny, true);
                TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(798)), c_playerAny, true);
                TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(797)), c_playerAny, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Player Leaves Waypoint
            //--------------------------------------------------------------------------------------------------
            bool gt_PlayerLeavesWaypoint_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_HideWaypointDialog(UnitGetOwner(EventUnit()));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PlayerLeavesWaypoint_Init () {
                gt_PlayerLeavesWaypoint = TriggerCreate(&quot;gt_PlayerLeavesWaypoint_Func&quot;);
                TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(124), false);
                TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(125), false);
                TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(123), false);
                TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(121), false);
                TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(122), false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Waypoint Dialog Button Clicked
            //--------------------------------------------------------------------------------------------------
            bool gt_WaypointDialogButtonClicked_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tPI;
                // Variable Initialization
                lv_tPI = (EventPlayer() - 1);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((EventDialogControl() == gv_wastelandDialogButton)) {
                    gf_WaypointTeleport(EventPlayer(), RegionFromId(124));
                }
                if ((EventDialogControl() == gv_ballanDialogButton)) {
                    gf_WaypointTeleport(EventPlayer(), RegionFromId(125));
                }
                if ((EventDialogControl() == gv_relamyDialogButton)) {
                    gf_WaypointTeleport(EventPlayer(), RegionFromId(123));
                }
                if ((EventDialogControl() == gv_verbotenDialogButton)) {
                    gf_WaypointTeleport(EventPlayer(), RegionFromId(121));
                }
                if ((EventDialogControl() == gv_cretonDialogButton)) {
                    gf_WaypointTeleport(EventPlayer(), RegionFromId(122));
                }
                if ((EventDialogControl() == gv_closeWaypointDialogButton)) {
                    gf_HideWaypointDialog(EventPlayer());
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WaypointDialogButtonClicked_Init () {
                gt_WaypointDialogButtonClicked = TriggerCreate(&quot;gt_WaypointDialogButtonClicked_Func&quot;);
                TriggerAddEventDialogControl(gt_WaypointDialogButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Dragon Enters Waypoint
            //--------------------------------------------------------------------------------------------------
            bool gt_DragonEntersWaypoint_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetOwner(EventUnit()) == 15)) {
                }
                else {
                    if ((UnitGetOwner(EventUnit()) == 14)) {
                    }
                    else {
                        if ((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true)) {
                            UnitBehaviorAddPlayer(EventUnit(), &quot;WaypointProtection&quot;, UnitGetOwner(EventUnit()), 1);
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DragonEntersWaypoint_Init () {
                gt_DragonEntersWaypoint = TriggerCreate(&quot;gt_DragonEntersWaypoint_Func&quot;);
                TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(124), true);
                TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(125), true);
                TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(123), true);
                TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(121), true);
                TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(122), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Dragon Leaves Waypoint
            //--------------------------------------------------------------------------------------------------
            bool gt_DragonLeavesWaypoint_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetOwner(EventUnit()) == 15)) {
                }
                else {
                    if ((UnitGetOwner(EventUnit()) == 14)) {
                    }
                    else {
                        if ((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true)) {
                            UnitBehaviorRemovePlayer(EventUnit(), &quot;WaypointProtection&quot;, UnitGetOwner(EventUnit()), 1);
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DragonLeavesWaypoint_Init () {
                gt_DragonLeavesWaypoint = TriggerCreate(&quot;gt_DragonLeavesWaypoint_Func&quot;);
                TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(124), false);
                TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(125), false);
                TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(123), false);
                TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(121), false);
                TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(122), false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: BD Zombie Unit Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_BDZombieUnitSpawn_Func (bool testConds, bool runActions) {
                playergroup autoEC5DC403_g;
                int autoEC5DC403_p;
                int auto5496C851_ae;
                int auto5496C851_ai;
                int auto94E9BE90_ae;
                int auto94E9BE90_ai;
                int autoDBD8D618_ae;
                int autoDBD8D618_ai;
                int autoAD357D0D_ae;
                int autoAD357D0D_ai;
                int autoBD8BC908_ae;
                int autoBD8BC908_ai;
                int auto6E2C36A2_ae;
                int auto6E2C36A2_ai;
                int autoC09E8C4F_ae;
                int autoC09E8C4F_ai;
                int auto8E01EDCE_ae;
                int auto8E01EDCE_ai;
                int auto84D98F35_ae;
                int auto84D98F35_ai;
                int auto6350FE7C_ae;
                int auto6350FE7C_ai;
                int auto1183017F_ae;
                int auto1183017F_ai;
                // Variable Declarations
                int lv_pickedPlayerIndex;
                int lv_player;
                int lv_numKills;
                int lv_killCount;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TeleporttoBioDome, false);
                TriggerEnable(gt_TeleporttoCreton, false);
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    gv_inCinematic[lv_pickedPlayerIndex] = true;
                    UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, UnitGetPosition(EventUnit()), false);
                    CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
                    CameraSave(PlayerGroupLoopCurrent());
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2500), 2.0, -1, 10, true);
                    CameraLockInput(PlayerGroupLoopCurrent(), true);
                    libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
                    libNtve_gf_HideGameUI(false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                }
                PlayerGroupLoopEnd();
                Wait(2.0, c_timeGame);
                TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel(&quot;TassadarPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/75E8294A&quot;), StringExternal(&quot;Param/Value/059953E4&quot;), 5.0, c_transmissionDurationSet, true);
                autoEC5DC403_g = gv_playersInBioDome; 
                autoEC5DC403_p = 1;
                for ( ; autoEC5DC403_p &lt;= PlayerGroupCount(autoEC5DC403_g) ; autoEC5DC403_p += BoolToInt(lv_player == PlayerGroupPlayer(autoEC5DC403_g, autoEC5DC403_p)) ) {
                    lv_player = PlayerGroupPlayer(autoEC5DC403_g, autoEC5DC403_p);
                    lv_numKills = libNtve_gf_UnitGetPropertyKills(gv_players[(lv_player - 1)].dragon, c_unitPropCurrent);
                    if ((lv_numKills &gt; 75)) {
                        lv_numKills = 75;
                    }
                    auto5496C851_ae = (lv_numKills / 11);
                    auto5496C851_ai = 1;
                    lv_killCount = 1;
                    for ( ; ( (auto5496C851_ai &gt;= 0 &amp;&amp; lv_killCount &lt;= auto5496C851_ae) || (auto5496C851_ai &lt;= 0 &amp;&amp; lv_killCount &gt;= auto5496C851_ae) ) ; lv_killCount += auto5496C851_ai ) {
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;Mortuus&quot;, 0, 15, RegionRandomPoint(RegionFromId(176)), UnitGetPosition(EventUnit()));
                        libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                        UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
                        libNtve_gf_PauseUnit(UnitLastCreated(), true);
                        Wait(0.1, c_timeGame);
                    }
                    auto94E9BE90_ae = (lv_numKills / 11);
                    auto94E9BE90_ai = 1;
                    lv_killCount = 1;
                    for ( ; ( (auto94E9BE90_ai &gt;= 0 &amp;&amp; lv_killCount &lt;= auto94E9BE90_ae) || (auto94E9BE90_ai &lt;= 0 &amp;&amp; lv_killCount &gt;= auto94E9BE90_ae) ) ; lv_killCount += auto94E9BE90_ai ) {
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;Mortuus&quot;, 0, 15, RegionRandomPoint(RegionFromId(177)), UnitGetPosition(EventUnit()));
                        libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                        UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
                        libNtve_gf_PauseUnit(UnitLastCreated(), true);
                        Wait(0.1, c_timeGame);
                    }
                    autoDBD8D618_ae = (lv_numKills / 11);
                    autoDBD8D618_ai = 1;
                    lv_killCount = 1;
                    for ( ; ( (autoDBD8D618_ai &gt;= 0 &amp;&amp; lv_killCount &lt;= autoDBD8D618_ae) || (autoDBD8D618_ai &lt;= 0 &amp;&amp; lv_killCount &gt;= autoDBD8D618_ae) ) ; lv_killCount += autoDBD8D618_ai ) {
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;Mortuus&quot;, 0, 15, RegionRandomPoint(RegionFromId(178)), UnitGetPosition(EventUnit()));
                        libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                        UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
                        libNtve_gf_PauseUnit(UnitLastCreated(), true);
                        Wait(0.1, c_timeGame);
                    }
                    autoAD357D0D_ae = (lv_numKills / 11);
                    autoAD357D0D_ai = 1;
                    lv_killCount = 1;
                    for ( ; ( (autoAD357D0D_ai &gt;= 0 &amp;&amp; lv_killCount &lt;= autoAD357D0D_ae) || (autoAD357D0D_ai &lt;= 0 &amp;&amp; lv_killCount &gt;= autoAD357D0D_ae) ) ; lv_killCount += autoAD357D0D_ai ) {
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;Mortuus&quot;, 0, 15, RegionRandomPoint(RegionFromId(179)), UnitGetPosition(EventUnit()));
                        libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                        UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
                        libNtve_gf_PauseUnit(UnitLastCreated(), true);
                        Wait(0.1, c_timeGame);
                    }
                    autoBD8BC908_ae = (lv_numKills / 11);
                    autoBD8BC908_ai = 1;
                    lv_killCount = 1;
                    for ( ; ( (autoBD8BC908_ai &gt;= 0 &amp;&amp; lv_killCount &lt;= autoBD8BC908_ae) || (autoBD8BC908_ai &lt;= 0 &amp;&amp; lv_killCount &gt;= autoBD8BC908_ae) ) ; lv_killCount += autoBD8BC908_ai ) {
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;Mortuus&quot;, 0, 15, RegionRandomPoint(RegionFromId(180)), UnitGetPosition(EventUnit()));
                        libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                        UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
                        libNtve_gf_PauseUnit(UnitLastCreated(), true);
                        Wait(0.1, c_timeGame);
                    }
                    auto6E2C36A2_ae = (lv_numKills / 11);
                    auto6E2C36A2_ai = 1;
                    lv_killCount = 1;
                    for ( ; ( (auto6E2C36A2_ai &gt;= 0 &amp;&amp; lv_killCount &lt;= auto6E2C36A2_ae) || (auto6E2C36A2_ai &lt;= 0 &amp;&amp; lv_killCount &gt;= auto6E2C36A2_ae) ) ; lv_killCount += auto6E2C36A2_ai ) {
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;Mortuus&quot;, 0, 15, RegionRandomPoint(RegionFromId(181)), UnitGetPosition(EventUnit()));
                        libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                        UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
                        libNtve_gf_PauseUnit(UnitLastCreated(), true);
                        Wait(0.1, c_timeGame);
                    }
                    autoC09E8C4F_ae = (lv_numKills / 11);
                    autoC09E8C4F_ai = 1;
                    lv_killCount = 1;
                    for ( ; ( (autoC09E8C4F_ai &gt;= 0 &amp;&amp; lv_killCount &lt;= autoC09E8C4F_ae) || (autoC09E8C4F_ai &lt;= 0 &amp;&amp; lv_killCount &gt;= autoC09E8C4F_ae) ) ; lv_killCount += autoC09E8C4F_ai ) {
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;Mortuus&quot;, 0, 15, RegionRandomPoint(RegionFromId(182)), UnitGetPosition(EventUnit()));
                        libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                        UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
                        libNtve_gf_PauseUnit(UnitLastCreated(), true);
                        Wait(0.1, c_timeGame);
                    }
                    auto8E01EDCE_ae = (lv_numKills / 11);
                    auto8E01EDCE_ai = 1;
                    lv_killCount = 1;
                    for ( ; ( (auto8E01EDCE_ai &gt;= 0 &amp;&amp; lv_killCount &lt;= auto8E01EDCE_ae) || (auto8E01EDCE_ai &lt;= 0 &amp;&amp; lv_killCount &gt;= auto8E01EDCE_ae) ) ; lv_killCount += auto8E01EDCE_ai ) {
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;Mortuus&quot;, 0, 15, RegionRandomPoint(RegionFromId(183)), UnitGetPosition(EventUnit()));
                        libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                        UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
                        libNtve_gf_PauseUnit(UnitLastCreated(), true);
                        Wait(0.1, c_timeGame);
                    }
                    auto84D98F35_ae = (lv_numKills / 11);
                    auto84D98F35_ai = 1;
                    lv_killCount = 1;
                    for ( ; ( (auto84D98F35_ai &gt;= 0 &amp;&amp; lv_killCount &lt;= auto84D98F35_ae) || (auto84D98F35_ai &lt;= 0 &amp;&amp; lv_killCount &gt;= auto84D98F35_ae) ) ; lv_killCount += auto84D98F35_ai ) {
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;Mortuus&quot;, 0, 15, RegionRandomPoint(RegionFromId(184)), UnitGetPosition(EventUnit()));
                        libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                        UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
                        libNtve_gf_PauseUnit(UnitLastCreated(), true);
                        Wait(0.1, c_timeGame);
                    }
                    auto6350FE7C_ae = (lv_numKills / 11);
                    auto6350FE7C_ai = 1;
                    lv_killCount = 1;
                    for ( ; ( (auto6350FE7C_ai &gt;= 0 &amp;&amp; lv_killCount &lt;= auto6350FE7C_ae) || (auto6350FE7C_ai &lt;= 0 &amp;&amp; lv_killCount &gt;= auto6350FE7C_ae) ) ; lv_killCount += auto6350FE7C_ai ) {
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;Mortuus&quot;, 0, 15, RegionRandomPoint(RegionFromId(185)), UnitGetPosition(EventUnit()));
                        libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                        UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
                        libNtve_gf_PauseUnit(UnitLastCreated(), true);
                        Wait(0.1, c_timeGame);
                    }
                    auto1183017F_ae = (lv_numKills / 11);
                    auto1183017F_ai = 1;
                    lv_killCount = 1;
                    for ( ; ( (auto1183017F_ai &gt;= 0 &amp;&amp; lv_killCount &lt;= auto1183017F_ae) || (auto1183017F_ai &lt;= 0 &amp;&amp; lv_killCount &gt;= auto1183017F_ae) ) ; lv_killCount += auto1183017F_ai ) {
                        libNtve_gf_UnitCreateFacingPoint(1, &quot;Mortuus&quot;, 0, 15, RegionRandomPoint(RegionFromId(186)), UnitGetPosition(EventUnit()));
                        libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                        UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
                        libNtve_gf_PauseUnit(UnitLastCreated(), true);
                        Wait(0.1, c_timeGame);
                    }
                }
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    CameraRestore(PlayerGroupLoopCurrent(), 2.0, -1, 10);
                    CameraLockInput(PlayerGroupLoopCurrent(), false);
                    libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, false);
                    libNtve_gf_HideGameUI(true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    gv_inCinematic[lv_pickedPlayerIndex] = false;
                }
                PlayerGroupLoopEnd();
                Wait(2.5, c_timeGame);
                UnitGroupLoopBegin(gv_bDZombieUnits);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                TriggerEnable(gt_BDZombieUnitDeath, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BDZombieUnitSpawn_Init () {
                gt_BDZombieUnitSpawn = TriggerCreate(&quot;gt_BDZombieUnitSpawn_Func&quot;);
                TriggerAddEventUnitDied(gt_BDZombieUnitSpawn, UnitRefFromUnit(UnitFromId(1884)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: BD Zombie Unit Death
            //--------------------------------------------------------------------------------------------------
            bool gt_BDZombieUnitDeath_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupHasUnit(gv_bDZombieUnits, EventUnit()) == true))) {
                        return false;
                    }
                    if (!((UnitGroupCount(gv_bDZombieUnits, c_unitCountAlive) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TeleporttoBioDome, true);
                TriggerEnable(gt_TeleporttoCreton, true);
                UnitRemove(UnitFromId(1877));
                UnitRemove(UnitFromId(1878));
                UnitRemove(UnitFromId(1879));
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BDZombieUnitDeath_Init () {
                gt_BDZombieUnitDeath = TriggerCreate(&quot;gt_BDZombieUnitDeath_Func&quot;);
                TriggerEnable(gt_BDZombieUnitDeath, false);
                TriggerAddEventUnitDied(gt_BDZombieUnitDeath, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: BD Creton Unit Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_BDCretonUnitSpawn_Func (bool testConds, bool runActions) {
                playergroup auto1C36C49D_g;
                int auto1C36C49D_p;
                // Variable Declarations
                int lv_pickedPlayerIndex;
                int lv_player;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TeleporttoBioDome, false);
                TriggerEnable(gt_TeleporttoCreton, false);
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    gv_inCinematic[lv_pickedPlayerIndex] = true;
                    UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, UnitGetPosition(EventUnit()), false);
                    CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
                    CameraSave(PlayerGroupLoopCurrent());
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2486), 2.0, -1, 10, true);
                    CameraLockInput(PlayerGroupLoopCurrent(), true);
                    libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
                    libNtve_gf_HideGameUI(false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(169));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(170));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(171));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(172));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(173));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(174));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(175));
                }
                PlayerGroupLoopEnd();
                Wait(2.0, c_timeGame);
                TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel(&quot;TassadarPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/8011068F&quot;), StringExternal(&quot;Param/Value/86CE4109&quot;), 4.0, c_transmissionDurationSet, true);
                auto1C36C49D_g = gv_playersInBioDome; 
                auto1C36C49D_p = 1;
                for ( ; auto1C36C49D_p &lt;= PlayerGroupCount(auto1C36C49D_g) ; auto1C36C49D_p += BoolToInt(lv_player == PlayerGroupPlayer(auto1C36C49D_g, auto1C36C49D_p)) ) {
                    lv_player = PlayerGroupPlayer(auto1C36C49D_g, auto1C36C49D_p);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Impetus&quot;, 0, 15, RegionRandomPoint(RegionFromId(169)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Impetus&quot;, 0, 15, RegionRandomPoint(RegionFromId(170)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Impetus&quot;, 0, 15, RegionRandomPoint(RegionFromId(171)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Impetus&quot;, 0, 15, RegionRandomPoint(RegionFromId(172)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Impetus&quot;, 0, 15, RegionRandomPoint(RegionFromId(173)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Impetus&quot;, 0, 15, RegionRandomPoint(RegionFromId(174)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Impetus&quot;, 0, 15, RegionRandomPoint(RegionFromId(175)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                }
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    CameraRestore(PlayerGroupLoopCurrent(), 2.0, -1, 10);
                    CameraLockInput(PlayerGroupLoopCurrent(), false);
                    libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, false);
                    libNtve_gf_HideGameUI(true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    gv_inCinematic[lv_pickedPlayerIndex] = false;
                }
                PlayerGroupLoopEnd();
                Wait(2.5, c_timeGame);
                UnitGroupLoopBegin(gv_bDCretonUnits);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                TriggerEnable(gt_BDCretonUnitDeath, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BDCretonUnitSpawn_Init () {
                gt_BDCretonUnitSpawn = TriggerCreate(&quot;gt_BDCretonUnitSpawn_Func&quot;);
                TriggerAddEventUnitDied(gt_BDCretonUnitSpawn, UnitRefFromUnit(UnitFromId(1883)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: BD Creton Unit Death
            //--------------------------------------------------------------------------------------------------
            bool gt_BDCretonUnitDeath_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupHasUnit(gv_bDCretonUnits, EventUnit()) == true))) {
                        return false;
                    }
                    if (!((UnitGroupCount(gv_bDCretonUnits, c_unitCountAlive) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TeleporttoBioDome, true);
                TriggerEnable(gt_TeleporttoCreton, true);
                UnitRemove(UnitFromId(1875));
                UnitRemove(UnitFromId(1876));
                UnitRemove(UnitFromId(1874));
                UnitRemove(UnitFromId(1873));
                UnitRemove(UnitFromId(1872));
                UnitRemove(UnitFromId(1871));
                UnitRemove(UnitFromId(1870));
                UnitRemove(UnitFromId(1869));
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BDCretonUnitDeath_Init () {
                gt_BDCretonUnitDeath = TriggerCreate(&quot;gt_BDCretonUnitDeath_Func&quot;);
                TriggerEnable(gt_BDCretonUnitDeath, false);
                TriggerAddEventUnitDied(gt_BDCretonUnitDeath, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: BD Verboten Unit Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_BDVerbotenUnitSpawn_Func (bool testConds, bool runActions) {
                playergroup auto35D816A8_g;
                int auto35D816A8_p;
                // Variable Declarations
                int lv_pickedPlayerIndex;
                int lv_player;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TeleporttoBioDome, false);
                TriggerEnable(gt_TeleporttoCreton, false);
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    gv_inCinematic[lv_pickedPlayerIndex] = true;
                    UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, UnitGetPosition(EventUnit()), false);
                    CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
                    CameraSave(PlayerGroupLoopCurrent());
                    CameraLockInput(PlayerGroupLoopCurrent(), true);
                    libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
                    libNtve_gf_HideGameUI(false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(163));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(164));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(165));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(166));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(167));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(168));
                }
                PlayerGroupLoopEnd();
                Wait(2.0, c_timeGame);
                TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel(&quot;TassadarPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/95602A96&quot;), StringExternal(&quot;Param/Value/C228B6E1&quot;), 4.0, c_transmissionDurationSet, true);
                auto35D816A8_g = gv_playersInBioDome; 
                auto35D816A8_p = 1;
                for ( ; auto35D816A8_p &lt;= PlayerGroupCount(auto35D816A8_g) ; auto35D816A8_p += BoolToInt(lv_player == PlayerGroupPlayer(auto35D816A8_g, auto35D816A8_p)) ) {
                    lv_player = PlayerGroupPlayer(auto35D816A8_g, auto35D816A8_p);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Stercore&quot;, 0, 15, RegionRandomPoint(RegionFromId(163)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Stercore&quot;, 0, 15, RegionRandomPoint(RegionFromId(164)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Stercore&quot;, 0, 15, RegionRandomPoint(RegionFromId(165)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Stercore&quot;, 0, 15, RegionRandomPoint(RegionFromId(166)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Stercore&quot;, 0, 15, RegionRandomPoint(RegionFromId(167)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;Stercore&quot;, 0, 15, RegionRandomPoint(RegionFromId(168)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                }
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    CameraRestore(PlayerGroupLoopCurrent(), 2.0, -1, 10);
                    CameraLockInput(PlayerGroupLoopCurrent(), false);
                    libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, false);
                    libNtve_gf_HideGameUI(true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    gv_inCinematic[lv_pickedPlayerIndex] = false;
                }
                PlayerGroupLoopEnd();
                Wait(1.0, c_timeGame);
                UnitGroupLoopBegin(gv_bDVerbotenUnits);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                TriggerEnable(gt_BDVerbotenUnitDeath, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BDVerbotenUnitSpawn_Init () {
                gt_BDVerbotenUnitSpawn = TriggerCreate(&quot;gt_BDVerbotenUnitSpawn_Func&quot;);
                TriggerAddEventUnitDied(gt_BDVerbotenUnitSpawn, UnitRefFromUnit(UnitFromId(1882)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: BD Verboten Unit Death 
            //--------------------------------------------------------------------------------------------------
            bool gt_BDVerbotenUnitDeath_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupHasUnit(gv_bDVerbotenUnits, EventUnit()) == true))) {
                        return false;
                    }
                    if (!((UnitGroupCount(gv_bDVerbotenUnits, c_unitCountAlive) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TeleporttoBioDome, true);
                TriggerEnable(gt_TeleporttoCreton, true);
                UnitRemove(UnitFromId(1867));
                UnitRemove(UnitFromId(1868));
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BDVerbotenUnitDeath_Init () {
                gt_BDVerbotenUnitDeath = TriggerCreate(&quot;gt_BDVerbotenUnitDeath_Func&quot;);
                TriggerEnable(gt_BDVerbotenUnitDeath, false);
                TriggerAddEventUnitDied(gt_BDVerbotenUnitDeath, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: BD Relamy Unit Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_BDRelamyUnitSpawn_Func (bool testConds, bool runActions) {
                playergroup autoF7F51D84_g;
                int autoF7F51D84_p;
                // Variable Declarations
                int lv_pickedPlayerIndex;
                int lv_player;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TeleporttoBioDome, false);
                TriggerEnable(gt_TeleporttoCreton, false);
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    gv_inCinematic[lv_pickedPlayerIndex] = true;
                    UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, UnitGetPosition(EventUnit()), false);
                    CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
                    CameraSave(PlayerGroupLoopCurrent());
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2455), 2.0, -1, 10, true);
                    CameraLockInput(PlayerGroupLoopCurrent(), true);
                    libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
                    libNtve_gf_HideGameUI(false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(142));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(145));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(158));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(159));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(160));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(161));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(162));
                }
                PlayerGroupLoopEnd();
                Wait(2.0, c_timeGame);
                TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel(&quot;TassadarPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/9C04FD77&quot;), StringExternal(&quot;Param/Value/13ABBF17&quot;), 3.0, c_transmissionDurationSet, true);
                autoF7F51D84_g = gv_playersInBioDome; 
                autoF7F51D84_p = 1;
                for ( ; autoF7F51D84_p &lt;= PlayerGroupCount(autoF7F51D84_g) ; autoF7F51D84_p += BoolToInt(lv_player == PlayerGroupPlayer(autoF7F51D84_g, autoF7F51D84_p)) ) {
                    lv_player = PlayerGroupPlayer(autoF7F51D84_g, autoF7F51D84_p);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;CretonWarlord&quot;, 0, 15, RegionRandomPoint(RegionFromId(142)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;CretonWarlord&quot;, 0, 15, RegionRandomPoint(RegionFromId(145)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;CretonWarlord&quot;, 0, 15, RegionRandomPoint(RegionFromId(158)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;CretonWarlord&quot;, 0, 15, RegionRandomPoint(RegionFromId(159)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;CretonWarlord&quot;, 0, 15, RegionRandomPoint(RegionFromId(160)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;CretonWarlord&quot;, 0, 15, RegionRandomPoint(RegionFromId(161)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;CretonWarlord&quot;, 0, 15, RegionRandomPoint(RegionFromId(162)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                }
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    CameraRestore(PlayerGroupLoopCurrent(), 2.0, -1, 10);
                    CameraLockInput(PlayerGroupLoopCurrent(), false);
                    libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, false);
                    libNtve_gf_HideGameUI(true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    gv_inCinematic[lv_pickedPlayerIndex] = false;
                }
                PlayerGroupLoopEnd();
                Wait(1.0, c_timeGame);
                UnitGroupLoopBegin(gv_bDRelamyUnits);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                TriggerEnable(gt_BDRelamyUnitDeath, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BDRelamyUnitSpawn_Init () {
                gt_BDRelamyUnitSpawn = TriggerCreate(&quot;gt_BDRelamyUnitSpawn_Func&quot;);
                TriggerAddEventUnitDied(gt_BDRelamyUnitSpawn, UnitRefFromUnit(UnitFromId(1881)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: BD Relamy Unit Death
            //--------------------------------------------------------------------------------------------------
            bool gt_BDRelamyUnitDeath_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupHasUnit(gv_bDRelamyUnits, EventUnit()) == true))) {
                        return false;
                    }
                    if (!((UnitGroupCount(gv_bDRelamyUnits, c_unitCountAlive) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TeleporttoBioDome, true);
                TriggerEnable(gt_TeleporttoCreton, true);
                UnitRemove(UnitFromId(2456));
                UnitRemove(UnitFromId(1866));
                UnitRemove(UnitFromId(1865));
                UnitRemove(UnitFromId(1864));
                UnitRemove(UnitFromId(1863));
                UnitRemove(UnitFromId(2457));
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BDRelamyUnitDeath_Init () {
                gt_BDRelamyUnitDeath = TriggerCreate(&quot;gt_BDRelamyUnitDeath_Func&quot;);
                TriggerEnable(gt_BDRelamyUnitDeath, false);
                TriggerAddEventUnitDied(gt_BDRelamyUnitDeath, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: BD Wasteland Unit Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_BDWastelandUnitSpawn_Func (bool testConds, bool runActions) {
                playergroup autoBF081BB1_g;
                int autoBF081BB1_p;
                // Variable Declarations
                int lv_pickedPlayerIndex;
                int lv_player;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TeleporttoBioDome, false);
                TriggerEnable(gt_TeleporttoCreton, false);
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    gv_inCinematic[lv_pickedPlayerIndex] = true;
                    UnitSetPosition(gv_players[lv_pickedPlayerIndex].dragon, UnitGetPosition(EventUnit()), false);
                    CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
                    CameraSave(PlayerGroupLoopCurrent());
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(1977), 2.0, -1, 10, true);
                    CameraLockInput(PlayerGroupLoopCurrent(), true);
                    libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, true);
                    libNtve_gf_HideGameUI(false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(151));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(152));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(153));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(154));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(155));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(156));
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(157));
                }
                PlayerGroupLoopEnd();
                Wait(2.0, c_timeGame);
                TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel(&quot;TassadarPortrait&quot;), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), &quot;Talk&quot;, null, StringExternal(&quot;Param/Value/7D37A0AD&quot;), StringExternal(&quot;Param/Value/600FD038&quot;), 4.0, c_transmissionDurationSet, true);
                autoBF081BB1_g = gv_playersInBioDome; 
                autoBF081BB1_p = 1;
                for ( ; autoBF081BB1_p &lt;= PlayerGroupCount(autoBF081BB1_g) ; autoBF081BB1_p += BoolToInt(lv_player == PlayerGroupPlayer(autoBF081BB1_g, autoBF081BB1_p)) ) {
                    lv_player = PlayerGroupPlayer(autoBF081BB1_g, autoBF081BB1_p);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;DemonicSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(151)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;DemonicSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(152)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;DemonicSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(153)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;DemonicSrepti&quot;, 0, 15, RegionRandomPoint(RegionFromId(154)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;DemonicSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(155)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;DemonicSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(155)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;DemonicSrepti&quot;, 0, 15, RegionRandomPoint(RegionFromId(156)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
                    Wait(0.5, c_timeGame);
                    libNtve_gf_UnitCreateFacingPoint(1, &quot;DemonicSheep&quot;, 0, 15, RegionRandomPoint(RegionFromId(157)), UnitGetPosition(EventUnit()));
                    libNtve_gf_CreateModelAtPoint(&quot;WarpGateWarpCast&quot;, UnitGetPosition(UnitLastCreated()));
                    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
                    libNtve_gf_PauseUnit(UnitLastCreated(), true);
                }
                PlayerGroupLoopBegin(gv_playersInBioDome);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pickedPlayerIndex = (PlayerGroupLoopCurrent() - 1);
                    CameraRestore(PlayerGroupLoopCurrent(), 2.0, -1, 10);
                    CameraLockInput(PlayerGroupLoopCurrent(), false);
                    libNtve_gf_PauseUnit(gv_players[lv_pickedPlayerIndex].dragon, false);
                    libNtve_gf_HideGameUI(true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    gv_inCinematic[lv_pickedPlayerIndex] = false;
                }
                PlayerGroupLoopEnd();
                Wait(1.0, c_timeGame);
                UnitGroupLoopBegin(gv_bDWastelandUnits);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand(&quot;attack&quot;, 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
                TriggerEnable(gt_BDWastelandUnitDeath, true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BDWastelandUnitSpawn_Init () {
                gt_BDWastelandUnitSpawn = TriggerCreate(&quot;gt_BDWastelandUnitSpawn_Func&quot;);
                TriggerAddEventUnitDied(gt_BDWastelandUnitSpawn, UnitRefFromUnit(UnitFromId(1880)));
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: BD Wasteland Unit Death
            //--------------------------------------------------------------------------------------------------
            bool gt_BDWastelandUnitDeath_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((UnitGroupHasUnit(gv_bDWastelandUnits, EventUnit()) == true))) {
                        return false;
                    }
                    if (!((UnitGroupCount(gv_bDWastelandUnits, c_unitCountAlive) == 0))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_TeleporttoBioDome, true);
                TriggerEnable(gt_TeleporttoCreton, true);
                UnitGroupLoopBegin(UnitGroup(&quot;MineralField&quot;, 0, RegionFromId(146), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                TriggerExecute(gt_SpawnEnemiesBioDomeWasteland, true, false);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BDWastelandUnitDeath_Init () {
                gt_BDWastelandUnitDeath = TriggerCreate(&quot;gt_BDWastelandUnitDeath_Func&quot;);
                TriggerEnable(gt_BDWastelandUnitDeath, false);
                TriggerAddEventUnitDied(gt_BDWastelandUnitDeath, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Teleport to Bio Dome
            //--------------------------------------------------------------------------------------------------
            bool gt_TeleporttoBioDome_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[8].state &gt;= 1)) {
                    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;BiodomeTheme&quot;, c_soundtrackCueAny, 0, false);
                    CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(189)), 0.0, -1, 10, false);
                    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                    UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(189)), false);
                    gv_locationText[lv_triggeringPlayerIndex] = &quot;Bio Dome&quot;;
                    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                    UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                    UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                    gv_respawnPoint[lv_triggeringPlayerIndex] = RegionGetCenter(RegionFromId(188));
                    PlayerGroupAdd(gv_playersInBioDome, UnitGetOwner(EventUnit()));
                    UnitGroupAdd(gv_dragonsInBioDome, gv_players[lv_triggeringPlayerIndex].dragon);
                }
                else {
                    if ((gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].state == 1)) {
                        ObjectiveSetState(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].objective, c_objectiveStateFailed);
                        ObjectiveDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].objective);
                        gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].state = 2;
                        BankValueSetFromInt(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, &quot;SQ6&quot;, PlayerHandle(UnitGetOwner(EventUnit())), gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].state);
                        PingDestroy(gv_players[(UnitGetOwner(EventUnit()) - 1)].quests.storyQuests[6].ping);
                        gf_SQ7Setup(UnitGetOwner(EventUnit()));
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TeleporttoBioDome_Init () {
                gt_TeleporttoBioDome = TriggerCreate(&quot;gt_TeleporttoBioDome_Func&quot;);
                TriggerAddEventUnitRegion(gt_TeleporttoBioDome, null, RegionFromId(187), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Teleport to Creton
            //--------------------------------------------------------------------------------------------------
            bool gt_TeleporttoCreton_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32)))) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;CretonTheme&quot;, c_soundtrackCueAny, 0, false);
                lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(190)), false);
                CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(190)), 0.0, -1, 10, false);
                gv_locationText[lv_triggeringPlayerIndex] = &quot;Creton Trench&quot;;
                libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;stop&quot;, 0)), c_orderQueueReplace);
                UnitIssueOrder(EventUnit(), Order(AbilityCommand(&quot;move&quot;, 2)), c_orderQueueReplace);
                gv_respawnPoint[lv_triggeringPlayerIndex] = RegionGetCenter(RegionFromId(190));
                PlayerGroupRemove(gv_playersInBioDome, UnitGetOwner(EventUnit()));
                UnitGroupRemove(gv_dragonsInBioDome, gv_players[lv_triggeringPlayerIndex].dragon);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TeleporttoCreton_Init () {
                gt_TeleporttoCreton = TriggerCreate(&quot;gt_TeleporttoCreton_Func&quot;);
                TriggerAddEventUnitRegion(gt_TeleporttoCreton, null, RegionFromId(188), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set RP to Wastelands
            //--------------------------------------------------------------------------------------------------
            bool gt_SetRPtoWastelands_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/7BE07EBD&quot;));
                gv_respawnPoint[(UnitGetOwner(EventUnit()) - 1)] = RegionGetCenter(RegionFromId(124));
                gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][0] = true;
                BankValueSetFromFlag(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, &quot;WP0&quot;, PlayerHandle(UnitGetOwner(EventUnit())), gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][0]);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetRPtoWastelands_Init () {
                gt_SetRPtoWastelands = TriggerCreate(&quot;gt_SetRPtoWastelands_Func&quot;);
                TriggerAddEventUnitRegion(gt_SetRPtoWastelands, null, RegionFromId(124), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set RP to Ballan
            //--------------------------------------------------------------------------------------------------
            bool gt_SetRPtoBallan_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/F2677025&quot;));
                gv_respawnPoint[(UnitGetOwner(EventUnit()) - 1)] = RegionGetCenter(RegionFromId(125));
                gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][1] = true;
                BankValueSetFromFlag(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, &quot;WP1&quot;, PlayerHandle(UnitGetOwner(EventUnit())), gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][1]);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetRPtoBallan_Init () {
                gt_SetRPtoBallan = TriggerCreate(&quot;gt_SetRPtoBallan_Func&quot;);
                TriggerAddEventUnitRegion(gt_SetRPtoBallan, null, RegionFromId(125), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set RP to Relamy
            //--------------------------------------------------------------------------------------------------
            bool gt_SetRPtoRelamy_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/9E82069B&quot;));
                gv_respawnPoint[(UnitGetOwner(EventUnit()) - 1)] = RegionGetCenter(RegionFromId(123));
                gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][2] = true;
                BankValueSetFromFlag(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, &quot;WP2&quot;, PlayerHandle(UnitGetOwner(EventUnit())), gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][2]);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetRPtoRelamy_Init () {
                gt_SetRPtoRelamy = TriggerCreate(&quot;gt_SetRPtoRelamy_Func&quot;);
                TriggerAddEventUnitRegion(gt_SetRPtoRelamy, null, RegionFromId(123), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set RP to Verboten Forest Waypoint
            //--------------------------------------------------------------------------------------------------
            bool gt_SetRPtoVerbotenForestWaypoint_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/58C10116&quot;));
                gv_respawnPoint[(UnitGetOwner(EventUnit()) - 1)] = RegionGetCenter(RegionFromId(121));
                gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][3] = true;
                BankValueSetFromFlag(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, &quot;WP3&quot;, PlayerHandle(UnitGetOwner(EventUnit())), gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][3]);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetRPtoVerbotenForestWaypoint_Init () {
                gt_SetRPtoVerbotenForestWaypoint = TriggerCreate(&quot;gt_SetRPtoVerbotenForestWaypoint_Func&quot;);
                TriggerAddEventUnitRegion(gt_SetRPtoVerbotenForestWaypoint, null, RegionFromId(121), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set RP to Creton
            //--------------------------------------------------------------------------------------------------
            bool gt_SetRPtoCreton_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true))) {
                        return false;
                    }
                    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 &lt;&lt; c_targetFilterHeroic), 0, (1 &lt;&lt; c_targetFilterMissile), (1 &lt;&lt; (c_targetFilterDead - 32)))) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/21B16D01&quot;));
                gv_respawnPoint[(UnitGetOwner(EventUnit()) - 1)] = RegionGetCenter(RegionFromId(122));
                gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][4] = true;
                BankValueSetFromFlag(gv_players[(UnitGetOwner(EventUnit()) - 1)].banks.dragonBank, &quot;WP4&quot;, PlayerHandle(UnitGetOwner(EventUnit())), gv_unlockedWaypoints[(UnitGetOwner(EventUnit()) - 1)][4]);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetRPtoCreton_Init () {
                gt_SetRPtoCreton = TriggerCreate(&quot;gt_SetRPtoCreton_Func&quot;);
                TriggerAddEventUnitRegion(gt_SetRPtoCreton, null, RegionFromId(122), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Dragons Nest Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateDragonsNestWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/85D0040F&quot;), 24, PointFromId(624), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateDragonsNestWarning_Init () {
                gt_CreateDragonsNestWarning = TriggerCreate(&quot;gt_CreateDragonsNestWarning_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_CreateDragonsNestWarning, null, PointFromId(624), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Relamy Pass Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateRelamyPassWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/904E3199&quot;), 24, PointFromId(616), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateRelamyPassWarning_Init () {
                gt_CreateRelamyPassWarning = TriggerCreate(&quot;gt_CreateRelamyPassWarning_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_CreateRelamyPassWarning, null, PointFromId(616), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Relamy Canyon Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateRelamyCanyonWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/9E8D5C69&quot;), 24, PointFromId(619), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateRelamyCanyonWarning_Init () {
                gt_CreateRelamyCanyonWarning = TriggerCreate(&quot;gt_CreateRelamyCanyonWarning_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_CreateRelamyCanyonWarning, null, PointFromId(619), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Relamy Hills Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateRelamyHillsWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/7A4BEC0C&quot;), 24, PointFromId(620), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateRelamyHillsWarning_Init () {
                gt_CreateRelamyHillsWarning = TriggerCreate(&quot;gt_CreateRelamyHillsWarning_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_CreateRelamyHillsWarning, null, PointFromId(620), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Relamy Gorge Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateRelamyGorgeWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/C7072A64&quot;), 24, PointFromId(709), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateRelamyGorgeWarning_Init () {
                gt_CreateRelamyGorgeWarning = TriggerCreate(&quot;gt_CreateRelamyGorgeWarning_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_CreateRelamyGorgeWarning, null, PointFromId(709), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Lava Pass Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateLavaPassWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/C17B2598&quot;), 24, PointFromId(205), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateLavaPassWarning_Init () {
                gt_CreateLavaPassWarning = TriggerCreate(&quot;gt_CreateLavaPassWarning_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_CreateLavaPassWarning, null, PointFromId(205), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Verboten Forest Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateVerbotenForestWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/302FEAEA&quot;), 24, PointFromId(837), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateVerbotenForestWarning_Init () {
                gt_CreateVerbotenForestWarning = TriggerCreate(&quot;gt_CreateVerbotenForestWarning_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_CreateVerbotenForestWarning, null, PointFromId(837), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Verboten Infestation Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateVerbotenInfestationWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/00FFE1AB&quot;), 24, PointFromId(1095), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateVerbotenInfestationWarning_Init () {
                gt_CreateVerbotenInfestationWarning = TriggerCreate(&quot;gt_CreateVerbotenInfestationWarning_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_CreateVerbotenInfestationWarning, null, PointFromId(1095), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Road To Ballan Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateRoadToBallanWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/F802674B&quot;), 24, PointFromId(239), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateRoadToBallanWarning_Init () {
                gt_CreateRoadToBallanWarning = TriggerCreate(&quot;gt_CreateRoadToBallanWarning_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_CreateRoadToBallanWarning, null, PointFromId(239), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Creton Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateCretonWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/26DDFA9D&quot;), 24, PointFromId(1186), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateCretonWarning_Init () {
                gt_CreateCretonWarning = TriggerCreate(&quot;gt_CreateCretonWarning_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_CreateCretonWarning, null, PointFromId(1186), 12.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Sragmasi Warning
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateSragmasiWarning_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TextTagCreate(StringExternal(&quot;Param/Value/4C8936F2&quot;), 24, PointFromId(2502), 1.0, true, true, PlayerGroupAll());
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateSragmasiWarning_Init () {
                gt_CreateSragmasiWarning = TriggerCreate(&quot;gt_CreateSragmasiWarning_Func&quot;);
                TriggerAddEventUnitRangePoint(gt_CreateSragmasiWarning, null, PointFromId(2502), 30.0, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Up Location Dialog
            //--------------------------------------------------------------------------------------------------
            bool gt_SetUpLocationDialog_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                DialogCreate(200, 100, c_anchorTop, 0, 40, true);
                gv_players[0].locationDialog.state = DialogLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_players[0].locationDialog.state, 200, 50, c_anchorTop, 55, 25, StringExternal(&quot;Param/Value/A87E682D&quot;), Color(100,100,100), false, 2.0);
                libNtve_gf_CreateDialogItemLabel(gv_players[0].locationDialog.state, 200, 50, c_anchorBottom, ((StringLength(gv_locationText[0]) * 2) + 4), 0, StringToText(gv_locationText[0]), Color(28*100/255,167*100/255,234*100/255), true, 2.0);
                gv_players[0].locationDialog.textBox = DialogControlLastCreated();
                DialogSetVisible(gv_players[0].locationDialog.state, PlayerGroupSingle(1), true);
                DialogCreate(200, 100, c_anchorTop, 0, 40, true);
                gv_players[1].locationDialog.state = DialogLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_players[1].locationDialog.state, 200, 50, c_anchorTop, 55, 25, StringExternal(&quot;Param/Value/A9E23210&quot;), Color(100,100,100), false, 2.0);
                libNtve_gf_CreateDialogItemLabel(gv_players[1].locationDialog.state, 200, 50, c_anchorBottom, ((StringLength(gv_locationText[0]) * 2) + 4), 0, StringToText(gv_locationText[1]), Color(28*100/255,167*100/255,234*100/255), true, 2.0);
                gv_players[1].locationDialog.textBox = DialogControlLastCreated();
                DialogSetVisible(gv_players[1].locationDialog.state, PlayerGroupSingle(2), true);
                DialogCreate(200, 100, c_anchorTop, 0, 40, true);
                gv_players[2].locationDialog.state = DialogLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_players[2].locationDialog.state, 200, 50, c_anchorTop, 55, 25, StringExternal(&quot;Param/Value/CDDD8377&quot;), Color(100,100,100), false, 2.0);
                libNtve_gf_CreateDialogItemLabel(gv_players[2].locationDialog.state, 200, 50, c_anchorBottom, ((StringLength(gv_locationText[0]) * 2) + 4), 0, StringToText(gv_locationText[2]), Color(28*100/255,167*100/255,234*100/255), true, 2.0);
                gv_players[2].locationDialog.textBox = DialogControlLastCreated();
                DialogSetVisible(gv_players[2].locationDialog.state, PlayerGroupSingle(3), true);
                DialogCreate(200, 100, c_anchorTop, 0, 40, true);
                gv_players[3].locationDialog.state = DialogLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_players[3].locationDialog.state, 200, 50, c_anchorTop, 55, 25, StringExternal(&quot;Param/Value/01F92455&quot;), Color(100,100,100), false, 2.0);
                libNtve_gf_CreateDialogItemLabel(gv_players[3].locationDialog.state, 200, 50, c_anchorBottom, ((StringLength(gv_locationText[0]) * 2) + 4), 0, StringToText(gv_locationText[3]), Color(28*100/255,167*100/255,234*100/255), true, 2.0);
                gv_players[3].locationDialog.textBox = DialogControlLastCreated();
                DialogSetVisible(gv_players[3].locationDialog.state, PlayerGroupSingle(4), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetUpLocationDialog_Init () {
                gt_SetUpLocationDialog = TriggerCreate(&quot;gt_SetUpLocationDialog_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Location Wasteland
            //--------------------------------------------------------------------------------------------------
            bool gt_LocationWasteland_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Wasteland&quot;, c_stringCase) == false)) {
                    UnitBehaviorRemovePlayer(EventUnit(), &quot;TimePenalty&quot;, UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
                    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;WastelandTheme&quot;, c_soundtrackCueAny, 0, false);
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Wasteland&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LocationWasteland_Init () {
                gt_LocationWasteland = TriggerCreate(&quot;gt_LocationWasteland_Func&quot;);
                TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(32), true);
                TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(36), true);
                TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(37), true);
                TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(41), true);
                TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(124), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Location Dragon&apos;s Nest
            //--------------------------------------------------------------------------------------------------
            bool gt_LocationDragonsNest_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Dragon&apos;s Nest&quot;, c_stringCase) == false)) {
                    UnitBehaviorRemovePlayer(EventUnit(), &quot;TimePenalty&quot;, UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
                    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Dragon&apos;s Nest&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LocationDragonsNest_Init () {
                gt_LocationDragonsNest = TriggerCreate(&quot;gt_LocationDragonsNest_Func&quot;);
                TriggerAddEventUnitRegion(gt_LocationDragonsNest, null, RegionFromId(3), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Location Syrital&apos;s Lair
            //--------------------------------------------------------------------------------------------------
            bool gt_LocationSyritalsLair_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Syrital&apos;s Lair&quot;, c_stringCase) == false)) {
                    UnitBehaviorRemovePlayer(EventUnit(), &quot;TimePenalty&quot;, UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
                    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Syrital&apos;s Lair&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LocationSyritalsLair_Init () {
                gt_LocationSyritalsLair = TriggerCreate(&quot;gt_LocationSyritalsLair_Func&quot;);
                TriggerAddEventUnitRegion(gt_LocationSyritalsLair, null, RegionFromId(6), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Location Relamy Pass
            //--------------------------------------------------------------------------------------------------
            bool gt_LocationRelamyPass_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Pass&quot;, c_stringCase) == false)) {
                    if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Pass&quot;, c_stringCase) == false) &amp;&amp; (StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Gorge&quot;, c_stringCase) == false) &amp;&amp; (StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Canyon&quot;, c_stringCase) == false) &amp;&amp; (StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Hills&quot;, c_stringCase) == false)) {
                        UnitBehaviorRemovePlayer(EventUnit(), &quot;TimePenalty&quot;, UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
                        SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                        SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;RelamyCaveTheme&quot;, c_soundtrackCueAny, 0, false);
                    }
                    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Relamy Pass&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LocationRelamyPass_Init () {
                gt_LocationRelamyPass = TriggerCreate(&quot;gt_LocationRelamyPass_Func&quot;);
                TriggerAddEventUnitRegion(gt_LocationRelamyPass, null, RegionFromId(31), true);
                TriggerAddEventUnitRegion(gt_LocationRelamyPass, null, RegionFromId(33), true);
                TriggerAddEventUnitRegion(gt_LocationRelamyPass, null, RegionFromId(19), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Location Relamy Canyon
            //--------------------------------------------------------------------------------------------------
            bool gt_LocationRelamyCanyon_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Canyon&quot;, c_stringCase) == false)) {
                    if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Pass&quot;, c_stringCase) == false) &amp;&amp; (StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Gorge&quot;, c_stringCase) == false) &amp;&amp; (StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Canyon&quot;, c_stringCase) == false) &amp;&amp; (StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Hills&quot;, c_stringCase) == false)) {
                        UnitBehaviorRemovePlayer(EventUnit(), &quot;TimePenalty&quot;, UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
                        SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                        SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;RelamyCaveTheme&quot;, c_soundtrackCueAny, 0, false);
                    }
                    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Relamy Canyon&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LocationRelamyCanyon_Init () {
                gt_LocationRelamyCanyon = TriggerCreate(&quot;gt_LocationRelamyCanyon_Func&quot;);
                TriggerAddEventUnitRegion(gt_LocationRelamyCanyon, null, RegionFromId(34), true);
                TriggerAddEventUnitRegion(gt_LocationRelamyCanyon, null, RegionFromId(40), true);
                TriggerAddEventUnitRegion(gt_LocationRelamyCanyon, null, RegionFromId(59), true);
                TriggerAddEventUnitRegion(gt_LocationRelamyCanyon, null, RegionFromId(123), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Location Relamy Hills
            //--------------------------------------------------------------------------------------------------
            bool gt_LocationRelamyHills_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Hills&quot;, c_stringCase) == false)) {
                    if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Pass&quot;, c_stringCase) == false) &amp;&amp; (StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Gorge&quot;, c_stringCase) == false) &amp;&amp; (StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Canyon&quot;, c_stringCase) == false) &amp;&amp; (StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Relamy Hills&quot;, c_stringCase) == false)) {
                        UnitBehaviorRemovePlayer(EventUnit(), &quot;TimePenalty&quot;, UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
                        SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                        SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;RelamyCaveTheme&quot;, c_soundtrackCueAny, 0, false);
                    }
                    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Relamy Hills&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LocationRelamyHills_Init () {
                gt_LocationRelamyHills = TriggerCreate(&quot;gt_LocationRelamyHills_Func&quot;);
                TriggerAddEventUnitRegion(gt_LocationRelamyHills, null, RegionFromId(35), true);
                TriggerAddEventUnitRegion(gt_LocationRelamyHills, null, RegionFromId(13), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Location Verboten Forest
            //--------------------------------------------------------------------------------------------------
            bool gt_LocationVerbotenForest_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Verboten Forest&quot;, c_stringCase) == false)) {
                    UnitBehaviorRemovePlayer(EventUnit(), &quot;TimePenalty&quot;, UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
                    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;VerbotenTheme&quot;, c_soundtrackCueAny, 0, false);
                    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Verboten Forest&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LocationVerbotenForest_Init () {
                gt_LocationVerbotenForest = TriggerCreate(&quot;gt_LocationVerbotenForest_Func&quot;);
                TriggerAddEventUnitRegion(gt_LocationVerbotenForest, null, RegionFromId(58), true);
                TriggerAddEventUnitRegion(gt_LocationVerbotenForest, null, RegionFromId(121), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Location Creton
            //--------------------------------------------------------------------------------------------------
            bool gt_LocationCreton_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Creton&quot;, c_stringCase) == false)) {
                    if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Creton&quot;, c_stringCase) == false) &amp;&amp; (StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Creton Trench&quot;, c_stringCase) == false)) {
                        UnitBehaviorRemovePlayer(EventUnit(), &quot;TimePenalty&quot;, UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
                        SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                        SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;CretonTheme&quot;, c_soundtrackCueAny, 0, false);
                    }
                    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Creton&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LocationCreton_Init () {
                gt_LocationCreton = TriggerCreate(&quot;gt_LocationCreton_Func&quot;);
                TriggerAddEventUnitRegion(gt_LocationCreton, null, RegionFromId(98), true);
                TriggerAddEventUnitRegion(gt_LocationCreton, null, RegionFromId(135), true);
                TriggerAddEventUnitRegion(gt_LocationCreton, null, RegionFromId(122), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Location Creton Trench
            //--------------------------------------------------------------------------------------------------
            bool gt_LocationCretonTrench_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Creton Trench&quot;, c_stringCase) == false) &amp;&amp; (StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Creton&quot;, c_stringCase) == false)) {
                    if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Creton&quot;, c_stringCase) == false) &amp;&amp; (StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Creton&quot;, c_stringCase) == false)) {
                        UnitBehaviorRemovePlayer(EventUnit(), &quot;TimePenalty&quot;, UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
                        SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                        SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;CretonTheme&quot;, c_soundtrackCueAny, 0, false);
                    }
                    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Creton Trench&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LocationCretonTrench_Init () {
                gt_LocationCretonTrench = TriggerCreate(&quot;gt_LocationCretonTrench_Func&quot;);
                TriggerAddEventUnitRegion(gt_LocationCretonTrench, null, RegionFromId(134), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Location Road to Ballan
            //--------------------------------------------------------------------------------------------------
            bool gt_LocationRoadtoBallan_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Road to Ballan&quot;, c_stringCase) == false)) {
                    UnitBehaviorRemovePlayer(EventUnit(), &quot;TimePenalty&quot;, UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
                    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Road to Ballan&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LocationRoadtoBallan_Init () {
                gt_LocationRoadtoBallan = TriggerCreate(&quot;gt_LocationRoadtoBallan_Func&quot;);
                TriggerAddEventUnitRegion(gt_LocationRoadtoBallan, null, RegionFromId(38), true);
                TriggerAddEventUnitRegion(gt_LocationRoadtoBallan, null, RegionFromId(39), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Location Ballan
            //--------------------------------------------------------------------------------------------------
            bool gt_LocationBallan_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!(((EventUnit() == gv_players[0].dragon) || (EventUnit() == gv_players[1].dragon) || (EventUnit() == gv_players[2].dragon) || (EventUnit() == gv_players[3].dragon)))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((StringEqual(gv_locationString[(UnitGetOwner(EventUnit()) - 1)], &quot;Ballan&quot;, c_stringCase) == false)) {
                    UnitBehaviorRemovePlayer(EventUnit(), &quot;TimePenalty&quot;, UnitGetOwner(EventUnit()), c_unitBehaviorCountAll);
                    SoundtrackStop(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true);
                    SoundtrackPlay(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, &quot;BiodomeTheme2&quot;, c_soundtrackCueAny, 0, false);
                    lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
                    gv_locationString[lv_triggeringPlayerIndex] = &quot;Ballan&quot;;
                    gv_locationText[lv_triggeringPlayerIndex] = gv_locationString[lv_triggeringPlayerIndex];
                    libNtve_gf_SetDialogItemText(gv_players[lv_triggeringPlayerIndex].locationDialog.textBox, StringToText(gv_locationText[lv_triggeringPlayerIndex]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LocationBallan_Init () {
                gt_LocationBallan = TriggerCreate(&quot;gt_LocationBallan_Func&quot;);
                TriggerAddEventUnitRegion(gt_LocationBallan, null, RegionFromId(76), true);
                TriggerAddEventUnitRegion(gt_LocationBallan, null, RegionFromId(125), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Wasteland Healing Water Enter
            //--------------------------------------------------------------------------------------------------
            bool gt_WastelandHealingWaterEnter_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorAdd(EventUnit(), &quot;HealingWaters&quot;, EventUnit(), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WastelandHealingWaterEnter_Init () {
                gt_WastelandHealingWaterEnter = TriggerCreate(&quot;gt_WastelandHealingWaterEnter_Func&quot;);
                TriggerAddEventUnitRegion(gt_WastelandHealingWaterEnter, null, RegionFromId(42), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Wasteland Healing Water Leave
            //--------------------------------------------------------------------------------------------------
            bool gt_WastelandHealingWaterLeave_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorRemove(EventUnit(), &quot;HealingWaters&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WastelandHealingWaterLeave_Init () {
                gt_WastelandHealingWaterLeave = TriggerCreate(&quot;gt_WastelandHealingWaterLeave_Func&quot;);
                TriggerAddEventUnitRegion(gt_WastelandHealingWaterLeave, null, RegionFromId(42), false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Relamy Pass Healing Water Enter
            //--------------------------------------------------------------------------------------------------
            bool gt_RelamyPassHealingWaterEnter_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorAdd(EventUnit(), &quot;HealingWaters&quot;, EventUnit(), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RelamyPassHealingWaterEnter_Init () {
                gt_RelamyPassHealingWaterEnter = TriggerCreate(&quot;gt_RelamyPassHealingWaterEnter_Func&quot;);
                TriggerAddEventUnitRegion(gt_RelamyPassHealingWaterEnter, null, RegionFromId(43), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Relamy Pass Healing Water Leave
            //--------------------------------------------------------------------------------------------------
            bool gt_RelamyPassHealingWaterLeave_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorRemove(EventUnit(), &quot;HealingWaters&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RelamyPassHealingWaterLeave_Init () {
                gt_RelamyPassHealingWaterLeave = TriggerCreate(&quot;gt_RelamyPassHealingWaterLeave_Func&quot;);
                TriggerAddEventUnitRegion(gt_RelamyPassHealingWaterLeave, null, RegionFromId(43), false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Relamy Canyon Healing Water Enter
            //--------------------------------------------------------------------------------------------------
            bool gt_RelamyCanyonHealingWaterEnter_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorAdd(EventUnit(), &quot;HealingWaters&quot;, EventUnit(), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RelamyCanyonHealingWaterEnter_Init () {
                gt_RelamyCanyonHealingWaterEnter = TriggerCreate(&quot;gt_RelamyCanyonHealingWaterEnter_Func&quot;);
                TriggerAddEventUnitRegion(gt_RelamyCanyonHealingWaterEnter, null, RegionFromId(60), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Relamy Canyon Healing Water Leave
            //--------------------------------------------------------------------------------------------------
            bool gt_RelamyCanyonHealingWaterLeave_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorRemove(EventUnit(), &quot;HealingWaters&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RelamyCanyonHealingWaterLeave_Init () {
                gt_RelamyCanyonHealingWaterLeave = TriggerCreate(&quot;gt_RelamyCanyonHealingWaterLeave_Func&quot;);
                TriggerAddEventUnitRegion(gt_RelamyCanyonHealingWaterLeave, null, RegionFromId(60), false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Verboten Forest Healing Water Enter
            //--------------------------------------------------------------------------------------------------
            bool gt_VerbotenForestHealingWaterEnter_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorAdd(EventUnit(), &quot;HealingWaters&quot;, EventUnit(), 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VerbotenForestHealingWaterEnter_Init () {
                gt_VerbotenForestHealingWaterEnter = TriggerCreate(&quot;gt_VerbotenForestHealingWaterEnter_Func&quot;);
                TriggerAddEventUnitRegion(gt_VerbotenForestHealingWaterEnter, null, RegionFromId(133), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Verboten Forest Healing Water Leave
            //--------------------------------------------------------------------------------------------------
            bool gt_VerbotenForestHealingWaterLeave_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorRemove(EventUnit(), &quot;HealingWaters&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VerbotenForestHealingWaterLeave_Init () {
                gt_VerbotenForestHealingWaterLeave = TriggerCreate(&quot;gt_VerbotenForestHealingWaterLeave_Func&quot;);
                TriggerAddEventUnitRegion(gt_VerbotenForestHealingWaterLeave, null, RegionFromId(133), false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Lava Enter
            //--------------------------------------------------------------------------------------------------
            bool gt_LavaEnter_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!((libNtve_gf_UnitIsInvulnerable(EventUnit()) == false))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetOwner(EventUnit()) == 15)) {
                    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), Point((PointGetX(UnitGetPosition(EventUnit())) + RandomFixed(-10.0, 10.0)), (PointGetY(UnitGetPosition(EventUnit())) + RandomFixed(-10.0, 10.0)))), c_orderQueueReplace);
                }
                if ((UnitGetOwner(EventUnit()) == 1)) {
                    if ((gv_fireSkin[0] == true)) {
                    }
                    else {
                        UnitBehaviorAdd(EventUnit(), &quot;InLava&quot;, EventUnit(), 1);
                    }
                }
                else {
                    if ((UnitGetOwner(EventUnit()) == 2)) {
                        if ((gv_fireSkin[1] == true)) {
                        }
                        else {
                            UnitBehaviorAdd(EventUnit(), &quot;InLava&quot;, EventUnit(), 1);
                        }
                    }
                    else {
                        if ((UnitGetOwner(EventUnit()) == 3)) {
                            if ((gv_fireSkin[2] == true)) {
                            }
                            else {
                                UnitBehaviorAdd(EventUnit(), &quot;InLava&quot;, EventUnit(), 1);
                            }
                        }
                        else {
                            if ((UnitGetOwner(EventUnit()) == 4)) {
                                if ((gv_fireSkin[3] == true)) {
                                }
                                else {
                                    UnitBehaviorAdd(EventUnit(), &quot;InLava&quot;, EventUnit(), 1);
                                }
                            }
                            else {
                                if ((UnitGetType(EventUnit()) == &quot;Syrital&quot;)) {
                                }
                                else {
                                    UnitBehaviorAdd(EventUnit(), &quot;InLava&quot;, EventUnit(), 1);
                                }
                            }
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LavaEnter_Init () {
                gt_LavaEnter = TriggerCreate(&quot;gt_LavaEnter_Func&quot;);
                TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(22), true);
                TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(23), true);
                TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(24), true);
                TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(25), true);
                TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(126), true);
                TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(127), true);
                TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(128), true);
                TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(129), true);
                TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(130), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Lava Exit
            //--------------------------------------------------------------------------------------------------
            bool gt_LavaExit_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitBehaviorRemove(EventUnit(), &quot;InLava&quot;, 1);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LavaExit_Init () {
                gt_LavaExit = TriggerCreate(&quot;gt_LavaExit_Func&quot;);
                TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(22), false);
                TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(23), false);
                TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(24), false);
                TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(25), false);
                TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(126), false);
                TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(127), false);
                TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(128), false);
                TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(129), false);
                TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(130), false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Chaos
            //--------------------------------------------------------------------------------------------------
            bool gt_Chaos_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((UnitGetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLevel, c_unitPropCurrent) == 100.0)) {
                    if ((UnitGetType(EventUnit()) != &quot;Mortuus&quot;)) {
                        UnitCreate(1, &quot;Mortuus&quot;, c_unitCreateIgnorePlacement, 15, UnitGetPosition(EventUnit()), libNtve_gf_RandomAngle());
                        UnitBehaviorAdd(UnitLastCreated(), &quot;ChaosMode&quot;, UnitLastCreated(), gv_mortuusKillCount);
                    }
                    else {
                        TextTagCreate(IntToText(gv_mortuusKillCount), 72, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
                        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, ColorWithAlpha(RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0)));
                        gv_mortuusKillCount += 1;
                        if ((gv_mortuusKillCount % 256 == 0)) {
                            UnitCreate(1, &quot;Nosferatu&quot;, 0, 15, UnitGetPosition(EventUnit()), 270.0);
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/4A9BE0A1&quot;));
                            gv_mortuusKillCount = 0;
                        }
                    }
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Chaos_Init () {
                gt_Chaos = TriggerCreate(&quot;gt_Chaos_Func&quot;);
                TriggerEnable(gt_Chaos, false);
                TriggerAddEventUnitDied(gt_Chaos, null);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Chaos Hack
            //--------------------------------------------------------------------------------------------------
            bool gt_ChaosHack_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerEnable(gt_Chaos, true);
                TriggerExecute(gt_ChaosUnitTypes, false, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ChaosHack_Init () {
                gt_ChaosHack = TriggerCreate(&quot;gt_ChaosHack_Func&quot;);
                TriggerAddEventChatMessage(gt_ChaosHack, c_playerAny, &quot;-Chaos Mode&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Reveal Map
            //--------------------------------------------------------------------------------------------------
            bool gt_RevealMap_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                VisRevealerCreate(EventPlayer(), RegionEntireMap());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RevealMap_Init () {
                gt_RevealMap = TriggerCreate(&quot;gt_RevealMap_Func&quot;);
                TriggerAddEventChatMessage(gt_RevealMap, c_playerAny, &quot;-Reveal Map&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Devil&apos;s Flamethrower
            //--------------------------------------------------------------------------------------------------
            bool gt_DevilsFlamethrower_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer()) &amp;&amp; !(PlayerHandle(EventPlayer()) != &quot;1-S2-1-2755172&quot;)) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, &quot;DevilsFlamethrower&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DevilsFlamethrower_Init () {
                gt_DevilsFlamethrower = TriggerCreate(&quot;gt_DevilsFlamethrower_Func&quot;);
                TriggerAddEventChatMessage(gt_DevilsFlamethrower, c_playerAny, &quot;-Devil&apos;s Flamethrower&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Wing Claws
            //--------------------------------------------------------------------------------------------------
            bool gt_WingClaws_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer()) &amp;&amp; PlayerHandle(EventPlayer()) != &quot;&quot; &amp;&amp; PlayerName(EventPlayer()) != StringToText(&quot;Wingcrafter&quot;)) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, &quot;WingClaws&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WingClaws_Init () {
                gt_WingClaws = TriggerCreate(&quot;gt_WingClaws_Func&quot;);
                TriggerAddEventChatMessage(gt_WingClaws, c_playerAny, &quot;-Wing Claws&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Teleport Infestation
            //--------------------------------------------------------------------------------------------------
            bool gt_TeleportInfestation_Func (bool testConds, bool runActions) {
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetPosition(gv_players[(EventPlayer() - 1)].dragon, RegionGetCenter(RegionFromId(65)), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TeleportInfestation_Init () {
                gt_TeleportInfestation = TriggerCreate(&quot;gt_TeleportInfestation_Func&quot;);
                TriggerAddEventChatMessage(gt_TeleportInfestation, c_playerAny, &quot;-Infestation&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Island of Woe cheat
            //--------------------------------------------------------------------------------------------------
            bool gt_IslandofWoecheat_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetPosition(gv_players[(EventPlayer() - 1)].dragon, RegionGetCenter(RegionFromId(193)), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_IslandofWoecheat_Init () {
                gt_IslandofWoecheat = TriggerCreate(&quot;gt_IslandofWoecheat_Func&quot;);
                TriggerAddEventChatMessage(gt_IslandofWoecheat, c_playerAny, &quot;-Island of Woe&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: VT Count
            //--------------------------------------------------------------------------------------------------
            bool gt_VTCount_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/F4A2B359&quot;) + IntToText(UnitBehaviorCount(gv_players[(EventPlayer() - 1)].dragon, &quot;VampiricTendencies&quot;))));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/F6C42C62&quot;) + IntToText(lib1_gv_vampiricTendenciesCount[(EventPlayer() - 1)])));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VTCount_Init () {
                gt_VTCount = TriggerCreate(&quot;gt_VTCount_Func&quot;);
                TriggerAddEventChatMessage(gt_VTCount, c_playerAny, &quot;-VT&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Location
            //--------------------------------------------------------------------------------------------------
            bool gt_Location_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText(gv_locationString[(EventPlayer() - 1)]));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText(gv_locationText[(EventPlayer() - 1)]));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Location_Init () {
                gt_Location = TriggerCreate(&quot;gt_Location_Func&quot;);
                TriggerAddEventChatMessage(gt_Location, c_playerAny, &quot;-Location&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Reset Quest
            //--------------------------------------------------------------------------------------------------
            bool gt_ResetQuest_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                ObjectiveDestroyAll(PlayerGroupSingle(EventPlayer()));
                PingDestroy(gv_players[EventPlayer()].quests.storyQuests[0].ping);
                PingDestroy(gv_players[EventPlayer()].quests.storyQuests[1].ping);
                PingDestroy(gv_players[EventPlayer()].quests.storyQuests[2].ping);
                PingDestroy(gv_players[EventPlayer()].quests.storyQuests[3].ping);
                PingDestroy(gv_players[EventPlayer()].quests.storyQuests[4].ping);
                PingDestroy(gv_players[EventPlayer()].quests.storyQuests[5].ping);
                PingDestroy(gv_players[EventPlayer()].quests.storyQuests[6].ping);
                PingDestroy(gv_players[EventPlayer()].quests.storyQuests[7].ping);
                PingDestroy(gv_players[EventPlayer()].quests.storyQuests[8].ping);
                PingDestroy(gv_players[EventPlayer()].quests.storyQuests[9].ping);
                gf_SQ0Setup(EventPlayer());
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/57E33316&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ResetQuest_Init () {
                gt_ResetQuest = TriggerCreate(&quot;gt_ResetQuest_Func&quot;);
                TriggerAddEventChatMessage(gt_ResetQuest, c_playerAny, &quot;-Reset Quests&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Teleport Bio Dome
            //--------------------------------------------------------------------------------------------------
            bool gt_TeleportBioDome_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetPosition(gv_players[(EventPlayer() - 1)].dragon, RegionGetCenter(RegionFromId(187)), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TeleportBioDome_Init () {
                gt_TeleportBioDome = TriggerCreate(&quot;gt_TeleportBioDome_Func&quot;);
                TriggerAddEventChatMessage(gt_TeleportBioDome, c_playerAny, &quot;-Bio Dome&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Teleport to Spawn
            //--------------------------------------------------------------------------------------------------
            bool gt_TeleporttoSpawn_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetPosition(gv_players[(EventPlayer() - 1)].dragon, RegionGetCenter(RegionFromId(3)), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TeleporttoSpawn_Init () {
                gt_TeleporttoSpawn = TriggerCreate(&quot;gt_TeleporttoSpawn_Func&quot;);
                TriggerAddEventChatMessage(gt_TeleporttoSpawn, c_playerAny, &quot;-Spawn&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Debug Tele Zauberer
            //--------------------------------------------------------------------------------------------------
            bool gt_DebugTeleZauberer_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupAdd(gv_playersInBioDome, EventPlayer());
                UnitSetPosition(gv_players[(EventPlayer() - 1)].dragon, UnitGetPosition(UnitFromId(2501)), false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DebugTeleZauberer_Init () {
                gt_DebugTeleZauberer = TriggerCreate(&quot;gt_DebugTeleZauberer_Func&quot;);
                TriggerAddEventChatMessage(gt_DebugTeleZauberer, c_playerAny, &quot;-Zauberer&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Invincibility
            //--------------------------------------------------------------------------------------------------
            bool gt_Invincibility_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLifeRegen, 50000.0);
                UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropShieldsRegen, 50000.0);
                UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropEnergyRegen, 50000.0);
                UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLifeMax, 500000.0);
                UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropShieldsMax, 500000.0);
                UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropEnergyMax, 500000.0);
                UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropShields, 500000.0);
                UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLife, 500000.0);
                UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropEnergy, 500000.0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Invincibility_Init () {
                gt_Invincibility = TriggerCreate(&quot;gt_Invincibility_Func&quot;);
                TriggerAddEventChatMessage(gt_Invincibility, c_playerAny, &quot;-GOD&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Suit Up
            //--------------------------------------------------------------------------------------------------
            bool gt_SuitUp_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, &quot;ModArmor&quot;);
                UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, &quot;GodlyClaws&quot;);
                UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, &quot;FluxCapacitor&quot;);
                UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, &quot;FluxCapacitor&quot;);
                UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, &quot;FluxCapacitor&quot;);
                UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, &quot;FluxCapacitor&quot;);
                UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, &quot;FluxCapacitor&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SuitUp_Init () {
                gt_SuitUp = TriggerCreate(&quot;gt_SuitUp_Func&quot;);
                TriggerAddEventChatMessage(gt_SuitUp, c_playerAny, &quot;-Suit Up&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Level Debug
            //--------------------------------------------------------------------------------------------------
            bool gt_LevelDebug_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_evolving[(EventPlayer() - 1)] == false)) {
                    UnitSetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLevel, (UnitGetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLevel, c_unitPropCurrent) + 1.0));
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LevelDebug_Init () {
                gt_LevelDebug = TriggerCreate(&quot;gt_LevelDebug_Func&quot;);
                TriggerAddEventChatMessage(gt_LevelDebug, c_playerAny, &quot;-level&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Get Handle
            //--------------------------------------------------------------------------------------------------
            bool gt_GetHandle_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (PlayerName(1) + (StringExternal(&quot;Param/Value/86DAF636&quot;) + StringToText(PlayerHandle(1)))));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (PlayerName(2) + (StringExternal(&quot;Param/Value/120F225F&quot;) + StringToText(PlayerHandle(2)))));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (PlayerName(3) + (StringExternal(&quot;Param/Value/209E9C9C&quot;) + StringToText(PlayerHandle(3)))));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (PlayerName(4) + (StringExternal(&quot;Param/Value/E2AE18A4&quot;) + StringToText(PlayerHandle(4)))));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GetHandle_Init () {
                gt_GetHandle = TriggerCreate(&quot;gt_GetHandle_Func&quot;);
                TriggerAddEventChatMessage(gt_GetHandle, c_playerAny, &quot;-Handle&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Number of Unit Deaths
            //--------------------------------------------------------------------------------------------------
            bool gt_NumberofUnitDeaths_Func (bool testConds, bool runActions) {
                // Actions
                int slot;
                if (!runActions) {
                    return true;
                }
               // slot = RegionFromId(241);
                //for(slot = 0; slot &lt;=11; slot +=1){
               // UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaAll, (StringExternal(&quot;Param/Value/CCBC876F&quot;) + StringToText(&quot; slot: &quot;) + IntToText(slot) +StringToText(&quot; is &quot;) + IntToText(gv_unitKills[slot])));
               // }
              //UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/CCBC876F&quot;) + IntToText(gv_unitKills[1])));
               //UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/506A51FE&quot;) + IntToText(gv_unitKills[3])));
               //UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal(slot));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_NumberofUnitDeaths_Init () {
                int slot = 0;
                gt_NumberofUnitDeaths = TriggerCreate(&quot;gt_NumberofUnitDeaths_Func&quot;);
                TriggerAddEventChatMessage(gt_NumberofUnitDeaths, c_playerAny, &quot;-kills&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Weapons
            //--------------------------------------------------------------------------------------------------
            bool gt_Weapons_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, IntToText(UnitWeaponCount(gv_players[(EventPlayer() - 1)].dragon)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Weapons_Init () {
                gt_Weapons = TriggerCreate(&quot;gt_Weapons_Func&quot;);
                TriggerAddEventChatMessage(gt_Weapons, c_playerAny, &quot;-wp&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Get Money
            //--------------------------------------------------------------------------------------------------
            bool gt_GetMoney_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 1000000);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GetMoney_Init () {
                gt_GetMoney = TriggerCreate(&quot;gt_GetMoney_Func&quot;);
                TriggerAddEventChatMessage(gt_GetMoney, c_playerAny, &quot;-Minerals&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: View Ending
            //--------------------------------------------------------------------------------------------------
            bool gt_ViewEnding_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupAdd(gv_playerswatchingendingcinematic, EventPlayer());
                TriggerExecute(gt_EndingCinematic, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ViewEnding_Init () {
                gt_ViewEnding = TriggerCreate(&quot;gt_ViewEnding_Func&quot;);
                TriggerAddEventChatMessage(gt_ViewEnding, c_playerAny, &quot;-Ending&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: 50 Shades of Gray
            //--------------------------------------------------------------------------------------------------
            bool gt__50ShadesofGray_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/3C95F15D&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt__50ShadesofGray_Init () {
                gt__50ShadesofGray = TriggerCreate(&quot;gt__50ShadesofGray_Func&quot;);
                TriggerAddEventChatMessage(gt__50ShadesofGray, c_playerAny, &quot;50 Shades&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Get Money 2
            //--------------------------------------------------------------------------------------------------
            bool gt_GetMoney2_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 1000);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GetMoney2_Init () {
                gt_GetMoney2 = TriggerCreate(&quot;gt_GetMoney2_Func&quot;);
                TriggerAddEventChatMessage(gt_GetMoney2, c_playerAny, &quot;-Vespene&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Get Money 3
            //--------------------------------------------------------------------------------------------------
            bool gt_GetMoney3_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperAdd, 1000);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_GetMoney3_Init () {
                gt_GetMoney3 = TriggerCreate(&quot;gt_GetMoney3_Func&quot;);
                TriggerAddEventChatMessage(gt_GetMoney3, c_playerAny, &quot;-Shards&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Fastest
            //--------------------------------------------------------------------------------------------------
            bool gt_Fastest_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                GameSetSpeedValue(c_gameSpeedFaster);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_Fastest_Init () {
                gt_Fastest = TriggerCreate(&quot;gt_Fastest_Func&quot;);
                TriggerAddEventChatMessage(gt_Fastest, c_playerAny, &quot;-Fastest&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Max Stats
            //--------------------------------------------------------------------------------------------------
            bool gt_MaxStats_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tempAgility;
                int lv_tempDexterity;
                int lv_tempIntelligence;
                int lv_tempStrength;
                int lv_tempVitality;
                int lv_tempReborn;
                int lv_triggeringPlayerIndex;
                int lv_triggeringPlayer;
                
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (EventPlayer() - 1);
                lv_triggeringPlayer = EventPlayer();
                gv_players[(EventPlayer() - 1)].stats.agility = 100;
                gv_players[(EventPlayer() - 1)].stats.intelligence = 500;
                gv_players[(EventPlayer() - 1)].stats.dexterity = 500;
                gv_players[(EventPlayer() - 1)].stats.strength = 500;
                gv_players[(EventPlayer() - 1)].stats.vitality = 500;
                gv_players[(EventPlayer() - 1)].stats.attributePoints = 0.0;
                lv_tempVitality = gv_players[lv_triggeringPlayerIndex].stats.vitality;
                lv_tempStrength = gv_players[lv_triggeringPlayerIndex].stats.strength;
                lv_tempIntelligence = gv_players[lv_triggeringPlayerIndex].stats.intelligence;
                lv_tempDexterity = gv_players[lv_triggeringPlayerIndex].stats.dexterity;
                lv_tempAgility = gv_players[lv_triggeringPlayerIndex].stats.agility;
                while ((lv_tempVitality &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_triggeringPlayerIndex].dragon, &quot;AddVitality&quot;, lv_triggeringPlayer, 1);
                    lv_tempVitality = (lv_tempVitality - 1);
                }
                while ((lv_tempStrength &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_triggeringPlayerIndex].dragon, &quot;AddStrength&quot;, lv_triggeringPlayer, 1);
                    lv_tempStrength = (lv_tempStrength - 1);
                }
                while ((lv_tempIntelligence &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_triggeringPlayerIndex].dragon, &quot;AddIntelligence&quot;, lv_triggeringPlayer, 1);
                    lv_tempIntelligence = (lv_tempIntelligence - 1);
                }
                while ((lv_tempDexterity &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_triggeringPlayerIndex].dragon, &quot;AddDexterity&quot;, lv_triggeringPlayer, 1);
                    lv_tempDexterity = (lv_tempDexterity - 1);
                }
                while ((lv_tempAgility &gt; 0)) {
                    UnitBehaviorAddPlayer(gv_players[lv_triggeringPlayerIndex].dragon, &quot;AddAgility&quot;, lv_triggeringPlayer, 1);
                    lv_tempAgility = (lv_tempAgility - 1);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MaxStats_Init () {
                gt_MaxStats = TriggerCreate(&quot;gt_MaxStats_Func&quot;);
                TriggerAddEventChatMessage(gt_MaxStats, c_playerAny, &quot;Adonis DNA&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Drop All
            //--------------------------------------------------------------------------------------------------
            bool gt_DropAll_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitGroupLoopBegin(UnitInventoryGroup(gv_players[(EventPlayer() - 1)].dragon));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitCreate(1, UnitGetType(UnitGroupLoopCurrent()), 0, EventPlayer(), UnitGetPosition(gv_players[(EventPlayer() - 1)].dragon), libNtve_gf_RandomAngle());
                    UnitInventoryRemove(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DropAll_Init () {
                gt_DropAll = TriggerCreate(&quot;gt_DropAll_Func&quot;);
                TriggerAddEventChatMessage(gt_DropAll, c_playerAny, &quot;-Drop All&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Unit
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnUnit_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_UnitCreateFacingPoint(1, (StringSub(EventChatMessage(false), 8, StringLength(EventChatMessage(false)))), 0, EventPlayer(), UnitGetPosition(gv_players[(EventPlayer() - 1)].dragon), UnitGetPosition(gv_players[(EventPlayer() - 1)].dragon));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/FAA40E97&quot;) + StringToText(StringSub(EventChatMessage(false), 8, StringLength(EventChatMessage(false))))));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnUnit_Init () {
                gt_SpawnUnit = TriggerCreate(&quot;gt_SpawnUnit_Func&quot;);
                TriggerAddEventChatMessage(gt_SpawnUnit, c_playerAny, &quot;-Spawn&quot;, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Enemy Unit
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnEnemyUnit_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_UnitCreateFacingPoint(1, (StringSub(EventChatMessage(false), 9, StringLength(EventChatMessage(false)))), 0, 15, UnitGetPosition(gv_players[(EventPlayer() - 1)].dragon), UnitGetPosition(gv_players[(EventPlayer() - 1)].dragon));
                if ((UnitGetType(UnitLastCreated()) == &quot;Nosferatu&quot;)) {
                    gv_nosferatu = UnitLastCreated();
                    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_nosferatu), 10.0, Color(25.10, 0.00, 0.00));
                    TriggerEnable(gt_NosferatusLogic, true);
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/392CAE58&quot;) + StringToText(StringSub(EventChatMessage(false), 8, StringLength(EventChatMessage(false))))));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnEnemyUnit_Init () {
                gt_SpawnEnemyUnit = TriggerCreate(&quot;gt_SpawnEnemyUnit_Func&quot;);
                TriggerAddEventChatMessage(gt_SpawnEnemyUnit, c_playerAny, &quot;-ESpawn&quot;, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Mass Enemy Unit
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnMassEnemyUnit_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_UnitCreateFacingPoint(50, (StringSub(EventChatMessage(false), 10, StringLength(EventChatMessage(false)))), c_unitCreateIgnorePlacement, 15, UnitGetPosition(gv_players[(EventPlayer() - 1)].dragon), UnitGetPosition(gv_players[(EventPlayer() - 1)].dragon));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnMassEnemyUnit_Init () {
                gt_SpawnMassEnemyUnit = TriggerCreate(&quot;gt_SpawnMassEnemyUnit_Func&quot;);
                TriggerAddEventChatMessage(gt_SpawnMassEnemyUnit, c_playerAny, &quot;-MESpawn&quot;, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Spawn Item
            //--------------------------------------------------------------------------------------------------
            bool gt_SpawnItem_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, (StringSub(EventChatMessage(false), 9, StringLength(EventChatMessage(false)))));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SpawnItem_Init () {
                gt_SpawnItem = TriggerCreate(&quot;gt_SpawnItem_Func&quot;);
                TriggerAddEventChatMessage(gt_SpawnItem, c_playerAny, &quot;-Aquire &quot;, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Melee Buff Stacks
            //--------------------------------------------------------------------------------------------------
            bool gt_MeleeBuffStacks_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/C2477670&quot;) + IntToText(UnitBehaviorCount(gv_players[(EventPlayer() - 1)].dragon, &quot;StrengthoftheDragon&quot;))));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/98095420&quot;) + IntToText(UnitBehaviorCount(gv_players[(EventPlayer() - 1)].dragon, &quot;Zeal&quot;))));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/EBE16544&quot;) + IntToText(UnitBehaviorCount(gv_players[(EventPlayer() - 1)].dragon, &quot;VampiricTendencies&quot;))));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal(&quot;Param/Value/711767EF&quot;) + IntToText(UnitBehaviorCount(gv_players[(EventPlayer() - 1)].dragon, &quot;CriticalCrepitus&quot;))));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MeleeBuffStacks_Init () {
                gt_MeleeBuffStacks = TriggerCreate(&quot;gt_MeleeBuffStacks_Func&quot;);
                TriggerAddEventChatMessage(gt_MeleeBuffStacks, c_playerAny, &quot;-Melee Buff Stacks&quot;, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Num Buffs
            //--------------------------------------------------------------------------------------------------
            bool gt_NumBuffs_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, IntToText(UnitBehaviorCountAll(gv_players[(EventPlayer() - 1)].dragon)));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_NumBuffs_Init () {
                gt_NumBuffs = TriggerCreate(&quot;gt_NumBuffs_Func&quot;);
                TriggerAddEventChatMessage(gt_NumBuffs, c_playerAny, &quot;-Num Buffs&quot;, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: 999 Talents
            //--------------------------------------------------------------------------------------------------
            bool gt__999Talents_Func (bool testConds, bool runActions) {
                
                // Conditions
                if (testConds) {
                    if (!gf_IsAdmin(EventPlayer())) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lib1_gf_GrantTalentPoints(999, EventPlayer());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt__999Talents_Init () {
                gt__999Talents = TriggerCreate(&quot;gt__999Talents_Func&quot;);
                TriggerAddEventChatMessage(gt__999Talents, c_playerAny, &quot;-999 Talents&quot;, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Player Leaves
            //--------------------------------------------------------------------------------------------------
            bool gt_PlayerLeaves_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_triggeringPlayerIndex;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_triggeringPlayerIndex = (EventPlayer() - 1);
                PlayerGroupRemove(gv_humanPlayers, EventPlayer());
                UnitRemove(gv_players[lv_triggeringPlayerIndex].dragon);
                PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, 1, false);
                PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, 2, false);
                PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, 3, false);
                PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, 4, false);
                PlayerSetAlliance(1, c_allianceIdSpend, EventPlayer(), false);
                PlayerSetAlliance(2, c_allianceIdSpend, EventPlayer(), false);
                PlayerSetAlliance(3, c_allianceIdSpend, EventPlayer(), false);
                PlayerSetAlliance(4, c_allianceIdSpend, EventPlayer(), false);
                libNtve_gf_SetAlliance(EventPlayer(), 1, libNtve_ge_AllianceSetting_Enemy);
                libNtve_gf_SetAlliance(EventPlayer(), 2, libNtve_ge_AllianceSetting_Enemy);
                libNtve_gf_SetAlliance(EventPlayer(), 3, libNtve_ge_AllianceSetting_Enemy);
                libNtve_gf_SetAlliance(EventPlayer(), 4, libNtve_ge_AllianceSetting_Enemy);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 0);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PlayerLeaves_Init () {
                gt_PlayerLeaves = TriggerCreate(&quot;gt_PlayerLeaves_Func&quot;);
                TriggerAddEventPlayerLeft(gt_PlayerLeaves, c_playerAny, c_gameResultUndecided);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Open Talent Menu
            //--------------------------------------------------------------------------------------------------
            bool gt_OpenTalentMenu_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                lib1_gf_ShowHideTalentTree(EventPlayer());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_OpenTalentMenu_Init () {
                gt_OpenTalentMenu = TriggerCreate(&quot;gt_OpenTalentMenu_Func&quot;);
                TriggerAddEventUnitAbility(gt_OpenTalentMenu, null, AbilityCommand(&quot;Talents&quot;, 0), c_unitAbilStageAll, false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Reset Talent Build
            //--------------------------------------------------------------------------------------------------
            bool gt_ResetTalentBuild_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gf_ResetTalentBuildandVariables(EventPlayer());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ResetTalentBuild_Init () {
                gt_ResetTalentBuild = TriggerCreate(&quot;gt_ResetTalentBuild_Func&quot;);
                TriggerAddEventChatMessage(gt_ResetTalentBuild, c_playerAny, &quot;-Reset Talents&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Inventory Tip
            //--------------------------------------------------------------------------------------------------
            bool gt_InventoryTip_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/E9037991&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/60A9CAEA&quot;), StringExternal(&quot;Param/Value/538D899A&quot;), &quot;Dragon Songs\\btn-ability-protoss-phaseshift-color.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_InventoryTip_Init () {
                gt_InventoryTip = TriggerCreate(&quot;gt_InventoryTip_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Weapon Tip
            //--------------------------------------------------------------------------------------------------
            bool gt_WeaponTip_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/D6E95134&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/FA962EAC&quot;), StringExternal(&quot;Param/Value/2A26AE67&quot;), &quot;Assets\\Textures\\btn-ability-protoss-phasemine-zeratul.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_WeaponTip_Init () {
                gt_WeaponTip = TriggerCreate(&quot;gt_WeaponTip_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Dragon&apos;s Nest Tip
            //--------------------------------------------------------------------------------------------------
            bool gt_DragonsNestTip_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/AE58E1B5&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/B044177A&quot;), StringExternal(&quot;Param/Value/66753AD2&quot;), &quot;Dragon Songs\\btn-ability-zerg-consume-red.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_DragonsNestTip_Init () {
                gt_DragonsNestTip = TriggerCreate(&quot;gt_DragonsNestTip_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Reset Stats Tip
            //--------------------------------------------------------------------------------------------------
            bool gt_ResetStatsTip_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/41120C2F&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/DED3B997&quot;), StringExternal(&quot;Param/Value/A3EAD122&quot;), &quot;Assets\\Textures\\btn-ability-terran-heal.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ResetStatsTip_Init () {
                gt_ResetStatsTip = TriggerCreate(&quot;gt_ResetStatsTip_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Reset Talents Tip
            //--------------------------------------------------------------------------------------------------
            bool gt_ResetTalentsTip_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/4C6B4127&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/569516A0&quot;), StringExternal(&quot;Param/Value/8E5585ED&quot;), &quot;Assets\\Textures\\btn-research-zerg-regenerativebio-steel.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ResetTalentsTip_Init () {
                gt_ResetTalentsTip = TriggerCreate(&quot;gt_ResetTalentsTip_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Reset Quests Tip
            //--------------------------------------------------------------------------------------------------
            bool gt_ResetQuestsTip_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/DF29FD45&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/EBA3B130&quot;), StringExternal(&quot;Param/Value/9B2FC085&quot;), &quot;Assets\\Textures\\ui_objectives_checkmark.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ResetQuestsTip_Init () {
                gt_ResetQuestsTip = TriggerCreate(&quot;gt_ResetQuestsTip_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Healing Water Tip
            //--------------------------------------------------------------------------------------------------
            bool gt_HealingWaterTip_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/E3BD2BD0&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/A26AEC4D&quot;), StringExternal(&quot;Param/Value/10D8A151&quot;), &quot;Assets\\Textures\\defaultwater37.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HealingWaterTip_Init () {
                gt_HealingWaterTip = TriggerCreate(&quot;gt_HealingWaterTip_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Vespene Gas Tip
            //--------------------------------------------------------------------------------------------------
            bool gt_VespeneGasTip_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/5AE1DD5C&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/20CF433A&quot;), StringExternal(&quot;Param/Value/45B8D629&quot;), &quot;Assets\\Textures\\wireframe-general-vespenegeyser.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_VespeneGasTip_Init () {
                gt_VespeneGasTip = TriggerCreate(&quot;gt_VespeneGasTip_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Evolutions Tip
            //--------------------------------------------------------------------------------------------------
            bool gt_EvolutionsTip_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/EA2E6B2A&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/A6FEB956&quot;), StringExternal(&quot;Param/Value/7A9A7981&quot;), &quot;Assets\\Textures\\hybridzergportrait_static.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EvolutionsTip_Init () {
                gt_EvolutionsTip = TriggerCreate(&quot;gt_EvolutionsTip_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Armor Tip
            //--------------------------------------------------------------------------------------------------
            bool gt_ArmorTip_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/8683FADF&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/55A4A235&quot;), StringExternal(&quot;Param/Value/180EC142&quot;), &quot;Assets\\Textures\\btn-upgrade-zerg-buildingarmor.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ArmorTip_Init () {
                gt_ArmorTip = TriggerCreate(&quot;gt_ArmorTip_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Saving/Loading Tip
            //--------------------------------------------------------------------------------------------------
            bool gt_SavingLoadingTip_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/F902E69D&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/C9ED1F57&quot;), StringExternal(&quot;Param/Value/3908211E&quot;), &quot;Assets\\Textures\\ui-editoricon-triggercategories_bank.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SavingLoadingTip_Init () {
                gt_SavingLoadingTip = TriggerCreate(&quot;gt_SavingLoadingTip_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Music Credits Tip
            //--------------------------------------------------------------------------------------------------
            bool gt_MusicCreditsTip_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/9F4902CB&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/4A2C06AE&quot;), StringExternal(&quot;Param/Value/3D31D0A2&quot;), &quot;Assets\\Textures\\ui-editoricon-data_types_soundtracks.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MusicCreditsTip_Init () {
                gt_MusicCreditsTip = TriggerCreate(&quot;gt_MusicCreditsTip_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Awesome People Tip
            //--------------------------------------------------------------------------------------------------
            bool gt_AwesomePeopleTip_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/B3A3FC2B&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/84E73369&quot;), StringExternal(&quot;Param/Value/5EE14777&quot;), &quot;Assets\\Textures\\btn-unit-protoss-archon.dds&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_AwesomePeopleTip_Init () {
                gt_AwesomePeopleTip = TriggerCreate(&quot;gt_AwesomePeopleTip_Func&quot;);
                TriggerAddEventMapInit(gt_AwesomePeopleTip);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Stash Location Setup
            //--------------------------------------------------------------------------------------------------
            bool gt_StashLocationSetup_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_stashLocation[0] = PointFromId(4835);
                gv_stashLocation[1] = PointFromId(4836);
                gv_stashLocation[2] = PointFromId(4837);
                gv_stashLocation[3] = PointFromId(4838);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_StashLocationSetup_Init () {
                gt_StashLocationSetup = TriggerCreate(&quot;gt_StashLocationSetup_Func&quot;);
                TriggerAddEventMapInit(gt_StashLocationSetup);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Load Shards
            //--------------------------------------------------------------------------------------------------
            bool gt_LoadShards_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((PlayerStatus(1) == c_playerStatusActive)) {
                    while (gv_players[0].banks.accessing) {
                        Wait(1.0, c_timeGame);
                    }
                    gv_players[0].banks.accessing = true;
                    gv_shards[0] = (BankValueGetAsInt(gv_players[0].banks.dragonBank, &quot;Shards&quot;, PlayerHandle(1)) / 1);
                    PlayerModifyPropertyInt(1, c_playerPropCustom, c_playerPropOperSetTo, gv_shards[0]);
                    gv_players[0].banks.accessing = false;
                }
                if ((PlayerStatus(2) == c_playerStatusActive)) {
                    while (gv_players[1].banks.accessing) {
                        Wait(1.0, c_timeGame);
                    }
                    gv_players[1].banks.accessing = true;
                    gv_shards[1] = (BankValueGetAsInt(gv_players[1].banks.dragonBank, &quot;Shards&quot;, PlayerHandle(2)) / 1);
                    PlayerModifyPropertyInt(2, c_playerPropCustom, c_playerPropOperSetTo, gv_shards[1]);
                    gv_players[1].banks.accessing = false;
                }
                if ((PlayerStatus(3) == c_playerStatusActive)) {
                    while (gv_players[2].banks.accessing) {
                        Wait(1.0, c_timeGame);
                    }
                    gv_players[2].banks.accessing = true;
                    gv_shards[2] = (BankValueGetAsInt(gv_players[2].banks.dragonBank, &quot;Shards&quot;, PlayerHandle(3)) / 1);
                    PlayerModifyPropertyInt(3, c_playerPropCustom, c_playerPropOperSetTo, gv_shards[2]);
                    gv_players[2].banks.accessing = false;
                }
                if ((PlayerStatus(4) == c_playerStatusActive)) {
                    while (gv_players[3].banks.accessing) {
                        Wait(1.0, c_timeGame);
                    }
                    gv_players[3].banks.accessing = true;
                    gv_shards[3] = (BankValueGetAsInt(gv_players[3].banks.dragonBank, &quot;Shards&quot;, PlayerHandle(4)) / 1);
                    PlayerModifyPropertyInt(4, c_playerPropCustom, c_playerPropOperSetTo, gv_shards[3]);
                    gv_players[3].banks.accessing = false;
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LoadShards_Init () {
                gt_LoadShards = TriggerCreate(&quot;gt_LoadShards_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Time of day Dialog
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateTimeofdayDialog_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                DialogCreate(200, 75, c_anchorTop, 0, 0, true);
                gv_timeofDayDialog = DialogLastCreated();
                libNtve_gf_CreateDialogItemLabel(gv_timeofDayDialog, 75, 50, c_anchorLeft, 40, 20, StringExternal(&quot;Param/Value/0FFF5ADF&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_CreateDialogItemLabel(gv_timeofDayDialog, 75, 50, c_anchorLeft, 100, 20, StringExternal(&quot;Param/Value/DBCFC935&quot;), Color(RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0)), false, 2.0);
                gv_timeofDayDialogLabel = DialogControlLastCreated();
                DialogSetVisible(gv_timeofDayDialog, PlayerGroupAll(), true);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateTimeofdayDialog_Init () {
                gt_CreateTimeofdayDialog = TriggerCreate(&quot;gt_CreateTimeofdayDialog_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Time of Day Tick
            //--------------------------------------------------------------------------------------------------
            bool gt_TimeofDayTick_Func (bool testConds, bool runActions) {
                int autoEF6FEC5D_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_minutes += 1;
                if ((gv_minutes &gt;= 60)) {
                    PlayerGroupLoopBegin(gv_humanPlayers);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 0));
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), &quot;TimePenalty&quot;, PlayerGroupLoopCurrent(), 1);
                        }
                        UnitGroupLoopEnd();
                    }
                    PlayerGroupLoopEnd();
                    gv_minutes = 0;
                    autoEF6FEC5D_val = gv_hours;
                    if (autoEF6FEC5D_val == 0) {
                        GameTimeOfDaySet(&quot;00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 1) {
                        GameTimeOfDaySet(&quot;01:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 2) {
                        GameTimeOfDaySet(&quot;02:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 3) {
                        GameTimeOfDaySet(&quot;03:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 4) {
                        GameTimeOfDaySet(&quot;04:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 5) {
                        GameTimeOfDaySet(&quot;05:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 6) {
                        GameTimeOfDaySet(&quot;06:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 7) {
                        GameTimeOfDaySet(&quot;07:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 8) {
                        GameTimeOfDaySet(&quot;08:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 9) {
                        GameTimeOfDaySet(&quot;09:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 10) {
                        GameTimeOfDaySet(&quot;10:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 11) {
                        GameTimeOfDaySet(&quot;11:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 12) {
                        GameTimeOfDaySet(&quot;12:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 13) {
                        GameTimeOfDaySet(&quot;13:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 14) {
                        GameTimeOfDaySet(&quot;14:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 15) {
                        GameTimeOfDaySet(&quot;15:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 16) {
                        GameTimeOfDaySet(&quot;16:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 17) {
                        GameTimeOfDaySet(&quot;17:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 18) {
                        GameTimeOfDaySet(&quot;18:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 19) {
                        GameTimeOfDaySet(&quot;19:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 20) {
                        GameTimeOfDaySet(&quot;20:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 21) {
                        GameTimeOfDaySet(&quot;21:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 22) {
                        GameTimeOfDaySet(&quot;22:00:00&quot;);
                        gv_hours += 1;
                    }
                    else if (autoEF6FEC5D_val == 23) {
                        GameTimeOfDaySet(&quot;23:00:00&quot;);
                        gv_hours = 0;
                        gv_days += 1;
                    }
                    else {
                        GameTimeOfDaySet(&quot;00&quot;);
                        gv_hours = 0;
                    }
                }
                if ((gv_minutes &lt; 10)) {
                    gv_timeofDayDialogLabelText = (IntToText(gv_hours) + (StringExternal(&quot;Param/Value/A5CB9737&quot;) + IntToText(gv_minutes)));
                }
                else {
                    gv_timeofDayDialogLabelText = (IntToText(gv_hours) + (StringExternal(&quot;Param/Value/74673B04&quot;) + IntToText(gv_minutes)));
                }
                libNtve_gf_SetDialogItemText(gv_timeofDayDialogLabel, gv_timeofDayDialogLabelText, PlayerGroupAll());
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_TimeofDayTick_Init () {
                gt_TimeofDayTick = TriggerCreate(&quot;gt_TimeofDayTick_Func&quot;);
                TriggerAddEventTimePeriodic(gt_TimeofDayTick, 1.0, c_timeReal);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Up Players
            //--------------------------------------------------------------------------------------------------
            bool gt_SetUpPlayers_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tempAgility;
                int lv_tempDexterity;
                int lv_tempIntelligence;
                int lv_tempStrength;
                int lv_tempVitality;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerQueueEnter();
                gf_InitializeOne();
                gf_InitializePlayers();
                gf_InitializeTwo();
                TriggerQueueExit();
                Wait(1.0, c_timeGame);
                TriggerQueueEnter();
                gf_InitializeThree();
                TriggerExecute(gt_IntroCinematic, false, true);
                TextTagCreate(StringExternal(&quot;Param/Value/6FCB7651&quot;), 24, RegionGetCenter(RegionFromId(187)), 1.0, true, true, PlayerGroupAll());
                TextTagCreate(StringExternal(&quot;Param/Value/4ACD68FC&quot;), 24, RegionGetCenter(RegionFromId(188)), 1.0, true, true, PlayerGroupAll());
                TriggerQueueExit();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetUpPlayers_Init () {
                gt_SetUpPlayers = TriggerCreate(&quot;gt_SetUpPlayers_Func&quot;);
                TriggerAddEventTimeElapsed(gt_SetUpPlayers, 0.01, c_timeGame);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set up Regions
            //--------------------------------------------------------------------------------------------------
            bool gt_SetupRegions_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_SetWastelandRegions, true, false);
                TriggerExecute(gt_SetupCretonTranchRegions, true, false);
                TriggerExecute(gt_SetupCretonRegions, true, false);
                TriggerExecute(gt_SetVerbotenForestRegions, true, false);
                TriggerExecute(gt_SetVerbotenInfestationRegions, true, false);
                TriggerExecute(gt_SetWastelandRegions, true, false);
                TriggerExecute(gt_SetRelamyCanyonRegions, true, false);
                TriggerExecute(gt_SetRelamyGorgeRegions, true, false);
                TriggerExecute(gt_SetRelamyHillsRegions, true, false);
                TriggerExecute(gt_SetRelamyPassRegions, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetupRegions_Init () {
                gt_SetupRegions = TriggerCreate(&quot;gt_SetupRegions_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set up Tips
            //--------------------------------------------------------------------------------------------------
            bool gt_SetupTips_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                TriggerExecute(gt_ArmorTip, true, false);
                TriggerExecute(gt_DragonsNestTip, true, false);
                TriggerExecute(gt_EvolutionsTip, true, false);
                TriggerExecute(gt_HealingWaterTip, true, false);
                TriggerExecute(gt_InventoryTip, true, false);
                TriggerExecute(gt_ResetQuestsTip, true, false);
                TriggerExecute(gt_ResetStatsTip, true, false);
                TriggerExecute(gt_ResetTalentsTip, true, false);
                TriggerExecute(gt_VespeneGasTip, true, false);
                TriggerExecute(gt_WeaponTip, true, false);
                TriggerExecute(gt_SavingLoadingTip, true, false);
                TriggerExecute(gt_MusicCreditsTip, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetupTips_Init () {
                gt_SetupTips = TriggerCreate(&quot;gt_SetupTips_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Up Talent Tree
            //--------------------------------------------------------------------------------------------------
            bool gt_SetUpTalentTree_Func (bool testConds, bool runActions) {
                string autoB3189529_val;
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    autoB3189529_val = GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent());
                    if (autoB3189529_val == &quot;0001&quot;) {
                        lib1_gf_CreateTalentTree(PlayerGroupLoopCurrent(), StringExternal(&quot;Param/Value/0379B895&quot;), lib1_ge_ColorScheme_Red, 3, &quot;Defensive,General,Offensive&quot;, 3, 4, lib1_ge_PointsPerTier__5);
                    }
                    else if (autoB3189529_val == &quot;0002&quot;) {
                        lib1_gf_CreateTalentTree(PlayerGroupLoopCurrent(), StringExternal(&quot;Param/Value/C001C4C0&quot;), lib1_ge_ColorScheme_Blue, 3, &quot;Defensive,General,Offensive&quot;, 3, 4, lib1_ge_PointsPerTier__5);
                    }
                    else {
                    }
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 1, 1, lib1_ge_TalentPrerequisite_None, &quot;HeartoftheDragon&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/D7FEAC29&quot;), 10, &quot;Assets\\Textures\\sm_hml_heartbeat_diff.dds&quot;, StringExternal(&quot;Param/Value/1C4A2F4D&quot;), 10.0, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 2, 1, lib1_ge_TalentPrerequisite_None, &quot;IronScales&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/314749A3&quot;), 10, &quot;Assets\\Textures\\btn-upgrade-zerg-groundcarapace-level1.dds&quot;, StringExternal(&quot;Param/Value/7174AC2B&quot;), 0.5, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 3, 1, lib1_ge_TalentPrerequisite_None, &quot;SpiritoftheDragon&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/9B6ADBAE&quot;), 10, &quot;Assets\\Textures\\btn-tips-crystal.dds&quot;, StringExternal(&quot;Param/Value/1A784046&quot;), 10.0, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 1, 2, lib1_ge_TalentPrerequisite_Up, &quot;InternalRegeneration&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/7F798500&quot;), 10, &quot;Assets\\Textures\\btn-upgrade-zerg-enduringcorruption.dds&quot;, StringExternal(&quot;Param/Value/4C774E83&quot;), 0.1, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 2, 2, lib1_ge_TalentPrerequisite_Up, &quot;ActiveArmor&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/AB2A4C29&quot;), 10, &quot;Assets\\Textures\\btn-ability-protoss-feedback-color.dds&quot;, StringExternal(&quot;Param/Value/00C54C9E&quot;), 10.0, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 3, 2, lib1_ge_TalentPrerequisite_Up, &quot;MetabolicProcessing&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/4C468C11&quot;), 10, &quot;Assets\\Textures\\btn-tips-biosample.dds&quot;, StringExternal(&quot;Param/Value/4E41B165&quot;), 0.1, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 2, 3, lib1_ge_TalentPrerequisite_Up, &quot;SpikedScales&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/9086A585&quot;), 10, &quot;Assets\\Textures\\btn-upgrade-zerg-groovedspines.dds&quot;, StringExternal(&quot;Param/Value/DA98CBA1&quot;), 0.5, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 3, 3, lib1_ge_TalentPrerequisite_Up, &quot;AbsorbMana&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/AFB08C57&quot;), 10, &quot;Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel3.dds&quot;, StringExternal(&quot;Param/Value/80AC0CB7&quot;), 1.0, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 2, 4, lib1_ge_TalentPrerequisite_Up, &quot;Retaliation&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/F954CA1E&quot;), 10, &quot;Assets\\Textures\\btn-ability-protoss-gravitonbeam-color.dds&quot;, StringExternal(&quot;Param/Value/F53F5A37&quot;), 1.0, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 1, 3, 4, lib1_ge_TalentPrerequisite_Up, &quot;RealmSwitch&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/44A74CF3&quot;), 10, &quot;Dragon Songs\\btn-ability-protoss-blink-improved-color.dds&quot;, StringExternal(&quot;Param/Value/E2CCFAE5&quot;), 0.5, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 2, 1, 1, lib1_ge_TalentPrerequisite_None, &quot;EagleEyes&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/28BE5039&quot;), 10, &quot;Assets\\Textures\\zergdroneeyesemmisive.dds&quot;, StringExternal(&quot;Param/Value/85A14F42&quot;), 0.2, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 2, 2, 1, lib1_ge_TalentPrerequisite_None, &quot;GreedisGood&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/08D78300&quot;), 10, &quot;Dragon Songs\\btn-custom-treasure.dds&quot;, StringExternal(&quot;Param/Value/47238D0C&quot;), 5.0, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 2, 3, 1, lib1_ge_TalentPrerequisite_None, &quot;MuscleEnhancement&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/E1B1A405&quot;), 10, &quot;Assets\\Textures\\btn-ability-protoss-charge-color.dds&quot;, StringExternal(&quot;Param/Value/58E4D210&quot;), 0.1, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 2, 1, 2, lib1_ge_TalentPrerequisite_Up, &quot;Foresight&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/CD32BD07&quot;), 10, &quot;Assets\\Textures\\btn-tips-counter.dds&quot;, StringExternal(&quot;Param/Value/A462C35B&quot;), 0.6, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 2, 2, 2, lib1_ge_TalentPrerequisite_Up, &quot;QuickLearner&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/C9AA280D&quot;), 10, &quot;Dragon Songs\\btn-ability-zerg-domination-color.dds&quot;, StringExternal(&quot;Param/Value/21824BCC&quot;), 0.5, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 1, 1, lib1_ge_TalentPrerequisite_None, &quot;StrengthoftheDragon&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/FDB7A558&quot;), 10, &quot;Assets\\Textures\\btn-upgrade-zerg-meleeattacks-leve3.dds&quot;, StringExternal(&quot;Param/Value/36A2C19B&quot;), 1.0, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 2, 1, lib1_ge_TalentPrerequisite_None, &quot;Headshot&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/D567090E&quot;), 10, &quot;Dragon Songs\\btn-ability-zerg-plague-color.dds&quot;, StringExternal(&quot;Param/Value/3E74CB2C&quot;), 1.0, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 3, 1, lib1_ge_TalentPrerequisite_None, &quot;MindoftheDragon&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/8C4A7447&quot;), 10, &quot;Assets\\Textures\\btn-upgrade-zerg-pathogenglands.dds&quot;, StringExternal(&quot;Param/Value/AAA060AC&quot;), 1.0, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 1, 2, lib1_ge_TalentPrerequisite_Up, &quot;Zeal&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/1300303A&quot;), 10, &quot;Assets\\Textures\\btn-upgrade-zerg-anabolicsynthesis.dds&quot;, StringExternal(&quot;Param/Value/73406C8B&quot;), 1.0, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 2, 2, lib1_ge_TalentPrerequisite_Up, &quot;ElevatedAccuracy&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/AAC9DC9E&quot;), 10, &quot;Dragon Songs\\btn-ability-protoss-sightofadun.dds&quot;, StringExternal(&quot;Param/Value/DE4DF04F&quot;), 5.0, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 3, 2, lib1_ge_TalentPrerequisite_Up, &quot;Rage&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/1C7BBA70&quot;), 10, &quot;Assets\\Textures\\btn-upgrade-zerg-peristalsis.dds&quot;, StringExternal(&quot;Param/Value/649D4370&quot;), 0.25, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 1, 3, lib1_ge_TalentPrerequisite_Up, &quot;VampiricTendencies&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/92BC9977&quot;), 10, &quot;Assets\\Textures\\btn-ability-zerg-corruption-color.dds&quot;, StringExternal(&quot;Param/Value/FF85D4A6&quot;), 0.1, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 2, 3, lib1_ge_TalentPrerequisite_Up, &quot;StickyShot&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/D8F2835B&quot;), 10, &quot;Assets\\Textures\\btn-ability-zerg-generatecreepstop-color.dds&quot;, StringExternal(&quot;Param/Value/D1B87C73&quot;), 0.5, 5.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 3, 3, lib1_ge_TalentPrerequisite_Up, &quot;PowerOverwhelming&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/9961216D&quot;), 10, &quot;Dragon Songs\\btn-ability-terran-psidisruption-color.dds&quot;, StringExternal(&quot;Param/Value/52E05A55&quot;), 0.1, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 1, 4, lib1_ge_TalentPrerequisite_Up, &quot;CriticalCrepitus&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/B83D31A3&quot;), 10, &quot;Assets\\Textures\\btn-ability-zerg-explode-color.dds&quot;, StringExternal(&quot;Param/Value/9572BF6F&quot;), 5.0, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 2, 4, lib1_ge_TalentPrerequisite_Up, &quot;DuelWield&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/FA2CE968&quot;), 10, &quot;Assets\\Textures\\btn-ability-zerg-contaminate-color.dds&quot;, StringExternal(&quot;Param/Value/E3059D1E&quot;), 0.5, 0.0, null, null);
                    lib1_gf_CreateTalentButton(PlayerGroupLoopCurrent(), 3, 3, 4, lib1_ge_TalentPrerequisite_Up, &quot;DarkDissulto&quot;, lib1_ge_TalentType_Passive, StringExternal(&quot;Param/Value/645D301F&quot;), 10, &quot;Assets\\Textures\\btn-ability-zerg-generatecreep-color.dds&quot;, StringExternal(&quot;Param/Value/3E5A2871&quot;), 2.5, 0.0, null, null);
                    lib1_gf_GrantTalentPoints(gv_players[(PlayerGroupLoopCurrent() - 1)].stats.level, PlayerGroupLoopCurrent());
                    if ((GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent()) == &quot;0001&quot;)) {
                        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Load, 1, &quot;Fire Dragon&quot;, PlayerGroupLoopCurrent());
                    }
                    if ((GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent()) == &quot;0002&quot;)) {
                        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Load, 1, &quot;Ice Dragon&quot;, PlayerGroupLoopCurrent());
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetUpTalentTree_Init () {
                gt_SetUpTalentTree = TriggerCreate(&quot;gt_SetUpTalentTree_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Make Player 14 an Ally
            //--------------------------------------------------------------------------------------------------
            bool gt_MakePlayer14anAlly_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_SetAlliance(15, 14, libNtve_ge_AllianceSetting_Enemy);
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 14, libNtve_ge_AllianceSetting_Ally);
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_MakePlayer14anAlly_Init () {
                gt_MakePlayer14anAlly = TriggerCreate(&quot;gt_MakePlayer14anAlly_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Set Up Unit Types
            //--------------------------------------------------------------------------------------------------
            bool gt_SetUpUnitTypes_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                gv_enemyUnitTypes[0] = &quot;SmallSheep&quot;;
                gv_enemyUnitTypes[1] = &quot;Srepti&quot;;
                gv_enemyUnitTypes[2] = &quot;Vogel&quot;;
                gv_enemyUnitTypes[3] = &quot;CretonWarrior&quot;;
                gv_enemyUnitTypes[4] = &quot;Karramarro&quot;;
                gv_enemyUnitTypes[5] = &quot;CretonWatcher&quot;;
                gv_enemyUnitTypes[6] = &quot;Alakdan&quot;;
                gv_enemyUnitTypes[7] = &quot;Gagamba&quot;;
                gv_enemyUnitTypes[8] = &quot;Odvratan&quot;;
                gv_enemyUnitTypes[9] = &quot;EliteCretonWarrior&quot;;
                gv_enemyUnitTypes[10] = &quot;EliteCretonWatcher&quot;;
                gv_enemyUnitTypes[11] = &quot;CretonWarMachine&quot;;
                gv_enemyUnitTypes[12] = &quot;DemonicSheep&quot;;
                gv_enemyUnitTypes[13] = &quot;DemonicSrepti&quot;;
                gv_enemyUnitTypes[14] = &quot;CretonWarlord&quot;;
                gv_enemyUnitTypes[15] = &quot;Stercore&quot;;
                gv_enemyUnitTypes[16] = &quot;Odvratan&quot;;
                gv_enemyUnitTypes[17] = &quot;Anguis&quot;;
                gv_enemyUnitTypes[18] = &quot;Pervolo&quot;;
                gv_enemyUnitTypes[19] = &quot;Impetus&quot;;
                gv_enemyUnitTypes[20] = &quot;Mortuus&quot;;
                gv_enemyUnitTypes[21] = &quot;TimeWarpBot&quot;;
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_SetUpUnitTypes_Init () {
                gt_SetUpUnitTypes = TriggerCreate(&quot;gt_SetUpUnitTypes_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Hide Useless UI
            //--------------------------------------------------------------------------------------------------
            bool gt_HideUselessUI_Func (bool testConds, bool runActions) {
                
                // Actions
                if (!runActions) {
                    return true;
                }
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAlertPanel, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCreditsPanel, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeErrorDisplayPanel, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMercenaryPanel, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePlanetPanel, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePylonButton, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResearchPanel, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeRoomPanel, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechGlossaryPanel, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechTreePanel, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
                UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, false);
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if (gf_IsAdmin(PlayerGroupLoopCurrent())) {
                        UISetFrameVisible(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_syncFrameTypeErrorDisplayPanel, true);
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_HideUselessUI_Init () {
                gt_HideUselessUI = TriggerCreate(&quot;gt_HideUselessUI_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Enter Dragon&apos;s Nest
            //--------------------------------------------------------------------------------------------------
            bool gt_EnterDragonsNest_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) == true)) {
                    UnitBehaviorAdd(EventUnit(), &quot;DragonsNest&quot;, EventUnit(), 1);
                    gv_dragonLocation[(UnitGetOwner(EventUnit()) - 1)] = RegionFromId(3);
                }
                if ((UnitGetOwner(EventUnit()) == 15)) {
                    UnitBehaviorAdd(EventUnit(), &quot;DragonsNestEnemy&quot;, EventUnit(), 1);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EnterDragonsNest_Init () {
                gt_EnterDragonsNest = TriggerCreate(&quot;gt_EnterDragonsNest_Func&quot;);
                TriggerAddEventUnitRegion(gt_EnterDragonsNest, null, RegionFromId(3), true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Leave Dragon&apos;s Nest
            //--------------------------------------------------------------------------------------------------
            bool gt_LeaveDragonsNest_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer()) == true)) {
                    UnitBehaviorRemove(EventUnit(), &quot;DragonsNest&quot;, 1);
                }
                if ((UnitGetOwner(EventUnit()) == 15)) {
                    UnitBehaviorRemove(EventUnit(), &quot;DragonsNestEnemy&quot;, 1);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_LeaveDragonsNest_Init () {
                gt_LeaveDragonsNest = TriggerCreate(&quot;gt_LeaveDragonsNest_Func&quot;);
                TriggerAddEventUnitRegion(gt_LeaveDragonsNest, null, RegionFromId(3), false);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Check Stats
            //--------------------------------------------------------------------------------------------------
            bool gt_CheckStats_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    gf_StatCheck(PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CheckStats_Init () {
                gt_CheckStats = TriggerCreate(&quot;gt_CheckStats_Func&quot;);
                TriggerAddEventTimePeriodic(gt_CheckStats, 10.0, c_timeReal);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Reset Stats
            //--------------------------------------------------------------------------------------------------
            bool gt_ResetStats_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_lazyPlayer;
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((UnitIsAlive(gv_players[(EventPlayer() - 1)].dragon) == true))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_lazyPlayer = (EventPlayer() - 1);
                gv_players[lv_lazyPlayer].stats.attributePoints = (UnitGetPropertyFixed(gv_players[lv_lazyPlayer].dragon, c_unitPropLevel, c_unitPropCurrent) * 5.0);
                gv_attributeText[lv_lazyPlayer] = FixedToString(gv_players[lv_lazyPlayer].stats.attributePoints, 0);
                libNtve_gf_SetDialogItemText(gv_players[lv_lazyPlayer].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_lazyPlayer]), PlayerGroupSingle(EventPlayer()));
                BankValueSetFromFixed(gv_players[lv_lazyPlayer].banks.dragonBank, &quot;AP&quot;, PlayerHandle(EventPlayer()), gv_players[lv_lazyPlayer].stats.attributePoints);
                UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayer].dragon, &quot;AddAgility&quot;, (lv_lazyPlayer + 1), gv_players[lv_lazyPlayer].stats.agility);
                gv_players[lv_lazyPlayer].stats.agility = 0;
                BankValueSetFromInt(gv_players[lv_lazyPlayer].banks.dragonBank, &quot;Ag&quot;, PlayerHandle(EventPlayer()), gv_players[lv_lazyPlayer].stats.agility);
                UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayer].dragon, &quot;AddDexterity&quot;, (lv_lazyPlayer + 1), gv_players[lv_lazyPlayer].stats.dexterity);
                gv_players[lv_lazyPlayer].stats.dexterity = 0;
                BankValueSetFromInt(gv_players[lv_lazyPlayer].banks.dragonBank, &quot;De&quot;, PlayerHandle(EventPlayer()), gv_players[lv_lazyPlayer].stats.dexterity);
                UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayer].dragon, &quot;AddIntelligence&quot;, (lv_lazyPlayer + 1), gv_players[lv_lazyPlayer].stats.intelligence);
                gv_players[lv_lazyPlayer].stats.intelligence = 0;
                BankValueSetFromInt(gv_players[lv_lazyPlayer].banks.dragonBank, &quot;Int&quot;, PlayerHandle(EventPlayer()), gv_players[lv_lazyPlayer].stats.intelligence);
                UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayer].dragon, &quot;AddStrength&quot;, (lv_lazyPlayer + 1), gv_players[lv_lazyPlayer].stats.strength);
                gv_players[lv_lazyPlayer].stats.strength = 0;
                BankValueSetFromInt(gv_players[lv_lazyPlayer].banks.dragonBank, &quot;Str&quot;, PlayerHandle(EventPlayer()), gv_players[lv_lazyPlayer].stats.strength);
                UnitBehaviorRemovePlayer(gv_players[lv_lazyPlayer].dragon, &quot;AddVitality&quot;, (lv_lazyPlayer + 1), gv_players[lv_lazyPlayer].stats.vitality);
                gv_players[lv_lazyPlayer].stats.vitality = 0;
                BankValueSetFromInt(gv_players[lv_lazyPlayer].banks.dragonBank, &quot;Vi&quot;, PlayerHandle(EventPlayer()), gv_players[lv_lazyPlayer].stats.vitality);
                UnitAbilityShow(gv_players[lv_lazyPlayer].dragon, &quot;Agility1&quot;, true);
                UnitAbilityShow(gv_players[lv_lazyPlayer].dragon, &quot;Dexterity1&quot;, true);
                UnitAbilityShow(gv_players[lv_lazyPlayer].dragon, &quot;Intelligence1&quot;, true);
                UnitAbilityShow(gv_players[lv_lazyPlayer].dragon, &quot;Strength1&quot;, true);
                UnitAbilityShow(gv_players[lv_lazyPlayer].dragon, &quot;Vitality1&quot;, true);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/DFF4F8BA&quot;));
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ResetStats_Init () {
                gt_ResetStats = TriggerCreate(&quot;gt_ResetStats_Func&quot;);
                TriggerAddEventChatMessage(gt_ResetStats, c_playerAny, &quot;-Reset Stats&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Basic Claws
            //--------------------------------------------------------------------------------------------------
            bool gt_BasicClaws_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_lazyPlayer;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, &quot;BasicClaws&quot;);
                UnitInventoryCreate(gv_players[(EventPlayer() - 1)].dragon, &quot;BasicSpines&quot;);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_BasicClaws_Init () {
                gt_BasicClaws = TriggerCreate(&quot;gt_BasicClaws_Func&quot;);
                TriggerAddEventChatMessage(gt_BasicClaws, c_playerAny, &quot;-Weapon&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Intro Cinematic
            //--------------------------------------------------------------------------------------------------
            bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((gv_playerhasseenIntro[(PlayerGroupLoopCurrent() - 1)] == false)) {
                        PlayerGroupAdd(gv_playerswatchingintrocinematic, PlayerGroupLoopCurrent());
                    }
                    else {
                        libNtve_gf_PauseUnit(gv_players[(PlayerGroupLoopCurrent() - 1)].dragon, false);
                    }
                }
                PlayerGroupLoopEnd();
                libNtve_gf_HideGameUI(false, gv_playerswatchingintrocinematic);
                PlayerGroupLoopBegin(gv_playerswatchingintrocinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraLockInput(PlayerGroupLoopCurrent(), true);
                    UISetSelectionTypeEnabled(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_localSelectionTypeUnknown, false);
                    DialogSetVisible(gv_players[(PlayerGroupLoopCurrent() - 1)].stats.attributeDialog.state, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    DialogSetVisible(gv_players[(PlayerGroupLoopCurrent() - 1)].locationDialog.state, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 1, false);
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 2, false);
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 3, false);
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 4, false);
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 13, true);
                    PlayerSetAlliance(13, c_allianceIdVision, PlayerGroupLoopCurrent(), true);
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2544), 0.0, -1, 10.0, true);
                    VisExploreArea(PlayerGroupLoopCurrent(), RegionEntireMap(), true, false);
                }
                PlayerGroupLoopEnd();
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/79955B8C&quot;), 0.1, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(3.8, c_timeReal);
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/899DC0A4&quot;), 0.1, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(3.9, c_timeReal);
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/23D9D53E&quot;), 0.1, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                TriggerSkippableBegin(gv_playerswatchingintrocinematic, 0, gt_IntroCinematicReturntoNormal, true, false);
                Wait(3.3, c_timeReal);
                PlayerGroupLoopBegin(gv_playerswatchingintrocinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2543), 0.0, -1, 10.0, true);
                }
                PlayerGroupLoopEnd();
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/4A1EAB0C&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(3.0, c_timeReal);
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/2E645223&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(5.0, c_timeReal);
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/254CD7D6&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(5.0, c_timeReal);
                PlayerGroupLoopBegin(gv_playerswatchingintrocinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2542), 0.0, -1, 10.0, true);
                }
                PlayerGroupLoopEnd();
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/69C20D42&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(7.5, c_timeReal);
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/6352165E&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(8.0, c_timeReal);
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/33664132&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(7.0, c_timeReal);
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/49A1771E&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(6.5, c_timeReal);
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/B9589CEA&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(7.0, c_timeReal);
                libNtve_gf_CreateModelAtPoint(&quot;ArtifactFullyCharged&quot;, RegionGetCenter(RegionFromId(220)));
                Wait(0.1, c_timeGame);
                UnitCreate(1, &quot;Zauberer&quot;, 0, 13, RegionGetCenter(RegionFromId(220)), 330.0);
                gv_introCinematicZauberer = UnitLastCreated();
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/02BCF170&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(6.5, c_timeReal);
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/F0714A87&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                UnitIssueOrder(gv_introCinematicZauberer, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), RegionGetCenter(RegionFromId(219))), c_orderQueueReplace);
                while ((libNtve_gf_UnitInRegion(gv_introCinematicZauberer, RegionFromId(219)) == false)) {
                    Wait(1.0, c_timeGame);
                }
                libNtve_gf_CreateModelAtPoint(&quot;TTychus05ArtifactActivated&quot;, RegionGetCenter(RegionFromId(218)));
                Wait(3.0, c_timeGame);
                libNtve_gf_CreateModelAtPoint(&quot;ProtossLargeUnitDeath&quot;, RegionGetCenter(RegionFromId(218)));
                UnitRemove(UnitFromId(2513));
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/C4709064&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                UnitIssueOrder(gv_introCinematicZauberer, OrderTargetingPoint(AbilityCommand(&quot;move&quot;, 0), RegionGetCenter(RegionFromId(221))), c_orderQueueReplace);
                while ((libNtve_gf_UnitInRegion(gv_introCinematicZauberer, RegionFromId(221)) == false)) {
                    Wait(1.0, c_timeGame);
                }
                libNtve_gf_CreateModelAtPoint(&quot;ArtifactFullyCharged&quot;, RegionGetCenter(RegionFromId(221)));
                Wait(0.1, c_timeGame);
                UnitRemove(gv_introCinematicZauberer);
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/5E3A1B4B&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(8.0, c_timeReal);
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal(&quot;Param/Value/FC90239D&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(5.0, c_timeReal);
                TriggerExecute(gt_IntroCinematicReturntoNormal, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_IntroCinematic_Init () {
                gt_IntroCinematic = TriggerCreate(&quot;gt_IntroCinematic_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Intro Cinematic - Return to Normal
            //--------------------------------------------------------------------------------------------------
            bool gt_IntroCinematicReturntoNormal_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                UnitRemove(UnitFromId(2513));
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringToText(&quot;&quot;), 0.05, 0.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                PlayerGroupLoopBegin(gv_playerswatchingintrocinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoDefault(), 0.0, -1, 10.0, false);
                    CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(3)), 0.0, -1, 10.0, false);
                }
                PlayerGroupLoopEnd();
                PlayerGroupLoopBegin(gv_playerswatchingintrocinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 1, true);
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 2, true);
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 3, true);
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 4, true);
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 13, false);
                    PlayerSetAlliance(13, c_allianceIdVision, PlayerGroupLoopCurrent(), false);
                    CameraLockInput(PlayerGroupLoopCurrent(), false);
                    UISetSelectionTypeEnabled(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_localSelectionTypeUnknown, true);
                    DialogSetVisible(gv_players[(PlayerGroupLoopCurrent() - 1)].stats.attributeDialog.state, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    DialogSetVisible(gv_players[(PlayerGroupLoopCurrent() - 1)].locationDialog.state, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
                PlayerGroupLoopEnd();
                libNtve_gf_HideGameUI(true, gv_playerswatchingintrocinematic);
                PlayerGroupLoopBegin(gv_playerswatchingintrocinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    VisExploreArea(PlayerGroupLoopCurrent(), RegionEntireMap(), false, false);
                    gv_playerhasseenIntro[(PlayerGroupLoopCurrent() - 1)] = true;
                    BankValueSetFromFlag(gv_players[(PlayerGroupLoopCurrent() - 1)].banks.dragonBank, &quot;Intro&quot;, PlayerHandle(PlayerGroupLoopCurrent()), gv_playerhasseenIntro[(PlayerGroupLoopCurrent() - 1)]);
                    UnitSelect(gv_players[(PlayerGroupLoopCurrent() - 1)].dragon, PlayerGroupLoopCurrent(), true);
                    libNtve_gf_PauseUnit(gv_players[(PlayerGroupLoopCurrent() - 1)].dragon, false);
                    PlayerGroupRemove(gv_playerswatchingintrocinematic, PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                UnitRemove(gv_introCinematicZauberer);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_IntroCinematicReturntoNormal_Init () {
                gt_IntroCinematicReturntoNormal = TriggerCreate(&quot;gt_IntroCinematicReturntoNormal_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Play Intro Theme
            //--------------------------------------------------------------------------------------------------
            bool gt_PlayIntroTheme_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, false);
                SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, &quot;Music_Silence&quot;, c_soundtrackCueAny, 0, true);
                SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
                SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 0.0);
                SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, 0.0);
                SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, 0.0);
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent()) == &quot;0001&quot;)) {
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMusic, 0.0, 0.0);
                        SoundtrackPlay(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryMusic, &quot;IntroTheme&quot;, c_soundtrackCueAny, 0, false);
                        SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMusic, 100.0, 9.6);
                    }
                    else {
                        if ((GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent()) == &quot;0002&quot;)) {
                            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMusic, 0.0, 0.0);
                            SoundtrackPlay(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryMusic, &quot;IceDragonTheme&quot;, c_soundtrackCueAny, 0, false);
                            SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMusic, 100.0, 3.69);
                        }
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PlayIntroTheme_Init () {
                gt_PlayIntroTheme = TriggerCreate(&quot;gt_PlayIntroTheme_Func&quot;);
                TriggerAddEventTimeElapsed(gt_PlayIntroTheme, 0.1, c_timeReal);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ending Cinematic
            //--------------------------------------------------------------------------------------------------
            bool gt_EndingCinematic_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                libNtve_gf_HideGameUI(false, gv_playerswatchingendingcinematic);
                PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, PlayerName(PlayerGroupLoopCurrent()));
                    SoundtrackStop(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryMusic, true);
                    SoundtrackPlay(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryMusic, &quot;EndingTheme&quot;, c_soundtrackCueAny, 0, false);
                    SoundChannelSetVolume(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMusic, 100.0, 0.0);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryAlert, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryAmbient, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryBuild, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryCombat, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryDeath, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryDialogue, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryDoodad, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryFlames, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryFoley, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryGather, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMission, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMovement, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryMovie, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryReady, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategorySAmbient, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategorySEmitters, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategorySPieces, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategorySpell, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryTV, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryUI, true);
                    SoundChannelMute(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundCategoryVoice, true);
                    CameraLockInput(PlayerGroupLoopCurrent(), true);
                    UISetSelectionTypeEnabled(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_localSelectionTypeUnknown, false);
                    DialogSetVisible(gv_players[(PlayerGroupLoopCurrent() - 1)].stats.attributeDialog.state, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    DialogSetVisible(gv_players[(PlayerGroupLoopCurrent() - 1)].locationDialog.state, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    //gv_autosavePrevention[(PlayerGroupLoopCurrent() - 1)] = true;
                    PlayerSetAlliance(1, c_allianceIdVision, PlayerGroupLoopCurrent(), false);
                    PlayerSetAlliance(2, c_allianceIdVision, PlayerGroupLoopCurrent(), false);
                    PlayerSetAlliance(3, c_allianceIdVision, PlayerGroupLoopCurrent(), false);
                    PlayerSetAlliance(4, c_allianceIdVision, PlayerGroupLoopCurrent(), false);
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 1, false);
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 2, false);
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 3, false);
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, 4, false);
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2779), 5.0, -1, 10.0, true);
                    VisExploreArea(PlayerGroupLoopCurrent(), RegionEntireMap(), true, false);
                    VisRevealerCreate(PlayerGroupLoopCurrent(), RegionEntireMap());
                }
                PlayerGroupLoopEnd();
                if ((PlayerGroupHasPlayer(gv_playerswatchingendingcinematic, 1) == true)) {
                    if ((gv_gameBeat[0] == true)) {
                        TriggerSkippableBegin(PlayerGroupSingle(1), 0, gt_EndingCinematicSaveExitSpecialP1, true, false);
                        UIShowCinematicText(PlayerGroupSingle(1), StringExternal(&quot;Param/Value/4C1C5C7E&quot;), 0.1, 5.8, SoundLink(&quot;30SecondSilence&quot;, -1));
                    }
                    else {
                        UIShowCinematicText(PlayerGroupSingle(1), StringExternal(&quot;Param/Value/2FF83803&quot;), 0.1, 4.8, SoundLink(&quot;30SecondSilence&quot;, -1));
                    }
                }
                if ((PlayerGroupHasPlayer(gv_playerswatchingendingcinematic, 2) == true)) {
                    if ((gv_gameBeat[1] == true)) {
                        TriggerSkippableBegin(PlayerGroupSingle(2), 0, gt_EndingCinematicSaveExitSpecialP2, true, false);
                        UIShowCinematicText(PlayerGroupSingle(2), StringExternal(&quot;Param/Value/84C9CF79&quot;), 0.1, 5.8, SoundLink(&quot;30SecondSilence&quot;, -1));
                    }
                    else {
                        UIShowCinematicText(PlayerGroupSingle(2), StringExternal(&quot;Param/Value/EF723C2C&quot;), 0.1, 4.8, SoundLink(&quot;30SecondSilence&quot;, -1));
                    }
                }
                if ((PlayerGroupHasPlayer(gv_playerswatchingendingcinematic, 3) == true)) {
                    if ((gv_gameBeat[2] == true)) {
                        TriggerSkippableBegin(PlayerGroupSingle(3), 0, gt_EndingCinematicSaveExitSpecialP3, true, false);
                        UIShowCinematicText(PlayerGroupSingle(3), StringExternal(&quot;Param/Value/5E3610F6&quot;), 0.1, 5.8, SoundLink(&quot;30SecondSilence&quot;, -1));
                    }
                    else {
                        UIShowCinematicText(PlayerGroupSingle(3), StringExternal(&quot;Param/Value/F2688FE5&quot;), 0.1, 4.8, SoundLink(&quot;30SecondSilence&quot;, -1));
                    }
                }
                if ((PlayerGroupHasPlayer(gv_playerswatchingendingcinematic, 4) == true)) {
                    if ((gv_gameBeat[3] == true)) {
                        TriggerSkippableBegin(PlayerGroupSingle(4), 0, gt_EndingCinematicSaveExitSpecialP4, true, false);
                        UIShowCinematicText(PlayerGroupSingle(4), StringExternal(&quot;Param/Value/A4C19533&quot;), 0.1, 5.8, SoundLink(&quot;30SecondSilence&quot;, -1));
                    }
                    else {
                        UIShowCinematicText(PlayerGroupSingle(4), StringExternal(&quot;Param/Value/4DA1CDE4&quot;), 0.1, 4.8, SoundLink(&quot;30SecondSilence&quot;, -1));
                    }
                }
                Wait(5.8, c_timeGame);
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;Param/Value/259E7C04&quot;), 0.08, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(8, c_timeGame);
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;Param/Value/C384B428&quot;), 0.08, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(8, c_timeGame);
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;Param/Value/A8723B18&quot;), 0.08, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(8, c_timeGame);
                PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2544), 5.0, -1, 10.0, true);
                }
                PlayerGroupLoopEnd();
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;Param/Value/3F968A1C&quot;), 0.08, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(8.0, c_timeGame);
                PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2780), 5.0, -1, 10.0, true);
                }
                PlayerGroupLoopEnd();
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;Param/Value/9B251C63&quot;), 0.08, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(8.0, c_timeReal);
                PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2781), 5.0, -1, 10.0, true);
                }
                PlayerGroupLoopEnd();
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;Param/Value/31B1C81A&quot;), 0.08, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(8.0, c_timeGame);
                PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(1710), 5.0, -1, 10.0, true);
                }
                PlayerGroupLoopEnd();
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;Param/Value/C6C9A251&quot;), 0.08, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(8.0, c_timeGame);
                PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2782), 5.0, -1, 10.0, true);
                }
                PlayerGroupLoopEnd();
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;Param/Value/F078F471&quot;), 0.08, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(8.0, c_timeGame);
                PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2783), 5.0, -1, 10.0, true);
                }
                PlayerGroupLoopEnd();
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;Param/Value/D608B6EF&quot;), 0.08, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(8.0, c_timeGame);
                PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2784), 5.0, -1, 10.0, true);
                }
                PlayerGroupLoopEnd();
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;Param/Value/5B3E7D77&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(3.0, c_timeGame);
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;Param/Value/42C6933B&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(3.0, c_timeGame);
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;Param/Value/D541CFBE&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(3.0, c_timeGame);
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;Param/Value/45BCF748&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(3.0, c_timeGame);
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;Param/Value/CB5DCFB6&quot;), 0.05, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(3.0, c_timeGame);
                PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2785), 5.0, -1, 10.0, true);
                }
                PlayerGroupLoopEnd();
                UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal(&quot;And thank you!&quot;), 0.2, 99.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                Wait(10.0, c_timeGame);
                TriggerExecute(gt_EndingCinematicSaveExitNormal, true, false);
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EndingCinematic_Init () {
                gt_EndingCinematic = TriggerCreate(&quot;gt_EndingCinematic_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ending Cinematic - Save/Exit (Normal)
            //--------------------------------------------------------------------------------------------------
            bool gt_EndingCinematicSaveExitNormal_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                UIShowCinematicText(gv_playerswatchingintrocinematic, StringToText(&quot;&quot;), 0.05, 0.0, SoundLink(&quot;30SecondSilence&quot;, -1));
                PlayerGroupLoopBegin(gv_playerswatchingendingcinematic);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    gv_isSavingExiting[(PlayerGroupLoopCurrent() - 1)] = true;
                    gf_SaveStackCounts(PlayerGroupLoopCurrent());
                    gf_SaveHero(PlayerGroupLoopCurrent());
                    gf_SaveStash(PlayerGroupLoopCurrent());
                    gf_SaveSkills(PlayerGroupLoopCurrent());
                    gf_SaveHPC(PlayerGroupLoopCurrent());
                    gf_SaveHRC(PlayerGroupLoopCurrent());
                    BankValueSetFromFlag(gv_players[lv_pPI].banks.dragonBank, &quot;GB&quot;, PlayerHandle(PlayerGroupLoopCurrent()), true);
                    BankSave(gv_players[lv_pPI].banks.dragonBank);
                    if ((GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent()) == &quot;0001&quot;)) {
                        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, &quot;Fire Dragon&quot;, PlayerGroupLoopCurrent());
                    }
                    if ((GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent()) == &quot;0002&quot;)) {
                        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, &quot;Ice Dragon&quot;, PlayerGroupLoopCurrent());
                    }
                    GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, false, true);
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EndingCinematicSaveExitNormal_Init () {
                gt_EndingCinematicSaveExitNormal = TriggerCreate(&quot;gt_EndingCinematicSaveExitNormal_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ending Cinematic - Save/Exit (Special) P1
            //--------------------------------------------------------------------------------------------------
            bool gt_EndingCinematicSaveExitSpecialP1_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(PlayerGroupSingle(1));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    gv_isSavingExiting[(PlayerGroupLoopCurrent() - 1)] = true;
                    gf_SaveStackCounts(PlayerGroupLoopCurrent());
                    gf_SaveHero(PlayerGroupLoopCurrent());
                    gf_SaveStash(PlayerGroupLoopCurrent());
                    gf_SaveSkills(PlayerGroupLoopCurrent());
                    gf_SaveHPC(PlayerGroupLoopCurrent());
                    gf_SaveHRC(PlayerGroupLoopCurrent());
                    BankValueSetFromFlag(gv_players[lv_pPI].banks.dragonBank, &quot;GB&quot;, PlayerHandle(PlayerGroupLoopCurrent()), true);
                    BankSave(gv_players[lv_pPI].banks.dragonBank);
                    if ((GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent()) == &quot;0001&quot;)) {
                        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, &quot;Fire Dragon&quot;, PlayerGroupLoopCurrent());
                    }
                    if ((GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent()) == &quot;0002&quot;)) {
                        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, &quot;Ice Dragon&quot;, PlayerGroupLoopCurrent());
                    }
                    GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, false, true);
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EndingCinematicSaveExitSpecialP1_Init () {
                gt_EndingCinematicSaveExitSpecialP1 = TriggerCreate(&quot;gt_EndingCinematicSaveExitSpecialP1_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ending Cinematic - Save/Exit (Special) P2
            //--------------------------------------------------------------------------------------------------
            bool gt_EndingCinematicSaveExitSpecialP2_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(PlayerGroupSingle(2));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    gv_isSavingExiting[(PlayerGroupLoopCurrent() - 1)] = true;
                    gf_SaveStackCounts(PlayerGroupLoopCurrent());
                    gf_SaveHero(PlayerGroupLoopCurrent());
                    gf_SaveStash(PlayerGroupLoopCurrent());
                    gf_SaveSkills(PlayerGroupLoopCurrent());
                    gf_SaveHPC(PlayerGroupLoopCurrent());
                    gf_SaveHRC(PlayerGroupLoopCurrent());
                    BankValueSetFromFlag(gv_players[lv_pPI].banks.dragonBank, &quot;GB&quot;, PlayerHandle(PlayerGroupLoopCurrent()), true);
                    BankSave(gv_players[lv_pPI].banks.dragonBank);
                    if ((GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent()) == &quot;0001&quot;)) {
                        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, &quot;Fire Dragon&quot;, PlayerGroupLoopCurrent());
                    }
                    if ((GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent()) == &quot;0002&quot;)) {
                        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, &quot;Ice Dragon&quot;, PlayerGroupLoopCurrent());
                    }
                    GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, false, true);
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EndingCinematicSaveExitSpecialP2_Init () {
                gt_EndingCinematicSaveExitSpecialP2 = TriggerCreate(&quot;gt_EndingCinematicSaveExitSpecialP2_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ending Cinematic - Save/Exit (Special) P3
            //--------------------------------------------------------------------------------------------------
            bool gt_EndingCinematicSaveExitSpecialP3_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(PlayerGroupSingle(3));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    gv_isSavingExiting[(PlayerGroupLoopCurrent() - 1)] = true;
                    gf_SaveStackCounts(PlayerGroupLoopCurrent());
                    gf_SaveHero(PlayerGroupLoopCurrent());
                    gf_SaveStash(PlayerGroupLoopCurrent());
                    gf_SaveSkills(PlayerGroupLoopCurrent());
                    gf_SaveHPC(PlayerGroupLoopCurrent());
                    gf_SaveHRC(PlayerGroupLoopCurrent());
                    BankValueSetFromFlag(gv_players[lv_pPI].banks.dragonBank, &quot;GB&quot;, PlayerHandle(PlayerGroupLoopCurrent()), true);
                    BankSave(gv_players[lv_pPI].banks.dragonBank);
                    if ((GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent()) == &quot;0001&quot;)) {
                        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, &quot;Fire Dragon&quot;, PlayerGroupLoopCurrent());
                    }
                    if ((GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent()) == &quot;0002&quot;)) {
                        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, &quot;Ice Dragon&quot;, PlayerGroupLoopCurrent());
                    }
                    GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, false, true);
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EndingCinematicSaveExitSpecialP3_Init () {
                gt_EndingCinematicSaveExitSpecialP3 = TriggerCreate(&quot;gt_EndingCinematicSaveExitSpecialP3_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ending Cinematic - Save/Exit (Special) P4
            //--------------------------------------------------------------------------------------------------
            bool gt_EndingCinematicSaveExitSpecialP4_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_pPI;
                // Variable Initialization
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(PlayerGroupSingle(4));
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pPI = (PlayerGroupLoopCurrent() - 1);
                    gv_isSavingExiting[(PlayerGroupLoopCurrent() - 1)] = true;
                    gf_SaveStackCounts(PlayerGroupLoopCurrent());
                    gf_SaveHero(PlayerGroupLoopCurrent());
                    gf_SaveStash(PlayerGroupLoopCurrent());
                    gf_SaveSkills(PlayerGroupLoopCurrent());
                    gf_SaveHPC(PlayerGroupLoopCurrent());
                    gf_SaveHRC(PlayerGroupLoopCurrent());
                    BankValueSetFromFlag(gv_players[lv_pPI].banks.dragonBank, &quot;GB&quot;, PlayerHandle(PlayerGroupLoopCurrent()), true);
                    BankSave(gv_players[lv_pPI].banks.dragonBank);
                    if ((GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent()) == &quot;0001&quot;)) {
                        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, &quot;Fire Dragon&quot;, PlayerGroupLoopCurrent());
                    }
                    if ((GameAttributePlayerValue(&quot;1&quot;, PlayerGroupLoopCurrent()) == &quot;0002&quot;)) {
                        lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, &quot;Ice Dragon&quot;, PlayerGroupLoopCurrent());
                    }
                    GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, false, true);
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_EndingCinematicSaveExitSpecialP4_Init () {
                gt_EndingCinematicSaveExitSpecialP4 = TriggerCreate(&quot;gt_EndingCinematicSaveExitSpecialP4_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Periodically Save
            //--------------------------------------------------------------------------------------------------
            bool gt_PeriodicallySave_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                        gf_Save(PlayerGroupLoopCurrent());
                    }
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_PeriodicallySave_Init () {
                gt_PeriodicallySave = TriggerCreate(&quot;gt_PeriodicallySave_Func&quot;);
                TriggerAddEventTimePeriodic(gt_PeriodicallySave, 1.0, c_timeReal);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Ice Reborn
            //--------------------------------------------------------------------------------------------------
            bool gt_IceReborn_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_tempDragon;
                int lv_importantPlayerIndex;
                int lv_importantPlayer;
                int lv_n;
                
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((GameAttributePlayerValue(&quot;1&quot;, EventPlayer()) == &quot;0002&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_importantPlayer = EventPlayer();
                lv_importantPlayerIndex = (EventPlayer() - 1);
                if ((gv_gameBeat[(EventPlayer() - 1)] != true)) {
                    UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/11E08D7B&quot;));
                }
                if ((UnitGetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLevel, c_unitPropCurrent) != 100.0)) {
                    UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/14A626B1&quot;));
                }
                if ((gf_IsAdmin(EventPlayer()) || ((UnitGetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLevel, c_unitPropCurrent) == 100.0)))){// &amp;&amp; (gv_gameBeat[(EventPlayer() - 1)] == true)))) {
                    TriggerEnable(gt_SaveStackCountsOnInventoryEdit, false);
                    TriggerEnable(gt_SaveStackCountsPeriodically, false);
                    lv_importantPlayer = EventPlayer();
                    lv_importantPlayerIndex = (EventPlayer() - 1);
                    gv_evolving[lv_importantPlayerIndex] = true;
                    lv_tempDragon = gv_players[lv_importantPlayerIndex].dragon;
                    gv_players[lv_importantPlayerIndex].stats.reborn.count = (gv_players[lv_importantPlayerIndex].stats.reborn.count + 1);
                    UnitGroupRemove(gv_unitsthatdidDamagetoSyrital, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_unitsthatdidDamagetoSremagsi, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_unitsthatdidDamagetoMachinaDePlagam, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_dragonsInBioDome, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_dragonsInBattleWithGuardians, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_dragonInBattleWithZauberer2ndForm, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_dragonInBattleWithZauberer1stForm, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_contestant2Group, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_contestant1Group, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_contestant1Group, gv_players[lv_importantPlayerIndex].dragon);
                    UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/881B6E1C&quot;));
                    gf_FillInventory(lv_importantPlayer);
                    gf_SaveStackCounts(lv_importantPlayer);
                    UnitRemove(lv_tempDragon);
                    UnitCreate(1, &quot;BabyIceDragon&quot;, 0, lv_importantPlayer, PointFromId(1), libNtve_gf_RandomAngle());
                    gv_players[lv_importantPlayerIndex].dragon = UnitLastCreated();
                    CameraPan(lv_importantPlayer, RegionGetCenter(RegionFromId(3)), 2.0, -1, 10.0, false);
                    gv_players[lv_importantPlayerIndex].stats.reborn.points += 10;
                    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal(&quot;Param/Value/A3FF6AEC&quot;) + IntToText(gv_players[lv_importantPlayerIndex].stats.reborn.points)), PlayerGroupSingle(lv_importantPlayer));
                    gf_ApplyRebornStats(lv_importantPlayer);
                    gf_PutInventoryinInventory(lv_importantPlayer);
                    gf_LoadStackCounts(lv_importantPlayer);
                    UnitSelect(gv_players[lv_importantPlayerIndex].dragon, lv_importantPlayer, true);
                    BankValueSetFromUnit(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].dragon);
                    lib1_gf_ResetTalentBuild(lv_importantPlayer, 1);
                    lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, &quot;DQRPGTalentLibraryBank&quot;, lv_importantPlayer);
                    gv_players[lv_importantPlayerIndex].stats.level = 0;
                    gv_players[lv_importantPlayerIndex].stats.strength = 0;
                    gv_players[lv_importantPlayerIndex].stats.vitality = 0;
                    gv_players[lv_importantPlayerIndex].stats.dexterity = 0;
                    gv_players[lv_importantPlayerIndex].stats.intelligence = 0;
                    gv_players[lv_importantPlayerIndex].stats.agility = 0;
                    gv_players[lv_importantPlayerIndex].stats.attributePoints = 5.0;
                    gv_attributeText[lv_importantPlayerIndex] = FixedToString(gv_players[lv_importantPlayerIndex].stats.attributePoints, 0);
                    gv_fireSkin[lv_importantPlayerIndex] = false;
                    gv_allSeeingEye[lv_importantPlayerIndex] = false;
                    gv_players[lv_importantPlayerIndex].skills.subzero = 0;
                    gv_players[lv_importantPlayerIndex].skills.nova = 0;
                    gv_players[lv_importantPlayerIndex].skills.inferno = 0;
                    gv_players[lv_importantPlayerIndex].skills.frostSpike = 0;
                    gv_players[lv_importantPlayerIndex].skills.flameEgg = 0;
                    gv_players[lv_importantPlayerIndex].skills.fireClaw = 0;
                    gv_players[lv_importantPlayerIndex].skills.fireball = 0;
                    gv_players[lv_importantPlayerIndex].skills.blizzard = 0;
                    gf_SaveSkills(lv_importantPlayer);
                    gf_ResetTalentBuildandVariables(lv_importantPlayer);
                    libNtve_gf_SetDialogItemText(gv_players[lv_importantPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_importantPlayerIndex]), PlayerGroupSingle(lv_importantPlayer));
                    BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;Ag&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.agility);
                    BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;De&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.dexterity);
                    BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;Int&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.intelligence);
                    BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;Str&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.strength);
                    BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;Vi&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.vitality);
                    BankValueSetFromFixed(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;AP&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.attributePoints);
                    BankValueSetFromFlag(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;FS&quot;, PlayerHandle(lv_importantPlayer), gv_fireSkin[lv_importantPlayerIndex]);
                    BankValueSetFromFlag(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;ASE&quot;, PlayerHandle(lv_importantPlayer), gv_allSeeingEye[lv_importantPlayerIndex]);
                    gv_gameBeat[lv_importantPlayerIndex] = false;
                    BankValueSetFromFlag(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;GB&quot;, PlayerHandle(lv_importantPlayer), gv_gameBeat[lv_importantPlayerIndex]);
                    ObjectiveDestroyAll(PlayerGroupSingle(lv_importantPlayer));
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[0].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[0].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[1].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[1].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[2].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[2].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[3].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[3].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[4].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[4].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[5].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[5].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[6].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[6].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[7].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[7].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[8].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[8].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[9].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[9].state = 0;
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ1&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ2&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ3&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ4&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ5&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ6&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ7&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ8&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ9&quot;);
                    gf_SQ0Setup(lv_importantPlayer);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Mana0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Mana1-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Mana2-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Mana3-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Mana4-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Mana5-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Base0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Malin0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Oleum0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Seryn0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Altoss0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Madeleine0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-SergeantLister0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Detsefni0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Greed0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Amp0-0&quot;);
                    gv_unlockedWaypoints[lv_importantPlayerIndex][0] = false;
                    gv_unlockedWaypoints[lv_importantPlayerIndex][1] = false;
                    gv_unlockedWaypoints[lv_importantPlayerIndex][2] = false;
                    gv_unlockedWaypoints[lv_importantPlayerIndex][3] = false;
                    gv_unlockedWaypoints[lv_importantPlayerIndex][4] = false;
                    gv_respawnPoint[lv_importantPlayerIndex] = PointFromId(1);
                    gv_players[lv_importantPlayerIndex].stats.level = 1;
                    gv_evolving[lv_importantPlayerIndex] = false;
                    gf_StatCheck(lv_importantPlayer);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_IceReborn_Init () {
                gt_IceReborn = TriggerCreate(&quot;gt_IceReborn_Func&quot;);
                TriggerAddEventChatMessage(gt_IceReborn, c_playerAny, &quot;-Reborn&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Fire Reborn
            //--------------------------------------------------------------------------------------------------
            bool gt_FireReborn_Func (bool testConds, bool runActions) {
                // Variable Declarations
                unit lv_tempDragon;
                int lv_importantPlayerIndex;
                int lv_importantPlayer;
                int lv_n;
                
                // Variable Initialization
                // Conditions
                if (testConds) {
                    if (!((GameAttributePlayerValue(&quot;1&quot;, EventPlayer()) == &quot;0001&quot;))) {
                        return false;
                    }
                }
                // Actions
                if (!runActions) {
                    return true;
                }
                lv_importantPlayer = EventPlayer();
                lv_importantPlayerIndex = (EventPlayer() - 1);
                if ((gv_gameBeat[(EventPlayer() - 1)] != true)) {
                    UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/5DD4D756&quot;));
                }
                if ((UnitGetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLevel, c_unitPropCurrent) != 100.0)) {
                    UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/5DBA9E25&quot;));
                }
                if ((gf_IsAdmin(EventPlayer()) || ((UnitGetPropertyFixed(gv_players[(EventPlayer() - 1)].dragon, c_unitPropLevel, c_unitPropCurrent) == 100.0)))){ //&amp;&amp; (gv_gameBeat[(EventPlayer() - 1)] == true)))) {
                    TriggerEnable(gt_SaveStackCountsOnInventoryEdit, false);
                    TriggerEnable(gt_SaveStackCountsPeriodically, false);
                    lv_importantPlayer = EventPlayer();
                    lv_importantPlayerIndex = (EventPlayer() - 1);
                    gv_evolving[lv_importantPlayerIndex] = true;
                    lv_tempDragon = gv_players[lv_importantPlayerIndex].dragon;
                    gv_players[lv_importantPlayerIndex].stats.reborn.count = (gv_players[lv_importantPlayerIndex].stats.reborn.count + 1);
                    UnitGroupRemove(gv_unitsthatdidDamagetoSyrital, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_unitsthatdidDamagetoSremagsi, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_unitsthatdidDamagetoMachinaDePlagam, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_dragonsInBioDome, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_dragonsInBattleWithGuardians, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_dragonInBattleWithZauberer2ndForm, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_dragonInBattleWithZauberer1stForm, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_contestant2Group, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_contestant1Group, gv_players[lv_importantPlayerIndex].dragon);
                    UnitGroupRemove(gv_contestant1Group, gv_players[lv_importantPlayerIndex].dragon);
                    UIDisplayMessage(PlayerGroupSingle(lv_importantPlayer), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/FE4D7D27&quot;));
                    gf_FillInventory(lv_importantPlayer);
                    gf_SaveStackCounts(lv_importantPlayer);
                    UnitRemove(lv_tempDragon);
                    UnitCreate(1, &quot;BabyDragon&quot;, 0, lv_importantPlayer, PointFromId(1), libNtve_gf_RandomAngle());
                    gv_players[lv_importantPlayerIndex].dragon = UnitLastCreated();
                    CameraPan(lv_importantPlayer, RegionGetCenter(RegionFromId(3)), 2.0, -1, 10.0, false);
                    gv_players[lv_importantPlayerIndex].stats.reborn.points += 10;
                    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal(&quot;Param/Value/7D0AD6CC&quot;) + IntToText(gv_players[lv_importantPlayerIndex].stats.reborn.points)), PlayerGroupSingle(lv_importantPlayer));
                    gf_ApplyRebornStats(lv_importantPlayer);
                    gf_PutInventoryinInventory(lv_importantPlayer);
                    gf_LoadStackCounts(lv_importantPlayer);
                    UnitSelect(gv_players[lv_importantPlayerIndex].dragon, lv_importantPlayer, true);
                    BankValueSetFromUnit(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].dragon);
                    lib1_gf_ResetTalentBuild(lv_importantPlayer, 1);
                    lib1_gf_SaveLoadTalentBuild(lib1_ge_SaveLoad_Save, 1, &quot;DQRPGTalentLibraryBank&quot;, lv_importantPlayer);
                    gv_players[lv_importantPlayerIndex].stats.level = 0;
                    gv_players[lv_importantPlayerIndex].stats.strength = 0;
                    gv_players[lv_importantPlayerIndex].stats.vitality = 0;
                    gv_players[lv_importantPlayerIndex].stats.dexterity = 0;
                    gv_players[lv_importantPlayerIndex].stats.intelligence = 0;
                    gv_players[lv_importantPlayerIndex].stats.agility = 0;
                    gv_players[lv_importantPlayerIndex].stats.attributePoints = 5.0;
                    gv_attributeText[lv_importantPlayerIndex] = FixedToString(gv_players[lv_importantPlayerIndex].stats.attributePoints, 0);
                    gv_fireSkin[lv_importantPlayerIndex] = false;
                    gv_allSeeingEye[lv_importantPlayerIndex] = false;
                    gv_players[lv_importantPlayerIndex].skills.subzero = 0;
                    gv_players[lv_importantPlayerIndex].skills.nova = 0;
                    gv_players[lv_importantPlayerIndex].skills.inferno = 0;
                    gv_players[lv_importantPlayerIndex].skills.frostSpike = 0;
                    gv_players[lv_importantPlayerIndex].skills.flameEgg = 0;
                    gv_players[lv_importantPlayerIndex].skills.fireClaw = 0;
                    gv_players[lv_importantPlayerIndex].skills.fireball = 0;
                    gv_players[lv_importantPlayerIndex].skills.blizzard = 0;
                    gf_SaveSkills(lv_importantPlayer);
                    gf_ResetTalentBuildandVariables(lv_importantPlayer);
                    libNtve_gf_SetDialogItemText(gv_players[lv_importantPlayerIndex].stats.attributeDialog.textBox, StringToText(gv_attributeText[lv_importantPlayerIndex]), PlayerGroupSingle(lv_importantPlayer));
                    BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;Ag&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.agility);
                    BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;De&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.dexterity);
                    BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;Int&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.intelligence);
                    BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;Str&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.strength);
                    BankValueSetFromInt(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;Vi&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.vitality);
                    BankValueSetFromFixed(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;AP&quot;, PlayerHandle(lv_importantPlayer), gv_players[lv_importantPlayerIndex].stats.attributePoints);
                    BankValueSetFromFlag(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;FS&quot;, PlayerHandle(lv_importantPlayer), gv_fireSkin[lv_importantPlayerIndex]);
                    BankValueSetFromFlag(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;ASE&quot;, PlayerHandle(lv_importantPlayer), gv_allSeeingEye[lv_importantPlayerIndex]);
                    gv_gameBeat[lv_importantPlayerIndex] = false;
                    BankValueSetFromFlag(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;GB&quot;, PlayerHandle(lv_importantPlayer), gv_gameBeat[lv_importantPlayerIndex]);
                    ObjectiveDestroyAll(PlayerGroupSingle(lv_importantPlayer));
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[0].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[0].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[1].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[1].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[2].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[2].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[3].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[3].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[4].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[4].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[5].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[5].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[6].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[6].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[7].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[7].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[8].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[8].state = 0;
                    PingDestroy(gv_players[lv_importantPlayerIndex].quests.storyQuests[9].ping);
                    gv_players[lv_importantPlayerIndex].quests.storyQuests[9].state = 0;
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ1&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ2&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ3&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ4&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ5&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ6&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ7&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ8&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ9&quot;);
                    gf_SQ0Setup(lv_importantPlayer);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Mana0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Mana1-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Mana2-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Mana3-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Mana4-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Mana5-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Base0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Malin0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Oleum0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Seryn0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Altoss0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Madeleine0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-SergeantLister0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Detsefni0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Greed0-0&quot;);
                    BankSectionRemove(gv_players[lv_importantPlayerIndex].banks.dragonBank, &quot;SQ-Amp0-0&quot;);
                    gv_unlockedWaypoints[lv_importantPlayerIndex][0] = false;
                    gv_unlockedWaypoints[lv_importantPlayerIndex][1] = false;
                    gv_unlockedWaypoints[lv_importantPlayerIndex][2] = false;
                    gv_unlockedWaypoints[lv_importantPlayerIndex][3] = false;
                    gv_unlockedWaypoints[lv_importantPlayerIndex][4] = false;
                    gv_respawnPoint[lv_importantPlayerIndex] = PointFromId(1);
                    gv_players[lv_importantPlayerIndex].stats.level = 1;
                    gv_evolving[lv_importantPlayerIndex] = false;
                    gf_StatCheck(lv_importantPlayer);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_FireReborn_Init () {
                gt_FireReborn = TriggerCreate(&quot;gt_FireReborn_Func&quot;);
                TriggerAddEventChatMessage(gt_FireReborn, c_playerAny, &quot;-Reborn&quot;, true);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Create Reborn Dialog
            //--------------------------------------------------------------------------------------------------
            bool gt_CreateRebornDialog_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_dialogWidth;
                int lv_dialogHeight;
                int lv_labelWidth;
                int lv_labelHeight;
                int lv_pointWidth;
                int lv_pointHeight;
                int lv_buttonHeight;
                int lv_buttonWidth;
                int lv_xSkip;
                int lv_xSpace;
                int lv_pP;
                int lv_pPI;
                // Variable Initialization
                lv_dialogWidth = 500;
                lv_dialogHeight = 410;
                lv_labelWidth = 250;
                lv_labelHeight = 30;
                lv_pointWidth = 130;
                lv_pointHeight = 30;
                lv_buttonHeight = 30;
                lv_buttonWidth = 30;
                lv_xSkip = 30;
                lv_xSpace = 30;
                // Actions
                if (!runActions) {
                    return true;
                }
                PlayerGroupLoopBegin(gv_humanPlayers);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_pP = PlayerGroupLoopCurrent();
                    lv_pPI = (lv_pP - 1);
                    DialogCreate(lv_dialogWidth, lv_dialogHeight, c_anchorTopRight, 0, 75, true);
                    gv_players[lv_pPI].stats.reborn.dialog.state = DialogLastCreated();
                    DialogSetVisible(gv_players[lv_pPI].stats.reborn.dialog.state, PlayerGroupAll(), false);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth / 1), lv_labelHeight, c_anchorTopLeft, 0, (lv_labelHeight * 1), (StringExternal(&quot;Param/Value/EC103F81&quot;) + IntToText(gv_players[lv_pPI].stats.reborn.points)), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;CenterJustified&quot;, PlayerGroupSingle(lv_pP));
                    gv_rebornDialogRebornPointLabel = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 1) + (lv_labelHeight / 3)), StringExternal(&quot;Param/Value/9AFDF832&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 2), StringExternal(&quot;Param/Value/13E7657A&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_pP, false)), true, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 2) + (lv_labelHeight / 3)), StringExternal(&quot;Param/Value/21429FA4&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 3), StringExternal(&quot;Param/Value/0C74DDDD&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 3) + (lv_labelHeight / 3)), StringExternal(&quot;Param/Value/158C7C9C&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 4), StringExternal(&quot;Param/Value/754A8049&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 4) + (lv_labelHeight / 3)), StringExternal(&quot;Param/Value/18D938D0&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 5), StringExternal(&quot;Param/Value/40D5A933&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 5) + (lv_labelHeight / 3)), StringExternal(&quot;Param/Value/C5911693&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 6), StringExternal(&quot;Param/Value/565F98A7&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 6) + (lv_labelHeight / 3)), StringExternal(&quot;Param/Value/6263C6BE&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 7), StringExternal(&quot;Param/Value/85DF1CEC&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 7) + (lv_labelHeight / 3)), StringExternal(&quot;Param/Value/4BFFB9E8&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 8), StringExternal(&quot;Param/Value/2C49892B&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 8) + (lv_labelHeight / 3)), StringExternal(&quot;Param/Value/A912FAE1&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 9), StringExternal(&quot;Param/Value/E70F7CE6&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 9) + (lv_labelHeight / 3)), StringExternal(&quot;Param/Value/A11D0EBB&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 10), StringExternal(&quot;Param/Value/E2E4F016&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 10) + (lv_labelHeight / 3)), StringExternal(&quot;Param/Value/4AAEB9F0&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 11), StringExternal(&quot;Param/Value/FCBA9AC6&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 11) + (lv_labelHeight / 3)), StringExternal(&quot;Param/Value/4BC38369&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 12), StringExternal(&quot;Param/Value/9A39BA08&quot;), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 12) + (lv_labelHeight / 3)), StringExternal(&quot;Param/Value/44A5FE59&quot;), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), true, 2.0);
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 3), (StringExternal(&quot;Param/Value/3F8C3E6C&quot;) + (IntToText(gv_players[lv_pPI].stats.reborn.maxHP) + (StringExternal(&quot;Param/Value/3C40C931&quot;) + StringExternal(&quot;Param/Value/19C87255&quot;)))), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;CenterJustified&quot;, PlayerGroupSingle(lv_pP));
                    gv_players[lv_pPI].stats.reborn.dialog.pointLabel[0] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 4), (StringExternal(&quot;Param/Value/73FE3461&quot;) + (IntToText(gv_players[lv_pPI].stats.reborn.maxMP) + (StringExternal(&quot;Param/Value/9649BE76&quot;) + StringExternal(&quot;Param/Value/161A3F27&quot;)))), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;CenterJustified&quot;, PlayerGroupSingle(lv_pP));
                    gv_players[lv_pPI].stats.reborn.dialog.pointLabel[1] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 5), (StringExternal(&quot;Param/Value/0154B2DE&quot;) + (IntToText(gv_players[lv_pPI].stats.reborn.defense) + (StringExternal(&quot;Param/Value/4366ED00&quot;) + StringExternal(&quot;Param/Value/A5AD37C7&quot;)))), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;CenterJustified&quot;, PlayerGroupSingle(lv_pP));
                    gv_players[lv_pPI].stats.reborn.dialog.pointLabel[2] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 6), (StringExternal(&quot;Param/Value/2422077E&quot;) + (IntToText(gv_players[lv_pPI].stats.reborn.movementSpeed) + (StringExternal(&quot;Param/Value/21416A9C&quot;) + StringExternal(&quot;Param/Value/B7CAA415&quot;)))), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;CenterJustified&quot;, PlayerGroupSingle(lv_pP));
                    gv_players[lv_pPI].stats.reborn.dialog.pointLabel[3] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 7), (StringExternal(&quot;Param/Value/A575EF6C&quot;) + (IntToText(gv_players[lv_pPI].stats.reborn.attackSpeed) + (StringExternal(&quot;Param/Value/5C1A1A21&quot;) + StringExternal(&quot;Param/Value/DFF0F56F&quot;)))), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;CenterJustified&quot;, PlayerGroupSingle(lv_pP));
                    gv_players[lv_pPI].stats.reborn.dialog.pointLabel[4] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 8), (StringExternal(&quot;Param/Value/F60085E0&quot;) + (IntToText(gv_players[lv_pPI].stats.reborn.dodge) + (StringExternal(&quot;Param/Value/3E12AE8D&quot;) + StringExternal(&quot;Param/Value/BA7E44FE&quot;)))), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;CenterJustified&quot;, PlayerGroupSingle(lv_pP));
                    gv_players[lv_pPI].stats.reborn.dialog.pointLabel[5] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 9), (StringExternal(&quot;Param/Value/6BCC1DD7&quot;) + (IntToText(gv_players[lv_pPI].stats.reborn.miss) + (StringExternal(&quot;Param/Value/D945F4DA&quot;) + StringExternal(&quot;Param/Value/52F1E42D&quot;)))), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;CenterJustified&quot;, PlayerGroupSingle(lv_pP));
                    gv_players[lv_pPI].stats.reborn.dialog.pointLabel[6] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 10), (StringExternal(&quot;Param/Value/F133BEB5&quot;) + (IntToText(gv_players[lv_pPI].stats.reborn.goldDrop) + (StringExternal(&quot;Param/Value/927D5541&quot;) + StringExternal(&quot;Param/Value/E55819A4&quot;)))), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;CenterJustified&quot;, PlayerGroupSingle(lv_pP));
                    gv_players[lv_pPI].stats.reborn.dialog.pointLabel[7] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 11), (StringExternal(&quot;Param/Value/A464F39D&quot;) + (IntToText(gv_players[lv_pPI].stats.reborn.itemDrop) + (StringExternal(&quot;Param/Value/1627BE88&quot;) + StringExternal(&quot;Param/Value/FA36656D&quot;)))), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;CenterJustified&quot;, PlayerGroupSingle(lv_pP));
                    gv_players[lv_pPI].stats.reborn.dialog.pointLabel[8] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_players[lv_pPI].stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 12), (StringExternal(&quot;Param/Value/F179BF9B&quot;) + (IntToText(gv_players[lv_pPI].stats.reborn.regen) + (StringExternal(&quot;Param/Value/53A204C7&quot;) + StringExternal(&quot;Param/Value/4FF47C38&quot;)))), ColorWithAlpha(0,0,0,0), false, 2.0);
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), &quot;CenterJustified&quot;, PlayerGroupSingle(lv_pP));
                    gv_players[lv_pPI].stats.reborn.dialog.pointLabel[9] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 3) - (lv_buttonHeight / 5)), StringToText(&quot;&quot;), StringExternal(&quot;Param/Value/EF0BD040&quot;), (&quot;&quot;));
                    gv_players[lv_pPI].stats.reborn.dialog.pointButton[0] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 4) - (lv_buttonHeight / 5)), StringToText(&quot;&quot;), StringExternal(&quot;Param/Value/79C912B8&quot;), (&quot;&quot;));
                    gv_players[lv_pPI].stats.reborn.dialog.pointButton[1] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 5) - (lv_buttonHeight / 5)), StringToText(&quot;&quot;), StringExternal(&quot;Param/Value/F63238DB&quot;), (&quot;&quot;));
                    gv_players[lv_pPI].stats.reborn.dialog.pointButton[2] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 6) - (lv_buttonHeight / 5)), StringToText(&quot;&quot;), StringExternal(&quot;Param/Value/21386B3C&quot;), (&quot;&quot;));
                    gv_players[lv_pPI].stats.reborn.dialog.pointButton[3] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 7) - (lv_buttonHeight / 5)), StringToText(&quot;&quot;), StringExternal(&quot;Param/Value/E51B7529&quot;), (&quot;&quot;));
                    gv_players[lv_pPI].stats.reborn.dialog.pointButton[4] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 8) - (lv_buttonHeight / 5)), StringToText(&quot;&quot;), StringExternal(&quot;Param/Value/A59B0230&quot;), (&quot;&quot;));
                    gv_players[lv_pPI].stats.reborn.dialog.pointButton[5] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 9) - (lv_buttonHeight / 5)), StringToText(&quot;&quot;), StringExternal(&quot;Param/Value/C4C98683&quot;), (&quot;&quot;));
                    gv_players[lv_pPI].stats.reborn.dialog.pointButton[6] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 10) - (lv_buttonHeight / 5)), StringToText(&quot;&quot;), StringExternal(&quot;Param/Value/75B2568C&quot;), (&quot;&quot;));
                    gv_players[lv_pPI].stats.reborn.dialog.pointButton[7] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 11) - (lv_buttonHeight / 5)), StringToText(&quot;&quot;), StringExternal(&quot;Param/Value/F26350EA&quot;), (&quot;&quot;));
                    gv_players[lv_pPI].stats.reborn.dialog.pointButton[8] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_players[lv_pPI].stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 12) - (lv_buttonHeight / 5)), StringToText(&quot;&quot;), StringExternal(&quot;Param/Value/2894924B&quot;), (&quot;&quot;));
                    gv_players[lv_pPI].stats.reborn.dialog.pointButton[9] = DialogControlLastCreated();
                }
                PlayerGroupLoopEnd();
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_CreateRebornDialog_Init () {
                gt_CreateRebornDialog = TriggerCreate(&quot;gt_CreateRebornDialog_Func&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Toggle Reborn Dialog Visibility
            //--------------------------------------------------------------------------------------------------
            bool gt_ToggleRebornDialogVisibility_Func (bool testConds, bool runActions) {
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((DialogIsVisible(gv_players[(EventPlayer() - 1)].stats.reborn.dialog.state, EventPlayer()) == true)) {
                    DialogSetVisible(gv_players[(EventPlayer() - 1)].stats.reborn.dialog.state, PlayerGroupSingle(EventPlayer()), false);
                }
                else {
                    DialogSetVisible(gv_players[(EventPlayer() - 1)].stats.reborn.dialog.state, PlayerGroupSingle(EventPlayer()), true);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_ToggleRebornDialogVisibility_Init () {
                gt_ToggleRebornDialogVisibility = TriggerCreate(&quot;gt_ToggleRebornDialogVisibility_Func&quot;);
                TriggerAddEventButtonPressed(gt_ToggleRebornDialogVisibility, c_playerAny, &quot;RebornMenu&quot;);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger: Reborn Stats
            //--------------------------------------------------------------------------------------------------
            bool gt_RebornStats_Func (bool testConds, bool runActions) {
                // Variable Declarations
                int lv_tP;
                int lv_tPI;
                // Variable Initialization
                lv_tP = EventPlayer();
                lv_tPI = (EventPlayer() - 1);
                // Actions
                if (!runActions) {
                    return true;
                }
                if ((gv_players[lv_tPI].stats.reborn.points &gt; 0)) {
                    if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[0])) {
                        gv_players[lv_tPI].stats.reborn.points -= 1;
                        libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal(&quot;Param/Value/0C4B8F0E&quot;) + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                        gv_players[lv_tPI].stats.reborn.maxHP += 1;
                        libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[0], (StringExternal(&quot;Param/Value/04B4A828&quot;) + (IntToText(gv_players[lv_tPI].stats.reborn.maxHP) + StringExternal(&quot;Param/Value/AF8C6C06&quot;))), PlayerGroupSingle(lv_tP));
                    }
                    else {
                        if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[1])) {
                            gv_players[lv_tPI].stats.reborn.points -= 1;
                            libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal(&quot;Param/Value/34512CAB&quot;) + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                            gv_players[lv_tPI].stats.reborn.maxMP += 1;
                            libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[1], (StringExternal(&quot;Param/Value/96A7A695&quot;) + (IntToText(gv_players[lv_tPI].stats.reborn.maxMP) + StringExternal(&quot;Param/Value/DE089EDD&quot;))), PlayerGroupSingle(lv_tP));
                        }
                        else {
                            if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[2])) {
                                gv_players[lv_tPI].stats.reborn.points -= 1;
                                libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal(&quot;Param/Value/E3D1284E&quot;) + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                                gv_players[lv_tPI].stats.reborn.defense += 1;
                                libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[2], (StringExternal(&quot;Param/Value/C824D379&quot;) + (IntToText(gv_players[lv_tPI].stats.reborn.defense) + StringExternal(&quot;Param/Value/F00A522E&quot;))), PlayerGroupSingle(lv_tP));
                            }
                            else {
                                if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[3])) {
                                    gv_players[lv_tPI].stats.reborn.points -= 1;
                                    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal(&quot;Param/Value/840FE8D9&quot;) + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                                    gv_players[lv_tPI].stats.reborn.movementSpeed += 1;
                                    libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[3], (StringExternal(&quot;Param/Value/04CC0597&quot;) + (IntToText(gv_players[lv_tPI].stats.reborn.movementSpeed) + StringExternal(&quot;Param/Value/D55AF90E&quot;))), PlayerGroupSingle(lv_tP));
                                }
                                else {
                                    if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[4])) {
                                        gv_players[lv_tPI].stats.reborn.points -= 1;
                                        libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal(&quot;Param/Value/1F4CF73C&quot;) + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                                        gv_players[lv_tPI].stats.reborn.attackSpeed += 1;
                                        libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[4], (StringExternal(&quot;Param/Value/298476B7&quot;) + (IntToText(gv_players[lv_tPI].stats.reborn.attackSpeed) + StringExternal(&quot;Param/Value/75DB64C6&quot;))), PlayerGroupSingle(lv_tP));
                                    }
                                    else {
                                        if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[5])) {
                                            gv_players[lv_tPI].stats.reborn.points -= 1;
                                            libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal(&quot;Param/Value/E4CED221&quot;) + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                                            gv_players[lv_tPI].stats.reborn.dodge += 1;
                                            libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[5], (StringExternal(&quot;Param/Value/DAA59A61&quot;) + (IntToText(gv_players[lv_tPI].stats.reborn.dodge) + StringExternal(&quot;Param/Value/1DA52D0B&quot;))), PlayerGroupSingle(lv_tP));
                                        }
                                        else {
                                            if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[6])) {
                                                gv_players[lv_tPI].stats.reborn.points -= 1;
                                                libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal(&quot;Param/Value/901B3634&quot;) + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                                                gv_players[lv_tPI].stats.reborn.miss += 1;
                                                libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[6], (StringExternal(&quot;Param/Value/42E6E47A&quot;) + (IntToText(gv_players[lv_tPI].stats.reborn.miss) + StringExternal(&quot;Param/Value/D70A2D38&quot;))), PlayerGroupSingle(lv_tP));
                                            }
                                            else {
                                                if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[7])) {
                                                    gv_players[lv_tPI].stats.reborn.points -= 1;
                                                    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal(&quot;Param/Value/78EEA6FF&quot;) + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                                                    gv_players[lv_tPI].stats.reborn.goldDrop += 1;
                                                    libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[7], (StringExternal(&quot;Param/Value/1CE95B32&quot;) + (IntToText(gv_players[lv_tPI].stats.reborn.goldDrop) + StringExternal(&quot;Param/Value/1A84F8DC&quot;))), PlayerGroupSingle(lv_tP));
                                                }
                                                else {
                                                    if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[8])) {
                                                        gv_players[lv_tPI].stats.reborn.points -= 1;
                                                        libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal(&quot;Param/Value/72001932&quot;) + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                                                        gv_players[lv_tPI].stats.reborn.itemDrop += 1;
                                                        libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[8], (StringExternal(&quot;Param/Value/8B65544B&quot;) + (IntToText(gv_players[lv_tPI].stats.reborn.itemDrop) + StringExternal(&quot;Param/Value/54C69C21&quot;))), PlayerGroupSingle(lv_tP));
                                                    }
                                                    else {
                                                        if ((EventDialogControl() == gv_players[lv_tPI].stats.reborn.dialog.pointButton[9])) {
                                                            gv_players[lv_tPI].stats.reborn.points -= 1;
                                                            libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal(&quot;Param/Value/3E802633&quot;) + IntToText(gv_players[lv_tPI].stats.reborn.points)), PlayerGroupSingle(lv_tP));
                                                            gv_players[lv_tPI].stats.reborn.regen += 1;
                                                            libNtve_gf_SetDialogItemText(gv_players[lv_tPI].stats.reborn.dialog.pointLabel[9], (StringExternal(&quot;Param/Value/6C18F48D&quot;) + (IntToText(gv_players[lv_tPI].stats.reborn.regen) + StringExternal(&quot;Param/Value/D00FC4C3&quot;))), PlayerGroupSingle(lv_tP));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    gf_ApplyRebornStats(lv_tP);
                }
                return true;
            }
            //--------------------------------------------------------------------------------------------------
            void gt_RebornStats_Init () {
                gt_RebornStats = TriggerCreate(&quot;gt_RebornStats_Func&quot;);
                TriggerAddEventDialogControl(gt_RebornStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
            }
            //--------------------------------------------------------------------------------------------------
            // Trigger Initialization
            //--------------------------------------------------------------------------------------------------
            void FakeInitTriggers () {
                gt_CreateQuestDialog_Init();
                gt_CreateTalkDialog_Init();
                gt_CreateRewardDialog_Init();
                gt_QuestDecline_Init();
                gt_TalkDialogClosed_Init();
                gt_RunStoryQuestSetups_Init();
                gt_SQ0PlayerEntersSQ0Region1_Init();
                gt_SQ1PlayerTalkstoFelix_Init();
                gt_SQ2PlayerEntersSQ2Region1_Init();
                gt_SQ3PlayerTalkstoPetrose_Init();
                gt_SQ3PlayerEntersVerbotenForest_Init();
                gt_SQ4PlayerTalkstoRisdak_Init();
                gt_SQ5PlayerEntersInfestation_Init();
                gt_SQ5PlayerTalkstoPetrose_Init();
                gt_SQ6PlayerEntersTeleporttoBiodome_Init();
                gt_SQ7PlayerTalkstoLanae_Init();
                gt_SQ8BiodomeEntered_Init();
                gt_SQ8Crystal1Destroyed_Init();
                gt_SQ8Crystal2Destroyed_Init();
                gt_SQ8Crystal3Destroyed_Init();
                gt_SQ8Crystal4Destroyed_Init();
                gt_SQ8Crystal5Destroyed_Init();
                gt_SQ8Crystal6Destroyed_Init();
                gt_LoadSideQuests_Init();
                gt_ManaQuest0TalktoMana_Init();
                gt_ManaQuest0QuestAccept_Init();
                gt_ManaQuest0EquipArmorP1_Init();
                gt_ManaQuest0RewardAccept_Init();
                gt_ManaQuest1TalktoMana_Init();
                gt_ManaQuest1QuestAccept_Init();
                gt_ManaQuest1KillSheep_Init();
                gt_ManaQuest1RewardAccept_Init();
                gt_ManaQuest2TalktoMana_Init();
                gt_ManaQuest2QuestAccept_Init();
                gt_ManaQuest2EnterWastelandWater_Init();
                gt_ManaQuest2RewardAccept_Init();
                gt_ManaQuest3TalktoMana_Init();
                gt_ManaQuest3QuestAccept_Init();
                gt_ManaQuest3KillSrepti_Init();
                gt_ManaQuest3RewardAccept_Init();
                gt_ManaQuest4TalktoMana_Init();
                gt_ManaQuest4QuestAccept_Init();
                gt_ManaQuest4RewardAccept_Init();
                gt_ManaQuest4PurchasePotion_Init();
                gt_ManaQuest5TalktoMana_Init();
                gt_ManaQuest5QuestAccept_Init();
                gt_ManaQuest5KillAlphaSrepti_Init();
                gt_ManaQuest5RewardAccept_Init();
                gt_BaseQuest0TalktoBase_Init();
                gt_BaseQuest0QuestAccept_Init();
                gt_BaseQuest0SetRespawnPointatWasteland_Init();
                gt_BaseQuest0RewardAccept_Init();
                gt_BaseQuest1TalktoBase_Init();
                gt_BaseQuest1QuestAccept_Init();
                gt_BaseQuest1ActivateBallanWaypoint_Init();
                gt_BaseQuest2UseBallanWaypointtoWasteland_Init();
                gt_BaseQuest1RewardAccept_Init();
                gt_DetsefniQuest0TalktoDetsefni_Init();
                gt_DetsefniQuest0QuestAccept_Init();
                gt_DetsefniQuest0Kill25Sreptis_Init();
                gt_DetsefniQuest0RewardAccept_Init();
                gt_SergeantListerQuest0TalktoSergeantLister_Init();
                gt_SergeantListeriQuest0QuestAccept_Init();
                gt_SergeantListerQuest0Kill10CretonWarriors_Init();
                gt_SergeantListerQuest0RewardAccept_Init();
                gt_GreedQuest0TalktoGreed_Init();
                gt_GreedQuest0QuestAccept_Init();
                gt_GreedQuest0FindMisterScruffers_Init();
                gt_GreedQuest0RewardAccept_Init();
                gt_MadeleineQuest0TalktoMadeleine_Init();
                gt_MadeleineQuest0QuestAccept_Init();
                gt_MadeleineQuest0Kill30Karramarros_Init();
                gt_MadeleineQuest0RewardAccept_Init();
                gt_MalinQuest0TalktoMalin_Init();
                gt_MalinQuest0QuestAccept_Init();
                gt_MalinQuest0KillRobus_Init();
                gt_MalinQuest0RewardAccept_Init();
                gt_AmpQuest0TalktoAmp_Init();
                gt_AmpQuest0QuestAccept_Init();
                gt_AmpQuest0KillanEliteCretonWarrior_Init();
                gt_AmpQuest0RewardAccept_Init();
                gt_AltossQuest0TalktoAltoss_Init();
                gt_AltossQuest0QuestAccept_Init();
                gt_AltossQuest0Kill15Odvratans_Init();
                gt_AltossQuest0RewardAccept_Init();
                gt_IllisusLocustSpawn_Init();
                gt_OleumQuest0TalktoOleum_Init();
                gt_OleumQuest0QuestAccept_Init();
                gt_OleumQuest0FindCrew137_Init();
                gt_OleumQuest0KillIllisus_Init();
                gt_OleumQuest0RewardAccept_Init();
                gt_SerynQuest0TalktoSeryn_Init();
                gt_SerynQuest0QuestAccept_Init();
                gt_SerynQuest0KillSerynsShadow_Init();
                gt_SerynQuest0RewardAccept_Init();
                gt_ChaosUnitTypes_Init();
                gt_SyritalsHatch_Init();
                gt_GuardiansHatch_Init();
                gt_SremagsisHatch_Init();
                gt_MachinaDePlagamsHatch_Init();
                gt_ZauberersHatch_Init();
                gt_SpawnArenaText1_Init();
                gt_SpawnArenaText2_Init();
                gt_HeroLeavesArena1_Init();
                gt_HeroLeavesArena2_Init();
                gt_HeroEntersArena1_Init();
                gt_HeroEntersArena2_Init();
                gt_Contestant1Dies_Init();
                gt_Contestant2Dies_Init();
                gt_OpenInventorywhenclickonstash_Init();
                gt_Dropstuffnotunlockedyet_Init();
                gt_PotionHotkeyP1_Init();
                gt_PotionHotkeyP2_Init();
                gt_PotionHotkeyP3_Init();
                gt_PotionHotkeyP4_Init();
                gt_GrandOrbofAngerCounter_Init();
                gt_GrandOrbofAngerEffectP1_Init();
                gt_GrandOrbofAngerEffectP2_Init();
                gt_GrandOrbofAngerEffectP3_Init();
                gt_GrandOrbofAngerEffectP4_Init();
                gt_Player1BuysOcculusofWarning_Init();
                gt_Player2BuysOcculusofWarning_Init();
                gt_Player3BuysOcculusofWarning_Init();
                gt_Player4BuysOcculusofWarning_Init();
                gt_OcculusPingPlayer1_Init();
                gt_OcculusPingPlayer2_Init();
                gt_OcculusPingPlayer3_Init();
                gt_OcculusPingPlayer4_Init();
                gt_PlayerBuysFacetofRevenge_Init();
                gt_PlayerBuysCrystalofRebirth_Init();
                gt_PlayerBuysJewelofReturn_Init();
                gt_PlayerBuysStoneofProtection_Init();
                gt_PlayerBuysRingofQuickening_Init();
                gt_TolicsFireOrbDamageResponse_Init();
                gt_SetStackChargeNames_Init();
                gt_SaveStackCountsOnInventoryEdit_Init();
                gt_SaveStackCountsPeriodically_Init();
                gt_TownPortal_Init();
                gt_Unitdropsitem_Init();
                gt_Unitgainsitem_Init();
                gt_ShieldCheck_Init();
                gt_WeaponCheck_Init();
                gt_SellingSystemRedux_Init();
                gt_DisplayArmorShopTextTag_Init();
                gt_DisplayWeaponShopTextTag_Init();
                gt_DisplayOrbShopTextTag_Init();
                gt_DisplayShardShopTextTag_Init();
                gt_DisplayStashTextTagP1_Init();
                gt_DisplayStashTextTagP2_Init();
                gt_DisplayStashTextTagP3_Init();
                gt_DisplayStashTextTagP4_Init();
                gt_UndergroundForestEnter_Init();
                gt_UndergroundForestExit_Init();
                gt_RelamyGorgeEnter_Init();
                gt_RelamyGorgeExit_Init();
                gt_RelamyCaveEnter_Init();
                gt_RelamyCaveExit_Init();
                gt_SetInfestationSpawnTrigger_Init();
                gt_VerbotenInfestationEnter_Init();
                gt_VerbotenInfestationExit_Init();
                gt_BlizzardFreezeChance_Init();
                gt_LearnFireball_Init();
                gt_LearnFireclaws_Init();
                gt_LearnFlameegg_Init();
                gt_LearnInferno_Init();
                gt_LearnNova_Init();
                gt_LearnFrostspike_Init();
                gt_LearnBlizzard_Init();
                gt_LearnSubzero_Init();
                gt_LearnFrozenarmor_Init();
                gt_CheckPlayerisnoteveolved_Init();
                gt_DummyDies_Init();
                gt_ReviveDragonNormal_Init();
                gt_ReviveDragonPvP_Init();
                gt_SetUpAttributeDialog_Init();
                gt_Level0Check_Init();
                gt_LevelUp_Init();
                gt_EvolutionCheck_Init();
                gt_Agility1_Init();
                gt_Dexterity1_Init();
                gt_Intelligence1_Init();
                gt_Strength1_Init();
                gt_Vitality1_Init();
                gt_UpdateBuffs_Init();
                gt_ShowTalents_Init();
                gt_SetisIdleOn_Init();
                gt_SetisIdleOff_Init();
                gt_DefendYourself_Init();
                gt_FrostSpike_Init();
                gt_SyritalTalonsBurning_Init();
                gt_RobusSpawnAllies_Init();
                gt_RobusCarrionNeedlesPoison_Init();
                gt_SremagsiTentacleDisorientation_Init();
                gt_HeroCarrionNeedlesPoison_Init();
                gt_HeroSremagsisTentaclesDisorientated_Init();
                gt_NosferatusLogic_Init();
                gt_NosferatuDies_Init();
                gt_Nosferatudeathcount_Init();
                gt_GreedisGood_Init();
                gt_QuickLearner_Init();
                gt_Herotakesmeleedamage_Init();
                gt_Herotakesrangeddamage_Init();
                gt_Herotakesspelldamage_Init();
                gt_Herotakessplashdamage_Init();
                gt_HeroMissranged_Init();
                gt_HeroMissmelee_Init();
                gt_HeroMissmelee1Shot_Init();
                gt_Herogivesrangeddamage_Init();
                gt_DarkDissulto_Init();
                gt_EnemyAIAttacked_Init();
                gt_EnemyAILava1_Init();
                gt_EnemyAILava2_Init();
                gt_EnemyAILava3_Init();
                gt_EnemyAINest_Init();
                gt_EnemySkillResponse_Init();
                gt_ZauberersFavor_Init();
                gt_CountUnitDeaths_Init();
                gt_EliteCretonWarrior_Init();
                gt_EliteCretonWatcher_Init();
                gt_LargeSheep_Init();
                gt_AlphaSrepti_Init();
                gt_GivenMeleeDamageTextTag_Init();
                gt_RecievedMeleeDamageTextTag_Init();
                gt_SetZauberersMinionsUnitTypes_Init();
                gt_SetZauberersRegions_Init();
                gt_SpawnZauberersMinions_Init();
                gt_DragonDiesinZauberer1_Init();
                gt_DragonDiesinZauberer2_Init();
                gt_SpawnZauberer1stForm_Init();
                gt_Zauberer1stFormDeath_Init();
                gt_Zauberer1stFormAI_Init();
                gt_SpawnZauberer2ndFormNormalWay_Init();
                gt_SpawnZauberer2ndFormSpecial_Init();
                gt_Zauberer2ndFormDeath_Init();
                gt_WarpOutFromBossArena_Init();
                gt_Zauberer2ndFormAI_Init();
                gt_MachinaDePlagamSethealth_Init();
                gt_CreateMachinaDePlagamWarning_Init();
                gt_DestroyMachinaDePlagamWarning_Init();
                gt_HeroattacksMachinaDePlagam_Init();
                gt_MachinaDePlagamEnter_Init();
                gt_MachinaDePlagamLeave_Init();
                gt_MachinaDePlagamDragonDies_Init();
                gt_MachinaDePlagamDies_Init();
                gt_MachinaDePlagamRespawn_Init();
                gt_MachinaDePlagamBackup_Init();
                gt_UnitattacksSremagsi_Init();
                gt_Sremagsisethealth_Init();
                gt_SremagsiLairEnter_Init();
                gt_SremagsiLairExit_Init();
                gt_SremagsiDragonDies_Init();
                gt_SremagsiDies_Init();
                gt_SremagsiRespawn_Init();
                gt_CountPlayersGreaterthan25_Init();
                gt_GuardianSpawn_Init();
                gt_KorlicDies_Init();
                gt_TolicDies_Init();
                gt_MadawcDies_Init();
                gt_NoDragonsinGaurdian_Init();
                gt_GuardianRespawn_Init();
                gt_UnitattacksSyrital_Init();
                gt_SetSyritalHealth_Init();
                gt_CreateSyritalWarning_Init();
                gt_SyritalEnter_Init();
                gt_SyritalLeave_Init();
                gt_SyritalDragonDies_Init();
                gt_SyritalDies_Init();
                gt_SyritalRespawn_Init();
                gt_SpawnEnemies_Init();
                gt_SetupBioDomeWastelandRegions_Init();
                gt_SpawnEnemiesBioDomeWasteland_Init();
                gt_RespawnBioDomeWasteland_Init();
                gt_SetupCretonTranchRegions_Init();
                gt_SpawnEnemiesCretonTrench_Init();
                gt_RespawnCretonTrench_Init();
                gt_SetupCretonRegions_Init();
                gt_SpawnEnemiesCreton_Init();
                gt_RespawnCreton_Init();
                gt_SetVerbotenInfestationRegions_Init();
                gt_SpawnEnemiesVerbotenInfestationPlayer1_Init();
                gt_SpawnEnemiesVerbotenInfestationPlayer2_Init();
                gt_SpawnEnemiesVerbotenInfestationPlayer3_Init();
                gt_SpawnEnemiesVerbotenInfestationPlayer4_Init();
                gt_RespawnVerbotenInfestation_Init();
                gt_SetVerbotenForestRegions_Init();
                gt_RespawnVerbotenForest_Init();
                gt_SetWastelandRegions_Init();
                gt_RespawnWasteland_Init();
                gt_SetRelamyPassRegions_Init();
                gt_RespawnRelamyPass_Init();
                gt_SetRelamyGorgeRegions_Init();
                gt_RespawnRelamyGorge_Init();
                gt_SetRelamyCanyonRegions_Init();
                gt_RespawnRelamyCanyon_Init();
                gt_SetRelamyHillsRegions_Init();
                gt_RespawnRelamyHills_Init();
                gt_SetUndergroundForestRegions_Init();
                gt_RespawnUndergroundForest_Init();
                gt_WastelandWanderControl_Init();
                gt_RelamyPassWanderControl_Init();
                gt_RelamyGorgeWanderControl_Init();
                gt_RelamyCanyonWanderControl_Init();
                gt_RelamyHillsWanderControl_Init();
                gt_CreateWaypointDialog_Init();
                gt_LoadWaypoints_Init();
                gt_PlayerSelectsWaypoint_Init();
                gt_PlayerLeavesWaypoint_Init();
                gt_WaypointDialogButtonClicked_Init();
                gt_DragonEntersWaypoint_Init();
                gt_DragonLeavesWaypoint_Init();
                gt_BDZombieUnitSpawn_Init();
                gt_BDZombieUnitDeath_Init();
                gt_BDCretonUnitSpawn_Init();
                gt_BDCretonUnitDeath_Init();
                gt_BDVerbotenUnitSpawn_Init();
                gt_BDVerbotenUnitDeath_Init();
                gt_BDRelamyUnitSpawn_Init();
                gt_BDRelamyUnitDeath_Init();
                gt_BDWastelandUnitSpawn_Init();
                gt_BDWastelandUnitDeath_Init();
                gt_TeleporttoBioDome_Init();
                gt_TeleporttoCreton_Init();
                gt_SetRPtoWastelands_Init();
                gt_SetRPtoBallan_Init();
                gt_SetRPtoRelamy_Init();
                gt_SetRPtoVerbotenForestWaypoint_Init();
                gt_SetRPtoCreton_Init();
                gt_CreateDragonsNestWarning_Init();
                gt_CreateRelamyPassWarning_Init();
                gt_CreateRelamyCanyonWarning_Init();
                gt_CreateRelamyHillsWarning_Init();
                gt_CreateRelamyGorgeWarning_Init();
                gt_CreateLavaPassWarning_Init();
                gt_CreateVerbotenForestWarning_Init();
                gt_CreateVerbotenInfestationWarning_Init();
                gt_CreateRoadToBallanWarning_Init();
                gt_CreateCretonWarning_Init();
                gt_CreateSragmasiWarning_Init();
                gt_SetUpLocationDialog_Init();
                gt_LocationWasteland_Init();
                gt_LocationDragonsNest_Init();
                gt_LocationSyritalsLair_Init();
                gt_LocationRelamyPass_Init();
                gt_LocationRelamyCanyon_Init();
                gt_LocationRelamyHills_Init();
                gt_LocationVerbotenForest_Init();
                gt_LocationCreton_Init();
                gt_LocationCretonTrench_Init();
                gt_LocationRoadtoBallan_Init();
                gt_LocationBallan_Init();
                gt_WastelandHealingWaterEnter_Init();
                gt_WastelandHealingWaterLeave_Init();
                gt_RelamyPassHealingWaterEnter_Init();
                gt_RelamyPassHealingWaterLeave_Init();
                gt_RelamyCanyonHealingWaterEnter_Init();
                gt_RelamyCanyonHealingWaterLeave_Init();
                gt_VerbotenForestHealingWaterEnter_Init();
                gt_VerbotenForestHealingWaterLeave_Init();
                gt_LavaEnter_Init();
                gt_LavaExit_Init();
                gt_Chaos_Init();
                gt_ChaosHack_Init();
                gt_RevealMap_Init();
                gt_DevilsFlamethrower_Init();
                gt_WingClaws_Init();
                gt_TeleportInfestation_Init();
                gt_IslandofWoecheat_Init();
                gt_VTCount_Init();
                gt_Location_Init();
                gt_ResetQuest_Init();
                gt_TeleportBioDome_Init();
                gt_TeleporttoSpawn_Init();
                gt_DebugTeleZauberer_Init();
                gt_Invincibility_Init();
                gt_SuitUp_Init();
                gt_LevelDebug_Init();
                gt_GetHandle_Init();
                gt_NumberofUnitDeaths_Init();
                gt_Weapons_Init();
                gt_GetMoney_Init();
                gt_ViewEnding_Init();
                gt__50ShadesofGray_Init();
                gt_GetMoney2_Init();
                gt_GetMoney3_Init();
                gt_Fastest_Init();
                gt_MaxStats_Init();
                gt_DropAll_Init();
                gt_SpawnUnit_Init();
                gt_SpawnEnemyUnit_Init();
                gt_SpawnMassEnemyUnit_Init();
                gt_SpawnItem_Init();
                gt_MeleeBuffStacks_Init();
                gt_NumBuffs_Init();
                gt__999Talents_Init();
                gt_PlayerLeaves_Init();
                gt_OpenTalentMenu_Init();
                gt_ResetTalentBuild_Init();
                gt_InventoryTip_Init();
                gt_WeaponTip_Init();
                gt_DragonsNestTip_Init();
                gt_ResetStatsTip_Init();
                gt_ResetTalentsTip_Init();
                gt_ResetQuestsTip_Init();
                gt_HealingWaterTip_Init();
                gt_VespeneGasTip_Init();
                gt_EvolutionsTip_Init();
                gt_ArmorTip_Init();
                gt_SavingLoadingTip_Init();
                gt_MusicCreditsTip_Init();
                gt_AwesomePeopleTip_Init();
                gt_StashLocationSetup_Init();
                gt_LoadShards_Init();
                gt_CreateTimeofdayDialog_Init();
                gt_TimeofDayTick_Init();
                gt_SetUpPlayers_Init();
                gt_SetupRegions_Init();
                gt_SetupTips_Init();
                gt_SetUpTalentTree_Init();
                gt_MakePlayer14anAlly_Init();
                gt_SetUpUnitTypes_Init();
                gt_HideUselessUI_Init();
                gt_EnterDragonsNest_Init();
                gt_LeaveDragonsNest_Init();
                gt_CheckStats_Init();
                gt_ResetStats_Init();
                gt_BasicClaws_Init();
                gt_IntroCinematic_Init();
                gt_IntroCinematicReturntoNormal_Init();
                gt_PlayIntroTheme_Init();
                gt_EndingCinematic_Init();
                gt_EndingCinematicSaveExitNormal_Init();
                gt_EndingCinematicSaveExitSpecialP1_Init();
                gt_EndingCinematicSaveExitSpecialP2_Init();
                gt_EndingCinematicSaveExitSpecialP3_Init();
                gt_EndingCinematicSaveExitSpecialP4_Init();
                gt_PeriodicallySave_Init();
                gt_IceReborn_Init();
                gt_FireReborn_Init();
                gt_CreateRebornDialog_Init();
                gt_ToggleRebornDialogVisibility_Init();
                gt_RebornStats_Init();
            }
            // --------------------------------------
            void gf_SetupPlayer(int p) {
                int lv_tempAgility;
                int lv_tempDexterity;
                int lv_tempIntelligence;
                int lv_tempStrength;
                int lv_tempVitality;
                int lv_tempReborn;
                int type;
                int i = p-1;
                if ((GameAttributePlayerValue(&quot;1&quot;, p) == &quot;0001&quot;)) {
                    type = 0;
                } else if (GameAttributePlayerValue(&quot;1&quot;, p) == &quot;0002&quot;) {
                    type = 1;
                }
                // Load banks
                BankLoad(&quot;DragonRPGStashBank&quot;, p);
                gv_players[i].banks.stashBank = BankLastCreated();
                BankWait(gv_players[i].banks.stashBank);
                BankLoad(&quot;DragonRPGCurrencyBank&quot;, p);
                gv_players[i].banks.currencyBank = BankLastCreated();
                BankWait(gv_players[i].banks.currencyBank);
                BankLoad(&quot;DragonRPGRebornBank&quot;, p);
                gv_players[i].banks.rebornBank = BankLastCreated();
                BankWait(gv_players[i].banks.rebornBank);
                CameraPan(p, PointFromId(1), 0.0, -1, 0, false);
                gv_ofHumanPlayers = (gv_ofHumanPlayers + 1);
                if (type == 0) {
                    BankLoad(&quot;DragonRPGFireBank&quot;, p);
                } else if (type == 1) {
                    BankLoad(&quot;DragonRPGIceBank&quot;, p);
                }
                gv_players[i].banks.dragonBank = BankLastCreated();
                BankWait(gv_players[i].banks.dragonBank);
                gv_players[i].verification.dragon = false;
                if (BankKeyExists(gv_players[i].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(p))) {
                    TipAlertPanelClear(PlayerGroupSingle(p));
                    TechTreeRequirementsEnable(p, false);
                    BankValueGetAsUnit(gv_players[i].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(p), p, PointFromId(1), 0.0);
                    UnitSelect(BankLastRestoredUnit(), p, true);
                    gv_players[i].dragon = BankLastRestoredUnit();
                    lib1_gf_SetHeros(p, gv_players[i].dragon);
                    gv_players[i].stats.level = FixedToInt(UnitGetPropertyFixed(gv_players[i].dragon, c_unitPropLevel, c_unitPropCurrent));
                    gv_players[i].stats.reborn.count = BankValueGetAsInt(gv_players[i].banks.dragonBank, &quot;Reborn Count&quot;, PlayerHandle(p));
                    lv_tempReborn = BankValueGetAsInt(gv_players[i].banks.dragonBank, &quot;Reborn Count&quot;, PlayerHandle(p));
                    gv_players[i].stats.attributePoints = BankValueGetAsFixed(gv_players[i].banks.dragonBank, &quot;AP&quot;, PlayerHandle(p));
                    lv_tempVitality = BankValueGetAsInt(gv_players[i].banks.dragonBank, &quot;Vi&quot;, PlayerHandle(p));
                    lv_tempStrength = BankValueGetAsInt(gv_players[i].banks.dragonBank, &quot;Str&quot;, PlayerHandle(p));
                    lv_tempIntelligence = BankValueGetAsInt(gv_players[i].banks.dragonBank, &quot;Int&quot;, PlayerHandle(p));
                    lv_tempDexterity = BankValueGetAsInt(gv_players[i].banks.dragonBank, &quot;De&quot;, PlayerHandle(p));
                    lv_tempAgility = BankValueGetAsInt(gv_players[i].banks.dragonBank, &quot;Ag&quot;, PlayerHandle(p));
                    gv_fireSkin[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, &quot;FS&quot;, PlayerHandle(p));
                    gv_allSeeingEye[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, &quot;ASE&quot;, PlayerHandle(p));
                    gv_gameBeat[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, &quot;GB&quot;, PlayerHandle(p));
                    gv_playerhasseenIntro[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, &quot;Intro&quot;, PlayerHandle(p));
                    gv_occulusofWarning[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, &quot;OOW&quot;, PlayerHandle(p));
                    gv_facetofRevenge[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, &quot;FOR&quot;, PlayerHandle(p));
                    gv_crystalofRebirth[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, &quot;COR&quot;, PlayerHandle(p));
                    gv_jewelofReturn[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, &quot;JOR&quot;, PlayerHandle(p));
                    gv_stoneofProtection[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, &quot;SOR&quot;, PlayerHandle(p));
                    gv_ringofQuickening[i] = BankValueGetAsFlag(gv_players[i].banks.dragonBank, &quot;ROQ&quot;, PlayerHandle(p));
                    if ((gv_occulusofWarning[i] == true)) {
                        if (p == 1) {
                            TriggerEnable(gt_OcculusPingPlayer1, true);
                        } else if (p == 2) {
                            TriggerEnable(gt_OcculusPingPlayer2, true);
                        } else if (p == 3) {
                            TriggerEnable(gt_OcculusPingPlayer3, true);
                        } else if (p == 4) {
                            TriggerEnable(gt_OcculusPingPlayer4, true);
                        }
                    }
                    if ((gv_fireSkin[i] == true)) {
                        UnitBehaviorAddPlayer(gv_players[i].dragon, &quot;FireSkin&quot;, p, 1);
                    }
                    if ((gv_allSeeingEye[i] == true)) {
                        UnitBehaviorAddPlayer(gv_players[i].dragon, &quot;AllSeeingEye&quot;, p, 1);
                    }
                    while ((lv_tempVitality &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[i].dragon, &quot;AddVitality&quot;, p, 1);
                        gv_players[i].stats.vitality = (gv_players[i].stats.vitality + 1);
                        lv_tempVitality = (lv_tempVitality - 1);
                    }
                    while ((lv_tempStrength &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[i].dragon, &quot;AddStrength&quot;, p, 1);
                        gv_players[i].stats.strength = (gv_players[i].stats.strength + 1);
                        lv_tempStrength = (lv_tempStrength - 1);
                    }
                    while ((lv_tempIntelligence &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[i].dragon, &quot;AddIntelligence&quot;, p, 1);
                        gv_players[i].stats.intelligence = (gv_players[i].stats.intelligence + 1);
                        lv_tempIntelligence = (lv_tempIntelligence - 1);
                    }
                    while ((lv_tempDexterity &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[i].dragon, &quot;AddDexterity&quot;, p, 1);
                        gv_players[i].stats.dexterity = (gv_players[i].stats.dexterity + 1);
                        lv_tempDexterity = (lv_tempDexterity - 1);
                    }
                    while ((lv_tempAgility &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[i].dragon, &quot;AddAgility&quot;, p, 1);
                        gv_players[i].stats.agility = (gv_players[i].stats.agility + 1);
                        lv_tempAgility = (lv_tempAgility - 1);
                    }
                    while ((lv_tempReborn &gt; 0)) {
                        UnitBehaviorAddPlayer(gv_players[i].dragon, &quot;BlessingofDrache&quot;, p, 1);
                        lv_tempReborn = (lv_tempReborn - 1);
                    }
                    if ((gv_players[i].stats.attributePoints == 0.0)) {
                        UnitAbilityShow(gv_players[i].dragon, &quot;Agility1&quot;, false);
                        UnitAbilityShow(gv_players[i].dragon, &quot;Dexterity1&quot;, false);
                        UnitAbilityShow(gv_players[i].dragon, &quot;Intelligence1&quot;, false);
                        UnitAbilityShow(gv_players[i].dragon, &quot;Strength1&quot;, false);
                        UnitAbilityShow(gv_players[i].dragon, &quot;Vitality1&quot;, false);
                    }
                    else {
                        gv_attributeText[i] = FixedToString(gv_players[i].stats.attributePoints, 0);
                        libNtve_gf_SetDialogItemText(gv_players[i].stats.attributeDialog.textBox, StringToText(gv_attributeText[i]), PlayerGroupSingle(p));
                    }
                    UnitSetPropertyFixed(gv_players[i].dragon, c_unitPropLifePercent, 100.0);
                    UnitSetPropertyFixed(gv_players[i].dragon, c_unitPropEnergyPercent, 100.0);
                    UnitSetPropertyFixed(gv_players[i].dragon, c_unitPropShieldsPercent, 100.0);
                    BankValueSetFromUnit(gv_players[i].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(p), gv_players[i].dragon);
                    BankSectionRemove(gv_players[i].banks.dragonBank, &quot;Minerals&quot;);
                    BankSectionRemove(gv_players[i].banks.dragonBank, &quot;Minerals2&quot;);
                    BankSectionRemove(gv_players[i].banks.dragonBank, &quot;Vespene&quot;);
                    TechTreeRequirementsEnable(p, true);
                } else {
                    if (type == 0) {
                        UnitCreate(1, &quot;BabyDragon&quot;, 0, p, PointFromId(1), 270.0);
                    } else if (type == 1) {
                        UnitCreate(1, &quot;BabyIceDragon&quot;, 0, p, PointFromId(1), 270.0);
                    }
                    UnitSelect(UnitLastCreated(), p, true);
                    gv_players[i].dragon = UnitLastCreated();
                    BankValueSetFromUnit(gv_players[i].banks.dragonBank, &quot;Dragon&quot;, PlayerHandle(p), gv_players[i].dragon);
                    gv_players[i].stats.level = FixedToInt(UnitGetPropertyFixed(gv_players[i].dragon, c_unitPropLevel, c_unitPropCurrent));
                    gv_players[i].stats.agility = 0;
                    BankValueSetFromInt(gv_players[i].banks.dragonBank, &quot;Ag&quot;, PlayerHandle(p), gv_players[i].stats.agility);
                    gv_players[i].stats.dexterity = 0;
                    BankValueSetFromInt(gv_players[i].banks.dragonBank, &quot;De&quot;, PlayerHandle(p), gv_players[i].stats.dexterity);
                    gv_players[i].stats.intelligence = 0;
                    BankValueSetFromInt(gv_players[i].banks.dragonBank, &quot;Int&quot;, PlayerHandle(p), gv_players[i].stats.intelligence);
                    gv_players[i].stats.strength = 0;
                    BankValueSetFromInt(gv_players[i].banks.dragonBank, &quot;Str&quot;, PlayerHandle(p), gv_players[i].stats.strength);
                    gv_players[i].stats.vitality = 0;
                    BankValueSetFromInt(gv_players[i].banks.dragonBank, &quot;Vi&quot;, PlayerHandle(p), gv_players[i].stats.vitality);
                    gv_players[i].stats.attributePoints = 5.0;
                    BankValueSetFromFixed(gv_players[i].banks.dragonBank, &quot;AP&quot;, PlayerHandle(p), gv_players[i].stats.attributePoints);
                    // DSN
                    gv_players[i].verification.dragon = true;
                    UnitInventoryCreate(gv_players[i].dragon, &quot;BasicClaws&quot;);
                    UnitInventoryCreate(gv_players[i].dragon, &quot;BasicSpines&quot;);
                }
                PlayerGroupAdd(gv_humanPlayers, p);
                UnitGroupAdd(gv_dragons, gv_players[i].dragon);
                UnitControlGroupAddUnit(p, 1, gv_players[i].dragon);
                if ((UnitGetPropertyFixed(gv_players[i].dragon, c_unitPropLevel, c_unitPropCurrent) == 100.0) &amp;&amp; (gv_gameBeat[i] == true)) {
                    UnitXPGainEnable(gv_players[i].dragon, null, false);
                    HelpPanelAddTip(PlayerGroupSingle(p), libNtve_gf_FormatTipTitle(StringExternal(&quot;Param/Value/95517AFD&quot;), libNtve_ge_TipType_NormalTip), StringExternal(&quot;Param/Value/BC7D2081&quot;), StringExternal(&quot;Param/Value/FC8D3D85&quot;), &quot;Dragon Songs\\btn-ability-zerg-consume-red.dds&quot;);
                }
            }
            // ------------------------------------------------------------
            void gf_InitializePlayers () {
                int p=1;
                int o;
                // Loops through all players to initialize each one.
                for (;p&lt;=4;p+=1) {
                    if ((PlayerStatus(p) == c_playerStatusActive) &amp;&amp; (PlayerType(p) == c_playerTypeUser)) {
                        // Temporary until I handle setup of player.
                        gf_SetupPlayer(p);
                        libNtve_gf_PauseUnit(gv_players[p-1].dragon, true);
                        MeleeSetOption(p, c_meleeOptionSplitResources, false);
                        PlayerSetState(p, c_playerStateDisplayGameResult, false);
                        // Loop through all players to set ally values for other players.
                        o = 1;
                        for (;o&lt;=4;o+=1) {
                            // Only set ally value if player isn&apos;t other.
                            if (p != o) {
                                PlayerSetAlliance(p, c_allianceIdTrade, o, false);
                            }
                        }
                        libNtve_gf_SetAlliance(p, 15, libNtve_ge_AllianceSetting_Enemy);
                        gf_StatCheck(p);
                        gf_LoadStackCounts(p);
                        gf_ReapplyBuffs(p);
                        gf_ChangeItemsOwner(p);
                        gf_LoadSkills(p);
                        gf_LoadStash(p);
                        UnitSelect(gv_players[p-1].dragon, p, true);
                        gv_players[p-1].stats.arena.wins = BankValueGetAsInt(gv_players[p-1].banks.dragonBank, &quot;Wins&quot;, PlayerHandle(p));
                        gv_players[p-1].stats.arena.losses = BankValueGetAsInt(gv_players[p-1].banks.dragonBank, &quot;Losses&quot;, PlayerHandle(p));
                    }
                }
            }
            // ---------------------------------------------------------------
            void gf_OcculusPingPlayer(int p) {
                int i = p-1;
                UnitGroupLoopBegin(UnitGroupAlliance(p, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[i].dragon), 50.0), UnitFilter(0, 0, (1 &lt;&lt; c_targetFilterMissile) | (1 &lt;&lt; c_targetFilterItem), (1 &lt;&lt; (c_targetFilterDead - 32)) | (1 &lt;&lt; (c_targetFilterHidden - 32))), 1000));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(p), &quot;PingNumeric0&quot;, UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
                    PingSetScale(PingLastCreated(), 0.2);
                    PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
            }
            // ----------------------------------------------------------------
            bool gf_IsAdmin(int p) {
                int i=0;
                string playerHandle = PlayerHandle(p);
                for (;i&lt;adminCount;i+=1) {
                    if (playerHandle == gv_adminHandles[i]) {
                        return true;
                    }
                }
                return false;
            }
            // --------------------------------------------------------------
            void initMapScript () {
                FakeInitLibs();
                FakeInitGlobals();
                FakeInitCustomAI();
                FakeInitTriggers();
            }
            // --------------------------------------------------------------
            void gf_LoadDragonCheck (int p) {
                // Variable Declarations
                int lv__Bank;
                int lv__Manual;
                int lv_pi;
                // Variable Initialization
                lv_pi = (p - 1);
                // Implementation
                if (!gv_players[lv_pi].verification.dragon) {
                    lv__Manual = ((1193 + UnitLevel(gv_players[lv_pi].dragon)) + (ModI(FixedToInt(UnitGetPropertyFixed(gv_players[lv_pi].dragon, c_unitPropXP, c_unitPropCurrent)), 1000) + 1193));
                    lv__Bank = BankValueGetAsInt(gv_players[lv_pi].banks.dragonBank, &quot;DSN&quot;, PlayerHandle(p));
                    BankWait(gv_players[lv_pi].banks.rebornBank);
                    if ((lv__Bank != lv__Manual)) {
                        UIDisplayMessage(PlayerGroupSingle(p), c_messageAreaSubtitle, StringExternal(&quot;Param/Value/E00252DC&quot;));
                        GameOver(p, c_gameOverDefeat, true, true);
                    }
                    else {
                        gv_players[lv_pi].verification.dragon = true;
                    }
                }
            }
        </ScriptCode>
        <InitFunc>initMapScript</InitFunc>
    </Element>
    <Element Type="Category" Id="4FD05F37">
        <Item Type="Trigger" Id="98430BF2"/>
        <Item Type="Trigger" Id="DA6A294F"/>
        <Item Type="Trigger" Id="6B0C331A"/>
        <Item Type="Trigger" Id="41AC7611"/>
        <Item Type="Trigger" Id="9F48D8AC"/>
        <Item Type="Trigger" Id="9C14180F"/>
        <Item Type="Trigger" Id="7BEE90FC"/>
        <Item Type="Trigger" Id="0D4EEC20"/>
        <Item Type="Trigger" Id="662821A5"/>
    </Element>
    <Element Type="Trigger" Id="98430BF2">
        <Identifier>InitializeShops</Identifier>
        <Event Type="FunctionCall" Id="1369A2C0"/>
        <Action Type="FunctionCall" Id="B7079619"/>
        <Action Type="FunctionCall" Id="2C60BD9B"/>
        <Action Type="FunctionCall" Id="0FE2AF0B"/>
        <Action Type="FunctionCall" Id="59529A3A"/>
    </Element>
    <Element Type="FunctionCall" Id="1369A2C0">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000120"/>
    </Element>
    <Element Type="FunctionCall" Id="B7079619">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000082"/>
        <Parameter Type="Param" Id="E605382A"/>
        <Parameter Type="Param" Id="D0D994B1"/>
        <Parameter Type="Param" Id="206E2896"/>
    </Element>
    <Element Type="Param" Id="E605382A">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000141"/>
        <ValueType Type="unit"/>
        <ValueId Id="660"/>
    </Element>
    <Element Type="Param" Id="D0D994B1">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000142"/>
        <Value>0</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="Param" Id="206E2896">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000143"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000027"/>
    </Element>
    <Element Type="FunctionCall" Id="2C60BD9B">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000082"/>
        <Parameter Type="Param" Id="34C50D94"/>
        <Parameter Type="Param" Id="3A6DDF87"/>
        <Parameter Type="Param" Id="FD061D25"/>
    </Element>
    <Element Type="Param" Id="34C50D94">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000141"/>
        <ValueType Type="unit"/>
        <ValueId Id="2777"/>
    </Element>
    <Element Type="Param" Id="3A6DDF87">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000142"/>
        <Value>0</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="Param" Id="FD061D25">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000143"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000027"/>
    </Element>
    <Element Type="FunctionCall" Id="0FE2AF0B">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000082"/>
        <Parameter Type="Param" Id="5FBC20F1"/>
        <Parameter Type="Param" Id="58BA83D6"/>
        <Parameter Type="Param" Id="61E62907"/>
    </Element>
    <Element Type="Param" Id="5FBC20F1">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000141"/>
        <ValueType Type="unit"/>
        <ValueId Id="240"/>
    </Element>
    <Element Type="Param" Id="58BA83D6">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000142"/>
        <Value>0</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="Param" Id="61E62907">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000143"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000027"/>
    </Element>
    <Element Type="FunctionCall" Id="59529A3A">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000082"/>
        <Parameter Type="Param" Id="A8CEA6F0"/>
        <Parameter Type="Param" Id="2A1CA252"/>
        <Parameter Type="Param" Id="1D3669B7"/>
    </Element>
    <Element Type="Param" Id="A8CEA6F0">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000141"/>
        <ValueType Type="unit"/>
        <ValueId Id="1202"/>
    </Element>
    <Element Type="Param" Id="2A1CA252">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000142"/>
        <Value>0</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="Param" Id="1D3669B7">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000143"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000027"/>
    </Element>
    <Element Type="Trigger" Id="DA6A294F">
        <Identifier>ResetingTheArmorShop</Identifier>
        <Event Type="FunctionCall" Id="0BF7A379"/>
        <Action Type="FunctionCall" Id="173EDB58"/>
    </Element>
    <Element Type="FunctionCall" Id="0BF7A379">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000041"/>
        <Parameter Type="Param" Id="FB452130"/>
        <Parameter Type="Param" Id="06F20F62"/>
        <Parameter Type="Param" Id="152FC296"/>
    </Element>
    <Element Type="Param" Id="FB452130">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000325"/>
        <Preset Type="PresetValue" Library="Ntve" Id="C84C7A78"/>
    </Element>
    <Element Type="Param" Id="06F20F62">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000326"/>
        <ValueType Type="region"/>
        <ValueId Id="291"/>
    </Element>
    <Element Type="Param" Id="152FC296">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000327"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000146"/>
    </Element>
    <Element Type="FunctionCall" Id="173EDB58">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000082"/>
        <Parameter Type="Param" Id="2A5ED524"/>
        <Parameter Type="Param" Id="E74C094A"/>
        <Parameter Type="Param" Id="CDA2854D"/>
    </Element>
    <Element Type="Param" Id="2A5ED524">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000141"/>
        <ValueType Type="unit"/>
        <ValueId Id="660"/>
    </Element>
    <Element Type="Param" Id="E74C094A">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000142"/>
        <Value>0</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="Param" Id="CDA2854D">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000143"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000027"/>
    </Element>
    <Element Type="Trigger" Id="6B0C331A">
        <Identifier>ResetingTheShardShop</Identifier>
        <Event Type="FunctionCall" Id="4FAD2C4E"/>
        <Action Type="FunctionCall" Id="2F7FE0BE"/>
    </Element>
    <Element Type="FunctionCall" Id="4FAD2C4E">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000041"/>
        <Parameter Type="Param" Id="91B78AAC"/>
        <Parameter Type="Param" Id="5FAE3E8A"/>
        <Parameter Type="Param" Id="5B4827C7"/>
    </Element>
    <Element Type="Param" Id="91B78AAC">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000325"/>
        <Preset Type="PresetValue" Library="Ntve" Id="C84C7A78"/>
    </Element>
    <Element Type="Param" Id="5FAE3E8A">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000326"/>
        <ValueType Type="region"/>
        <ValueId Id="290"/>
    </Element>
    <Element Type="Param" Id="5B4827C7">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000327"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000146"/>
    </Element>
    <Element Type="FunctionCall" Id="2F7FE0BE">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000082"/>
        <Parameter Type="Param" Id="51ED1BBB"/>
        <Parameter Type="Param" Id="55CF2270"/>
        <Parameter Type="Param" Id="7506F297"/>
    </Element>
    <Element Type="Param" Id="51ED1BBB">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000141"/>
        <ValueType Type="unit"/>
        <ValueId Id="2777"/>
    </Element>
    <Element Type="Param" Id="55CF2270">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000142"/>
        <Value>0</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="Param" Id="7506F297">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000143"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000027"/>
    </Element>
    <Element Type="Trigger" Id="41AC7611">
        <Identifier>ResetingTheWeaponShop</Identifier>
        <Event Type="FunctionCall" Id="D8350A8C"/>
        <Action Type="FunctionCall" Id="0166989E"/>
    </Element>
    <Element Type="FunctionCall" Id="D8350A8C">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000041"/>
        <Parameter Type="Param" Id="08AB06E0"/>
        <Parameter Type="Param" Id="8B2BE014"/>
        <Parameter Type="Param" Id="B2F8A8A6"/>
    </Element>
    <Element Type="Param" Id="08AB06E0">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000325"/>
        <Preset Type="PresetValue" Library="Ntve" Id="C84C7A78"/>
    </Element>
    <Element Type="Param" Id="8B2BE014">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000326"/>
        <ValueType Type="region"/>
        <ValueId Id="289"/>
    </Element>
    <Element Type="Param" Id="B2F8A8A6">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000327"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000146"/>
    </Element>
    <Element Type="FunctionCall" Id="0166989E">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000082"/>
        <Parameter Type="Param" Id="2C9C989F"/>
        <Parameter Type="Param" Id="BE443460"/>
        <Parameter Type="Param" Id="38E828B2"/>
    </Element>
    <Element Type="Param" Id="2C9C989F">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000141"/>
        <ValueType Type="unit"/>
        <ValueId Id="240"/>
    </Element>
    <Element Type="Param" Id="BE443460">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000142"/>
        <Value>0</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="Param" Id="38E828B2">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000143"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000027"/>
    </Element>
    <Element Type="Trigger" Id="9F48D8AC">
        <Identifier>ResetingThePotionShop</Identifier>
        <Event Type="FunctionCall" Id="D2162760"/>
        <Action Type="FunctionCall" Id="A8C4986B"/>
    </Element>
    <Element Type="FunctionCall" Id="D2162760">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000041"/>
        <Parameter Type="Param" Id="62668208"/>
        <Parameter Type="Param" Id="1F4774A8"/>
        <Parameter Type="Param" Id="5CA6269B"/>
    </Element>
    <Element Type="Param" Id="62668208">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000325"/>
        <Preset Type="PresetValue" Library="Ntve" Id="C84C7A78"/>
    </Element>
    <Element Type="Param" Id="1F4774A8">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000326"/>
        <ValueType Type="region"/>
        <ValueId Id="288"/>
    </Element>
    <Element Type="Param" Id="5CA6269B">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000327"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000146"/>
    </Element>
    <Element Type="FunctionCall" Id="A8C4986B">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000082"/>
        <Parameter Type="Param" Id="726A4367"/>
        <Parameter Type="Param" Id="96BEECC4"/>
        <Parameter Type="Param" Id="7EB617A5"/>
    </Element>
    <Element Type="Param" Id="726A4367">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000141"/>
        <ValueType Type="unit"/>
        <ValueId Id="1202"/>
    </Element>
    <Element Type="Param" Id="96BEECC4">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000142"/>
        <Value>0</Value>
        <ValueType Type="int"/>
    </Element>
    <Element Type="Param" Id="7EB617A5">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000143"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000027"/>
    </Element>
    <Element Type="Trigger" Id="9C14180F">
        <Identifier>WhoOwnsTheArmorShop</Identifier>
        <Event Type="FunctionCall" Id="0204885D"/>
        <Action Type="FunctionCall" Id="CFDB90A5"/>
    </Element>
    <Element Type="FunctionCall" Id="0204885D">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000041"/>
        <Parameter Type="Param" Id="AD6595D4"/>
        <Parameter Type="Param" Id="7CFE1CDE"/>
        <Parameter Type="Param" Id="80629B34"/>
    </Element>
    <Element Type="Param" Id="AD6595D4">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000325"/>
        <Preset Type="PresetValue" Library="Ntve" Id="C84C7A78"/>
    </Element>
    <Element Type="Param" Id="7CFE1CDE">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000326"/>
        <ValueType Type="region"/>
        <ValueId Id="291"/>
    </Element>
    <Element Type="Param" Id="80629B34">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000327"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000145"/>
    </Element>
    <Element Type="FunctionCall" Id="CFDB90A5">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000082"/>
        <Parameter Type="Param" Id="29EAF88B"/>
        <Parameter Type="Param" Id="8E234683"/>
        <Parameter Type="Param" Id="4C0E0BA3"/>
    </Element>
    <Element Type="Param" Id="29EAF88B">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000141"/>
        <ValueType Type="unit"/>
        <ValueId Id="660"/>
    </Element>
    <Element Type="Param" Id="8E234683">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000142"/>
        <FunctionCall Type="FunctionCall" Id="81ED6A24"/>
    </Element>
    <Element Type="FunctionCall" Id="81ED6A24">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000053"/>
    </Element>
    <Element Type="Param" Id="4C0E0BA3">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000143"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000027"/>
    </Element>
    <Element Type="Trigger" Id="7BEE90FC">
        <Identifier>WhoOwnsTheShardShop</Identifier>
        <Event Type="FunctionCall" Id="89F3BAF6"/>
        <Action Type="FunctionCall" Id="5924D231"/>
    </Element>
    <Element Type="FunctionCall" Id="89F3BAF6">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000041"/>
        <Parameter Type="Param" Id="0F212C86"/>
        <Parameter Type="Param" Id="F1D275F6"/>
        <Parameter Type="Param" Id="7AAF56A5"/>
    </Element>
    <Element Type="Param" Id="0F212C86">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000325"/>
        <Preset Type="PresetValue" Library="Ntve" Id="C84C7A78"/>
    </Element>
    <Element Type="Param" Id="F1D275F6">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000326"/>
        <ValueType Type="region"/>
        <ValueId Id="290"/>
    </Element>
    <Element Type="Param" Id="7AAF56A5">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000327"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000145"/>
    </Element>
    <Element Type="FunctionCall" Id="5924D231">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000082"/>
        <Parameter Type="Param" Id="C7B4C34E"/>
        <Parameter Type="Param" Id="CE770F2B"/>
        <Parameter Type="Param" Id="40A73B02"/>
    </Element>
    <Element Type="Param" Id="C7B4C34E">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000141"/>
        <ValueType Type="unit"/>
        <ValueId Id="2777"/>
    </Element>
    <Element Type="Param" Id="CE770F2B">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000142"/>
        <FunctionCall Type="FunctionCall" Id="8C7D72C6"/>
    </Element>
    <Element Type="FunctionCall" Id="8C7D72C6">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000053"/>
    </Element>
    <Element Type="Param" Id="40A73B02">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000143"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000027"/>
    </Element>
    <Element Type="Trigger" Id="0D4EEC20">
        <Identifier>WhoOwnsTheWeaponShop</Identifier>
        <Event Type="FunctionCall" Id="153DF751"/>
        <Action Type="FunctionCall" Id="6E62C766"/>
    </Element>
    <Element Type="FunctionCall" Id="153DF751">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000041"/>
        <Parameter Type="Param" Id="C7680C2F"/>
        <Parameter Type="Param" Id="C0399A8F"/>
        <Parameter Type="Param" Id="E44918BE"/>
    </Element>
    <Element Type="Param" Id="C7680C2F">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000325"/>
        <Preset Type="PresetValue" Library="Ntve" Id="C84C7A78"/>
    </Element>
    <Element Type="Param" Id="C0399A8F">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000326"/>
        <ValueType Type="region"/>
        <ValueId Id="289"/>
    </Element>
    <Element Type="Param" Id="E44918BE">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000327"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000145"/>
    </Element>
    <Element Type="FunctionCall" Id="6E62C766">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000082"/>
        <Parameter Type="Param" Id="9BE6D27D"/>
        <Parameter Type="Param" Id="DF0999AE"/>
        <Parameter Type="Param" Id="581D3D36"/>
    </Element>
    <Element Type="Param" Id="9BE6D27D">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000141"/>
        <ValueType Type="unit"/>
        <ValueId Id="240"/>
    </Element>
    <Element Type="Param" Id="DF0999AE">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000142"/>
        <FunctionCall Type="FunctionCall" Id="F95FFA55"/>
    </Element>
    <Element Type="FunctionCall" Id="F95FFA55">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000053"/>
    </Element>
    <Element Type="Param" Id="581D3D36">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000143"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000027"/>
    </Element>
    <Element Type="Trigger" Id="662821A5">
        <Identifier>WhoOwnsThePotionShop</Identifier>
        <Event Type="FunctionCall" Id="D0025C09"/>
        <Action Type="FunctionCall" Id="A5F9DDD5"/>
    </Element>
    <Element Type="FunctionCall" Id="D0025C09">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000041"/>
        <Parameter Type="Param" Id="58A91291"/>
        <Parameter Type="Param" Id="12D9E31F"/>
        <Parameter Type="Param" Id="87F40064"/>
    </Element>
    <Element Type="Param" Id="58A91291">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000325"/>
        <Preset Type="PresetValue" Library="Ntve" Id="C84C7A78"/>
    </Element>
    <Element Type="Param" Id="12D9E31F">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000326"/>
        <ValueType Type="region"/>
        <ValueId Id="288"/>
    </Element>
    <Element Type="Param" Id="87F40064">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000327"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000145"/>
    </Element>
    <Element Type="FunctionCall" Id="A5F9DDD5">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000082"/>
        <Parameter Type="Param" Id="BCD0F41E"/>
        <Parameter Type="Param" Id="67B80FC2"/>
        <Parameter Type="Param" Id="B31DC242"/>
    </Element>
    <Element Type="Param" Id="BCD0F41E">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000141"/>
        <ValueType Type="unit"/>
        <ValueId Id="1202"/>
    </Element>
    <Element Type="Param" Id="67B80FC2">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000142"/>
        <FunctionCall Type="FunctionCall" Id="C8AEA3CC"/>
    </Element>
    <Element Type="FunctionCall" Id="C8AEA3CC">
        <FunctionDef Type="FunctionDef" Library="Ntve" Id="00000053"/>
    </Element>
    <Element Type="Param" Id="B31DC242">
        <ParameterDef Type="ParamDef" Library="Ntve" Id="00000143"/>
        <Preset Type="PresetValue" Library="Ntve" Id="00000027"/>
    </Element>
</TriggerData>