void lib_talent_gf_SaveTalentBuild (int lp_buildIndex, string lp_bankName, playerData_r lr_player) {
  bank lv_talentBank;
  int lv_talentIndex;
  int lv_talentStringIndex;
  talentData_r lr_talent;

  lv_talentStringIndex = 1;

  BankLoad("DQRPGTalentLibraryBank", lr_player.player);
  lv_talentBank = BankLastCreated();
  lr_player.talent.buildStrings[lp_buildIndex] = "";

  for(lv_talentIndex = 0; lv_talentIndex < lib_talent_gv_TALENTCOUNT; lv_talentIndex += 1) {
    lv_talentStringIndex = lv_talentIndex * 2 + 1;
    lr_talent = lr_player.talent.talents[lv_talentIndex];
    if (lr_talent.rank < 10) {
      lr_player.talent.buildStrings[lp_buildIndex] = StringReplace(lr_player.talent.buildStrings[lp_buildIndex], "0", lv_talentStringIndex, lv_talentStringIndex);
      lr_player.talent.buildStrings[lp_buildIndex] = StringReplace(lr_player.talent.buildStrings[lp_buildIndex], IntToString(lr_talent.rank), (lv_talentStringIndex + 1), (lv_talentStringIndex + 1));
    }
    else {
      lr_player.talent.buildStrings[lp_buildIndex] = StringReplace(lr_player.talent.buildStrings[lp_buildIndex], IntToString(lr_talent.rank), lv_talentStringIndex, (lv_talentStringIndex + 1));
    }
  }
  BankValueSetFromString(lv_talentBank, lp_bankName, IntToString(lp_buildIndex), lr_player.talent.buildStrings[lp_buildIndex]);
  BankValueSetFromInt(lv_talentBank, (lp_bankName + "Points"), IntToString(lp_buildIndex), lr_player.talent.availablePoints);
  BankSave(lv_talentBank);
}
