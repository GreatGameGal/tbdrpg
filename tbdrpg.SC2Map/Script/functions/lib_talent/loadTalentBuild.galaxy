void lib_talent_gf_LoadTalentBuild (int lp_buildIndex, string lp_bankName, Player_r lr_player) {
  int lv_tree;
  int lv_row;
  int lv_column;

  bank lv_talentBank;
  int lv_talentIndex;
  int lv_talentStringIndex;
  int lv_talentCurrentRank;
  int lv_tierPointsRequired;
  int lv_prerequisiteIndex;
  Talent_r lr_talent;


  BankLoad("DQRPGTalentLibraryBank", lr_player.player);
  lv_talentBank = BankLastCreated();
  lr_player.talent.buildStrings[lp_buildIndex] = "";

  lr_player.talent.buildStrings[lp_buildIndex] = BankValueGetAsString(lv_talentBank, lp_bankName, IntToString(lp_buildIndex));
  if (lr_player.talent.buildStrings[lp_buildIndex] == null) {
    lib_talent_gf_ResetTalentBuild(lr_player, UnitLevel(lr_player.dragon) + UnitLevel(lr_player.dragon) / gv_LevelsPerEvolution);
    return;
  }
  if (StringLength(lr_player.talent.buildStrings[lp_buildIndex]) != lib_talent_gv_TALENTCOUNT * 2) {
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_TALENT_LOAD_RESET"));
    lib_talent_gf_ResetTalentBuild(lr_player, UnitLevel(lr_player.dragon) + UnitLevel(lr_player.dragon) / gv_LevelsPerEvolution);
    return;
  }
  lib_talent_gf_ResetTalentBuild(lr_player, 1);
  lr_player.talent.availablePoints = BankValueGetAsInt(lv_talentBank, (lp_bankName + "Points"), IntToString(lp_buildIndex));
  libNtve_gf_SetDialogItemText(lr_player.talent.availablePointsLabel, IntToText(lr_player.talent.availablePoints), PlayerGroupAll());
  for (lv_talentIndex = 0; lv_talentIndex < lib_talent_gv_TALENTCOUNT; lv_talentIndex += 1) {
    lr_talent = lr_player.talent.talents[lv_talentIndex];
    if (!lr_talent.isUsed) {
      continue;
    }
    lv_tree = lr_talent.tree;
    lv_row = lr_talent.row;
    lv_column = lr_talent.column;
    lv_talentStringIndex = lv_talentIndex * 2 + 1;
    // Uses the min function to ensure it isn't greater than the max rank.
    lv_talentCurrentRank = MinI(
      StringToInt(StringSub(lr_player.talent.buildStrings[lp_buildIndex], lv_talentStringIndex, lv_talentStringIndex + 1)),
      lr_talent.maxRank
    );
    lr_talent.rank = lv_talentCurrentRank;
    lr_player.talent.pointsInTree[lv_tree] += lv_talentCurrentRank;
    lr_player.talent.spentPoints += lv_talentCurrentRank;

    if (lv_talentCurrentRank > 0 && lr_talent.upgrade != null) { 
      libNtve_gf_SetUpgradeLevelForPlayer(lr_player.player, lr_talent.upgrade, lv_talentCurrentRank);
      if ((lr_talent.upgrade == "StrengthoftheDragon")) {
        UnitBehaviorAdd(lr_player.dragon, "StrengthoftheDragon", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.strengthOfTheDragon += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "MindoftheDragon")) {
        UnitBehaviorAdd(lr_player.dragon, "MindoftheDragon", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.mindOfTheDragon += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "PowerOverwhelming")) {
        UnitBehaviorAdd(lr_player.dragon, "PowerOverwhelming", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.powerOverwhelming += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "Rage")) {
        UnitBehaviorAdd(lr_player.dragon, "Rage", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.rage += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "VampiricTendencies")) {
        UnitBehaviorAdd(lr_player.dragon, "VampiricTendencies", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.vampiricTendencies += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "CriticalCrepitus")) {
        UnitBehaviorAdd(lr_player.dragon, "CriticalCrepitus", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.criticalCrepitus += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "Zeal")) {
        UnitBehaviorAdd(lr_player.dragon, "Zeal", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.zeal += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "DarkDissulto")) {
        UnitBehaviorAdd(lr_player.dragon, "DarkDissulto", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.darkDissulto += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "SpikedScales")) {
        UnitBehaviorAdd(lr_player.dragon, "SpikedScales", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.spikedScales += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "Retaliation")) {
        UnitBehaviorAdd(lr_player.dragon, "Retaliation", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.retaliation += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "Headshot")) {
        UnitBehaviorAdd(lr_player.dragon, "Headshot", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.headshot += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "StickyShot")) {
        UnitBehaviorAdd(lr_player.dragon, "StickyShot", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.stickyShot += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "DuelWield")) {
        UnitBehaviorAdd(lr_player.dragon, "DualWield", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.dualWield += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "GreedisGood")) {
        UnitBehaviorAdd(lr_player.dragon, "GreedIsGood", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.greedIsGood += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "QuickLearner")) {
        UnitBehaviorAdd(lr_player.dragon, "QuickLearner", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.quickLearner += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "AbsorbMana")) {
        UnitBehaviorAdd(lr_player.dragon, "AbsorbMana", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.absorbMana += lv_talentCurrentRank;
      }
      if ((lr_talent.upgrade == "RealmSwitch")) {
        UnitBehaviorAdd(lr_player.dragon, "RealmSwitch", lr_player.dragon, lv_talentCurrentRank);
        lr_player.talent.realmSwitch += lv_talentCurrentRank;
      }
    } 
  }
  
  // Shut up this function should be so rarely called that this shouldn't be a problem.
  for (lv_talentIndex = 0; lv_talentIndex < lib_talent_gv_TALENTCOUNT; lv_talentIndex += 1) {
    lr_talent = lr_player.talent.talents[lv_talentIndex];
    if (!lr_talent.isUsed) {
      continue;
    }
    
    lv_tree = lr_talent.tree;
    lv_row = lr_talent.row;
    lv_column = lr_talent.column;
    lv_tierPointsRequired = lr_player.talent.pointsPerTier * lv_row;
    lv_prerequisiteIndex = lr_talent.prerequisiteIs;
    
    // Disable the buttons first, enabling them if necessary.
    DialogControlSetEnabled(lr_talent.button, PlayerGroupAll(), false);
    DialogControlSetVisible(lr_talent.buttonGlow, PlayerGroupAll(), false);
    DialogControlSetVisible(lr_talent.buttonLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(lr_talent.buttonLabelBackground, PlayerGroupAll(), false);
    
    if (
      lr_talent.prerequisiteIs == -1 ||
      (
        lr_player.talent.talents[lv_prerequisiteIndex].rank >= lr_talent.prerequisiteRequiredRank &&
        lr_player.talent.pointsInTree[lv_tree] > lv_tierPointsRequired
      ) ||
      lr_talent.rank > 0
    ) {
      lr_talent.prerequisitesComplete = true;
      // Internal logic in this function will handle if and how it should be unlocked.
      lib_talent_gf_UnlockTalentButton(lr_player, lv_tree, lv_column, lv_row);
    } else {
      if (lr_talent.type == lib_talent_ge_TalentType_Ability) {
        lib_talent_gf_UpdateAbilityButtonTooltip(lr_player, lr_talent.button, lv_talentIndex, lv_tierPointsRequired, lr_talent.tree, lr_talent.abilityLink, lr_talent.buttonLink);
      }
      else if (lr_talent.type == lib_talent_ge_TalentType_Passive) {
        lib_talent_gf_UpdatePassiveButtonTooltip(lr_player, lr_talent.button, lv_talentIndex, lv_tierPointsRequired, lr_talent.tree, lr_talent.name, lr_talent.tooltipDescription, lr_talent.rank, lr_talent.multiplier[0], lr_talent.multiplier[1]);
      }
    }
    libNtve_gf_SetDialogItemText(lr_talent.buttonLabel, (IntToText(lr_talent.rank) + StringExternal("Param/Value/lib_1_D81739DA") + IntToText(lr_talent.maxRank)), PlayerGroupAll());
    
  }
  
}
