void gf_EvolveTo (playerData_r lr_player, string lp_unitName);
int gf_GetEvolution (playerData_r lr_player);
void gf_SpawnEnemiesVerbotenInfestation (playerData_r lr_player);

void gf_AddExperience (unit lp_hero, fixed lp_experienceAmmount);
void gf_OpenQuestDialog (playerData_r lr_player, text lp_questText, text lp_questName, text lp_reward, text lp_recommendedLevel);
void gf_CloseQuestDialog (playerData_r lr_player);
void gf_OpenTalkDialog (playerData_r lr_player, text lp_nPCName, text lp_dialog);
void gf_CloseTalkDialog (playerData_r lr_player);
void gf_OpenRewardDialog (playerData_r lr_player, text lp_questName, text lp_dialog);
void gf_CloseRewardDialog (playerData_r lr_player);
void gf_SQ0Setup (playerData_r lr_player);
void gf_SQ1Setup (playerData_r lr_player);
void gf_SQ2Setup (playerData_r lr_player);
void gf_SQ3Setup (playerData_r lr_player);
void gf_SQ4Setup (playerData_r lr_player);
void gf_SQ5Setup (playerData_r lr_player);
void gf_SQ6Setup (playerData_r lr_player);
void gf_SQ7Setup (playerData_r lr_player);
void gf_SQ8Setup (playerData_r lr_player);
void gf_SQ9Setup (playerData_r lr_player);
fixed gf_CalculateHealthMissing (unit lp_unit);
void gf_SaveStackCounts (playerData_r lr_player);
void gf_RemoveWeapons (unit lp_hero);
void gf_SaveSkills (playerData_r lr_player);
void gf_FillInventory (playerData_r lr_player);
void gf_PutInventoryinInventory (playerData_r lr_player);
void gf_ReapplyBuffs (playerData_r lr_player);
void gf_ShowStats (playerData_r lr_player);
void gf_HideStats (playerData_r lr_player);
void gf_RandomEffectonAttack (fixed lp_percentChance, int lp_ammountof, string lp_debuff, unit lp_recievingUnit, unit lp_sendingUnit);
void gf_RandomlySpawnAllies (fixed lp_percentChance, int lp_ammountof, string lp_enemytospawn, unit lp_spawningUnit, unit lp_spawnee);
bool gf_RandomChance (fixed lp_percentChance);
void gf_NosferatusRelic (playerData_r lr_player, unit lp_hero, fixed lp_attackAmmount);
void gf_StickyShot (unit lp_hero, unit lp_target);
void gf_RealmSwitch (unit lp_hero, unit lp_target);
void gf_DualWield (unit lp_hero, unit lp_target, string lp_herosEffect, fixed lp_herosEffectDamage);
void gf_Rage (unit lp_hero, fixed lp_damagingAmount);
void gf_WaypointTeleport (playerData_r lr_player, region lp_waypoint);
void gf_ShowWaypointDialog (playerData_r lr_player);
void gf_HideWaypointDialog (playerData_r lr_player);
void gf_ResetTalentBuildandVariables (playerData_r lr_player);
void gf_LoadStackCounts (playerData_r lr_player);
void gf_LoadSkills (playerData_r lr_player);
void gf_LoadHPC (playerData_r lr_player);
void gf_LoadHRC (playerData_r lr_player);
void gf_LoadDragonCheck (playerData_r lr_player);
void gf_LoadStash (playerData_r lr_player);
void gf_InitializeOne ();
void gf_InitializeTwo ();
void gf_InitializeThree ();
void gf_ChangeItemsOwner (playerData_r lr_player);
void gf_StatCheck (playerData_r lr_player);
void gf_Save (playerData_r lr_player);
void gf_SaveHero (playerData_r lr_player);
void gf_SaveStash (playerData_r lr_player);
void gf_SaveHPC (playerData_r lr_player);
void gf_SaveHRC (playerData_r lr_player);
void gf_ApplyRebornStats (playerData_r lr_player);
bool gf_IsAdmin(string playerHandle);
void gf_InitializePlayers();
void gf_SetupPlayer(playerData_r lr_player);
void gf_OcculusPingPlayer(playerData_r lr_player);
void gf_AllGuardiansDead ();

// Cinematic AI Funcs
void ai665651A4_wave_enable (int w, int p, bool val);
bool ai665651A4_wave_isEnabled (int w, int p);
unitgroup ai665651A4_wave_createdUnits (int w, int p);
wave ai665651A4_wave_createdWave (int w, int p);
void ai665651A4_wave_run (int w, int p, playergroup target, bool wait);
void ai665651A4_waves_run (int p, playergroup target);
void ai665651A4_waves_enable (int p, bool val);
void ai665651A4_waves_stop ();
void ai665651A4_setDefGather (int p, point val);
string ai665651A4_getCustomData (int p);
wave ai665651A4_getLastWave (int p);
void ai665651A4_start (int p);

// Quest AI Funcs.
void aiDF9A5388_wave_enable (int w, int p, bool val);
bool aiDF9A5388_wave_isEnabled (int w, int p);
unitgroup aiDF9A5388_wave_createdUnits (int w, int p);
wave aiDF9A5388_wave_createdWave (int w, int p);
void aiDF9A5388_wave_run (int w, int p, playergroup target, bool wait);
void aiDF9A5388_waves_init ();
bool aiDF9A5388_waves_runFunc (bool c, bool a);
void aiDF9A5388_waves_run (int p, playergroup target);
void aiDF9A5388_waves_enable (int p, bool val);
void aiDF9A5388_waves_stop ();
void aiDF9A5388_setDefGather (int p, point val);
string aiDF9A5388_getCustomData (int p);
wave aiDF9A5388_getLastWave (int p);
void aiDF9A5388_start (int p);

// Custom AI funcs
void FakeInitCustomAI ();

// Talent Library
void lib_talent_InitVariables ();
int lib_talent_gf_FlattenPosition (int lp_tree, int lp_column, int lp_row);
int lib_talent_gf_GetTalentButtonIndex (playerData_r lr_player, int lp_dialogItem);
void lib_talent_gf_SaveTalentBuild (int lp_buildIndex, string lp_bankName, playerData_r lr_player);
void lib_talent_gf_LoadTalentBuild (int lp_buildIndex, string lp_bankName, playerData_r lr_player);
// THIS FUNCTION CRASHSE THE GAME CURRENTLY, DON'T USE IT!
void lib_talent_gf_UpdateButtonTooltip (playerData_r lr_player, int lp_talentIndex);

bool lib_talent_gf_TalentTreeisOpen (playerData_r lr_player);
void lib_talent_gf_UpdateAbilityButtonTooltip (playerData_r lr_player, int lp_button, int lp_buttonIndex, int lp_requiredPoints, int lp_tree, string lp_abilityLink, string lp_buttonLink);
void lib_talent_gf_UpdatePassiveButtonTooltip (playerData_r lr_player, int lp_button, int lp_buttonIndex, int lp_requiredPoints, int lp_tree, text lp_name, text lp_descriptionRaw, int lp_currentRank, fixed lp_multiplier1, fixed lp_multiplier2);
void lib_talent_gf_UnlockTalentButton (playerData_r lr_player, int lp_tree, int lp_column, int lp_row);
void lib_talent_gf_UnlockTalentTier (playerData_r lr_player, int lp_tree, int lp_tier);
void lib_talent_gf_CreateTalentTree (playerData_r lr_player, text lp_title, int lp_colorScheme, int lp_trees, string lp_treeNames, int lp_columns, int lp_rows, int lp_pointsPerTier);
void lib_talent_gf_CreateTalentButton (playerData_r lr_player, int lp_tree, int lp_column, int lp_row, int lp_talentPrerequisite, string lp_upgradeLink, int lp_talentType, text lp_namePassive, int lp_maxRankPassive, string lp_imagePassive, text lp_tooltipTextPassive, fixed lp_multiplier1Passive, fixed lp_multiplier2Passive, string lp_abilityLinkAbility, string lp_buttonLinkAbility);
void lib_talent_gf_ShowHideTalentTree (playerData_r lr_player);
void lib_talent_gf_GrantTalentPoints (int lp_talentPoints, playerData_r lr_player);
void lib_talent_gf_DestroyTalentTree (playerData_r lr_player);
void lib_talent_gf_ResetTalentBuild (playerData_r lr_player, int lp_resetto);
