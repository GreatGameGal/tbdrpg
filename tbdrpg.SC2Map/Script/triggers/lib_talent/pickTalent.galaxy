bool lib_talent_gt_PickTalent_Func (bool testConds, bool runActions) {  
  int lv_unlockedToTier;
  int lv_talentIndex;
  int lv_unlockedPrereqTalentIndex;
  int lv_unlockedPrereqTalentRequiredPoints;
  int lv_pointsRequired;
  playerData_r lr_player = gv_players[EventPlayer() - 1];
  talentData_r lr_talent;


  lv_talentIndex = lib_talent_gf_GetTalentButtonIndex(lr_player, EventDialogControl());

  if (testConds) {
    if (
      lv_talentIndex == -1 ||
      lr_player.talent.availablePoints < 1 ||
      lr_player.talent.adding
    ) {
      return false;
    }
  }

  lr_talent = lr_player.talent.talents[lv_talentIndex];

  if (!runActions) {
    return true;
  }

  lr_player.talent.adding = true;
  while (lr_player.talent.locked) {
    Wait(1.0, c_timeGame);
  }
  lr_player.talent.locked = true;

  lr_talent.rank += 1;
  lr_player.talent.pointsInTree[lr_talent.tree] += 1;
  lr_player.talent.availablePoints -= 1;
  lr_player.talent.spentPoints += 1;
  if ((lr_talent.upgrade != null)) {
    TechTreeUpgradeAddLevel(lr_player.player, lr_talent.upgrade, 1);
    if ((lr_talent.upgrade == "StrengthoftheDragon")) {
      UnitBehaviorAdd(lr_player.dragon, "StrengthoftheDragon", lr_player.dragon, 1);
      lr_player.talent.strengthOfTheDragon += 1;
    }
    else if ((lr_talent.upgrade == "MindoftheDragon")) {
      UnitBehaviorAdd(lr_player.dragon, "MindoftheDragon", lr_player.dragon, 1);
      lr_player.talent.mindOfTheDragon += 1;
    }
    else if ((lr_talent.upgrade == "PowerOverwhelming")) {
      UnitBehaviorAdd(lr_player.dragon, "PowerOverwhelming", lr_player.dragon, 1);
      lr_player.talent.powerOverwhelming += 1;
    }
    else if ((lr_talent.upgrade == "Rage")) {
      UnitBehaviorAdd(lr_player.dragon, "Rage", lr_player.dragon, 1);
      lr_player.talent.rage += 1;
    }
    else if ((lr_talent.upgrade == "VampiricTendencies")) {
      UnitBehaviorAdd(lr_player.dragon, "VampiricTendencies", lr_player.dragon, 1);
      lr_player.talent.vampiricTendencies += 1;
    }
    else if ((lr_talent.upgrade == "Zeal")) {
      UnitBehaviorAdd(lr_player.dragon, "Zeal", lr_player.dragon, 1);
      lr_player.talent.zeal += 1;
    }
    else if ((lr_talent.upgrade == "CriticalCrepitus")) {
      UnitBehaviorAdd(lr_player.dragon, "CriticalCrepitus", lr_player.dragon, 1);
      lr_player.talent.criticalCrepitus += 1;
    }
    else if ((lr_talent.upgrade == "DarkDissulto")) {
      UnitBehaviorAdd(lr_player.dragon, "DarkDissulto", lr_player.dragon, 1);
      lr_player.talent.darkDissulto += 1;
    }
    else if ((lr_talent.upgrade == "SpikedScales")) {
      UnitBehaviorAdd(lr_player.dragon, "SpikedScales", lr_player.dragon, 1);
      lr_player.talent.spikedScales += 1;
    }
    else if ((lr_talent.upgrade == "Retaliation")) {
      UnitBehaviorAdd(lr_player.dragon, "Retaliation", lr_player.dragon, 1);
      lr_player.talent.retaliation += 1;
    }
    else if ((lr_talent.upgrade == "Headshot")) {
      UnitBehaviorAdd(lr_player.dragon, "Headshot", lr_player.dragon, 1);
      lr_player.talent.headshot += 1;
    }
    else if ((lr_talent.upgrade == "StickyShot")) {
      UnitBehaviorAdd(lr_player.dragon, "StickyShot", lr_player.dragon, 1);
      lr_player.talent.stickyShot += 1;
    }
    else if ((lr_talent.upgrade == "DuelWield")) {
      UnitBehaviorAdd(lr_player.dragon, "DualWield", lr_player.dragon, 1);
      lr_player.talent.dualWield += 1;
    }
    else if ((lr_talent.upgrade == "GreedisGood")) {
      UnitBehaviorAdd(lr_player.dragon, "GreedIsGood", lr_player.dragon, 1);
      lr_player.talent.greedIsGood += 1;
    }
    else if ((lr_talent.upgrade == "QuickLearner")) {
      UnitBehaviorAdd(lr_player.dragon, "QuickLearner", lr_player.dragon, 1);
      lr_player.talent.quickLearner += 1;
    }
    else if ((lr_talent.upgrade == "AbsorbMana")) {
      UnitBehaviorAdd(lr_player.dragon, "AbsorbMana", lr_player.dragon, 1);
      lr_player.talent.absorbMana += 1;
    }
    else if ((lr_talent.upgrade == "RealmSwitch")) {
      UnitBehaviorAdd(lr_player.dragon, "RealmSwitch", lr_player.dragon, 1);
      lr_player.talent.realmSwitch += 1;
    }

  }
  if (lr_talent.rank == lr_talent.maxRank) {
    libNtve_gf_SetDialogItemText(lr_talent.buttonLabel, (IntToText(lr_talent.maxRank) + StringExternal("Param/Value/lib_1_BC8BEA49") + IntToText(lr_talent.maxRank)), PlayerGroupAll());
    DialogControlSetEnabled(lr_talent.button, PlayerGroupAll(), false);
    DialogControlSetVisible(lr_talent.buttonGlow, PlayerGroupAll(), false);
  } 
  else {
    libNtve_gf_SetDialogItemText(lr_talent.buttonLabel, (IntToText(lr_talent.rank) + StringExternal("Param/Value/lib_1_75883A25") + IntToText(lr_talent.maxRank)), PlayerGroupAll());
  }
  libNtve_gf_SetDialogItemText(lr_player.talent.availablePointsLabel, IntToText(lr_player.talent.availablePoints), PlayerGroupAll());
  
  lv_pointsRequired = lr_player.talent.pointsPerTier * lr_talent.row;
  
  lv_unlockedPrereqTalentIndex = lr_talent.prerequisiteOf;
  if (
    lv_unlockedPrereqTalentIndex != -1 &&
    lr_talent.rank >= lr_player.talent.talents[lv_unlockedPrereqTalentIndex].prerequisiteRequiredRank &&
    !lr_player.talent.talents[lv_unlockedPrereqTalentIndex].prerequisitesComplete
  ) {
    lv_unlockedPrereqTalentRequiredPoints = lr_player.talent.pointsPerTier * lr_player.talent.talents[lv_unlockedPrereqTalentIndex].row;
    if (lr_player.talent.pointsInTree[lr_player.talent.talents[lv_unlockedPrereqTalentIndex].tree] >= lv_unlockedPrereqTalentRequiredPoints) {
      lr_player.talent.talents[lv_unlockedPrereqTalentIndex].prerequisitesComplete = true;
      lv_unlockedPrereqTalentRequiredPoints = 0;
      SoundPlay(SoundLink("UI_TechConsole_Purchase", -1), lr_player.playerGroupSingle, 100.0, 0.0);
      lib_talent_gf_UnlockTalentButton(
        lr_player, 
        lr_player.talent.talents[lv_unlockedPrereqTalentIndex].tree, 
        lr_player.talent.talents[lv_unlockedPrereqTalentIndex].column, 
        lr_player.talent.talents[lv_unlockedPrereqTalentIndex].row
      );
    }
    if (lr_player.talent.talents[lv_unlockedPrereqTalentIndex].type == lib_talent_ge_TalentType_Ability) {
      lib_talent_gf_UpdateAbilityButtonTooltip(
        lr_player, 
        lr_player.talent.talents[lv_unlockedPrereqTalentIndex].button, 
        lv_unlockedPrereqTalentIndex, 
        lv_unlockedPrereqTalentRequiredPoints, 
        lr_player.talent.talents[lv_unlockedPrereqTalentIndex].tree, 
        lr_player.talent.talents[lv_unlockedPrereqTalentIndex].abilityLink, 
        lr_player.talent.talents[lv_unlockedPrereqTalentIndex].buttonLink
      );
    }
    else if (lr_player.talent.talents[lv_unlockedPrereqTalentIndex].type == lib_talent_ge_TalentType_Passive) {
      lib_talent_gf_UpdatePassiveButtonTooltip(
        lr_player, 
        lr_player.talent.talents[lv_unlockedPrereqTalentIndex].button, 
        lv_unlockedPrereqTalentIndex, 
        lv_unlockedPrereqTalentRequiredPoints, 
        lr_player.talent.talents[lv_unlockedPrereqTalentIndex].tree, 
        lr_player.talent.talents[lv_unlockedPrereqTalentIndex].name, 
        lr_player.talent.talents[lv_unlockedPrereqTalentIndex].tooltipDescription, 
        lr_player.talent.talents[lv_unlockedPrereqTalentIndex].rank, 
        lr_player.talent.talents[lv_unlockedPrereqTalentIndex].multiplier[0], 
        lr_player.talent.talents[lv_unlockedPrereqTalentIndex].multiplier[1]
      );
    }
  }
  if ((lr_talent.rank > lr_talent.maxRank)) {
    lr_talent.rank = lr_talent.maxRank;
    lr_player.talent.pointsInTree[lr_talent.tree] -= 1;
    lr_player.talent.availablePoints += 1;
    lr_player.talent.spentPoints -= 1;
  }
  if ((lr_talent.type == lib_talent_ge_TalentType_Passive)) {
    lib_talent_gf_UpdatePassiveButtonTooltip(lr_player, lr_talent.button, lv_talentIndex, 0, lr_talent.tree, lr_talent.name, lr_talent.tooltipDescription, lr_talent.rank, lr_talent.multiplier[0], lr_talent.multiplier[1]);
  }

  if (lr_player.talent.pointsInTree[lr_talent.tree] % lr_player.talent.pointsPerTier == 0) {
    lv_unlockedToTier = lr_player.talent.pointsInTree[lr_talent.tree] / lr_player.talent.pointsPerTier;
    if (lib_talent_gv_ROWS > lv_unlockedToTier) {
      lib_talent_gf_UnlockTalentTier(lr_player, lr_talent.tree, lv_unlockedToTier);
      SoundPlay(SoundLink("UI_TechConsole_Purchase", -1), lr_player.playerGroupSingle, 100.0, 0.0);
    }
  }

  lr_player.talent.locked = false;
  if ((lr_talent.rank > lr_talent.maxRank)) {
    libNtve_gf_SetDialogItemText(lr_talent.buttonLabel, (IntToText(lr_talent.maxRank) + StringExternal("Param/Value/lib_1_180A9D53") + IntToText(lr_talent.maxRank)), PlayerGroupAll());
    lr_talent.rank = lr_talent.maxRank;
    lr_player.talent.pointsInTree[lr_talent.tree] -= 1;
    lr_player.talent.availablePoints += 1;
    lr_player.talent.spentPoints -= 1;
  }
  Wait(0.1, c_timeReal);
  lr_player.talent.adding = false;
  return true;
}

void lib_talent_gt_PickTalent_Init () {
  lib_talent_gt_PickTalent = TriggerCreate("lib_talent_gt_PickTalent_Func");
  TriggerAddEventDialogControl(lib_talent_gt_PickTalent, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
