//--------------------------------------------------------------------------------------------------
// Library: Talent Library
//--------------------------------------------------------------------------------------------------
// \[([\w_\+\-\(\)\[\]\. ]*?)\]
// gv_players[$2].talents.value[$1]
// Variable Declarations
//--------------------------------------------------------------------------------------------------
// Library: Talent Library
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib_talent_InitLibraries () {
  libNtve_InitVariables();
}
// Variable Initialization
int lib_talent_gf_FlattenPosition (int lp_tree, int lp_column, int lp_row) {
  return lp_tree * lib_talent_gv_COLUMNS * lib_talent_gv_ROWS + lp_row * lib_talent_gv_COLUMNS + lp_column;
};
void lib_talent_InitVariables () {
  playerData_r lr_player;
  int init_i;
  int init_j;

  if (lib_talent_InitVariables_completed) {
    return;
  }
  for (init_i = 0; init_i < 4; init_i += 1) {
    lr_player = gv_players[init_i];
    lr_player.talent.mainTalentDialog = c_invalidDialogId;
    lr_player.talent.colorScheme = "";
    lr_player.talent.pointsPerTier = lib_talent_gv_POINTSPERTIER;
    lr_player.talent.availablePointsLabel = c_invalidDialogControlId;
    lr_player.talent.availablePointsDialog = c_invalidDialogId;
    lr_player.talent.closeTalentTreeButton = c_invalidDialogControlId;
    for (init_j = 0; init_j < 3; init_j += 1) {
      lr_player.talent.subTalentDialog[init_j] = c_invalidDialogId;
    }
    for (init_j = 0; init_j < 10; init_j += 1) {
      lr_player.talent.buildStrings[init_j] = "";
    }
    for(init_j = 0; init_j < lib_talent_gv_TALENTCOUNT; init_j += 1) {
      lr_player.talent.talents[init_j].button = c_invalidDialogControlId;
      lr_player.talent.talents[init_j].buttonGlow = c_invalidDialogControlId;
      lr_player.talent.talents[init_j].buttonLabelBackground = c_invalidDialogControlId;
      lr_player.talent.talents[init_j].buttonLabel = c_invalidDialogControlId;
      lr_player.talent.talents[init_j].maxRank = 1;
      lr_player.talent.talents[init_j].tree = 0;
      lr_player.talent.talents[init_j].column = 0;
      lr_player.talent.talents[init_j].row = 0;
      lr_player.talent.talents[init_j].prerequisiteIs = -1;
      lr_player.talent.talents[init_j].prerequisiteOf = -1;
      lr_player.talent.talents[init_j].prerequisiteRequiredRank = 0;
      lr_player.talent.talents[init_j].type = lib_talent_ge_TalentType_Passive;
    }
  }
  lib_talent_InitVariables_completed = true;
}

bool lib_talent_gf_TalentTreeisOpen (playerData_r lr_player) {
  return DialogIsVisible(lr_player.talent.mainTalentDialog, lr_player.player);
}

void lib_talent_gf_UpdateAbilityButtonTooltip (playerData_r lr_player, int lp_button, int lp_buttonIndex, int lp_requiredPoints, int lp_tree, string lp_abilityLink, string lp_buttonLink) {
  text lv_tooltipName;
  text lv_tooltipRequirement;
  text lv_tooltipRequirementSpacer;
  int lv_prerequisiteIndex;
  text lv_pointsText;
  text lv_tooltipPrerequisite;
  text lv_tooltipDescription;
  bool lv_hasCost;
  text lv_tooltipCost;
  text lv_tooltipCostMinerals;
  text lv_tooltipCostGas;
  text lv_tooltipCostLife;
  text lv_tooltipCostEnergy;
  text lv_tooltipCostCooldown;


  lv_tooltipName = (StringExternal("Param/Value/lib_1_09FBC8F4") + StringExternal(("Button/Name/" + (lp_buttonLink))) + StringExternal("Param/Value/lib_1_A533532A"));
  if (lp_requiredPoints > 0) {
    if (!lr_player.talent.talents[lp_buttonIndex].prerequisitesComplete) {
      lv_tooltipRequirementSpacer = StringExternal("Param/Value/lib_1_3D5D601C");
    }
    else {
      lv_tooltipRequirementSpacer = StringExternal("Param/Value/lib_1_A045BCC2");
    }
    lv_tooltipRequirement = (StringExternal("Param/Value/lib_1_31AEA4D1") + IntToText(lp_requiredPoints) + StringExternal("Param/Value/lib_1_ADD45111") + lr_player.talent.talentTreeNames[lp_tree] + StringExternal("Param/Value/lib_1_DBF60C3F") + lv_tooltipRequirementSpacer);
  }
  else {
    lv_tooltipRequirement = StringToText("");
  }

  if (!lr_player.talent.talents[lp_buttonIndex].prerequisitesComplete) {
    lv_prerequisiteIndex = lr_player.talent.talents[lp_buttonIndex].prerequisiteIs;
    if ((lr_player.talent.talents[lv_prerequisiteIndex].maxRank == 1)) {
      lv_pointsText = StringExternal("Param/Value/lib_1_02BBAD52");
    }
    else {
      lv_pointsText = StringExternal("Param/Value/lib_1_E5D41D76");
    }
    lv_tooltipPrerequisite = (StringExternal("Param/Value/lib_1_95225FD9") + IntToText(lr_player.talent.talents[lv_prerequisiteIndex].maxRank) + StringExternal("Param/Value/lib_1_0F2A744B") + lv_pointsText + StringExternal("Param/Value/lib_1_C566D5F1") + lr_player.talent.talents[lv_prerequisiteIndex].name + StringExternal("Param/Value/lib_1_3680DFC1"));
  }
  else {
    lv_tooltipPrerequisite = StringToText("");
  }

  if ((StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Resource[Vespene]", lr_player.player)) > 0)) {
    lv_tooltipCostGas = (StringExternal("Param/Value/lib_1_6E372436") + StringToText(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Resource[Vespene]", lr_player.player)) + StringExternal("Param/Value/lib_1_2F05AF2C"));
    lv_hasCost = true;
  }

  if ((StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Vital[Life]", lr_player.player)) > 0)) {
    lv_tooltipCostLife = (StringExternal("Param/Value/lib_1_64005C61") + StringToText(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Vital[Life]", lr_player.player)) + StringExternal("Param/Value/lib_1_96EE75DB"));
    lv_hasCost = true;
  }

  if ((StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Vital[Energy]", lr_player.player)) > 0)) {
    lv_tooltipCostEnergy = (StringExternal("Param/Value/lib_1_36A22419") + StringToText(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Vital[Energy]", lr_player.player)) + StringExternal("Param/Value/lib_1_BDAA03F9"));
    lv_hasCost = true;
  }

  if ((StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Cooldown.TimeUse", lr_player.player)) > 0)) {
    lv_tooltipCostCooldown = (StringExternal("Param/Value/lib_1_28B4F42A") + StringToText(CatalogFieldValueGet(c_gameCatalogAbil, (lp_abilityLink), "Cost[0].Cooldown.TimeUse", lr_player.player)) + StringExternal("Param/Value/lib_1_DB16B10F"));
    lv_hasCost = true;
  }

  if (lv_hasCost) {
    lv_tooltipCost = (StringExternal("Param/Value/lib_1_9F0F1568") + lv_tooltipCostMinerals + lv_tooltipCostGas + lv_tooltipCostLife + lv_tooltipCostEnergy + lv_tooltipCostCooldown + StringExternal("Param/Value/lib_1_9C21FB6F"));
  }
  else {
    lv_tooltipCost = StringToText("");
  }
  lv_tooltipDescription = (StringExternal("Param/Value/lib_1_04F5E258") + lv_tooltipCost + StringExternal(("Button/Tooltip/" + (lp_buttonLink))) + StringExternal("Param/Value/lib_1_3E98BEAA"));
  libNtve_gf_SetDialogItemTooltip(lp_button, (lv_tooltipName + lv_tooltipRequirement + lv_tooltipPrerequisite + lv_tooltipDescription), PlayerGroupAll());
}
void lib_talent_gf_UpdatePassiveButtonTooltip (playerData_r lr_player, int lp_button, int lp_buttonIndex, int lp_requiredPoints, int lp_tree, text lp_name, text lp_descriptionRaw, int lp_currentRank, fixed lp_multiplier1, fixed lp_multiplier2) {
  text lv_tooltipName;
  text lv_tooltipRequirement;
  text lv_tooltipRequirementSpacer;
  int lv_prerequisiteIndex;
  text lv_pointsText;
  text lv_tooltipPrerequisite;
  text lv_tooltipDescription;
  int lv_rankMultiplier;

  lv_tooltipName = (StringExternal("Param/Value/lib_1_20CC4B21") + lp_name + StringExternal("Param/Value/lib_1_269556FE"));
  if (lp_requiredPoints > 0) {
    if (!lr_player.talent.talents[lp_buttonIndex].prerequisitesComplete) {
      lv_tooltipRequirementSpacer = StringExternal("Param/Value/lib_1_A01F23F2");
    }
    else {
      lv_tooltipRequirementSpacer = StringExternal("Param/Value/lib_1_9A874965");
    }
    lv_tooltipRequirement = (StringExternal("Param/Value/lib_1_7CB7BFBB") + IntToText(lp_requiredPoints) + StringExternal("Param/Value/lib_1_61D82CE4") + lr_player.talent.talentTreeNames[lp_tree] + StringExternal("Param/Value/lib_1_6BED7575") + lv_tooltipRequirementSpacer);
  }
  else {
    lv_tooltipRequirement = StringToText("");
  }
  lv_prerequisiteIndex = lr_player.talent.talents[lp_buttonIndex].prerequisiteIs;
  if (lv_prerequisiteIndex != -1 && !lr_player.talent.talents[lp_buttonIndex].prerequisitesComplete) {
    if (lr_player.talent.talents[lv_prerequisiteIndex].maxRank == 1) {
      lv_pointsText = StringExternal("Param/Value/lib_1_B9826448");
    }
    else {
      lv_pointsText = StringExternal("Param/Value/lib_1_E3F15863");
    }
    lv_tooltipPrerequisite = (StringExternal("Param/Value/lib_1_B9887A7A") + IntToText(5) + StringExternal("Param/Value/lib_1_650F531F") + lv_pointsText + StringExternal("Param/Value/lib_1_583A97DF") + lr_player.talent.talents[lv_prerequisiteIndex].name + StringExternal("Param/Value/lib_1_4A56FEC3"));
  }

  else {
    lv_tooltipPrerequisite = StringToText("");
  }
  if (lp_currentRank > 0) {
    lv_rankMultiplier = lp_currentRank;
  }
  else {
    lv_rankMultiplier = 1;
  }
  lv_tooltipDescription = TextReplaceWord(lp_descriptionRaw, StringExternal("Param/Value/lib_1_6D51BF3D"), FixedToText((lp_multiplier1 * IntToFixed(lv_rankMultiplier)), 1), c_stringReplaceAll, c_stringNoCase);
  lv_tooltipDescription = TextReplaceWord(lv_tooltipDescription, StringExternal("Param/Value/lib_1_2F659930"), FixedToText((lp_multiplier2 * IntToFixed(lv_rankMultiplier)), 1), c_stringReplaceAll, c_stringNoCase);
  lv_tooltipDescription = (StringExternal("Param/Value/lib_1_3AE2BD72") + lv_tooltipDescription + StringExternal("Param/Value/lib_1_1ECE9A68"));
  libNtve_gf_SetDialogItemTooltip(lp_button, (lv_tooltipName + lv_tooltipRequirement + lv_tooltipPrerequisite + lv_tooltipDescription), PlayerGroupAll());
}
void lib_talent_gf_UnlockTalentTier (playerData_r lr_player, int lp_tree, int lp_tier) {
  int lv_column;

  for (lv_column = 0; lv_column < lib_talent_gv_COLUMNS; lv_column += 1 ) {
    lib_talent_gf_UnlockTalentButton(lr_player, lp_tree, lv_column, lp_tier);
  }
}
void lib_talent_gf_CreateTalentTree (playerData_r lr_player, text lp_title, int lp_colorScheme, int lp_trees, string lp_treeNames, int lp_columns, int lp_rows, int lp_pointsPerTier) {
  int lv_mainDialogHeight;
  int lv_mainDialogWidth;
  string lv_mainDialogIMG;
  string lv_titleFrameIMG;
  string lv_dividerFrameIMG;
  string lv_buttonNormalIMG;
  string lv_buttonHoverIMG;
  string lv_treeNameString;
  text lv_treeName1;
  text lv_treeName2;
  text lv_treeName3;

  lv_treeNameString = "";

  lr_player.talent.pointsPerTier = lp_pointsPerTier;
  if (lp_colorScheme == lib_talent_ge_ColorScheme_Blue) {
    lr_player.talent.colorScheme = "Blue";
    lv_mainDialogIMG = "Assets\\Textures\\ui_glue_dropdownmenuframe_protoss.dds";
    lv_titleFrameIMG = "Assets\\Textures\\ui_help_frame_tips_new_protoss.dds";
    lv_dividerFrameIMG = "Assets\\Textures\\ui_tooltip_frame_protoss.dds";
    lv_buttonNormalIMG = "Assets\\Textures\\ui_ingame_resourcesharing_button_x_normalpressed_protoss.dds";
    lv_buttonHoverIMG = "Assets\\Textures\\ui_ingame_resourcesharing_button_x_normaloverpressedover_protoss.dds";
  }
  else if (lp_colorScheme == lib_talent_ge_ColorScheme_Green) {
    lr_player.talent.colorScheme = "Green";
    lv_mainDialogIMG = "Assets\\Textures\\ui_glue_dropdownmenuframe_terran.dds";
    lv_titleFrameIMG = "Assets\\Textures\\ui_help_frame_tips_new_terran.dds";
    lv_dividerFrameIMG = "Assets\\Textures\\ui_tooltip_frame_terran.dds";
    lv_buttonNormalIMG = "Assets\\Textures\\ui_ingame_resourcesharing_button_x_normalpressed.dds";
    lv_buttonHoverIMG = "Assets\\Textures\\ui_ingame_resourcesharing_button_x_normaloverpressedover.dds";
  }
  else if (lp_colorScheme == lib_talent_ge_ColorScheme_Red) {
    lr_player.talent.colorScheme = "Red";
    lv_mainDialogIMG = "Assets\\Textures\\ui_glue_dropdownmenuframe_zerg.dds";
    lv_titleFrameIMG = "Assets\\Textures\\ui_help_frame_tips_new_zerg.dds";
    lv_dividerFrameIMG = "Assets\\Textures\\ui_tooltip_frame_zerg.dds";
    lv_buttonNormalIMG = "Assets\\Textures\\ui_button_generic_normalpressed_zerg.dds";
    lv_buttonHoverIMG = "Assets\\Textures\\ui_button_generic_normaloverpressedover_zerg.dds";
    lv_buttonNormalIMG = "Assets\\Textures\\ui_ingame_resourcesharing_button_x_normalpressed_zerg.dds";
    lv_buttonHoverIMG = "Assets\\Textures\\ui_ingame_resourcesharing_button_x_normaloverpressedover_zerg.dds";
  }
  lv_mainDialogHeight = 335 + (100 * (lp_rows - 1));
  lv_mainDialogWidth = 450 * lib_talent_gv_TREES;
  DialogCreate(lv_mainDialogWidth, lv_mainDialogHeight, c_anchorCenter, 0, 0, true);
  lr_player.talent.mainTalentDialog = DialogLastCreated();
  DialogSetImageVisible(lr_player.talent.mainTalentDialog, false);
  libNtve_gf_CreateDialogItemImage(lr_player.talent.mainTalentDialog, 0, 0, c_anchorCenter, 0, 0, StringToText(""), lv_mainDialogIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
  DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
  libNtve_gf_CreateDialogItemImage(lr_player.talent.mainTalentDialog, 325, 100, c_anchorTop, 0, 12, StringToText(""), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
  libNtve_gf_CreateDialogItemLabel(lr_player.talent.mainTalentDialog, 325, 100, c_anchorTop, 0, 15, lp_title, Color(100,100,100), false, 2.0);
  libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpMenuDialogTitle", PlayerGroupAll());
  libNtve_gf_CreateDialogItemButton(lr_player.talent.mainTalentDialog, 35, 35, c_anchorTopRight, 22, 5, StringToText(""), StringToText(""), "");
  lr_player.talent.closeTalentTreeButton = DialogControlLastCreated();
  libNtve_gf_SetDialogItemImage(lr_player.talent.closeTalentTreeButton, lv_buttonNormalIMG, PlayerGroupAll());
  libNtve_gf_SetDialogItemImageType(lr_player.talent.closeTalentTreeButton, c_triggerImageTypeNormal, PlayerGroupAll());
  libNtve_gf_SetDialogItemImage2(lr_player.talent.closeTalentTreeButton, lv_buttonHoverIMG, PlayerGroupAll());
  DialogCreate(110, 110, c_anchorCenter, 0, 0, true);
  lr_player.talent.availablePointsDialog = DialogLastCreated();
  DialogSetPositionRelative(lr_player.talent.availablePointsDialog, c_anchorBottomRight, lr_player.talent.mainTalentDialog, c_anchorTopLeft, 70, 60);
  DialogSetImageVisible(lr_player.talent.availablePointsDialog, false);
  libNtve_gf_CreateDialogItemImage(lr_player.talent.availablePointsDialog, 1, 1, c_anchorCenter, 0, 0, StringToText(""), lv_dividerFrameIMG, c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
  DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
  libNtve_gf_CreateDialogItemLabel(lr_player.talent.availablePointsDialog, 100, 100, c_anchorTop, 0, -12, IntToText(lr_player.talent.availablePoints), Color(100,100,100), false, 2.0);
  lr_player.talent.availablePointsLabel = DialogControlLastCreated();
  libNtve_gf_SetDialogItemStyle(lr_player.talent.availablePointsLabel, "HelpMenuDialogTitle", PlayerGroupAll());
  libNtve_gf_CreateDialogItemLabel(lr_player.talent.availablePointsDialog, 100, 100, c_anchorTop, 0, 55, StringExternal("Param/Value/lib_1_35BCD81C"), Color(100,100,100), false, 2.0);
  lv_treeNameString = lp_treeNames;
  lv_treeNameString = StringReplaceWord(lv_treeNameString, " ", "_", c_stringReplaceAll, c_stringNoCase);
  lv_treeNameString = StringReplaceWord(lv_treeNameString, ",", " ", c_stringReplaceAll, c_stringNoCase);
  lv_treeName1 = StringToText(StringReplaceWord(StringWord(lv_treeNameString, 1), "_", " ", c_stringReplaceAll, c_stringNoCase));
  lv_treeName2 = StringToText(StringReplaceWord(StringWord(lv_treeNameString, 2), "_", " ", c_stringReplaceAll, c_stringNoCase));
  lv_treeName3 = StringToText(StringReplaceWord(StringWord(lv_treeNameString, 3), "_", " ", c_stringReplaceAll, c_stringNoCase));
  lr_player.talent.talentTreeNames[0] = lv_treeName1;
  lr_player.talent.talentTreeNames[1] = lv_treeName2;
  lr_player.talent.talentTreeNames[2] = lv_treeName3;
  // TODO: Find a way to do this with Maths in a for loop.
  if (lib_talent_gv_TREES == 1) {
    libNtve_gf_CreateDialogItemImage(lr_player.talent.mainTalentDialog, 275, 90, c_anchorTop, 0, 110, StringToText(""), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(lr_player.talent.mainTalentDialog, 275, 90, c_anchorTop, 0, 113, lv_treeName1, Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpMenuDialogTitle", PlayerGroupAll());
    DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
    lr_player.talent.subTalentDialog[0] = DialogLastCreated();
    DialogSetPositionRelative(lr_player.talent.subTalentDialog[0], c_anchorTop, lr_player.talent.mainTalentDialog, c_anchorTop, 0, 200);
    DialogSetImageVisible(lr_player.talent.subTalentDialog[0], false);
  }
  else if (lib_talent_gv_TREES == 2) {
    libNtve_gf_CreateDialogItemImage(lr_player.talent.mainTalentDialog, 275, 90, c_anchorTop, -225, 110, StringToText(""), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(lr_player.talent.mainTalentDialog, 275, 90, c_anchorTop, -225, 113, lv_treeName1, Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpMenuDialogTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(lr_player.talent.mainTalentDialog, 275, 90, c_anchorTop, 225, 110, StringToText(""), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(lr_player.talent.mainTalentDialog, 275, 90, c_anchorTop, 225, 113, lv_treeName2, Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpMenuDialogTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(lr_player.talent.mainTalentDialog, 17, (100 * lp_rows), c_anchorTop, 0, 200, StringToText(""), lv_dividerFrameIMG, c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
    lr_player.talent.subTalentDialog[0] = DialogLastCreated();
    DialogSetPositionRelative(lr_player.talent.subTalentDialog[0], c_anchorTop, lr_player.talent.mainTalentDialog, c_anchorTop, -225, 200);
    DialogSetImageVisible(lr_player.talent.subTalentDialog[0], false);
    DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
    lr_player.talent.subTalentDialog[1] = DialogLastCreated();
    DialogSetPositionRelative(lr_player.talent.subTalentDialog[1], c_anchorTop, lr_player.talent.mainTalentDialog, c_anchorTop, 225, 200);
    DialogSetImageVisible(lr_player.talent.subTalentDialog[1], false);
  }
  else if (lib_talent_gv_TREES == 3) {
    libNtve_gf_CreateDialogItemImage(lr_player.talent.mainTalentDialog, 275, 90, c_anchorTop, -450, 110, StringToText(""), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(lr_player.talent.mainTalentDialog, 275, 90, c_anchorTop, -450, 113, lv_treeName1, Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpMenuDialogTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(lr_player.talent.mainTalentDialog, 275, 90, c_anchorTop, 0, 110, StringToText(""), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(lr_player.talent.mainTalentDialog, 275, 90, c_anchorTop, 0, 113, lv_treeName2, Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpMenuDialogTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(lr_player.talent.mainTalentDialog, 275, 90, c_anchorTop, 450, 110, StringToText(""), lv_titleFrameIMG, c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(lr_player.talent.mainTalentDialog, 275, 90, c_anchorTop, 450, 113, lv_treeName3, Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpMenuDialogTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(lr_player.talent.mainTalentDialog, 17, (100 * lp_rows), c_anchorTop, -225, 200, StringToText(""), lv_dividerFrameIMG, c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(lr_player.talent.mainTalentDialog, 17, (100 * lp_rows), c_anchorTop, 225, 200, StringToText(""), lv_dividerFrameIMG, c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
    lr_player.talent.subTalentDialog[0] = DialogLastCreated();
    DialogSetPositionRelative(lr_player.talent.subTalentDialog[0], c_anchorTop, lr_player.talent.mainTalentDialog, c_anchorTop, -450, 200);
    DialogSetImageVisible(lr_player.talent.subTalentDialog[0], false);
    DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
    lr_player.talent.subTalentDialog[1] = DialogLastCreated();
    DialogSetPositionRelative(lr_player.talent.subTalentDialog[1], c_anchorTop, lr_player.talent.mainTalentDialog, c_anchorTop, 0, 200);
    DialogSetImageVisible(lr_player.talent.subTalentDialog[1], false);
    DialogCreate(450, (50 + (100 * lp_rows)), c_anchorCenter, 0, 0, true);
    lr_player.talent.subTalentDialog[2] = DialogLastCreated();
    DialogSetPositionRelative(lr_player.talent.subTalentDialog[2], c_anchorTop, lr_player.talent.mainTalentDialog, c_anchorTop, 450, 200);
    DialogSetImageVisible(lr_player.talent.subTalentDialog[2], false);
  }
}
void lib_talent_gf_ShowHideTalentTree (playerData_r lr_player) {  
  if (DialogIsVisible(lr_player.talent.mainTalentDialog, lr_player.player)) {
    DialogSetVisible(lr_player.talent.mainTalentDialog, lr_player.playerGroupSingle, false);
    DialogSetVisible(lr_player.talent.subTalentDialog[0], lr_player.playerGroupSingle, false);
    DialogSetVisible(lr_player.talent.subTalentDialog[1], lr_player.playerGroupSingle, false);
    DialogSetVisible(lr_player.talent.subTalentDialog[2], lr_player.playerGroupSingle, false);
    DialogSetVisible(lr_player.talent.availablePointsDialog, lr_player.playerGroupSingle, false);
  } else {
    DialogSetVisible(lr_player.talent.mainTalentDialog, lr_player.playerGroupSingle, true);
    DialogSetVisible(lr_player.talent.subTalentDialog[0], lr_player.playerGroupSingle, true);
    DialogSetVisible(lr_player.talent.subTalentDialog[1], lr_player.playerGroupSingle, true);
    DialogSetVisible(lr_player.talent.subTalentDialog[2], lr_player.playerGroupSingle, true);
    DialogSetVisible(lr_player.talent.availablePointsDialog, lr_player.playerGroupSingle, true);
  }
}
void lib_talent_gf_GrantTalentPoints (int lp_talentPoints, playerData_r lr_player) {
  lr_player.talent.availablePoints += lp_talentPoints;
  libNtve_gf_SetDialogItemText(lr_player.talent.availablePointsLabel, IntToText(lr_player.talent.availablePoints), PlayerGroupAll());
}
void lib_talent_gf_DestroyTalentTree (playerData_r lr_player) {
  int lv_i;
  talentData_r lr_workingTalent;

  lr_player.talent.availablePoints = 0;
  lr_player.talent.spentPoints = 0;
  lr_player.talent.pointsInTree[0] = 0;
  lr_player.talent.pointsInTree[1] = 0;
  lr_player.talent.pointsInTree[2] = 0;
  DialogDestroy(lr_player.talent.mainTalentDialog);
  DialogDestroy(lr_player.talent.subTalentDialog[0]);
  DialogDestroy(lr_player.talent.subTalentDialog[1]);
  DialogDestroy(lr_player.talent.subTalentDialog[2]);
  DialogDestroy(lr_player.talent.availablePointsDialog);
  for (lv_i = 0; lv_i < lib_talent_gv_TALENTCOUNT; lv_i += 1) {
    lr_workingTalent = lr_player.talent.talents[lv_i];
    lr_workingTalent.button = c_invalidDialogControlId;
    lr_workingTalent.rank = 0;
    lr_workingTalent.maxRank = 0;
    lr_workingTalent.prerequisiteIs = -1;
    lr_workingTalent.prerequisiteOf = -1;
    lr_workingTalent.prerequisitesComplete = false;
  }
}
//--------------------------------------------------------------------------------------------------
// Trigger: Close Talent
//--------------------------------------------------------------------------------------------------
bool lib_talent_gt_CloseTalent_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!((EventDialogControl() == lr_player.talent.closeTalentTreeButton))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lib_talent_gf_ShowHideTalentTree(lr_player);
  return true;
}
//--------------------------------------------------------------------------------------------------
void lib_talent_gt_CloseTalent_Init () {
  lib_talent_gt_CloseTalent = TriggerCreate("lib_talent_gt_CloseTalent_Func");
  TriggerAddEventDialogControl(lib_talent_gt_CloseTalent, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Load Talent Bank
//--------------------------------------------------------------------------------------------------
bool lib_talent_gt_LoadTalentBank_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void lib_talent_gt_LoadTalentBank_Init () {
  lib_talent_gt_LoadTalentBank = TriggerCreate("lib_talent_gt_LoadTalentBank_Func");
  TriggerAddEventMapInit(lib_talent_gt_LoadTalentBank);
}
void lib_talent_InitTriggers () {
  lib_talent_gt_PickTalent_Init();
  lib_talent_gt_CloseTalent_Init();
  lib_talent_gt_LoadTalentBank_Init();
}
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib_talent_InitLib_completed = false;
void lib_talent_InitLib () {
  if (lib_talent_InitLib_completed) {
    return;
  }
  lib_talent_InitLib_completed = true;
  lib_talent_InitLibraries();
  lib_talent_InitVariables();
  lib_talent_InitTriggers();
}
//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void FakeInitLibs () {
  libNtve_InitLib();
  lib_talent_InitLib();
}

void FakeInitGlobals () {
  playerData_r lr_player;
  int init_i;
  int init_j;
  for (init_i = 0; init_i < 4; init_i += 1) {
    lr_player = gv_players[init_i];
    lr_player.quests.questDialog.state = c_invalidDialogId;
    lr_player.quests.questDialog.textBox = c_invalidDialogControlId;
    lr_player.quests.questDialog.reward = c_invalidDialogControlId;
    lr_player.quests.questDialog.recommendedLevel = c_invalidDialogControlId;
    lr_player.quests.questDialog.accept = c_invalidDialogControlId;
    lr_player.quests.questDialog.decline = c_invalidDialogControlId;
    lr_player.quests.talkDialog.state = c_invalidDialogId;
    lr_player.quests.talkDialog.textBox = c_invalidDialogControlId;
    lr_player.quests.talkDialog.accept = c_invalidDialogControlId;
    lr_player.quests.rewardDialog.state = c_invalidDialogId;
    lr_player.quests.rewardDialog.textBox = c_invalidDialogControlId;
    lr_player.quests.rewardDialog.accept = c_invalidDialogControlId;
    for (init_j = 0; init_j < 2; init_j += 1) {
      lr_player.quests.baseQuests[init_j].textTag = c_textTagNone;
      lr_player.quests.baseQuests[init_j].objective = c_invalidObjectiveId;
    }
    for (init_j = 0; init_j < 6; init_j += 1) {
      lr_player.quests.manaQuests[init_j].textTag = c_textTagNone;
      lr_player.quests.manaQuests[init_j].objective = c_invalidObjectiveId;
    }
    for(init_j = 0; init_j < 10; init_j += 1) {
      lr_player.quests.storyQuests[init_j].objective = c_invalidObjectiveId;
      lr_player.quests.storyQuests[init_j].ping = c_invalidPingId;
      lr_player.quests.storyQuests[init_j].textTag = c_textTagNone;
      lr_player.stats.reborn.dialog.pointLabel[init_j] = c_invalidDialogControlId;
      lr_player.stats.reborn.dialog.pointButton[init_j] = c_invalidDialogControlId;
    }
    lr_player.quests.detsefniQuests[0].textTag = c_textTagNone;
    lr_player.quests.detsefniQuests[0].objective = c_invalidObjectiveId;
    lr_player.quests.sergeantListerQuests[0].textTag = c_textTagNone;
    lr_player.quests.sergeantListerQuests[0].objective = c_invalidObjectiveId;
    lr_player.quests.greedQuests[0].textTag = c_textTagNone;
    lr_player.quests.greedQuests[0].objective = c_invalidObjectiveId;
    lr_player.quests.madelineQuests[0].textTag = c_textTagNone;
    lr_player.quests.madelineQuests[0].objective = c_invalidObjectiveId;
    lr_player.quests.malinQuests[0].textTag = c_textTagNone;
    lr_player.quests.malinQuests[0].objective = c_invalidObjectiveId;
    lr_player.quests.ampQuests[0].textTag = c_textTagNone;
    lr_player.quests.ampQuests[0].objective = c_invalidObjectiveId;
    lr_player.quests.altossQuests[0].textTag = c_textTagNone;
    lr_player.quests.altossQuests[0].objective = c_invalidObjectiveId;
    lr_player.quests.oleumQuests[0].textTag = c_textTagNone;
    lr_player.quests.oleumQuests[0].objective = c_invalidObjectiveId;
    lr_player.quests.serynQuests[0].textTag = c_textTagNone;
    lr_player.quests.serynQuests[0].objective = c_invalidObjectiveId;
    gv_potionHotkeyTextTag[init_i] = c_textTagNone;
    lr_player.skills.frostSpike = -1;
    lr_player.skills.blizzard = -1;
    lr_player.skills.fireball = -1;
    lr_player.skills.fireClaw = -1;
    lr_player.skills.flameEgg = -1;
    lr_player.skills.inferno = -1;
    lr_player.skills.nova = -1;
    lr_player.skills.subzero = -1;
    lr_player.skills.frozenArmour = -1;
    lr_player.dyingTimer.time = TimerCreate();
    lr_player.dyingTimer.window = c_timerWindowNone;
    lr_player.stats.attributeDialog.state = c_invalidDialogId;
    lr_player.stats.attributeDialog.textBox = c_invalidDialogControlId;
    gv_machinaDePlagamWarning[init_i] = c_textTagNone;
    lr_player.respawnPoint = PointFromId(1);
    lr_player.locationDialog.state = c_invalidDialogId;
    lr_player.locationDialog.textBox = c_invalidDialogControlId;
    lr_player.locationText = StringToText("Dragon's Nest");
    lr_player.locationString = "Dragon's Nest";
    lr_player.dragon = UnitFromId(632);
    lr_player.stats.level = 1;
    lr_player.talent.talentDialog.state = c_invalidDialogId;
    lr_player.talent.talentDialog.button = c_invalidDialogControlId;
    lr_player.stash.stashUnit = UnitFromId(631);
    lr_player.stats.reborn.dialog.state = c_invalidDialogId;
    lr_player.stats.reborn.buttonDialog.state = c_invalidDialogId;
    lr_player.stats.reborn.dialog.button = c_invalidDialogControlId;
    lr_player.stats.addingAttribute = false;
  }
  for (init_i = 0; init_i < 5; init_i += 1) {
    gv_relamyPassUnits[init_i] = UnitGroupEmpty();
    gv_relamyCanyonUnits[init_i] = UnitGroupEmpty();
    gv_wastelandUnitGroups[init_i] = UnitGroupEmpty();
    gv_relamyHillsUnits[init_i] = UnitGroupEmpty();
  }
  for (init_i = 0; init_i < 7; init_i += 1) {
    gv_bioDomeWastelandUnits[init_i] = UnitGroupEmpty();
    gv_verbotenForestUnits[init_i] = UnitGroupEmpty();
    
  }
  for (init_i = 0; init_i < 8; init_i += 1) {
    gv_relamyGorgeUnits[init_i] = UnitGroupEmpty();
    gv_undergroundForestUnits[init_i] = UnitGroupEmpty();
  }
  for (init_i = 0; init_i < 9; init_i += 1) {
    gv_stackNames[init_i] = "";
  }
  for (init_i = 0; init_i < 10; init_i += 1) {
    gv_cretonTrenchUnits[init_i] = UnitGroupEmpty();
    gv_verbotenInfestationUnits[init_i] = UnitGroupEmpty();
  }
  for (init_i = 0; init_i < 38; init_i += 1) {
    gv_cretonUnits[init_i] = UnitGroupEmpty();
  }
  gv_robus = UnitFromId(4066);
  gv_illisus = UnitFromId(4393);
  gv_contestant1 = UnitFromId(630);
  gv_contestant2 = UnitFromId(632);
  gv_contestant1Group = UnitGroupEmpty();
  gv_contestant2Group = UnitGroupEmpty();
  gv_arenaWaitingTextTag = c_textTagNone;
  gv_playersintheArena = PlayerGroupEmpty();
  gv_potionCooldownName = "Potions";
  gv_aSPCooldownName = "Attack Speed Potions";
  gv_playersinUndergroundForest = PlayerGroupEmpty();
  gv_playersinRelamyGorge = PlayerGroupEmpty();
  gv_playersinRelamyCave = PlayerGroupEmpty();
  gv_playersinInfestation = PlayerGroupEmpty();
  gv_screenButton = c_invalidDialogControlId;
  gv_nosferatu = UnitFromId(632);
  gv_zauberersMinions = UnitGroupEmpty();
  gv_zauberersCrystal = UnitFromId(2501);
  gv_zauberersCrystalLocation = UnitGetPosition(gv_zauberersCrystal);
  //gv_TimeWarpBot = UnitFromId(571981628);
  //gv_TimeWarpBotLocation =  UnitGetPosition(gv_TimeWarpBot);
  gv_dragonInBattleWithZauberer1stForm = UnitGroupEmpty();
  gv_playersInBattleWithZauberer1stForm = PlayerGroupEmpty();
  gv_dragonInBattleWithZauberer2ndForm = UnitGroupEmpty();
  gv_playersInBattleWithZauberer2ndForm = PlayerGroupEmpty();
  gv_zaubererTimer = TimerCreate();
  gv_zaubererTimerWindow = c_timerWindowNone;
  gv_unitsthatdidDamagetoMachinaDePlagam = UnitGroupEmpty();
  gv_machinaDePlagam = UnitFromId(1711);
  gv_machinaDePlagamsBackup = UnitGroupEmpty();
  gv_sremagsiWarning = c_textTagNone;
  gv_unitsthatdidDamagetoSremagsi = UnitGroupEmpty();
  gv_sremagsi = UnitFromId(1151);
  gv_tolic = UnitFromId(631);
  gv_korlic = UnitFromId(632);
  gv_madawc = UnitFromId(630);
  gv_dragonsInBattleWithGuardians = UnitGroupEmpty();
  gv_playersinBattlewithGuardians = PlayerGroupEmpty();
  gv_zauberersStatue = UnitFromId(628);
  gv_guardians = UnitGroupEmpty();
  gv_syritalWarning = c_textTagNone;
  gv_unitsthatdidDamagetoSyrital = UnitGroupEmpty();
  gv_syrital = UnitFromId(158);
  gv_waypointDialog = c_invalidDialogId;
  gv_wastelandDialogButton = c_invalidDialogControlId;
  gv_relamyDialogButton = c_invalidDialogControlId;
  gv_verbotenDialogButton = c_invalidDialogControlId;
  gv_cretonDialogButton = c_invalidDialogControlId;
  gv_ballanDialogButton = c_invalidDialogControlId;
  gv_closeWaypointDialogButton = c_invalidDialogControlId;
  gv_playersInBioDome = PlayerGroupEmpty();
  gv_dragonsInBioDome = UnitGroupEmpty();
  gv_bDZombieUnits = UnitGroupEmpty();
  gv_bDCretonUnits = UnitGroupEmpty();
  gv_bDVerbotenUnits = UnitGroupEmpty();
  gv_bDRelamyUnits = UnitGroupEmpty();
  gv_bDWastelandUnits = UnitGroupEmpty();
  gv_humanPlayers = PlayerGroupEmpty();
  gv_dragons = UnitGroupEmpty();
  gv_leadboard = c_boardNone;
  gv_showTalentsButton = c_invalidDialogControlId;
  gv_days = 1;
  gv_hours = 6;
  gv_timeofDayDialog = c_invalidDialogId;
  gv_timeofDayDialogLabel = c_invalidDialogControlId;
  gv_timeofDayDialogLabelText = StringExternal("Param/Value/C521DE8F");
  gv_playerswatchingintrocinematic = PlayerGroupEmpty();
  gv_playerswatchingendingcinematic = PlayerGroupEmpty();
  gv_rebornDialogRebornPointLabel = c_invalidDialogControlId;
  gv_adminHandles[0] = "";
  gv_adminHandles[1] = "1-S2-1-4553710";
  gv_adminHandles[2] = "1-S2-1-3427636";
  gv_adminHandles[3] = "1-S2-1-4099844";
  gv_adminHandles[4] = "1-S2-1-3554203";
  gv_adminHandles[5] = "1-S2-1-2453495";
  gv_adminHandles[6] = "1-S2-1-5695184";
  gv_adminHandles[7] = "2-S2-1-2355723";
  gv_adminHandles[8] = "1-S2-1-2814183";

  // Fire Dragons
  gv_DragonTypes[ge_Type_FireDragon].bankName = "DragonRPGFireBank";
  gv_DragonTypes[ge_Type_FireDragon].introTheme = "IntroTheme";
  gv_DragonTypes[ge_Type_FireDragon].introThemeDuration = 9.6;
  gv_DragonTypes[ge_Type_FireDragon].talentBuildTitle = StringExternal("Param/Value/0379B895");
  gv_DragonTypes[ge_Type_FireDragon].talentBuildName = "Fire Dragon";
  gv_DragonTypes[ge_Type_FireDragon].talentBuildColor = lib_talent_ge_ColorScheme_Red;
  gv_DragonTypes[ge_Type_FireDragon].unitNames[0] = "BabyDragon";
  gv_DragonTypes[ge_Type_FireDragon].unitNames[1] = "TeenDragon";
  gv_DragonTypes[ge_Type_FireDragon].unitNames[2] = "AdultDragon";
  gv_DragonTypes[ge_Type_FireDragon].unitNames[3] = "MasterDragon";
  gv_DragonTypes[ge_Type_FireDragon].unitNames[3] = "MasterDragon";
  gv_DragonTypes[ge_Type_FireDragon].unitNames[4] = "LegendaryDragon";

  // Ice Dragons
  gv_DragonTypes[ge_Type_IceDragon].bankName = "DragonRPGIceBank";
  gv_DragonTypes[ge_Type_IceDragon].introTheme = "IceDragonTheme";
  gv_DragonTypes[ge_Type_IceDragon].introThemeDuration = 3.69;
  gv_DragonTypes[ge_Type_IceDragon].talentBuildTitle = StringExternal("Param/Value/C001C4C0");
  gv_DragonTypes[ge_Type_IceDragon].talentBuildName = "Ice Dragon";
  gv_DragonTypes[ge_Type_IceDragon].talentBuildColor = lib_talent_ge_ColorScheme_Blue;
  gv_DragonTypes[ge_Type_IceDragon].unitNames[0] = "BabyIceDragon";
  gv_DragonTypes[ge_Type_IceDragon].unitNames[1] = "TeenIceDragon";
  gv_DragonTypes[ge_Type_IceDragon].unitNames[2] = "AdultIceDragon";
  gv_DragonTypes[ge_Type_IceDragon].unitNames[3] = "MasterIceDragon";
  gv_DragonTypes[ge_Type_IceDragon].unitNames[4] = "LegendaryIceDragon";
}
//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_AddExperience (unit lp_hero, fixed lp_experienceAmmount) {

  if (((UnitGetPropertyFixed(lp_hero, c_unitPropXP, c_unitPropCurrent) + lp_experienceAmmount) <= gv_MAXEXPERIENCE)) {
    UnitSetPropertyFixed(lp_hero, c_unitPropXP, (UnitGetPropertyFixed(lp_hero, c_unitPropXP, c_unitPropCurrent) + lp_experienceAmmount));
  }
  else {
    UnitSetPropertyFixed(lp_hero, c_unitPropXP, gv_MAXEXPERIENCE);
  }
}
void gf_OpenQuestDialog (playerData_r lr_player, text lp_questText, text lp_questName, text lp_reward, text lp_recommendedLevel) {
  lr_player.quests.talking = true;
  libNtve_gf_PauseUnit(lr_player.dragon, true);
  libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
  DialogSetTitle(lr_player.quests.questDialog.state, lp_questName);
  libNtve_gf_SetDialogItemText(lr_player.quests.questDialog.textBox, lp_questText, PlayerGroupAll());
  libNtve_gf_SetDialogItemText(lr_player.quests.questDialog.reward, lp_reward, PlayerGroupAll());
  libNtve_gf_SetDialogItemText(lr_player.quests.questDialog.recommendedLevel, lp_recommendedLevel, PlayerGroupAll());
  DialogControlSetVisible(lr_player.quests.questDialog.textBox, lr_player.playerGroupSingle, true);
  DialogControlSetVisible(lr_player.quests.questDialog.recommendedLevel, lr_player.playerGroupSingle, true);
  DialogControlSetVisible(lr_player.quests.questDialog.reward, lr_player.playerGroupSingle, true);
  DialogControlSetVisible(lr_player.quests.questDialog.decline, lr_player.playerGroupSingle, true);
  DialogControlSetVisible(lr_player.quests.questDialog.accept, lr_player.playerGroupSingle, true);
  DialogSetVisible(lr_player.quests.questDialog.state, lr_player.playerGroupSingle, true);
}
void gf_CloseQuestDialog (playerData_r lr_player) {
  DialogControlSetVisible(lr_player.quests.questDialog.textBox, lr_player.playerGroupSingle, false);
  DialogControlSetVisible(lr_player.quests.questDialog.decline, lr_player.playerGroupSingle, false);
  DialogControlSetVisible(lr_player.quests.questDialog.accept, lr_player.playerGroupSingle, false);
  DialogSetVisible(lr_player.quests.questDialog.state, lr_player.playerGroupSingle, false);
  libNtve_gf_PauseUnit(lr_player.dragon, false);
  libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
  lr_player.quests.talking = false;
  UnitClearSelection(lr_player.player);
  UnitSelect(lr_player.dragon, lr_player.player, true);
}
void gf_OpenTalkDialog (playerData_r lr_player, text lp_nPCName, text lp_dialog) {
  lr_player.quests.talking = true;
  libNtve_gf_PauseUnit(lr_player.dragon, true);
  libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
  DialogSetTitle(lr_player.quests.talkDialog.state, lp_nPCName);
  libNtve_gf_SetDialogItemText(lr_player.quests.talkDialog.textBox, lp_dialog, lr_player.playerGroupSingle);
  DialogControlSetVisible(lr_player.quests.talkDialog.textBox, lr_player.playerGroupSingle, true);
  DialogControlSetVisible(lr_player.quests.talkDialog.accept, lr_player.playerGroupSingle, true);
  DialogSetVisible(lr_player.quests.talkDialog.state, lr_player.playerGroupSingle, true);
}
void gf_CloseTalkDialog (playerData_r lr_player) {
  DialogControlSetVisible(lr_player.quests.talkDialog.accept, lr_player.playerGroupSingle, false);
  DialogControlSetVisible(lr_player.quests.talkDialog.textBox, lr_player.playerGroupSingle, false);
  DialogSetVisible(lr_player.quests.talkDialog.state, lr_player.playerGroupSingle, false);
  libNtve_gf_PauseUnit(lr_player.dragon, false);
  libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
  lr_player.quests.talking = false;
  UnitClearSelection(lr_player.player);
  UnitSelect(lr_player.dragon, lr_player.player, true);
}
void gf_OpenRewardDialog (playerData_r lr_player, text lp_questName, text lp_dialog) {
  lr_player.quests.talking = true;
  libNtve_gf_PauseUnit(lr_player.dragon, true);
  libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
  DialogSetTitle(lr_player.quests.rewardDialog.state, lp_questName);
  libNtve_gf_SetDialogItemText(lr_player.quests.rewardDialog.textBox, lp_dialog, lr_player.playerGroupSingle);
  DialogControlSetVisible(lr_player.quests.rewardDialog.accept, lr_player.playerGroupSingle, true);
  DialogControlSetVisible(lr_player.quests.rewardDialog.textBox, lr_player.playerGroupSingle, true);
  DialogSetVisible(lr_player.quests.rewardDialog.state, lr_player.playerGroupSingle, true);
}
void gf_CloseRewardDialog (playerData_r lr_player) {
  DialogControlSetVisible(lr_player.quests.rewardDialog.accept, lr_player.playerGroupSingle, false);
  DialogControlSetVisible(lr_player.quests.rewardDialog.textBox, lr_player.playerGroupSingle, false);
  DialogSetVisible(lr_player.quests.rewardDialog.state, lr_player.playerGroupSingle, false);
  libNtve_gf_PauseUnit(lr_player.dragon, false);
  libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
  lr_player.quests.talking = false;
  UnitClearSelection(lr_player.player);
  UnitSelect(lr_player.dragon, lr_player.player, true);
}
void gf_SQ0Setup (playerData_r lr_player) {
  if (BankSectionExists(lr_player.banks.dragonBank, "SQ0")) {
    lr_player.quests.storyQuests[0].state = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ0", lr_player.hand);
  }
  else {
    lr_player.quests.storyQuests[0].state = 0;
  }
  if (lr_player.quests.storyQuests[0].state == 0) {
    ObjectiveCreateForPlayers(StringExternal("Param/Value/CEBC47B7"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
    lr_player.quests.storyQuests[0].objective = ObjectiveLastCreated();
    ObjectiveShow(lr_player.quests.storyQuests[0].objective, lr_player.playerGroupSingle, true);
    lr_player.quests.storyQuests[0].state = 1;
    PingDestroy(lr_player.quests.storyQuests[0].ping);
    PingCreate(lr_player.playerGroupSingle, "PingAlert", RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[0].ping = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.5);
  }
  else {
    if (lr_player.quests.storyQuests[0].state == 1) {
      ObjectiveCreateForPlayers(StringExternal("Param/Value/6FC5CF17"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
      lr_player.quests.storyQuests[0].objective = ObjectiveLastCreated();
      ObjectiveShow(lr_player.quests.storyQuests[0].objective, lr_player.playerGroupSingle, true);
      lr_player.quests.storyQuests[0].state = 1;
      PingDestroy(lr_player.quests.storyQuests[0].ping);
      PingCreate(lr_player.playerGroupSingle, "PingAlert", RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[0].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
    }
  }
}
void gf_SQ1Setup (playerData_r lr_player) {
  if (BankSectionExists(lr_player.banks.dragonBank, "SQ1")) {
    lr_player.quests.storyQuests[1].state = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ1", lr_player.hand);
  }
  else {
    lr_player.quests.storyQuests[1].state = 0;
  }
  if (lr_player.quests.storyQuests[1].state == 0) {
    ObjectiveCreateForPlayers(StringExternal("Param/Value/2D1D02A1"), StringExternal("Param/Value/3AF1017C"), c_objectiveStateActive, true, lr_player.playerGroupSingle);
    PingDestroy(lr_player.quests.storyQuests[1].ping);
    PingCreate(lr_player.playerGroupSingle, "PingObjective", RegionGetCenter(RegionFromId(216)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[1].ping = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.5);
    lr_player.quests.storyQuests[1].objective = ObjectiveLastCreated();
    TextTagCreate(StringExternal("Param/Value/433538AD"), 72, UnitGetPosition(UnitFromId(2511)), 6.0, true, true, lr_player.playerGroupSingle);
    lr_player.quests.storyQuests[1].textTag = TextTagLastCreated();
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
    TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
    TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2511), 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
    ObjectiveShow(lr_player.quests.storyQuests[1].objective, lr_player.playerGroupSingle, true);
  }
  else {
    if ((lr_player.quests.storyQuests[1].state == 1)) {
      ObjectiveCreateForPlayers(StringExternal("Param/Value/A20BD716"), StringExternal("Param/Value/1C0DC747"), c_objectiveStateActive, true, lr_player.playerGroupSingle);
      PingDestroy(lr_player.quests.storyQuests[1].ping);
      PingCreate(lr_player.playerGroupSingle, "PingBoss", RegionGetCenter(RegionFromId(5)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[1].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
      lr_player.quests.storyQuests[1].objective = ObjectiveLastCreated();
      ObjectiveShow(lr_player.quests.storyQuests[1].objective, lr_player.playerGroupSingle, true);
    }
    else {
      if ((lr_player.quests.storyQuests[1].state == 2)) {
        ObjectiveCreateForPlayers(StringExternal("Param/Value/4D4A430E"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
        PingDestroy(lr_player.quests.storyQuests[1].ping);
        PingCreate(lr_player.playerGroupSingle, "PingObjective", RegionGetCenter(RegionFromId(216)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
        lr_player.quests.storyQuests[1].ping = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.5);
        lr_player.quests.storyQuests[1].objective = ObjectiveLastCreated();
        TextTagCreate(StringExternal("Param/Value/0C002467"), 72, UnitGetPosition(UnitFromId(2511)), 6.0, true, true, lr_player.playerGroupSingle);
        lr_player.quests.storyQuests[1].textTag = TextTagLastCreated();
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
        TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
        TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2511), 1.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
        ObjectiveShow(lr_player.quests.storyQuests[1].objective, lr_player.playerGroupSingle, true);
      }
    }
  }
}
void gf_SQ2Setup (playerData_r lr_player) {
  if (BankSectionExists(lr_player.banks.dragonBank, "SQ2")) {
    lr_player.quests.storyQuests[2].state = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ2", lr_player.hand);
  }
  else {
    lr_player.quests.storyQuests[2].state = 0;
  }
  if ((lr_player.quests.storyQuests[2].state == 0)) {
    ObjectiveCreateForPlayers(StringExternal("Param/Value/1B0DED0D"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
    PingDestroy(lr_player.quests.storyQuests[2].ping);
    PingCreate(lr_player.playerGroupSingle, "PingAlert", RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[2].ping = PingLastCreated();
    lr_player.quests.storyQuests[2].objective = ObjectiveLastCreated();
    ObjectiveShow(lr_player.quests.storyQuests[2].objective, lr_player.playerGroupSingle, true);
    lr_player.quests.storyQuests[2].state = 1;
  }
  else {
    if ((lr_player.quests.storyQuests[2].state == 1)) {
      ObjectiveCreateForPlayers(StringExternal("Param/Value/86363A30"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
      PingDestroy(lr_player.quests.storyQuests[2].ping);
      PingCreate(lr_player.playerGroupSingle, "PingAlert", RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[2].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
      lr_player.quests.storyQuests[2].objective = ObjectiveLastCreated();
      ObjectiveShow(lr_player.quests.storyQuests[2].objective, lr_player.playerGroupSingle, true);
      lr_player.quests.storyQuests[2].state = 1;
    }
  }

}
void gf_SQ3Setup (playerData_r lr_player) {
  if (BankSectionExists(lr_player.banks.dragonBank, "SQ3")) {
    lr_player.quests.storyQuests[3].state = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ3", lr_player.hand);
  }
  else {
    lr_player.quests.storyQuests[3].state = 1;
  }
  if ((lr_player.quests.storyQuests[3].state == 0)) {
    lr_player.quests.storyQuests[3].state = 1;
  }
  if ((lr_player.quests.storyQuests[3].state == 1)) {
    ObjectiveCreateForPlayers(StringExternal("Param/Value/7A96BE90"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
    PingDestroy(lr_player.quests.storyQuests[3].ping);
    PingCreate(lr_player.playerGroupSingle, "PingObjective", RegionGetCenter(RegionFromId(224)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[3].ping = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.5);
    lr_player.quests.storyQuests[3].objective = ObjectiveLastCreated();
    TextTagCreate(StringExternal("Param/Value/F5B34512"), 72, UnitGetPosition(UnitFromId(1597)), 6.0, true, true, lr_player.playerGroupSingle);
    lr_player.quests.storyQuests[3].textTag = TextTagLastCreated();
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
    TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
    TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1597), 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
    ObjectiveShow(lr_player.quests.storyQuests[3].objective, lr_player.playerGroupSingle, true);
  }
  else {
    if ((lr_player.quests.storyQuests[3].state == 2)) {
      ObjectiveCreateForPlayers(StringExternal("Param/Value/5EE0564A"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
      PingDestroy(lr_player.quests.storyQuests[3].ping);
      PingCreate(lr_player.playerGroupSingle, "PingBoss", RegionGetCenter(RegionFromId(229)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[3].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
      lr_player.quests.storyQuests[3].objective = ObjectiveLastCreated();
      ObjectiveShow(lr_player.quests.storyQuests[3].objective, lr_player.playerGroupSingle, true);
    }
  }
}
void gf_SQ4Setup (playerData_r lr_player) {
  if (BankSectionExists(lr_player.banks.dragonBank, "SQ4")) {
    lr_player.quests.storyQuests[4].state = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ4", lr_player.hand);
  }
  else {
    lr_player.quests.storyQuests[4].state = 1;
  }
  if ((lr_player.quests.storyQuests[4].state == 0)) {
    lr_player.quests.storyQuests[4].state = 1;
  }
  if ((lr_player.quests.storyQuests[4].state == 1)) {
    ObjectiveCreateForPlayers(StringExternal("Param/Value/AADC97B0"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
    PingDestroy(lr_player.quests.storyQuests[4].ping);
    PingCreate(lr_player.playerGroupSingle, "PingObjective", RegionGetCenter(RegionFromId(225)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[4].ping = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.5);
    lr_player.quests.storyQuests[4].objective = ObjectiveLastCreated();
    TextTagCreate(StringExternal("Param/Value/87A071E6"), 72, UnitGetPosition(UnitFromId(1976)), 6.0, true, true, lr_player.playerGroupSingle);
    lr_player.quests.storyQuests[4].textTag = TextTagLastCreated();
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
    TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
    TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1976), 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
    ObjectiveShow(lr_player.quests.storyQuests[4].objective, lr_player.playerGroupSingle, true);
  }
  else {
    if ((lr_player.quests.storyQuests[4].state == 2)) {
      ObjectiveCreateForPlayers(StringExternal("Param/Value/8C107748"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
      PingDestroy(lr_player.quests.storyQuests[4].ping);
      PingCreate(lr_player.playerGroupSingle, "PingSimple", RegionGetCenter(RegionFromId(48)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[4].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
      lr_player.quests.storyQuests[4].objective = ObjectiveLastCreated();
      ObjectiveShow(lr_player.quests.storyQuests[4].objective, lr_player.playerGroupSingle, true);
    }
    else {
      if ((lr_player.quests.storyQuests[4].state == 3)) {
        ObjectiveCreateForPlayers(StringExternal("Param/Value/76460735"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
        PingDestroy(lr_player.quests.storyQuests[4].ping);
        PingCreate(lr_player.playerGroupSingle, "PingObjective", RegionGetCenter(RegionFromId(225)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
        lr_player.quests.storyQuests[4].ping = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.5);
        lr_player.quests.storyQuests[4].objective = ObjectiveLastCreated();
        TextTagCreate(StringExternal("Param/Value/1A10F0CF"), 72, UnitGetPosition(UnitFromId(1976)), 6.0, true, true, lr_player.playerGroupSingle);
        lr_player.quests.storyQuests[4].textTag = TextTagLastCreated();
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
        TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
        TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1976), 1.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
        ObjectiveShow(lr_player.quests.storyQuests[4].objective, lr_player.playerGroupSingle, true);
      }
    }
  }
}
void gf_SQ5Setup (playerData_r lr_player) {
  if (BankSectionExists(lr_player.banks.dragonBank, "SQ5")) {
    lr_player.quests.storyQuests[5].state = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ5", lr_player.hand);
  }
  else {
    lr_player.quests.storyQuests[5].state = 1;
  }
  if ((lr_player.quests.storyQuests[5].state == 0)) {
    lr_player.quests.storyQuests[5].state = 1;
  }
  if ((lr_player.quests.storyQuests[5].state == 1)) {
    ObjectiveCreateForPlayers(StringExternal("Param/Value/64D12ECA"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
    PingDestroy(lr_player.quests.storyQuests[5].ping);
    PingCreate(lr_player.playerGroupSingle, "PingAlert", RegionGetCenter(RegionFromId(61)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[5].ping = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.5);
    lr_player.quests.storyQuests[5].objective = ObjectiveLastCreated();
    ObjectiveShow(lr_player.quests.storyQuests[5].objective, lr_player.playerGroupSingle, true);
  }
  else {
    if ((lr_player.quests.storyQuests[5].state == 2)) {
      ObjectiveCreateForPlayers(StringExternal("Param/Value/44E480EE"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
      PingDestroy(lr_player.quests.storyQuests[5].ping);
      PingCreate(lr_player.playerGroupSingle, "PingBoss", RegionGetCenter(RegionFromId(229)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[5].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
      lr_player.quests.storyQuests[5].objective = ObjectiveLastCreated();
      ObjectiveShow(lr_player.quests.storyQuests[5].objective, lr_player.playerGroupSingle, true);
    }
    else {
      if ((lr_player.quests.storyQuests[5].state == 3)) {
        ObjectiveCreateForPlayers(StringExternal("Param/Value/C8EE6AC6"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
        PingDestroy(lr_player.quests.storyQuests[5].ping);
        PingCreate(lr_player.playerGroupSingle, "PingObjective", RegionGetCenter(RegionFromId(224)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
        lr_player.quests.storyQuests[5].ping = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.5);
        lr_player.quests.storyQuests[5].objective = ObjectiveLastCreated();
        TextTagCreate(StringExternal("Param/Value/AC39DF53"), 72, UnitGetPosition(UnitFromId(1597)), 6.0, true, true, lr_player.playerGroupSingle);
        lr_player.quests.storyQuests[5].textTag = TextTagLastCreated();
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
        TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
        TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1597), 5.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
        ObjectiveShow(lr_player.quests.storyQuests[5].objective, lr_player.playerGroupSingle, true);
      }
    }
  }
}
void gf_SQ6Setup (playerData_r lr_player) {
  if (BankSectionExists(lr_player.banks.dragonBank, "SQ6")) {
    lr_player.quests.storyQuests[6].state = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ6", lr_player.hand);
  }
  else {
    lr_player.quests.storyQuests[6].state = 1;
  }
  if ((lr_player.quests.storyQuests[6].state == 0)) {
    lr_player.quests.storyQuests[6].state = 1;
  }
  if ((lr_player.quests.storyQuests[6].state == 1)) {
    ObjectiveCreateForPlayers(StringExternal("Param/Value/6525BF43"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
    PingDestroy(lr_player.quests.storyQuests[6].ping);
    PingCreate(lr_player.playerGroupSingle, "PingAlert", RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[6].ping = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.5);
    lr_player.quests.storyQuests[6].objective = ObjectiveLastCreated();
    ObjectiveShow(lr_player.quests.storyQuests[6].objective, lr_player.playerGroupSingle, true);
  }
}
void gf_SQ7Setup (playerData_r lr_player) {
  if (BankSectionExists(lr_player.banks.dragonBank, "SQ7")) {
    lr_player.quests.storyQuests[7].state = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ7", lr_player.hand);
  }
  else {
    lr_player.quests.storyQuests[7].state = 0;
  }
  if ((lr_player.quests.storyQuests[7].state == 0)) {
    ObjectiveCreateForPlayers(StringExternal("Param/Value/FAFD0670"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
    PingDestroy(lr_player.quests.storyQuests[7].ping);
    PingCreate(lr_player.playerGroupSingle, "PingObjective", UnitGetPosition(UnitFromId(2595)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[7].ping = PingLastCreated();
    lr_player.quests.storyQuests[7].objective = ObjectiveLastCreated();
    ObjectiveShow(lr_player.quests.storyQuests[7].objective, lr_player.playerGroupSingle, true);
    TextTagCreate(StringExternal("Param/Value/DDE5287F"), 72, UnitGetPosition(UnitFromId(2595)), 6.0, true, true, lr_player.playerGroupSingle);
    lr_player.quests.storyQuests[7].textTag = TextTagLastCreated();
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
    TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
    TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2595), 5.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
    lr_player.quests.storyQuests[7].state = 1;
  }
  else {
    if ((lr_player.quests.storyQuests[7].state == 1)) {
      ObjectiveCreateForPlayers(StringExternal("Param/Value/377F54EA"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
      PingDestroy(lr_player.quests.storyQuests[7].ping);
      PingCreate(lr_player.playerGroupSingle, "PingObjective", UnitGetPosition(UnitFromId(2595)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[7].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
      lr_player.quests.storyQuests[7].objective = ObjectiveLastCreated();
      ObjectiveShow(lr_player.quests.storyQuests[7].objective, lr_player.playerGroupSingle, true);
      TextTagCreate(StringExternal("Param/Value/5E52AED5"), 72, UnitGetPosition(UnitFromId(2595)), 6.0, true, true, lr_player.playerGroupSingle);
      lr_player.quests.storyQuests[7].textTag = TextTagLastCreated();
      TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
      TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
      TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2595), 5.0);
      TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
    }
    else {
      if ((lr_player.quests.storyQuests[7].state == 2)) {
        ObjectiveCreateForPlayers(StringExternal("Param/Value/6D95D414"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
        PingDestroy(lr_player.quests.storyQuests[7].ping);
        PingCreate(lr_player.playerGroupSingle, "PingBoss", UnitGetPosition(UnitFromId(1711)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
        lr_player.quests.storyQuests[7].ping = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.5);
        lr_player.quests.storyQuests[7].objective = ObjectiveLastCreated();
        ObjectiveShow(lr_player.quests.storyQuests[7].objective, lr_player.playerGroupSingle, true);
      }
      else {
        if ((lr_player.quests.storyQuests[7].state == 3)) {
          ObjectiveCreateForPlayers(StringExternal("Param/Value/90310BF6"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
          PingDestroy(lr_player.quests.storyQuests[7].ping);
          PingCreate(lr_player.playerGroupSingle, "PingObjective", UnitGetPosition(UnitFromId(2595)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
          lr_player.quests.storyQuests[7].ping = PingLastCreated();
          PingSetScale(PingLastCreated(), 0.5);
          lr_player.quests.storyQuests[7].objective = ObjectiveLastCreated();
          ObjectiveShow(lr_player.quests.storyQuests[7].objective, lr_player.playerGroupSingle, true);
          TextTagCreate(StringExternal("Param/Value/F69E26DF"), 72, UnitGetPosition(UnitFromId(2595)), 6.0, true, true, lr_player.playerGroupSingle);
          lr_player.quests.storyQuests[7].textTag = TextTagLastCreated();
          TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
          TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(0.00, 0.00, 0.00));
          TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2595), 5.0);
          TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
        }
      }
    }
  }
}
void gf_SQ8Setup (playerData_r lr_player) {
  if (BankSectionExists(lr_player.banks.dragonBank, "SQ8")) {
    lr_player.quests.storyQuests[8].state = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ8", lr_player.hand);
  }
  else {
    lr_player.quests.storyQuests[8].state = 0;
  }
  if ((lr_player.quests.storyQuests[8].state == 0)) {
    ObjectiveCreateForPlayers(StringExternal("Param/Value/AF3CF266"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
    lr_player.quests.storyQuests[8].objective = ObjectiveLastCreated();
    ObjectiveShow(lr_player.quests.storyQuests[8].objective, lr_player.playerGroupSingle, true);
    PingDestroy(lr_player.quests.storyQuests[8].ping);
    PingCreate(lr_player.playerGroupSingle, "PingAlert", RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[8].ping = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.5);
    lr_player.quests.storyQuests[8].state = 1;
  }
  else {
    if ((lr_player.quests.storyQuests[8].state == 1)) {
      ObjectiveCreateForPlayers(StringExternal("Param/Value/9FE4C48D"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
      lr_player.quests.storyQuests[8].objective = ObjectiveLastCreated();
      ObjectiveShow(lr_player.quests.storyQuests[8].objective, lr_player.playerGroupSingle, true);
      PingDestroy(lr_player.quests.storyQuests[8].ping);
      PingCreate(lr_player.playerGroupSingle, "PingAlert", RegionGetCenter(RegionFromId(187)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[8].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
    }
    else {
      if ((lr_player.quests.storyQuests[8].state == 2)) {
        ObjectiveCreateForPlayers(StringExternal("Param/Value/DBB6DB82"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
        lr_player.quests.storyQuests[8].objective = ObjectiveLastCreated();
        ObjectiveShow(lr_player.quests.storyQuests[8].objective, lr_player.playerGroupSingle, true);
        PingDestroy(lr_player.quests.storyQuests[8].ping);
        PingCreate(lr_player.playerGroupSingle, "PingNumeric1", UnitGetPosition(UnitFromId(1880)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
        lr_player.quests.storyQuests[8].ping = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.5);
      }
      else {
        if ((lr_player.quests.storyQuests[8].state == 3)) {
          ObjectiveCreateForPlayers(StringExternal("Param/Value/19669321"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
          lr_player.quests.storyQuests[8].objective = ObjectiveLastCreated();
          ObjectiveShow(lr_player.quests.storyQuests[8].objective, lr_player.playerGroupSingle, true);
          PingDestroy(lr_player.quests.storyQuests[8].ping);
          PingCreate(lr_player.playerGroupSingle, "PingNumeric2", UnitGetPosition(UnitFromId(1881)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
          lr_player.quests.storyQuests[8].ping = PingLastCreated();
          PingSetScale(PingLastCreated(), 0.5);
        }
        else {
          if ((lr_player.quests.storyQuests[8].state == 4)) {
            ObjectiveCreateForPlayers(StringExternal("Param/Value/C6717FEF"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
            lr_player.quests.storyQuests[8].objective = ObjectiveLastCreated();
            ObjectiveShow(lr_player.quests.storyQuests[8].objective, lr_player.playerGroupSingle, true);
            PingDestroy(lr_player.quests.storyQuests[8].ping);
            PingCreate(lr_player.playerGroupSingle, "PingNumeric3", UnitGetPosition(UnitFromId(1882)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
            lr_player.quests.storyQuests[8].ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.5);
          }
          else {
            if ((lr_player.quests.storyQuests[8].state == 5)) {
              ObjectiveCreateForPlayers(StringExternal("Param/Value/8E333976"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
              lr_player.quests.storyQuests[8].objective = ObjectiveLastCreated();
              ObjectiveShow(lr_player.quests.storyQuests[8].objective, lr_player.playerGroupSingle, true);
              PingDestroy(lr_player.quests.storyQuests[8].ping);
              PingCreate(lr_player.playerGroupSingle, "PingNumeric4", UnitGetPosition(UnitFromId(1883)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
              lr_player.quests.storyQuests[8].ping = PingLastCreated();
              PingSetScale(PingLastCreated(), 0.5);
            }
            else {
              if ((lr_player.quests.storyQuests[8].state == 6)) {
                ObjectiveCreateForPlayers(StringExternal("Param/Value/1B167411"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
                lr_player.quests.storyQuests[8].objective = ObjectiveLastCreated();
                ObjectiveShow(lr_player.quests.storyQuests[8].objective, lr_player.playerGroupSingle, true);
                PingDestroy(lr_player.quests.storyQuests[8].ping);
                PingCreate(lr_player.playerGroupSingle, "PingNumeric5", UnitGetPosition(UnitFromId(1884)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
                lr_player.quests.storyQuests[8].ping = PingLastCreated();
                PingSetScale(PingLastCreated(), 0.5);
              }
              else {
                if ((lr_player.quests.storyQuests[8].state == 7)) {
                  ObjectiveCreateForPlayers(StringExternal("Param/Value/64C7FA63"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
                  lr_player.quests.storyQuests[8].objective = ObjectiveLastCreated();
                  ObjectiveShow(lr_player.quests.storyQuests[8].objective, lr_player.playerGroupSingle, true);
                  PingDestroy(lr_player.quests.storyQuests[8].ping);
                  PingCreate(lr_player.playerGroupSingle, "PingNumeric6", UnitGetPosition(UnitFromId(2501)), ColorWithAlpha(100.00, 50.20, 25.10, 0.00), 524287.0);
                  lr_player.quests.storyQuests[8].ping = PingLastCreated();
                  PingSetScale(PingLastCreated(), 0.5);
                }
              }
            }
          }
        }
      }
    }
  }
}
void gf_SQ9Setup (playerData_r lr_player) {
  if (BankSectionExists(lr_player.banks.dragonBank, "SQ9")) {
    lr_player.quests.storyQuests[9].state = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ9", lr_player.hand);
  }
  else {
    lr_player.quests.storyQuests[9].state = 0;
  }
  if ((lr_player.quests.storyQuests[9].state == 0)) {
    ObjectiveCreateForPlayers(StringExternal("Param/Value/4EB31843"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
    lr_player.quests.storyQuests[9].objective = ObjectiveLastCreated();
    PingDestroy(lr_player.quests.storyQuests[9].ping);
    PingCreate(lr_player.playerGroupSingle, "PingBoss", RegionGetCenter(RegionFromId(214)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[9].ping = PingLastCreated();
    ObjectiveShow(lr_player.quests.storyQuests[9].objective, lr_player.playerGroupSingle, true);
    lr_player.quests.storyQuests[9].state = 1;
  }
  else if ((lr_player.quests.storyQuests[9].state == 1)) {
    ObjectiveCreateForPlayers(StringExternal("Param/Value/223ED8F2"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
    lr_player.quests.storyQuests[9].objective = ObjectiveLastCreated();
    PingDestroy(lr_player.quests.storyQuests[9].ping);
    PingCreate(lr_player.playerGroupSingle, "PingBoss", RegionGetCenter(RegionFromId(214)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[9].ping = PingLastCreated();
    ObjectiveShow(lr_player.quests.storyQuests[9].objective, lr_player.playerGroupSingle, true);
  } else if ((lr_player.quests.storyQuests[9].state == 2)) {
    ObjectiveCreateForPlayers(StringExternal("Param/Value/176FF71B"), StringToText(""), c_objectiveStateActive, true, lr_player.playerGroupSingle);
    lr_player.quests.storyQuests[9].objective = ObjectiveLastCreated();
    PingDestroy(lr_player.quests.storyQuests[9].ping);
    PingCreate(lr_player.playerGroupSingle, "PingBoss", RegionGetCenter(RegionFromId(214)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[9].ping = PingLastCreated();
    ObjectiveShow(lr_player.quests.storyQuests[9].objective, lr_player.playerGroupSingle, true);
  }
  
}
fixed gf_CalculateHealthMissing (unit lp_unit) {

  fixed lv_healthMissing;


  lv_healthMissing = (UnitGetPropertyFixed(lp_unit, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent));
  return lv_healthMissing;
}
void gf_SaveStackCounts (playerData_r lr_player) {
  int lv_i;
  ;
  for (UnitGroupLoopBegin(UnitInventoryGroup(lr_player.dragon)); !UnitGroupLoopDone(); UnitGroupLoopStep()) {
    for (lv_i = 0; lv_i < gv_StackableTypeCount; lv_i += 1) {
      if (UnitGetType(UnitGroupLoopCurrent()) == gv_stackTypes[lv_i]) {
        lr_player.stackableCount[lv_i] = UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackNames[lv_i]);
        BankValueSetFromFixed(lr_player.banks.dragonBank, gv_stackBankNames[lv_i], lr_player.hand, lr_player.stackableCount[lv_i]);
      }
    }
  }
  UnitGroupLoopEnd();
}
void gf_RemoveWeapons (unit lp_hero) {

  unit lv_weapon;


  UnitGroupLoopBegin(UnitInventoryGroup(lp_hero));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 1)) {
      lv_weapon = UnitGroupLoopCurrent();
      break;
    }
  }
  UnitGroupLoopEnd();
  UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 0));
  UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 1));
  UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 2));
  UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 3));
  UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 4));
  UnitWeaponRemove(lp_hero, UnitWeaponGet(lp_hero, 5));
  UnitWeaponAdd(lp_hero, ((UnitGetType(lv_weapon))), null);
}
void gf_SaveSkills (playerData_r lr_player) {
  if ((PlayerStatus(lr_player.player) == c_playerStatusActive)) {
    if (UnitAbilityCheck(lr_player.dragon, "Fireball", true)) {
      lr_player.skills.fireball = UnitAbilityGetLevel(lr_player.dragon, "Fireball");
      BankValueSetFromInt(lr_player.banks.dragonBank, "FDFB", lr_player.hand, lr_player.skills.fireball);
    } else if (BankSectionExists(lr_player.banks.dragonBank, "FDFB")) {
      BankSectionRemove(lr_player.banks.dragonBank, "FDFB");
    }
    if (UnitAbilityCheck(lr_player.dragon, "FireClaws", true)) {
      lr_player.skills.fireClaw = UnitAbilityGetLevel(lr_player.dragon, "FireClaws");
      BankValueSetFromInt(lr_player.banks.dragonBank, "FDFC", lr_player.hand, lr_player.skills.fireClaw);
    } else if (BankSectionExists(lr_player.banks.dragonBank, "FDFC")) {
      BankSectionRemove(lr_player.banks.dragonBank, "FDFC");
    }
    if (UnitAbilityCheck(lr_player.dragon, "FlameEgg", true)) {
      lr_player.skills.flameEgg = UnitAbilityGetLevel(lr_player.dragon, "FlameEgg");
      BankValueSetFromInt(lr_player.banks.dragonBank, "FDFE", lr_player.hand, lr_player.skills.flameEgg);
    } else if (BankSectionExists(lr_player.banks.dragonBank, "FDFE")) {
      BankSectionRemove(lr_player.banks.dragonBank, "FDFE");
    }
    if (UnitAbilityCheck(lr_player.dragon, "Inferno", true)) {
      lr_player.skills.inferno = UnitAbilityGetLevel(lr_player.dragon, "Inferno");
      BankValueSetFromInt(lr_player.banks.dragonBank, "FDI", lr_player.hand, lr_player.skills.inferno);
    } else if (BankSectionExists(lr_player.banks.dragonBank, "FDI")) {
      BankSectionRemove(lr_player.banks.dragonBank, "FDI");
    }
    if (UnitAbilityCheck(lr_player.dragon, "Nova", true)) {
      lr_player.skills.nova = UnitAbilityGetLevel(lr_player.dragon, "Nova");
      BankValueSetFromInt(lr_player.banks.dragonBank, "FDN", lr_player.hand, lr_player.skills.nova);
    } else if (BankSectionExists(lr_player.banks.dragonBank, "FDN")) {
      BankSectionRemove(lr_player.banks.dragonBank, "FDN");
    }
    if (UnitAbilityCheck(lr_player.dragon, "FrostSpike", true)) {
      lr_player.skills.frostSpike = UnitAbilityGetLevel(lr_player.dragon, "FrostSpike");
      BankValueSetFromInt(lr_player.banks.dragonBank, "IDFS", lr_player.hand, lr_player.skills.frostSpike);
    } else if (BankSectionExists(lr_player.banks.dragonBank, "IDFS")) {
      BankSectionRemove(lr_player.banks.dragonBank, "IDFS");
    }
    if (UnitAbilityCheck(lr_player.dragon, "Blizzard", true)) {
      lr_player.skills.blizzard = UnitAbilityGetLevel(lr_player.dragon, "Blizzard");
      BankValueSetFromInt(lr_player.banks.dragonBank, "IDB", lr_player.hand, lr_player.skills.blizzard);
    } else if (BankSectionExists(lr_player.banks.dragonBank, "IDB")) {
      BankSectionRemove(lr_player.banks.dragonBank, "IDB");
    }
    if (UnitAbilityCheck(lr_player.dragon, "SubZero", true)) {
      lr_player.skills.subzero = UnitAbilityGetLevel(lr_player.dragon, "SubZero");
      BankValueSetFromInt(lr_player.banks.dragonBank, "IDSZ", lr_player.hand, lr_player.skills.subzero);
    } else if (BankSectionExists(lr_player.banks.dragonBank, "IDSZ")) {
      BankSectionRemove(lr_player.banks.dragonBank, "IDSZ");
    }
    if (UnitAbilityCheck(lr_player.dragon, "FrozenArmor", true)) {
      lr_player.skills.frozenArmour = UnitAbilityGetLevel(lr_player.dragon, "FrozenArmor");
      BankValueSetFromInt(lr_player.banks.dragonBank, "IDFA", lr_player.hand, lr_player.skills.frozenArmour);
    } else if (BankSectionExists(lr_player.banks.dragonBank, "IDFA")) {
      BankSectionRemove(lr_player.banks.dragonBank, "IDFA");
    }
  }
}
void gf_FillInventory (playerData_r lr_player) {
  int lv_c;
  int lv_s;

  for (lv_c = 0; lv_c < 6; lv_c += 1) {
    for (lv_s = 0; lv_s < 25; lv_s += 1 ) {
      lr_player.inventory[lv_c][lv_s] = null;
    }
  }
  UnitGroupLoopBegin(UnitInventoryGroup(lr_player.dragon));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    lr_player.inventory[UnitInventoryContainer(UnitGroupLoopCurrent()) - 1][UnitInventorySlot(UnitGroupLoopCurrent()) - 1] = UnitGroupLoopCurrent();
  }
  UnitGroupLoopEnd();
}
void gf_PutInventoryinInventory (playerData_r lr_player) {
  int lv_c;
  int lv_s;

  for (lv_c = 0; lv_c < 6; lv_c += 1) {
    for (lv_s = 0; lv_s < 25; lv_s += 1 ) {
      if (((UnitGetType(lr_player.inventory[lv_c][lv_s]) != null) && (UnitGetType(lr_player.inventory[lv_c][lv_s]) != ""))) {
        UnitInventoryCreate(lr_player.dragon, UnitGetType(lr_player.inventory[lv_c][lv_s]));
        UnitInventoryMove(UnitInventoryLastCreated(), lv_c + 1, lv_s + 1);
      }
    }
  }
}
void gf_ReapplyBuffs (playerData_r lr_player) {
  while (lr_player.state.reapplyingBuffs) {
    Wait(1.0, c_timeGame);
  }
  lr_player.state.reapplyingBuffs = true;
  UnitBehaviorRemovePlayer(lr_player.dragon, "AbsorbMana", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "CriticalCrepitus", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "DarkDissulto", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "DualWield", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "GreedIsGood", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "Headshot", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "MindoftheDragon", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "PowerOverwhelming", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "QuickLearner", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "Rage", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "RealmSwitch", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "Retaliation", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "SpikedScales", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "StickyShot", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "StrengthoftheDragon", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "VampiricTendencies", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorRemovePlayer(lr_player.dragon, "Zeal", lr_player.player, c_unitBehaviorCountAll);
  UnitBehaviorAddPlayer(lr_player.dragon, "StrengthoftheDragon", lr_player.player, lr_player.talent.strengthOfTheDragon);
  UnitBehaviorAddPlayer(lr_player.dragon, "MindoftheDragon", lr_player.player, lr_player.talent.mindOfTheDragon);
  UnitBehaviorAddPlayer(lr_player.dragon, "PowerOverwhelming", lr_player.player, lr_player.talent.powerOverwhelming);
  UnitBehaviorAddPlayer(lr_player.dragon, "Rage", lr_player.player, lr_player.talent.rage);
  UnitBehaviorAddPlayer(lr_player.dragon, "VampiricTendencies", lr_player.player, lr_player.talent.vampiricTendencies);
  UnitBehaviorAddPlayer(lr_player.dragon, "Zeal", lr_player.player, lr_player.talent.zeal);
  UnitBehaviorAddPlayer(lr_player.dragon, "CriticalCrepitus", lr_player.player, lr_player.talent.criticalCrepitus);
  UnitBehaviorAddPlayer(lr_player.dragon, "SpikedScales", lr_player.player, lr_player.talent.spikedScales);
  UnitBehaviorAddPlayer(lr_player.dragon, "Retaliation", lr_player.player, lr_player.talent.retaliation);
  UnitBehaviorAddPlayer(lr_player.dragon, "Headshot", lr_player.player, lr_player.talent.headshot);
  UnitBehaviorAddPlayer(lr_player.dragon, "StickyShot", lr_player.player, lr_player.talent.stickyShot);
  UnitBehaviorAddPlayer(lr_player.dragon, "DualWield", lr_player.player, lr_player.talent.dualWield);
  UnitBehaviorAddPlayer(lr_player.dragon, "GreedIsGood", lr_player.player, lr_player.talent.greedIsGood);
  UnitBehaviorAddPlayer(lr_player.dragon, "QuickLearner", lr_player.player, lr_player.talent.quickLearner);
  UnitBehaviorAddPlayer(lr_player.dragon, "AbsorbMana", lr_player.player, lr_player.talent.absorbMana);
  UnitBehaviorAddPlayer(lr_player.dragon, "RealmSwitch", lr_player.player, lr_player.talent.realmSwitch);
  gf_ApplyRebornStats(lr_player);
  lr_player.state.reapplyingBuffs = false;
}
void gf_RandomEffectonAttack (fixed lp_percentChance, int lp_ammountof, string lp_debuff, unit lp_recievingUnit, unit lp_sendingUnit) {

  if (gf_RandomChance(lp_percentChance)) {
    UnitBehaviorAdd(lp_recievingUnit, lp_debuff, lp_sendingUnit, lp_ammountof);
  }
}
void gf_RandomlySpawnAllies (fixed lp_percentChance, int lp_ammountof, string lp_enemytospawn, unit lp_spawningUnit, unit lp_spawnee) {

  if (gf_RandomChance(lp_percentChance)) {
    libNtve_gf_UnitCreateFacingPoint(lp_ammountof, lp_enemytospawn, 0, 15, UnitGetPosition(lp_spawningUnit), UnitGetPosition(lp_spawnee));
  }
}
bool gf_RandomChance (fixed lp_percentChance) {
  return RandomFixed(0.0, 100.0) < lp_percentChance;
}

void gf_NosferatusRelic (playerData_r lr_player, unit lp_hero, fixed lp_attackAmmount) {
  unitgroup lv_surroundingUnits;
  int lv_tag;

  lv_surroundingUnits = UnitGroupEmpty();
  lv_tag = c_textTagNone;

  if ((RandomFixed(0.0, 100.0) < (1.0 * UnitBehaviorCount(lp_hero, "NosferatusRelic")))) {
    UnitSetPropertyFixed(lp_hero, c_unitPropLifePercent, 100.0);
    TextTagCreate(StringExternal("Param/Value/4AEFB157"), 50, UnitGetPosition(lp_hero), 5.0, true, true, lr_player.playerGroupSingle);
    lv_tag = TextTagLastCreated();
    TextTagSetVelocity(lv_tag, 0.1, 90.0);
    TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
    TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
  }
  if ((RandomFixed(0.0, 100.0) < (1.0 * UnitBehaviorCount(lp_hero, "NosferatusRelic")))) {
    UnitSetPropertyFixed(lp_hero, c_unitPropShieldsPercent, 100.0);
    TextTagCreate(StringExternal("Param/Value/42EFD948"), 50, UnitGetPosition(lp_hero), 5.0, true, true, lr_player.playerGroupSingle);
    lv_tag = TextTagLastCreated();
    TextTagSetVelocity(lv_tag, 0.1, 90.0);
    TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
    TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
  }
  if ((RandomFixed(0.0, 100.0) < (1.0 * UnitBehaviorCount(lp_hero, "NosferatusRelic")))) {
    UnitSetPropertyFixed(lp_hero, c_unitPropEnergyPercent, 100.0);
    TextTagCreate(StringExternal("Param/Value/CD490724"), 50, UnitGetPosition(lp_hero), 5.0, true, true, lr_player.playerGroupSingle);
    lv_tag = TextTagLastCreated();
    TextTagSetVelocity(lv_tag, 0.1, 90.0);
    TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
    TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
  }
  if ((RandomFixed(0.0, 100.0) < (1.0 * UnitBehaviorCount(lp_hero, "NosferatusRelic")))) {
    UnitAbilityReset(lp_hero, AbilityCommand("Fireball", 0), c_spendLocationAll);
    UnitAbilityReset(lp_hero, AbilityCommand("FireClaws", 0), c_spendLocationAll);
    UnitAbilityReset(lp_hero, AbilityCommand("FlameEgg", 0), c_spendLocationAll);
    UnitAbilityReset(lp_hero, AbilityCommand("Nova", 0), c_spendLocationAll);
    UnitAbilityReset(lp_hero, AbilityCommand("Inferno", 0), c_spendLocationAll);
    TextTagCreate(StringExternal("Param/Value/D979A8A4"), 50, UnitGetPosition(lp_hero), 5.0, true, true, lr_player.playerGroupSingle);
    lv_tag = TextTagLastCreated();
    TextTagSetVelocity(lv_tag, 0.1, 90.0);
    TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
    TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
  }
  if ((RandomFixed(0.0, 100.0) < (1.0 * UnitBehaviorCount(lp_hero, "NosferatusRelic")))) {
    TextTagCreate(StringExternal("Param/Value/3602F42D"), 50, UnitGetPosition(lp_hero), 5.0, true, true, lr_player.playerGroupSingle);
    lv_tag = TextTagLastCreated();
    TextTagSetVelocity(lv_tag, 0.1, 90.0);
    TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
    TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
  }
  if ((RandomFixed(0.0, 100.0) < (1.0 * UnitBehaviorCount(lp_hero, "NosferatusRelic")))) {
    lv_surroundingUnits = UnitGroupAlliance(lr_player.player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_hero), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(lp_hero));
    UnitGroupLoopBegin(lv_surroundingUnits);
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      UnitDamage(lp_hero, "CriticalStrike", UnitGroupLoopCurrent(), lp_attackAmmount);
      libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(UnitGroupLoopCurrent()));
      TextTagCreate(StringExternal("Param/Value/13ABAEAA"), 50, UnitGetPosition(UnitGroupLoopCurrent()), 5.0, true, true, lr_player.playerGroupSingle);
      lv_tag = TextTagLastCreated();
      TextTagSetVelocity(lv_tag, 0.1, 90.0);
      TextTagSetColor(lv_tag, c_textTagColorText, Color(25.10, 0.00, 0.00));
      TextTagSetTime(lv_tag, c_textTagTimeDuration, 2.0);
    }
    UnitGroupLoopEnd();
  }
}
void gf_StickyShot (unit lp_hero, unit lp_target) {
  fixed lv_randomNumber;
  int lv_thisTag;

  lv_thisTag = c_textTagNone;

  lv_randomNumber = RandomFixed(0.0, 100.0);
  if ((lv_randomNumber < (0.5 * UnitBehaviorCount(lp_hero, "Sticky")))) {
    UnitBehaviorRemove(lp_target, "Sticky", c_unitBehaviorCountAll);
    UnitBehaviorAdd(lp_target, "Sticky", lp_hero, UnitBehaviorCount(lp_hero, "StickyShot"));
    TextTagCreate(StringExternal("Param/Value/8F5EE5D4"), 24, UnitGetPosition(lp_target), 1.0, true, true, PlayerGroupAll());
    lv_thisTag = TextTagLastCreated();
    TextTagSetVelocity(lv_thisTag, 0.25, 10.0);
    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
  }
}
void gf_RealmSwitch (unit lp_hero, unit lp_target) {
  fixed lv_randomNumber;
  int lv_thisTag;

  lv_thisTag = c_textTagNone;

  lv_randomNumber = RandomFixed(0.0, 100.0);
  if ((lv_randomNumber < (0.5 * UnitBehaviorCount(lp_hero, "RealmSwitch")))) {
    UnitBehaviorAdd(lp_hero, "Vanished", lp_hero, 1);
    TextTagCreate(StringExternal("Param/Value/032643A8"), 30, UnitGetPosition(lp_hero), 0.0, true, true, PlayerGroupAll());
    lv_thisTag = TextTagLastCreated();
    TextTagSetVelocity(lv_thisTag, 0.5, 0.0);
    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
    TextTagCreate(StringExternal("Param/Value/3D64B2BA"), 30, UnitGetPosition(lp_hero), 0.0, true, true, PlayerGroupAll());
    lv_thisTag = TextTagLastCreated();
    TextTagSetVelocity(lv_thisTag, 0.5, 180.0);
    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
  }
}
void gf_DualWield (unit lp_hero, unit lp_target, string lp_herosEffect, fixed lp_herosEffectDamage) {
  fixed lv_randomNumber;
  int lv_thisTag;

  lv_thisTag = c_textTagNone;

  lv_randomNumber = RandomFixed(0.0, 100.0);
  if ((lv_randomNumber < (0.5 * UnitBehaviorCount(lp_hero, "DualWield")))) {
    UnitDamage(lp_hero, lp_herosEffect, lp_target, 0.0);
    TextTagCreate((StringExternal("Param/Value/242D9ECB") + (FixedToText(lp_herosEffectDamage, 0) + StringExternal("Param/Value/73896267"))), 24, UnitGetPosition(lp_target), 1.0, true, true, PlayerGroupAll());
    lv_thisTag = TextTagLastCreated();
    TextTagSetVelocity(lv_thisTag, 0.75, 70.0);
    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
  }
}
void gf_Rage (unit lp_hero, fixed lp_damagingAmount) {
  int lv_thisTag;
  fixed lv_rageGain;

  lv_thisTag = c_textTagNone;

  lv_rageGain = (lp_damagingAmount * (0.01 * UnitBehaviorCount(lp_hero, "Rage")));
  UnitSetPropertyFixed(lp_hero, c_unitPropEnergy, (UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent) + lv_rageGain));
  if ((lv_rageGain > 0.0)) {
    TextTagCreate(FixedToText(lv_rageGain, 0), 24, UnitGetPosition(lp_hero), 1.0, true, true, PlayerGroupAll());
    lv_thisTag = TextTagLastCreated();
    TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 0.00, 100.00));
    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
  }
}
void gf_WaypointTeleport (playerData_r lr_player, region lp_waypoint) {
  actor lv_effectActor1;
  actor lv_effectActor2;

  libNtve_gf_PauseUnit(lr_player.dragon, true);
  libNtve_gf_CreateModelAtPoint("TimeWarpLaunch", UnitGetPosition(lr_player.dragon));
  lv_effectActor1 = libNtve_gf_ActorLastCreated();
  SoundPlayOnUnit(SoundLink("WarpGate_TrainStart", -1), PlayerGroupAll(), lr_player.dragon, 0.0, 100.0, 0.0);
  Wait(0.45, c_timeGame);
  UnitSetPosition(lr_player.dragon, RegionGetCenter(lp_waypoint), false);
  lr_player.respawnPoint = RegionGetCenter(lp_waypoint);
  libNtve_gf_CreateModelAtPoint("TimeWarp", RegionGetCenter(lp_waypoint));
  lv_effectActor2 = libNtve_gf_ActorLastCreated();
  SoundPlayOnUnit(SoundLink("WarpGate_TrainFinish", -1), PlayerGroupAll(), lr_player.dragon, 0.0, 100.0, 0.0);
  Wait(0.45, c_timeGame);
  libNtve_gf_KillModel(lv_effectActor1);
  CameraPan(lr_player.player, RegionGetCenter(lp_waypoint), 0.0, -1, 10.0, false);
  libNtve_gf_PauseUnit(lr_player.dragon, false);
  Wait(0.45, c_timeGame);
  libNtve_gf_KillModel(lv_effectActor2);
}
void gf_ShowWaypointDialog (playerData_r lr_player) {
  if (lr_player.waypointUnlocked[0]) {
    DialogControlSetEnabled(gv_wastelandDialogButton, lr_player.playerGroupSingle, true);
    DialogControlSetVisible(gv_wastelandDialogButton, lr_player.playerGroupSingle, true);
    if (libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(1199)), 2.0))) {
      DialogControlSetEnabled(gv_wastelandDialogButton, lr_player.playerGroupSingle, false);
    }
  }
  if (lr_player.waypointUnlocked[1]) {
    DialogControlSetEnabled(gv_ballanDialogButton, lr_player.playerGroupSingle, true);
    DialogControlSetVisible(gv_ballanDialogButton, lr_player.playerGroupSingle, true);
    if (libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(1201)), 2.0))) {
      DialogControlSetEnabled(gv_ballanDialogButton, lr_player.playerGroupSingle, false);
    }
  }
  if (lr_player.waypointUnlocked[2]) {
    DialogControlSetEnabled(gv_relamyDialogButton, lr_player.playerGroupSingle, true);
    DialogControlSetVisible(gv_relamyDialogButton, lr_player.playerGroupSingle, true);
    if (libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(607)), 2.0))) {
      DialogControlSetEnabled(gv_relamyDialogButton, lr_player.playerGroupSingle, false);
    }
  }
  if (lr_player.waypointUnlocked[3]) {
    DialogControlSetEnabled(gv_verbotenDialogButton, lr_player.playerGroupSingle, true);
    DialogControlSetVisible(gv_verbotenDialogButton, lr_player.playerGroupSingle, true);
    if (libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(798)), 2.0))) {
      DialogControlSetEnabled(gv_verbotenDialogButton, lr_player.playerGroupSingle, false);
    }
  }
  if (lr_player.waypointUnlocked[4]) {
    DialogControlSetEnabled(gv_cretonDialogButton, lr_player.playerGroupSingle, true);
    DialogControlSetVisible(gv_cretonDialogButton, lr_player.playerGroupSingle, true);
    if (libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(797)), 2.0))) {
      DialogControlSetEnabled(gv_cretonDialogButton, lr_player.playerGroupSingle, false);
    }
  }
  DialogSetVisible(gv_waypointDialog, lr_player.playerGroupSingle, true);
}
void gf_HideWaypointDialog (playerData_r lr_player) {
  DialogControlSetVisible(gv_wastelandDialogButton, lr_player.playerGroupSingle, false);
  DialogControlSetVisible(gv_ballanDialogButton, lr_player.playerGroupSingle, false);
  DialogControlSetVisible(gv_relamyDialogButton, lr_player.playerGroupSingle, false);
  DialogControlSetVisible(gv_verbotenDialogButton, lr_player.playerGroupSingle, false);
  DialogControlSetVisible(gv_cretonDialogButton, lr_player.playerGroupSingle, false);
  DialogSetVisible(gv_waypointDialog, lr_player.playerGroupSingle, false);
}
void gf_ResetTalentBuildandVariables (playerData_r lr_player) {
  lib_talent_gf_ResetTalentBuild(lr_player, UnitLevel(lr_player.dragon) + UnitLevel(lr_player.dragon) / gv_LevelsPerEvolution);
  UnitBehaviorRemovePlayer(lr_player.dragon, "StrengthoftheDragon", lr_player.player, lr_player.talent.strengthOfTheDragon);
  lr_player.talent.strengthOfTheDragon = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "MindoftheDragon", lr_player.player, lr_player.talent.mindOfTheDragon);
  lr_player.talent.mindOfTheDragon = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "PowerOverwhelming", lr_player.player, lr_player.talent.powerOverwhelming);
  lr_player.talent.powerOverwhelming = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "Rage", lr_player.player, lr_player.talent.rage);
  lr_player.talent.rage = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "VampiricTendencies", lr_player.player, lr_player.talent.vampiricTendencies);
  lr_player.talent.vampiricTendencies = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "Zeal", lr_player.player, lr_player.talent.zeal);
  lr_player.talent.zeal = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "CriticalCrepitus", lr_player.player, lr_player.talent.criticalCrepitus);
  lr_player.talent.criticalCrepitus = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "Headshot", lr_player.player, lr_player.talent.headshot);
  lr_player.talent.headshot = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "StickyShot", lr_player.player, lr_player.talent.stickyShot);
  lr_player.talent.stickyShot = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "DualWield", lr_player.player, lr_player.talent.dualWield);
  lr_player.talent.dualWield = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "GreedIsGood", lr_player.player, lr_player.talent.greedIsGood);
  lr_player.talent.greedIsGood = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "QuickLearner", lr_player.player, lr_player.talent.quickLearner);
  lr_player.talent.quickLearner = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "SpikedScales", lr_player.player, lr_player.talent.spikedScales);
  lr_player.talent.spikedScales = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "Retaliation", lr_player.player, lr_player.talent.retaliation);
  lr_player.talent.retaliation = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "AbsorbMana", lr_player.player, lr_player.talent.absorbMana);
  lr_player.talent.absorbMana = 0;
  UnitBehaviorRemovePlayer(lr_player.dragon, "RealmSwitch", lr_player.player, lr_player.talent.realmSwitch);
  lr_player.talent.realmSwitch = 0;
}
void gf_LoadStackCounts (playerData_r lr_player) {
  int lv_i;
  fixed lv_chargesUsed;

  for (UnitGroupLoopBegin(UnitInventoryGroup(lr_player.dragon)); !UnitGroupLoopDone(); UnitGroupLoopStep()) {
    for(lv_i = 0; lv_i < gv_StackableTypeCount; lv_i += 1) {
      if (UnitGetType(UnitGroupLoopCurrent()) == gv_stackTypes[lv_i] && BankSectionExists(lr_player.banks.dragonBank, gv_stackBankNames[lv_i])) {
        lv_chargesUsed = BankValueGetAsFixed(lr_player.banks.dragonBank, gv_stackBankNames[lv_i], lr_player.hand) - UnitGetChargeUsed(UnitGroupLoopCurrent(), gv_stackNames[lv_i]);
        UnitAddChargeUsed(UnitGroupLoopCurrent(), gv_stackNames[lv_i], lv_chargesUsed);
      }
    }
  }
  UnitGroupLoopEnd();
}
void gf_LoadSkills (playerData_r lr_player) {
  int lv_tmpLevel;
  
  if (BankSectionExists(lr_player.banks.dragonBank, "FDFB")) {
    lr_player.skills.fireball = BankValueGetAsInt(lr_player.banks.dragonBank, "FDFB", lr_player.hand);
    if (lr_player.skills.fireball >= 0) {
      if (UnitAbilityCheck(lr_player.dragon, "Fireball", true)) {
        lv_tmpLevel = UnitAbilityGetLevel(lr_player.dragon, "Fireball") + 1;
      } else {
        lv_tmpLevel = 0;
      }
      UnitLearnAbilAddLevel(lr_player.dragon, "LearnSkillsFire", 0, lr_player.skills.fireball + 1 - lv_tmpLevel);
    }
  }
  if (BankSectionExists(lr_player.banks.dragonBank, "FDFC")) {
    lr_player.skills.fireClaw = BankValueGetAsInt(lr_player.banks.dragonBank, "FDFC", lr_player.hand);
    if (lr_player.skills.fireClaw >= 0) {
      if (UnitAbilityCheck(lr_player.dragon, "FireClaws", true)) {
        lv_tmpLevel = UnitAbilityGetLevel(lr_player.dragon, "FireClaws") + 1;
      } else {
        lv_tmpLevel = 0;
      }
      UnitLearnAbilAddLevel(lr_player.dragon, "LearnSkillsFire", 1, lr_player.skills.fireClaw + 1 - lv_tmpLevel);
    }
  }
  if (BankSectionExists(lr_player.banks.dragonBank, "FDFE")) {
    lr_player.skills.flameEgg = BankValueGetAsInt(lr_player.banks.dragonBank, "FDFE", lr_player.hand);
    if (lr_player.skills.flameEgg >= 0) {
      if (UnitAbilityCheck(lr_player.dragon, "FlameEgg", true)) {
        lv_tmpLevel = UnitAbilityGetLevel(lr_player.dragon, "FlameEgg") + 1;
      } else {
        lv_tmpLevel = 0;
      }
      UnitLearnAbilAddLevel(lr_player.dragon, "LearnSkillsFire", 2, lr_player.skills.flameEgg + 1 - lv_tmpLevel);
    }
  }
  if (BankSectionExists(lr_player.banks.dragonBank, "FDI")) {
    lr_player.skills.inferno = BankValueGetAsInt(lr_player.banks.dragonBank, "FDI", lr_player.hand);
    if (lr_player.skills.inferno >= 0) {
      if (UnitAbilityCheck(lr_player.dragon, "Inferno", true)) {
        lv_tmpLevel = UnitAbilityGetLevel(lr_player.dragon, "Inferno") + 1;
      } else {
        lv_tmpLevel = 0;
      }
      UnitLearnAbilAddLevel(lr_player.dragon, "LearnSkillsFire", 3, lr_player.skills.inferno + 1 - lv_tmpLevel);
    }
  }
  if (BankSectionExists(lr_player.banks.dragonBank, "FDN")) {
    lr_player.skills.nova = BankValueGetAsInt(lr_player.banks.dragonBank, "FDN", lr_player.hand);
      if (lr_player.skills.nova >= 0) {
        if (UnitAbilityCheck(lr_player.dragon, "Nova", true)) {
          lv_tmpLevel = UnitAbilityGetLevel(lr_player.dragon, "Nova") + 1;
        } else {
          lv_tmpLevel = 0;
        }
        UnitLearnAbilAddLevel(lr_player.dragon, "LearnSkillsFire", 4, lr_player.skills.nova + 1 - lv_tmpLevel);
      }
  }
  if (BankSectionExists(lr_player.banks.dragonBank, "IDFS")) {
    lr_player.skills.frostSpike = BankValueGetAsInt(lr_player.banks.dragonBank, "IDFS", lr_player.hand);
    if (lr_player.skills.frostSpike >= 0) {
      if (UnitAbilityCheck(lr_player.dragon, "FrostSpike", true)) {
        lv_tmpLevel = UnitAbilityGetLevel(lr_player.dragon, "FrostSpike") + 1;
      } else {
        lv_tmpLevel = 0;
      }
      UnitLearnAbilAddLevel(lr_player.dragon, "LearnSkillsIce", 0, lr_player.skills.frostSpike + 1 - lv_tmpLevel);
    }
  }
  if (BankSectionExists(lr_player.banks.dragonBank, "IDB")) {
    lr_player.skills.blizzard = BankValueGetAsInt(lr_player.banks.dragonBank, "IDB", lr_player.hand);
    if (lr_player.skills.blizzard >= 0) {
      if (UnitAbilityCheck(lr_player.dragon, "Blizzard", true)) {
        lv_tmpLevel = UnitAbilityGetLevel(lr_player.dragon, "Blizzard") + 1;
      } else {
        lv_tmpLevel = 0;
      }
      UnitLearnAbilAddLevel(lr_player.dragon, "LearnSkillsIce", 1, lr_player.skills.blizzard + 1 - lv_tmpLevel);
    }
  }
  if (BankSectionExists(lr_player.banks.dragonBank, "IDSZ")) {
    lr_player.skills.subzero = BankValueGetAsInt(lr_player.banks.dragonBank, "IDSZ", lr_player.hand);
    if (lr_player.skills.subzero >= 0) {
      if (UnitAbilityCheck(lr_player.dragon, "SubZero", true)) {
        lv_tmpLevel = UnitAbilityGetLevel(lr_player.dragon, "SubZero") + 1;
      } else {
        lv_tmpLevel = 0;
      }
      UnitLearnAbilAddLevel(lr_player.dragon, "LearnSkillsIce", 2, lr_player.skills.subzero + 1 - lv_tmpLevel);
    }
  }
  if (BankSectionExists(lr_player.banks.dragonBank, "IDFA")) {
    lr_player.skills.frozenArmour = BankValueGetAsInt(lr_player.banks.dragonBank, "IDFA", lr_player.hand);
    if (lr_player.skills.frozenArmour >= 0) {
      if (UnitAbilityCheck(lr_player.dragon, "FrozenArmor", true)) {
        lv_tmpLevel = UnitAbilityGetLevel(lr_player.dragon, "FrozenArmor") + 1;
      } else {
        lv_tmpLevel = 0;
      }
      UnitLearnAbilAddLevel(lr_player.dragon, "LearnSkillsIce", 3, lr_player.skills.frozenArmour + 1 - lv_tmpLevel);
    }
  }
}
void gf_LoadHPC (playerData_r lr_player) {
  int lv_hPCBank;
  int lv_hPCManual;

  if ((PlayerStatus(lr_player.player) == c_playerStatusActive)) {
    if (BankSectionExists(lr_player.banks.currencyBank, "HPC")) {
      lr_player.currency.shards = (BankValueGetAsInt(lr_player.banks.currencyBank, "Shards", lr_player.hand) / 1);
      PlayerModifyPropertyInt(lr_player.player, c_playerPropCustom, c_playerPropOperSetTo, lr_player.currency.shards);
      lr_player.currency.gold = (BankValueGetAsInt(lr_player.banks.currencyBank, "Gold", lr_player.hand) / 1);
      PlayerModifyPropertyInt(lr_player.player, c_playerPropMinerals, c_playerPropOperSetTo, lr_player.currency.gold);
      lr_player.currency.pvpPoints = (BankValueGetAsInt(lr_player.banks.currencyBank, "PvP Points", lr_player.hand) / 1);
      PlayerModifyPropertyInt(lr_player.player, c_playerPropVespene, c_playerPropOperSetTo, lr_player.currency.pvpPoints);
      lv_hPCManual = (lr_player.currency.shards + (lr_player.currency.gold + (lr_player.currency.pvpPoints + gv_HPCMod)));
      lv_hPCBank = BankValueGetAsInt(lr_player.banks.currencyBank, "HPC", lr_player.hand);
      if ((lv_hPCBank != lv_hPCManual)) {
        if ((lv_hPCBank == -10691)) {
          UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/10F95778"));
          lr_player.verification.hpc = true;
        }
        else {
          UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/7CC796A6"));
          GameOver(lr_player.player, c_gameOverDefeat, true, true);
        }
      }
      else {
        lr_player.verification.hpc = true;
      }
    }
    else {
      if (BankSectionExists(lr_player.banks.dragonBank, "Gold") && BankSectionExists(lr_player.banks.dragonBank, "PvP Points") && BankSectionExists(lr_player.banks.dragonBank, "Shards")) {
        UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/A7264C2D"));
        GameOver(lr_player.player, c_gameOverDefeat, true, true);
      }
      else {
        lr_player.verification.hpc = true;
      }
    }
  }
}
void gf_LoadHRC (playerData_r lr_player) {
  int lv_hRCBank;
  int lv_hRCManual;
  int lv_checkVariable;

  if ((PlayerStatus(lr_player.player) == c_playerStatusActive)) {
    if (BankSectionExists(lr_player.banks.rebornBank, "HRC")) {
      lr_player.stats.reborn.regen = BankValueGetAsInt(lr_player.banks.rebornBank, "Reborn RegenerationUp", lr_player.hand);
      lr_player.stats.reborn.points = BankValueGetAsInt(lr_player.banks.rebornBank, "Reborn Points", lr_player.hand);
      lr_player.stats.reborn.movementSpeed = BankValueGetAsInt(lr_player.banks.rebornBank, "Reborn MovementSpeedUp", lr_player.hand);
      lr_player.stats.reborn.miss = BankValueGetAsInt(lr_player.banks.rebornBank, "Reborn Miss%Down", lr_player.hand);
      lr_player.stats.reborn.maxMP = BankValueGetAsInt(lr_player.banks.rebornBank, "Reborn MaxMPUp", lr_player.hand);
      lr_player.stats.reborn.maxHP = BankValueGetAsInt(lr_player.banks.rebornBank, "Reborn MaxHPUp", lr_player.hand);
      lr_player.stats.reborn.itemDrop = BankValueGetAsInt(lr_player.banks.rebornBank, "Reborn ItemDrop%Up", lr_player.hand);
      lr_player.stats.reborn.goldDrop = BankValueGetAsInt(lr_player.banks.rebornBank, "Reborn GoldDrop%Up", lr_player.hand);
      lr_player.stats.reborn.dodge = BankValueGetAsInt(lr_player.banks.rebornBank, "Reborn Dodge%Up", lr_player.hand);
      lr_player.stats.reborn.defense = BankValueGetAsInt(lr_player.banks.rebornBank, "Reborn DefenseUp", lr_player.hand);
      lr_player.stats.reborn.count = BankValueGetAsInt(lr_player.banks.rebornBank, "Reborn Count", lr_player.hand);
      lr_player.stats.reborn.attackSpeed = BankValueGetAsInt(lr_player.banks.rebornBank, "Reborn AttackSpeedUp", lr_player.hand);
      lv_hRCManual = 
        lr_player.stats.reborn.regen +
        lr_player.stats.reborn.points +
        lr_player.stats.reborn.movementSpeed +
        lr_player.stats.reborn.miss +
        lr_player.stats.reborn.maxMP +
        lr_player.stats.reborn.maxHP +
        lr_player.stats.reborn.itemDrop +
        lr_player.stats.reborn.goldDrop +
        lr_player.stats.reborn.dodge +
        lr_player.stats.reborn.defense + 
        lr_player.stats.reborn.count + 
        lr_player.stats.reborn.attackSpeed +
        gv_HRCMod;
      lv_hRCBank = BankValueGetAsInt(lr_player.banks.rebornBank, "HRC", lr_player.hand);
      BankWait(lr_player.banks.rebornBank);
      if ((lv_hRCBank != lv_hRCManual)) {
        if ((lv_hRCBank == -10691)) {
          UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/D79EFB21"));
          lr_player.verification.hrc = true;
        }
        else {
          UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/4C304E5E"));
          GameOver(lr_player.player, c_gameOverDefeat, true, true);
        }
      }
      else {
        lv_checkVariable = (lr_player.stats.reborn.regen + (lr_player.stats.reborn.points + ((lr_player.stats.reborn.movementSpeed + (((lr_player.stats.reborn.miss + lr_player.stats.reborn.maxMP) + lr_player.stats.reborn.maxHP) + (((lr_player.stats.reborn.itemDrop + lr_player.stats.reborn.goldDrop) + lr_player.stats.reborn.dodge) + lr_player.stats.reborn.defense))) + lr_player.stats.reborn.attackSpeed)));
        if (((lr_player.stats.reborn.count * 10) != lv_checkVariable)) {
          UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/E49171F1"));
          lr_player.stats.reborn.regen = 0;
          lr_player.stats.reborn.movementSpeed = 0;
          lr_player.stats.reborn.miss = 0;
          lr_player.stats.reborn.maxMP = 0;
          lr_player.stats.reborn.maxHP = 0;
          lr_player.stats.reborn.itemDrop = 0;
          lr_player.stats.reborn.goldDrop = 0;
          lr_player.stats.reborn.dodge = 0;
          lr_player.stats.reborn.defense = 0;
          lr_player.stats.reborn.attackSpeed = 0;
          lr_player.stats.reborn.points = (lr_player.stats.reborn.count * 10);
        }
        lr_player.verification.hrc = true;
      }
    }
    else {
      lr_player.verification.hrc = true;
    }
  }
}
void gf_LoadStash (playerData_r lr_player) {
  if ((PlayerStatus(lr_player.player) == c_playerStatusActive)) {
    if (BankSectionExists(lr_player.banks.stashBank, "Stash")) {
      TechTreeUpgradeAddLevel(lr_player.player, "Stash1", BankValueGetAsInt(lr_player.banks.stashBank, "One", lr_player.hand));
      TechTreeUpgradeAddLevel(lr_player.player, "Stash12", BankValueGetAsInt(lr_player.banks.stashBank, "Two", lr_player.hand));
      TechTreeUpgradeAddLevel(lr_player.player, "Stash13", BankValueGetAsInt(lr_player.banks.stashBank, "Three", lr_player.hand));
      TechTreeUpgradeAddLevel(lr_player.player, "Stash14", BankValueGetAsInt(lr_player.banks.stashBank, "Four", lr_player.hand));
      TechTreeUpgradeAddLevel(lr_player.player, "Stash15", BankValueGetAsInt(lr_player.banks.stashBank, "Five", lr_player.hand));
      TechTreeUpgradeAddLevel(lr_player.player, "Stash16", BankValueGetAsInt(lr_player.banks.stashBank, "Six", lr_player.hand));
      BankValueGetAsUnit(lr_player.banks.stashBank, "Stash", lr_player.hand, lr_player.player, lr_player.stash.location, 270.0);
      lr_player.stash.stashUnit = BankLastRestoredUnit();
    }
    else {
      UnitCreate(1, "Stash", c_unitCreateIgnorePlacement, lr_player.player, lr_player.stash.location, 270.0);
      lr_player.stash.stashUnit = UnitLastCreated();
    }
  }
}
void gf_InitializeOne () {
  GameCheatAllow(c_gameCheatAny, false);
  UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Zerg", false);
  UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnit_Zerg", false);
  TriggerExecute(gt_HideUselessUI, true, true);
  TriggerExecute(gt_SetUpUnitTypes, true, true);
  SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 0.0);
  UIStatusBarOverride(PlayerGroupAll(), c_unitStatusGroupEnemy);
  TriggerExecute(gt_SetStackChargeNames, true, true);
  TriggerExecute(gt_SetInfestationSpawnTrigger, true, true);
  TriggerExecute(gt_SetZauberersMinionsUnitTypes, true, true);
  TriggerExecute(gt_SetZauberersRegions, true, true);
  TriggerExecute(gt_SpawnEnemies, true, true);
  TriggerExecute(gt_SetupRegions, true, true);
  TriggerExecute(gt_SetUpLocationDialog, true, true);
  TriggerExecute(gt_SetupTips, true, true);
  TriggerExecute(gt_SetUpAttributeDialog, true, true);
  TriggerExecute(gt_CreateTimeofdayDialog, true, true);
  UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowButtons, true);
  UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowHotkeys, true);
  UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowInfoPanel, true);
  UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowMinimap, true);
  UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowModifiers, true);
  UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowPings, true);
  UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowSmartClick, true);
  for (PlayerGroupLoopBegin(PlayerGroupAll()); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    PlayerOptionOverride(PlayerGroupLoopCurrent(), "selectuncontrolable", "1");
    PlayerOptionOverride(PlayerGroupLoopCurrent(), "simplecommandcard", "0");
  }
  PlayerGroupLoopEnd();
}
void gf_InitializeTwo () {
  TriggerExecute(gt_SetSyritalHealth, false, true);
  TriggerExecute(gt_MachinaDePlagamSethealth, false, true);
  TriggerExecute(gt_Sremagsisethealth, false, true);
  TriggerExecute(gt_MakePlayer14anAlly, false, true);
  TriggerExecute(gt_RunStoryQuestSetups, true, true);
  TriggerExecute(gt_SetUpTalentTree, false, true);
  TriggerExecute(gt_CreateWaypointDialog, true, true);
  TriggerExecute(gt_LoadWaypoints, true, true);
  GameSetSpeedValue(c_gameSpeedNormal);
  GameSetSpeedLocked(true);
}
void gf_InitializeThree () {
  playerData_r lr_player;
  int lv_i;
  int lv_j;
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    for(lv_j = 0; lv_j < 2; lv_j += 1) {
      for(lv_i = 233; lv_i < 237; lv_i += 1) {
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, lr_player.player, RegionRandomPoint(RegionFromId(lv_i)), 270.0);
      }
      for (lv_i = 242; lv_i < 251; lv_i += 1) {
        UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, lr_player.player, RegionRandomPoint(RegionFromId(lv_i)), 270.0);
      }
      UnitCreate(1, "VisionDummy", c_unitCreateIgnorePlacement, lr_player.player, RegionRandomPoint(RegionFromId(3)), 270.0);
    }
    gf_LoadHRC(lr_player);
    gf_LoadHPC(lr_player);
    gf_LoadDragonCheck(lr_player);
  }
  PlayerGroupLoopEnd();

  libNtve_gf_SetPlayerGroupAlliance(gv_humanPlayers, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
  TriggerExecute(gt_CreateQuestDialog, true, true);
  TriggerExecute(gt_CreateTalkDialog, true, true);
  TriggerExecute(gt_CreateRewardDialog, true, true);
  TriggerExecute(gt_LoadSideQuests, true, true);
  TriggerExecute(gt_CreateRebornDialog, true, true);
  gv_playersSetUp = true;
}
void gf_ChangeItemsOwner (playerData_r lr_player) {
  UnitGroupLoopBegin(UnitInventoryGroup(lr_player.dragon));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    UnitSetOwner(UnitGroupLoopCurrent(), lr_player.player, true);
  }
  UnitGroupLoopEnd();
  UnitGroupLoopBegin(UnitInventoryGroup(lr_player.stash.stashUnit));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    UnitSetOwner(UnitGroupLoopCurrent(), lr_player.player, true);
  }
  UnitGroupLoopEnd();
}
void gf_StatCheck (playerData_r lr_player) {
  int lv_tmpAgility;
  int lv_tmpDexterity;
  int lv_tmpIntelligence;
  int lv_tmpStrength;
  int lv_tmpVitality;
  if (
    UnitGetType(lr_player.dragon) != "BabyDragon" &&
    UnitGetType(lr_player.dragon) != "BabyIceDragon" &&
    UnitGetType(lr_player.dragon) != "AdultDragon" &&
    UnitGetType(lr_player.dragon) != "AdultIceDragon" &&
    UnitGetType(lr_player.dragon) != "LegendaryDragon" &&
    UnitGetType(lr_player.dragon) != "LegendaryIceDragon" &&
    UnitGetType(lr_player.dragon) != "MasterDragon" &&
    UnitGetType(lr_player.dragon) != "MasterIceDragon" &&
    UnitGetType(lr_player.dragon) != "TeenDragon" &&
    UnitGetType(lr_player.dragon) != "TeenIceDragon" &&
    UnitGetType(lr_player.dragon) != "" &&
    UnitGetType(lr_player.dragon) != null) {
    UnitBehaviorAdd(lr_player.dragon, "DONTEDITBANKFILES", UnitFromId(2662), 1);
  }
  lv_tmpAgility = UnitBehaviorCount(lr_player.dragon, "Agility");
  lv_tmpDexterity = UnitBehaviorCount(lr_player.dragon, "Dexterity");
  lv_tmpIntelligence = UnitBehaviorCount(lr_player.dragon, "Intelligence");
  lv_tmpStrength = UnitBehaviorCount(lr_player.dragon, "Strength");
  lv_tmpVitality = UnitBehaviorCount(lr_player.dragon, "Vitality");
  if (
    lv_tmpAgility > 100 ||
    lv_tmpDexterity > 500 ||
    lv_tmpStrength > 500 ||
    lv_tmpVitality > 500 ||
    lv_tmpIntelligence > 500 || 
    (
      lv_tmpStrength +
      lv_tmpDexterity +
      lv_tmpIntelligence +
      lv_tmpVitality + 
      lv_tmpAgility +
      lr_player.stats.attributePoints 
      > 
      gv_MaxLevel * 5 + 
      gv_MaxLevel / gv_LevelsPerEvolution * 5
    )
  ) {
    lr_player.stats.attributePoints = 
    UnitGetPropertyInt(lr_player.dragon, c_unitPropLevel, c_unitPropCurrent) * 5 +
    UnitGetPropertyInt(lr_player.dragon, c_unitPropLevel, c_unitPropCurrent) / gv_LevelsPerEvolution * 5;
    lr_player.stats.attributeText = IntToText(lr_player.stats.attributePoints);
    libNtve_gf_SetDialogItemText(lr_player.stats.attributeDialog.textBox, lr_player.stats.attributeText, lr_player.playerGroupSingle);
    BankValueSetFromInt(lr_player.banks.dragonBank, "AP", lr_player.hand, lr_player.stats.attributePoints);
    UnitBehaviorRemovePlayer(lr_player.dragon, "AddAgility", lr_player.player, lv_tmpAgility);
    lr_player.stats.agility = 0;
    BankValueSetFromInt(lr_player.banks.dragonBank, "Ag", lr_player.hand, lr_player.stats.agility);
    UnitBehaviorRemovePlayer(lr_player.dragon, "AddDexterity", lr_player.player, lv_tmpDexterity);
    lr_player.stats.dexterity = 0;
    BankValueSetFromInt(lr_player.banks.dragonBank, "De", lr_player.hand, lr_player.stats.dexterity);
    UnitBehaviorRemovePlayer(lr_player.dragon, "AddIntelligence", lr_player.player, lv_tmpIntelligence);
    lr_player.stats.intelligence = 0;
    BankValueSetFromInt(lr_player.banks.dragonBank, "Int", lr_player.hand, lr_player.stats.intelligence);
    UnitBehaviorRemovePlayer(lr_player.dragon, "AddStrength", lr_player.player, lv_tmpStrength);
    lr_player.stats.strength = 0;
    BankValueSetFromInt(lr_player.banks.dragonBank, "Str", lr_player.hand, lr_player.stats.strength);
    UnitBehaviorRemovePlayer(lr_player.dragon, "AddVitality", lr_player.player, lv_tmpVitality);
    lr_player.stats.vitality = 0;
    BankValueSetFromInt(lr_player.banks.dragonBank, "Vi", lr_player.hand, lr_player.stats.vitality);
    gf_ShowStats(lr_player);
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaError, StringExternal("Param/Value/21DD33BF"));
  }
}

void gf_Save (playerData_r lr_player) {
  if (!lr_player.state.isSavingExiting && !lr_player.state.preventSave && gv_playersSetUp) {
    lr_player.state.isSavingExiting = true;
    gf_SaveStackCounts(lr_player);
    gf_SaveHero(lr_player);
    gf_SaveStash(lr_player);
    gf_SaveSkills(lr_player);
    gf_SaveHPC(lr_player);
    gf_SaveHRC(lr_player);
    BankValueSetFromFlag(lr_player.banks.dragonBank, "GB", lr_player.hand, lr_player.state.beatGame);
    BankSave(lr_player.banks.dragonBank);
    lib_talent_gf_SaveTalentBuild(1, gv_DragonTypes[lr_player.type].talentBuildName, lr_player);
    lr_player.state.isSavingExiting = false;
  }
}
void gf_SaveHero (playerData_r lr_player) {
  if ((PlayerStatus(lr_player.player) == c_playerStatusActive) && gv_playersSetUp && UnitIsAlive(lr_player.dragon) && lr_player.verification.dragon) {
    BankValueSetFromUnit(lr_player.banks.dragonBank, "Dragon", lr_player.hand, lr_player.dragon);
    BankValueSetFromInt(lr_player.banks.dragonBank, "DSN", lr_player.hand, gv_DSNMod + UnitLevel(lr_player.dragon) + ModI(FixedToInt(UnitGetPropertyFixed(lr_player.dragon, c_unitPropXP, c_unitPropCurrent)), 1000));
  }
}
void gf_SaveStash (playerData_r lr_player) {
  if ((PlayerStatus(lr_player.player) == c_playerStatusActive) && gv_playersSetUp) {
    BankValueSetFromUnit(lr_player.banks.stashBank, "Stash", lr_player.hand, lr_player.stash.stashUnit);
    BankValueSetFromInt(lr_player.banks.stashBank, "One", lr_player.hand, TechTreeUpgradeCount(lr_player.player, "Stash1", c_techCountCompleteOnly));
    BankValueSetFromInt(lr_player.banks.stashBank, "Two", lr_player.hand, TechTreeUpgradeCount(lr_player.player, "Stash12", c_techCountCompleteOnly));
    BankValueSetFromInt(lr_player.banks.stashBank, "Three", lr_player.hand, TechTreeUpgradeCount(lr_player.player, "Stash13", c_techCountCompleteOnly));
    BankValueSetFromInt(lr_player.banks.stashBank, "Four", lr_player.hand, TechTreeUpgradeCount(lr_player.player, "Stash14", c_techCountCompleteOnly));
    BankValueSetFromInt(lr_player.banks.stashBank, "Five", lr_player.hand, TechTreeUpgradeCount(lr_player.player, "Stash15", c_techCountCompleteOnly));
    BankValueSetFromInt(lr_player.banks.stashBank, "Six", lr_player.hand, TechTreeUpgradeCount(lr_player.player, "Stash16", c_techCountCompleteOnly));
    BankSave(lr_player.banks.stashBank);
  }
}
void gf_SaveHPC (playerData_r lr_player) {
  int lv_hPC;

  if ((PlayerStatus(lr_player.player) == c_playerStatusActive) && gv_playersSetUp && lr_player.verification.hpc) {
    lr_player.currency.shards = PlayerGetPropertyInt(lr_player.player, c_playerPropCustom);
    BankValueSetFromInt(lr_player.banks.currencyBank, "Shards", lr_player.hand, lr_player.currency.shards);
    lr_player.currency.pvpPoints = PlayerGetPropertyInt(lr_player.player, c_playerPropVespene);
    BankValueSetFromInt(lr_player.banks.currencyBank, "PvP Points", lr_player.hand, lr_player.currency.pvpPoints);
    lr_player.currency.gold = PlayerGetPropertyInt(lr_player.player, c_playerPropMinerals);
    BankValueSetFromInt(lr_player.banks.currencyBank, "Gold", lr_player.hand, lr_player.currency.gold);
    lv_hPC = (lr_player.currency.shards + (lr_player.currency.gold + (lr_player.currency.pvpPoints + gv_HPCMod)));
    BankValueSetFromInt(lr_player.banks.currencyBank, "HPC", lr_player.hand, lv_hPC);
    BankSave(lr_player.banks.currencyBank);
  }
}
void gf_SaveHRC (playerData_r lr_player) {
  int lv_hRC;

  if ((PlayerStatus(lr_player.player) == c_playerStatusActive) && gv_playersSetUp && lr_player.verification.hrc) {
    lv_hRC = 
      lr_player.stats.reborn.regen + 
      lr_player.stats.reborn.points + 
      lr_player.stats.reborn.movementSpeed + 
      lr_player.stats.reborn.miss +
      lr_player.stats.reborn.maxMP + 
      lr_player.stats.reborn.maxHP +
      lr_player.stats.reborn.itemDrop +
      lr_player.stats.reborn.goldDrop +
      lr_player.stats.reborn.dodge +
      lr_player.stats.reborn.defense +
      lr_player.stats.reborn.count +
      lr_player.stats.reborn.attackSpeed + 
      gv_HRCMod;
    BankValueSetFromInt(lr_player.banks.rebornBank, "Reborn Points", lr_player.hand, lr_player.stats.reborn.points);
    BankValueSetFromInt(lr_player.banks.rebornBank, "Reborn MaxHPUp", lr_player.hand, lr_player.stats.reborn.maxHP);
    BankValueSetFromInt(lr_player.banks.rebornBank, "Reborn MaxMPUp", lr_player.hand, lr_player.stats.reborn.maxMP);
    BankValueSetFromInt(lr_player.banks.rebornBank, "Reborn DefenseUp", lr_player.hand, lr_player.stats.reborn.defense);
    BankValueSetFromInt(lr_player.banks.rebornBank, "Reborn MovementSpeedUp", lr_player.hand, lr_player.stats.reborn.movementSpeed);
    BankValueSetFromInt(lr_player.banks.rebornBank, "Reborn AttackSpeedUp", lr_player.hand, lr_player.stats.reborn.attackSpeed);
    BankValueSetFromInt(lr_player.banks.rebornBank, "Reborn Dodge%Up", lr_player.hand, lr_player.stats.reborn.dodge);
    BankValueSetFromInt(lr_player.banks.rebornBank, "Reborn Miss%Down", lr_player.hand, lr_player.stats.reborn.miss);
    BankValueSetFromInt(lr_player.banks.rebornBank, "Reborn GoldDrop%Up", lr_player.hand, lr_player.stats.reborn.goldDrop);
    BankValueSetFromInt(lr_player.banks.rebornBank, "Reborn ItemDrop%Up", lr_player.hand, lr_player.stats.reborn.itemDrop);
    BankValueSetFromInt(lr_player.banks.rebornBank, "Reborn RegenerationUp", lr_player.hand, lr_player.stats.reborn.regen);
    BankValueSetFromInt(lr_player.banks.rebornBank, "Reborn Count", lr_player.hand, lr_player.stats.reborn.count);
    BankValueSetFromInt(lr_player.banks.rebornBank, "HRC", lr_player.hand, lv_hRC);
    BankSave(lr_player.banks.rebornBank);
  }
}
void gf_ApplyRebornStats (playerData_r lr_player) {
  UnitBehaviorRemove(lr_player.dragon, "MaxHPUp", c_unitBehaviorCountAll);
  UnitBehaviorRemove(lr_player.dragon, "MaxMPUp", c_unitBehaviorCountAll);
  UnitBehaviorRemove(lr_player.dragon, "DefenseUp", c_unitBehaviorCountAll);
  UnitBehaviorRemove(lr_player.dragon, "MovementSpeedUp", c_unitBehaviorCountAll);
  UnitBehaviorRemove(lr_player.dragon, "RegenerationUp", c_unitBehaviorCountAll);
  UnitBehaviorRemove(lr_player.dragon, "AttackSpeedUp", c_unitBehaviorCountAll);
  UnitBehaviorAddPlayer(lr_player.dragon, "MaxHPUp", lr_player.player, lr_player.stats.reborn.maxHP);
  UnitBehaviorAddPlayer(lr_player.dragon, "MaxMPUp", lr_player.player, lr_player.stats.reborn.maxMP);
  UnitBehaviorAddPlayer(lr_player.dragon, "MovementSpeedUp", lr_player.player, lr_player.stats.reborn.movementSpeed);
  UnitBehaviorAddPlayer(lr_player.dragon, "AttackSpeedUp", lr_player.player, lr_player.stats.reborn.attackSpeed);
  UnitBehaviorAddPlayer(lr_player.dragon, "DefenseUp", lr_player.player, lr_player.stats.reborn.defense);
  UnitBehaviorAddPlayer(lr_player.dragon, "RegenerationUp", lr_player.player, lr_player.stats.reborn.regen);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Quest Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateQuestDialog_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    DialogCreate(500, 600, c_anchorCenter, 0, 0, true);
    lr_player.quests.questDialog.state = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), lr_player.playerGroupSingle, false);
    DialogSetTitle(lr_player.quests.questDialog.state, StringExternal("Param/Value/4C530C19"));
    libNtve_gf_CreateDialogItemLabel(lr_player.quests.questDialog.state, 450, 375, c_anchorTop, 0, 75, StringExternal("Param/Value/44A38F2B"), ColorWithAlpha(0,0,0,0), true, 0.0);
    lr_player.quests.questDialog.textBox = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), lr_player.playerGroupSingle, false);
    libNtve_gf_CreateDialogItemLabel(lr_player.quests.questDialog.state, 450, 50, c_anchorTop, 0, 450, StringExternal("Param/Value/435C7371"), ColorWithAlpha(0,0,0,0), false, 0.0);
    lr_player.quests.questDialog.reward = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), lr_player.playerGroupSingle, false);
    libNtve_gf_CreateDialogItemLabel(lr_player.quests.questDialog.state, 450, 50, c_anchorTop, 0, 500, StringExternal("Param/Value/4CF0811B"), ColorWithAlpha(0,0,0,0), false, 0.0);
    lr_player.quests.questDialog.recommendedLevel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), lr_player.playerGroupSingle, false);
    libNtve_gf_CreateDialogItemButton(lr_player.quests.questDialog.state, 250, 50, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/13643487"), StringExternal("Param/Value/68A2CF78"), "");
    lr_player.quests.questDialog.decline = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), lr_player.playerGroupSingle, false);
    libNtve_gf_CreateDialogItemButton(lr_player.quests.questDialog.state, 250, 50, c_anchorBottomRight, 0, 0, StringExternal("Param/Value/948D8910"), StringExternal("Param/Value/509C3FEA"), "");
    lr_player.quests.questDialog.accept = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), lr_player.playerGroupSingle, false);
  }
  PlayerGroupLoopEnd();

  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateQuestDialog_Init () {
  gt_CreateQuestDialog = TriggerCreate("gt_CreateQuestDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Talk Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateTalkDialog_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    DialogCreate(500, 600, c_anchorCenter, 0, 0, true);
    lr_player.quests.talkDialog.state = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetTitle(lr_player.quests.talkDialog.state, StringExternal("Param/Value/864BC008"));
    libNtve_gf_CreateDialogItemLabel(lr_player.quests.talkDialog.state, 450, 475, c_anchorTop, 0, 75, StringExternal("Param/Value/32E1D3FE"), ColorWithAlpha(0,0,0,0), true, 0.0);
    lr_player.quests.talkDialog.textBox = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(lr_player.quests.talkDialog.state, 500, 50, c_anchorBottom, 0, 0, StringExternal("Param/Value/74D3F4D3"), StringExternal("Param/Value/2C6A7AF3"), "");
    lr_player.quests.talkDialog.accept = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
  }
  PlayerGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateTalkDialog_Init () {
  gt_CreateTalkDialog = TriggerCreate("gt_CreateTalkDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Reward Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateRewardDialog_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    DialogCreate(500, 600, c_anchorCenter, 0, 0, true);
    lr_player.quests.rewardDialog.state = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogSetTitle(lr_player.quests.rewardDialog.state, StringExternal("Param/Value/7FD5CEA6"));
    libNtve_gf_CreateDialogItemLabel(lr_player.quests.rewardDialog.state, 440, 475, c_anchorTop, 0, 75, StringExternal("Param/Value/593C6AC2"), ColorWithAlpha(0,0,0,0), true, 0.0);
    lr_player.quests.rewardDialog.textBox = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(lr_player.quests.rewardDialog.state, 500, 50, c_anchorBottom, 0, 0, StringExternal("Param/Value/6194C7D7"), StringExternal("Param/Value/55261293"), "");
    lr_player.quests.rewardDialog.accept = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
  }
  PlayerGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateRewardDialog_Init () {
  gt_CreateRewardDialog = TriggerCreate("gt_CreateRewardDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Quest Decline
//--------------------------------------------------------------------------------------------------
bool gt_QuestDecline_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.decline) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gf_CloseQuestDialog(lr_player);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_QuestDecline_Init () {
  gt_QuestDecline = TriggerCreate("gt_QuestDecline_Func");
  TriggerAddEventDialogControl(gt_QuestDecline, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Talk Dialog Closed
//--------------------------------------------------------------------------------------------------
bool gt_TalkDialogClosed_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  unit lv_tempArmor;

  lr_player = gv_players[EventPlayer() - 1];


  if (testConds) {
    if (EventDialogControl() != lr_player.quests.talkDialog.accept) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gf_CloseTalkDialog(lr_player);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TalkDialogClosed_Init () {
  gt_TalkDialogClosed = TriggerCreate("gt_TalkDialogClosed_Func");
  TriggerAddEventDialogControl(gt_TalkDialogClosed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Run Story Quest Setups
//--------------------------------------------------------------------------------------------------
bool gt_RunStoryQuestSetups_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  string lv_sqWhat;
  int lv_i;
  
  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    for(lv_i = 0; lv_i < 10; lv_i += 1) {
      lv_sqWhat = "SQ" + IntToString(lv_i);
      if (BankSectionExists(lr_player.banks.dragonBank, lv_sqWhat)) {
        lr_player.quests.storyQuests[lv_i].state = BankValueGetAsInt(lr_player.banks.dragonBank, lv_sqWhat, lr_player.hand);
      }
    }
    if ((lr_player.quests.storyQuests[0].state < 2)) {
      gf_SQ0Setup(lr_player);
    }
    else if ((lr_player.quests.storyQuests[1].state < 3)) {
      gf_SQ1Setup(lr_player);
    }
    else if ((lr_player.quests.storyQuests[2].state < 2)) {
      gf_SQ2Setup(lr_player);
    }
    else if ((lr_player.quests.storyQuests[3].state < 3)) {
      gf_SQ3Setup(lr_player);
    }
    else if ((lr_player.quests.storyQuests[4].state < 4)) {
      gf_SQ4Setup(lr_player);
    }
    else if ((lr_player.quests.storyQuests[5].state < 4)) {
      gf_SQ5Setup(lr_player);
    }
    else if ((lr_player.quests.storyQuests[6].state < 2)) {
      gf_SQ6Setup(lr_player);
    }
    else if ((lr_player.quests.storyQuests[7].state < 4)) {
      gf_SQ7Setup(lr_player);
    }
    else if ((lr_player.quests.storyQuests[8].state < 8)) {
      gf_SQ8Setup(lr_player);
    }
    else if ((lr_player.quests.storyQuests[9].state < 3)) {
      gf_SQ9Setup(lr_player);
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RunStoryQuestSetups_Init () {
  gt_RunStoryQuestSetups = TriggerCreate("gt_RunStoryQuestSetups_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ0 - Player Enters SQ0 Region 1
//--------------------------------------------------------------------------------------------------
bool gt_SQ0PlayerEntersSQ0Region1_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.storyQuests[0].state == 1) {
    ObjectiveSetState(lr_player.quests.storyQuests[0].objective, c_objectiveStateFailed);
    ObjectiveDestroy(lr_player.quests.storyQuests[0].objective);
    lr_player.quests.storyQuests[0].state = 2;
    BankValueSetFromInt(lr_player.banks.dragonBank, "SQ0", lr_player.hand, lr_player.quests.storyQuests[0].state);
    PingDestroy(lr_player.quests.storyQuests[0].ping);
    gf_SQ1Setup(lr_player);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ0PlayerEntersSQ0Region1_Init () {
  gt_SQ0PlayerEntersSQ0Region1 = TriggerCreate("gt_SQ0PlayerEntersSQ0Region1_Func");
  TriggerAddEventUnitRegion(gt_SQ0PlayerEntersSQ0Region1, null, RegionFromId(222), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ1 - Player Talks to Felix
//--------------------------------------------------------------------------------------------------
bool gt_SQ1PlayerTalkstoFelix_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  
  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }
  
  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionFromId(216))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if ((lr_player.quests.storyQuests[1].state == 0)) {
    lr_player.quests.talking = true;
    libNtve_gf_PauseUnit(lr_player.dragon, true);
    libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
    TransmissionSend(lr_player.playerGroupSingle, TransmissionSourceFromUnit(UnitFromId(2511), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/B15EE073"), StringExternal("Param/Value/F09F60C9"), 10.0, c_transmissionDurationAdd, true);
    libNtve_gf_PauseUnit(lr_player.dragon, false);
    libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
    lr_player.quests.storyQuests[1].state = 1;
    ObjectiveSetDescription(lr_player.quests.storyQuests[1].objective, StringExternal("Param/Value/493EBBC1"));
    ObjectiveSetName(lr_player.quests.storyQuests[1].objective, StringExternal("Param/Value/8D9F3763"));
    PingDestroy(lr_player.quests.storyQuests[1].ping);
    PingCreate(lr_player.playerGroupSingle, "PingBoss", RegionGetCenter(RegionFromId(5)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[1].ping = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.5);
    SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), lr_player.playerGroupSingle, 100.0, 0.0);
    BankValueSetFromInt(lr_player.banks.dragonBank, "SQ1", lr_player.hand, lr_player.quests.storyQuests[1].state);
    TextTagDestroy(lr_player.quests.storyQuests[1].textTag);
    lr_player.quests.talking = false;
    TriggerExecute(gt_SyritalRespawn, true, false);
  }
  else {
    if ((lr_player.quests.storyQuests[1].state == 1)) {
      lr_player.quests.talking = true;
      libNtve_gf_PauseUnit(lr_player.dragon, true);
      libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
      TransmissionSend(lr_player.playerGroupSingle, TransmissionSourceFromUnit(UnitFromId(2511), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/7EC4D069"), StringExternal("Param/Value/FD03BABE"), 4.0, c_transmissionDurationAdd, true);
      libNtve_gf_PauseUnit(lr_player.dragon, false);
      libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
      lr_player.quests.talking = false;
      TriggerExecute(gt_SyritalRespawn, true, false);
    }
    else {
      if ((lr_player.quests.storyQuests[1].state == 2)) {
        lr_player.quests.talking = true;
        libNtve_gf_PauseUnit(lr_player.dragon, true);
        libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
        TransmissionSend(lr_player.playerGroupSingle, TransmissionSourceFromUnit(UnitFromId(2511), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/1E675D13"), StringExternal("Param/Value/9B7A53D6"), 4.0, c_transmissionDurationAdd, true);
        libNtve_gf_PauseUnit(lr_player.dragon, false);
        libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
        lr_player.quests.storyQuests[1].state = 3;
        ObjectiveSetState(lr_player.quests.storyQuests[1].objective, c_objectiveStateCompleted);
        ObjectiveDestroy(lr_player.quests.storyQuests[1].objective);
        BankValueSetFromInt(lr_player.banks.dragonBank, "SQ1", lr_player.hand, lr_player.quests.storyQuests[1].state);
        TextTagDestroy(lr_player.quests.storyQuests[1].textTag);
        lr_player.skills.fireSkin = true;
        BankValueSetFromFlag(lr_player.banks.dragonBank, "FS", lr_player.hand, lr_player.skills.fireSkin);
        UnitBehaviorAddPlayer(lr_player.dragon, "FireSkin", lr_player.player, 1);
        if ((UnitLevel(lr_player.dragon) != 100)) {
          gf_AddExperience(lr_player.dragon, 1000);
        }
        UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/6D44D93A"));
        lr_player.quests.talking = false;
        PingDestroy(lr_player.quests.storyQuests[1].ping);
        gf_SQ2Setup(lr_player);
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ1PlayerTalkstoFelix_Init () {
  gt_SQ1PlayerTalkstoFelix = TriggerCreate("gt_SQ1PlayerTalkstoFelix_Func");
  TriggerAddEventUnitSelected(gt_SQ1PlayerTalkstoFelix, UnitRefFromUnit(UnitFromId(2511)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_SQ1PlayerTalkstoFelix, UnitRefFromUnit(UnitFromId(2511)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_SQ1PlayerTalkstoFelix, UnitRefFromUnit(UnitFromId(2511)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ2 - Player Enters SQ2 Region 1
//--------------------------------------------------------------------------------------------------
bool gt_SQ2PlayerEntersSQ2Region1_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  
  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.storyQuests[2].state == 1) {
    ObjectiveSetState(lr_player.quests.storyQuests[2].objective, c_objectiveStateFailed);
    ObjectiveDestroy(lr_player.quests.storyQuests[2].objective);
    lr_player.quests.storyQuests[2].state = 2;
    BankValueSetFromInt(lr_player.banks.dragonBank, "SQ2", lr_player.hand, lr_player.quests.storyQuests[2].state);
    PingDestroy(lr_player.quests.storyQuests[2].ping);
    gf_SQ3Setup(lr_player);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ2PlayerEntersSQ2Region1_Init () {
  gt_SQ2PlayerEntersSQ2Region1 = TriggerCreate("gt_SQ2PlayerEntersSQ2Region1_Func");
  TriggerAddEventUnitRegion(gt_SQ2PlayerEntersSQ2Region1, null, RegionFromId(223), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ3 - Player Talks to Petrose
//--------------------------------------------------------------------------------------------------
bool gt_SQ3PlayerTalkstoPetrose_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionFromId(224))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.storyQuests[3].state == 1) {
    lr_player.quests.talking = true;
    libNtve_gf_PauseUnit(lr_player.dragon, true);
    libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
    TransmissionSend(lr_player.playerGroupSingle, TransmissionSourceFromUnit(UnitFromId(1597), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/52CCADF4"), StringExternal("Param/Value/361F831D"), 10.0, c_transmissionDurationAdd, true);
    libNtve_gf_PauseUnit(lr_player.dragon, false);
    libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
    lr_player.quests.storyQuests[3].state = 2;
    ObjectiveSetName(lr_player.quests.storyQuests[3].objective, StringExternal("Param/Value/339C9E22"));
    PingDestroy(lr_player.quests.storyQuests[3].ping);
    PingCreate(lr_player.playerGroupSingle, "PingBoss", RegionGetCenter(RegionFromId(229)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[3].ping = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.5);
    SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), lr_player.playerGroupSingle, 100.0, 0.0);
    BankValueSetFromInt(lr_player.banks.dragonBank, "SQ3", lr_player.hand, lr_player.quests.storyQuests[3].state);
    TextTagDestroy(lr_player.quests.storyQuests[3].textTag);
    lr_player.quests.talking = false;
  }
  else {
    if (lr_player.quests.storyQuests[3].state == 2) {
      lr_player.quests.talking = true;
      libNtve_gf_PauseUnit(lr_player.dragon, true);
      libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
      TransmissionSend(lr_player.playerGroupSingle, TransmissionSourceFromUnit(UnitFromId(1597), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/00C05A10"), StringExternal("Param/Value/8F7EBDC2"), 4.0, c_transmissionDurationAdd, true);
      libNtve_gf_PauseUnit(lr_player.dragon, false);
      libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
      lr_player.quests.talking = false;
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ3PlayerTalkstoPetrose_Init () {
  gt_SQ3PlayerTalkstoPetrose = TriggerCreate("gt_SQ3PlayerTalkstoPetrose_Func");
  TriggerAddEventUnitSelected(gt_SQ3PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_SQ3PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_SQ3PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ3 - Player Enters Verboten Forest
//--------------------------------------------------------------------------------------------------
bool gt_SQ3PlayerEntersVerbotenForest_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.storyQuests[3].state == 2) {
    ObjectiveSetState(lr_player.quests.storyQuests[3].objective, c_objectiveStateFailed);
    ObjectiveDestroy(lr_player.quests.storyQuests[3].objective);
    lr_player.quests.storyQuests[3].state = 3;
    BankValueSetFromInt(lr_player.banks.dragonBank, "SQ3", lr_player.hand, lr_player.quests.storyQuests[3].state);
    PingDestroy(lr_player.quests.storyQuests[3].ping);
    gf_SQ4Setup(lr_player);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ3PlayerEntersVerbotenForest_Init () {
  gt_SQ3PlayerEntersVerbotenForest = TriggerCreate("gt_SQ3PlayerEntersVerbotenForest_Func");
  TriggerAddEventUnitRegion(gt_SQ3PlayerEntersVerbotenForest, null, RegionFromId(58), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ4 - Player Talks to Risdak
//--------------------------------------------------------------------------------------------------
bool gt_SQ4PlayerTalkstoRisdak_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionFromId(225))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if ((lr_player.quests.storyQuests[4].state == 1)) {
    lr_player.quests.talking = true;
    libNtve_gf_PauseUnit(lr_player.dragon, true);
    libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
    TransmissionSend(lr_player.playerGroupSingle, TransmissionSourceFromUnit(UnitFromId(1976), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/79D72710"), StringExternal("Param/Value/AF090285"), 10.0, c_transmissionDurationAdd, true);
    libNtve_gf_PauseUnit(lr_player.dragon, false);
    libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
    lr_player.quests.storyQuests[4].state = 2;
    ObjectiveSetName(lr_player.quests.storyQuests[4].objective, StringExternal("Param/Value/61D2B86E"));
    PingDestroy(lr_player.quests.storyQuests[4].ping);
    PingCreate(lr_player.playerGroupSingle, "PingSimple", RegionGetCenter(RegionFromId(48)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[4].ping = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.5);
    SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), lr_player.playerGroupSingle, 100.0, 0.0);
    BankValueSetFromInt(lr_player.banks.dragonBank, "SQ4", lr_player.hand, lr_player.quests.storyQuests[4].state);
    TextTagDestroy(lr_player.quests.storyQuests[4].textTag);
    lr_player.quests.talking = false;
    
    if(!statueSpawned){
    TriggerExecute(gt_GuardianRespawn, true, false);
    }
  }
  else {
    if ((lr_player.quests.storyQuests[4].state == 2)) {
      lr_player.quests.talking = true;
      libNtve_gf_PauseUnit(lr_player.dragon, true);
      libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
      TransmissionSend(lr_player.playerGroupSingle, TransmissionSourceFromUnit(UnitFromId(1976), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/0848ECBA"), StringExternal("Param/Value/C8E6C7E5"), 4.0, c_transmissionDurationAdd, true);
      libNtve_gf_PauseUnit(lr_player.dragon, false);
      libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
      lr_player.quests.talking = false;
      
    }
    else {
      if ((lr_player.quests.storyQuests[4].state == 3)) {
        lr_player.quests.talking = true;
        libNtve_gf_PauseUnit(lr_player.dragon, true);
        libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
        TransmissionSend(lr_player.playerGroupSingle, TransmissionSourceFromUnit(UnitFromId(1976), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/660FA807"), StringExternal("Param/Value/ED00BDE2"), 5.0, c_transmissionDurationAdd, true);
        libNtve_gf_PauseUnit(lr_player.dragon, false);
        libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
        lr_player.quests.storyQuests[4].state = 4;
        ObjectiveSetState(lr_player.quests.storyQuests[4].objective, c_objectiveStateCompleted);
        ObjectiveDestroy(lr_player.quests.storyQuests[4].objective);
        BankValueSetFromInt(lr_player.banks.dragonBank, "SQ4", lr_player.hand, lr_player.quests.storyQuests[4].state);
        TextTagDestroy(lr_player.quests.storyQuests[4].textTag);
        lr_player.skills.allSeeingEye = true;
        BankValueSetFromFlag(lr_player.banks.dragonBank, "ASE", lr_player.hand, lr_player.skills.allSeeingEye);
        UnitBehaviorAddPlayer(lr_player.dragon, "AllSeeingEye", lr_player.player, 1);
        if ((UnitLevel(lr_player.dragon) != 100)) {
          gf_AddExperience(lr_player.dragon, 3000.0);
        }
        UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/26171E78"));
        lr_player.quests.talking = false;
        PingDestroy(lr_player.quests.storyQuests[4].ping);
        TriggerExecute(gt_SremagsiRespawn, true, false);
        gf_SQ5Setup(lr_player);
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ4PlayerTalkstoRisdak_Init () {
  gt_SQ4PlayerTalkstoRisdak = TriggerCreate("gt_SQ4PlayerTalkstoRisdak_Func");
  TriggerAddEventUnitSelected(gt_SQ4PlayerTalkstoRisdak, UnitRefFromUnit(UnitFromId(1976)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_SQ4PlayerTalkstoRisdak, UnitRefFromUnit(UnitFromId(1976)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_SQ4PlayerTalkstoRisdak, UnitRefFromUnit(UnitFromId(1976)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ5 - Player Enters Infestation
//--------------------------------------------------------------------------------------------------
bool gt_SQ5PlayerEntersInfestation_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.storyQuests[5].state == 1) {
    lr_player.quests.storyQuests[5].state = 2;
    ObjectiveSetName(lr_player.quests.storyQuests[5].objective, StringExternal("Param/Value/556E72C6"));
    PingDestroy(lr_player.quests.storyQuests[5].ping);
    PingCreate(lr_player.playerGroupSingle, "PingBoss", RegionGetCenter(RegionFromId(229)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[5].ping = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.5);
    BankValueSetFromInt(lr_player.banks.dragonBank, "SQ5", lr_player.hand, lr_player.quests.storyQuests[5].state);
    SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), lr_player.playerGroupSingle, 100.0, 0.0);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ5PlayerEntersInfestation_Init () {
  gt_SQ5PlayerEntersInfestation = TriggerCreate("gt_SQ5PlayerEntersInfestation_Func");
  TriggerAddEventUnitRegion(gt_SQ5PlayerEntersInfestation, null, RegionFromId(64), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ5 - Player Talks to Petrose
//--------------------------------------------------------------------------------------------------
bool gt_SQ5PlayerTalkstoPetrose_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  
  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionFromId(224))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if ((lr_player.quests.storyQuests[5].state == 3)) {
    lr_player.quests.talking = true;
    libNtve_gf_PauseUnit(lr_player.dragon, true);
    libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
    TransmissionSend(lr_player.playerGroupSingle, TransmissionSourceFromUnit(UnitFromId(1597), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/F97E6B22"), StringExternal("Param/Value/045D0308"), 5.0, c_transmissionDurationAdd, true);
    libNtve_gf_PauseUnit(lr_player.dragon, false);
    libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
    lr_player.quests.storyQuests[5].state = 4;
    ObjectiveSetState(lr_player.quests.storyQuests[5].objective, c_objectiveStateCompleted);
    ObjectiveDestroy(lr_player.quests.storyQuests[5].objective);
    BankValueSetFromInt(lr_player.banks.dragonBank, "SQ5", lr_player.hand, lr_player.quests.storyQuests[5].state);
    TextTagDestroy(lr_player.quests.storyQuests[5].textTag);
    if ((UnitLevel(lr_player.dragon) != 100)) {
      gf_AddExperience(lr_player.dragon, 10000.0);
    }
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/3C91F57D"));
    lr_player.quests.talking = false;
    PingDestroy(lr_player.quests.storyQuests[5].ping);
    gf_SQ6Setup(lr_player);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ5PlayerTalkstoPetrose_Init () {
  gt_SQ5PlayerTalkstoPetrose = TriggerCreate("gt_SQ5PlayerTalkstoPetrose_Func");
  TriggerAddEventUnitSelected(gt_SQ5PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_SQ5PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_SQ5PlayerTalkstoPetrose, UnitRefFromUnit(UnitFromId(1597)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ6 - Player Enters Teleport to Biodome
//--------------------------------------------------------------------------------------------------
bool gt_SQ6PlayerEntersTeleporttoBiodome_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (lr_player.quests.storyQuests[6].state != 1) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  ObjectiveSetState(lr_player.quests.storyQuests[6].objective, c_objectiveStateFailed);
  ObjectiveDestroy(lr_player.quests.storyQuests[6].objective);
  lr_player.quests.storyQuests[6].state = 2;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ6", lr_player.hand, lr_player.quests.storyQuests[6].state);
  PingDestroy(lr_player.quests.storyQuests[6].ping);
  gf_SQ7Setup(lr_player);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ6PlayerEntersTeleporttoBiodome_Init () {
  gt_SQ6PlayerEntersTeleporttoBiodome = TriggerCreate("gt_SQ6PlayerEntersTeleporttoBiodome_Func");
  TriggerAddEventUnitRegion(gt_SQ6PlayerEntersTeleporttoBiodome, null, RegionFromId(187), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ7 - Player Talks to Lanae
//--------------------------------------------------------------------------------------------------
bool gt_SQ7PlayerTalkstoLanae_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  
  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionFromId(226))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if ((lr_player.quests.storyQuests[7].state == 1)) {
    lr_player.quests.talking = true;
    libNtve_gf_PauseUnit(lr_player.dragon, true);
    libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
    TransmissionSend(lr_player.playerGroupSingle, TransmissionSourceFromUnit(UnitFromId(2595), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/D95C0650"), StringExternal("Param/Value/54B2D940"), 8.0, c_transmissionDurationAdd, true);
    PingDestroy(lr_player.quests.storyQuests[7].ping);
    PingCreate(lr_player.playerGroupSingle, "PingBoss", UnitGetPosition(gv_machinaDePlagam), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[7].ping = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.5);
    libNtve_gf_PauseUnit(lr_player.dragon, false);
    libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
    lr_player.quests.storyQuests[7].state = 2;
    ObjectiveSetName(lr_player.quests.storyQuests[7].objective, StringExternal("Param/Value/B6E6C7C7"));
    SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), lr_player.playerGroupSingle, 100.0, 0.0);
    BankValueSetFromInt(lr_player.banks.dragonBank, "SQ7", lr_player.hand, lr_player.quests.storyQuests[7].state);
    TextTagDestroy(lr_player.quests.storyQuests[7].textTag);
    lr_player.quests.talking = false;
    TriggerExecute(gt_MachinaDePlagamRespawn, true, false);
  }
  else {
    if ((lr_player.quests.storyQuests[7].state == 2)) {
      lr_player.quests.talking = true;
      libNtve_gf_PauseUnit(lr_player.dragon, true);
      libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
      TransmissionSend(lr_player.playerGroupSingle, TransmissionSourceFromUnit(UnitFromId(2595), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/F5929901"), StringExternal("Param/Value/9C502B03"), 4.0, c_transmissionDurationAdd, true);
      libNtve_gf_PauseUnit(lr_player.dragon, false);
      libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
      lr_player.quests.talking = false;
      TriggerExecute(gt_MachinaDePlagamRespawn, true, false);
    }
    else {
      if ((lr_player.quests.storyQuests[7].state == 3)) {
        lr_player.quests.talking = true;
        libNtve_gf_PauseUnit(lr_player.dragon, true);
        libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
        TransmissionSend(lr_player.playerGroupSingle, TransmissionSourceFromUnit(UnitFromId(2595), true, false, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/826CFAF2"), StringExternal("Param/Value/3E5F5E2F"), 5.0, c_transmissionDurationAdd, true);
        libNtve_gf_PauseUnit(lr_player.dragon, false);
        libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
        lr_player.quests.storyQuests[7].state = 4;
        ObjectiveSetState(lr_player.quests.storyQuests[7].objective, c_objectiveStateCompleted);
        ObjectiveDestroy(lr_player.quests.storyQuests[7].objective);
        PingDestroy(lr_player.quests.storyQuests[7].ping);
        BankValueSetFromInt(lr_player.banks.dragonBank, "SQ7", lr_player.hand, lr_player.quests.storyQuests[7].state);
        TextTagDestroy(lr_player.quests.storyQuests[7].textTag);
        if ((UnitLevel(lr_player.dragon) != 100)) {
          gf_AddExperience(lr_player.dragon, 18000.0);
        }
        UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/43EFA5FC"));
        lr_player.quests.talking = false;
        PingDestroy(lr_player.quests.storyQuests[7].ping);
        gf_SQ8Setup(lr_player);
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ7PlayerTalkstoLanae_Init () {
  gt_SQ7PlayerTalkstoLanae = TriggerCreate("gt_SQ7PlayerTalkstoLanae_Func");
  TriggerAddEventUnitSelected(gt_SQ7PlayerTalkstoLanae, UnitRefFromUnit(UnitFromId(2595)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_SQ7PlayerTalkstoLanae, UnitRefFromUnit(UnitFromId(2595)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_SQ7PlayerTalkstoLanae, UnitRefFromUnit(UnitFromId(2595)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ8 - Biodome Entered
//--------------------------------------------------------------------------------------------------
bool gt_SQ8BiodomeEntered_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.storyQuests[8].state == 1) {
    lr_player.quests.storyQuests[8].state = 2;
    BankValueSetFromInt(lr_player.banks.dragonBank, "SQ8", lr_player.hand, lr_player.quests.storyQuests[8].state);
    ObjectiveSetName(lr_player.quests.storyQuests[8].objective, StringExternal("Param/Value/9497FFEF"));
    PingDestroy(lr_player.quests.storyQuests[8].ping);
    PingCreate(lr_player.playerGroupSingle, "PingSimple", UnitGetPosition(UnitFromId(1880)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
    lr_player.quests.storyQuests[8].ping = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.5);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ8BiodomeEntered_Init () {
  gt_SQ8BiodomeEntered = TriggerCreate("gt_SQ8BiodomeEntered_Func");
  TriggerAddEventUnitRegion(gt_SQ8BiodomeEntered, null, RegionFromId(187), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ8 - Crystal 1 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_SQ8Crystal1Destroyed_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, PlayerGroupLoopCurrent())) {
      continue;
    }
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];

    if ((lr_player.quests.storyQuests[8].state == 2)) {
      lr_player.quests.storyQuests[8].state = 3;
      BankValueSetFromInt(lr_player.banks.dragonBank, "SQ8", lr_player.hand, lr_player.quests.storyQuests[8].state);
      ObjectiveSetName(lr_player.quests.storyQuests[8].objective, StringExternal("Param/Value/258EB839"));
      PingDestroy(lr_player.quests.storyQuests[8].ping);
      PingCreate(lr_player.playerGroupSingle, "PingSimple", UnitGetPosition(UnitFromId(1881)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[8].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
    }
  }
  PlayerGroupLoopEnd();

  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ8Crystal1Destroyed_Init () {
  gt_SQ8Crystal1Destroyed = TriggerCreate("gt_SQ8Crystal1Destroyed_Func");
  TriggerAddEventUnitDied(gt_SQ8Crystal1Destroyed, UnitRefFromUnit(UnitFromId(1880)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ8 - Crystal 2 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_SQ8Crystal2Destroyed_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, PlayerGroupLoopCurrent())) {
      continue;
    }
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];

    if ((lr_player.quests.storyQuests[8].state == 3)) {
      lr_player.quests.storyQuests[8].state = 4;
      BankValueSetFromInt(lr_player.banks.dragonBank, "SQ8", lr_player.hand, lr_player.quests.storyQuests[8].state);
      ObjectiveSetName(lr_player.quests.storyQuests[8].objective, StringExternal("Param/Value/110CADCD"));
      PingDestroy(lr_player.quests.storyQuests[8].ping);
      PingCreate(lr_player.playerGroupSingle, "PingSimple", UnitGetPosition(UnitFromId(1882)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[8].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
    }
  }
  PlayerGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ8Crystal2Destroyed_Init () {
  gt_SQ8Crystal2Destroyed = TriggerCreate("gt_SQ8Crystal2Destroyed_Func");
  TriggerAddEventUnitDied(gt_SQ8Crystal2Destroyed, UnitRefFromUnit(UnitFromId(1881)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ8 - Crystal 3 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_SQ8Crystal3Destroyed_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, PlayerGroupLoopCurrent())) {
      continue;
    }
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];

    if ((lr_player.quests.storyQuests[8].state == 4)) {
      lr_player.quests.storyQuests[8].state = 5;
      BankValueSetFromInt(lr_player.banks.dragonBank, "SQ8", lr_player.hand, lr_player.quests.storyQuests[8].state);
      ObjectiveSetName(lr_player.quests.storyQuests[8].objective, StringExternal("Param/Value/DBE25CDC"));
      PingDestroy(lr_player.quests.storyQuests[8].ping);
      PingCreate(lr_player.playerGroupSingle, "PingSimple", UnitGetPosition(UnitFromId(1883)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[8].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
    }
  }
  PlayerGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ8Crystal3Destroyed_Init () {
  gt_SQ8Crystal3Destroyed = TriggerCreate("gt_SQ8Crystal3Destroyed_Func");
  TriggerAddEventUnitDied(gt_SQ8Crystal3Destroyed, UnitRefFromUnit(UnitFromId(1882)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ8 - Crystal 4 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_SQ8Crystal4Destroyed_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, PlayerGroupLoopCurrent())) {
      continue;
    }
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];

    if ((lr_player.quests.storyQuests[8].state == 5)) {
      lr_player.quests.storyQuests[8].state = 6;
      BankValueSetFromInt(lr_player.banks.dragonBank, "SQ8", lr_player.hand, lr_player.quests.storyQuests[8].state);
      ObjectiveSetName(lr_player.quests.storyQuests[8].objective, StringExternal("Param/Value/E3F4860E"));
      PingDestroy(lr_player.quests.storyQuests[8].ping);
      PingCreate(lr_player.playerGroupSingle, "PingSimple", UnitGetPosition(UnitFromId(1884)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[8].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
    }
  }
  PlayerGroupLoopEnd();

  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ8Crystal4Destroyed_Init () {
  gt_SQ8Crystal4Destroyed = TriggerCreate("gt_SQ8Crystal4Destroyed_Func");
  TriggerAddEventUnitDied(gt_SQ8Crystal4Destroyed, UnitRefFromUnit(UnitFromId(1883)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ8 - Crystal 5 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_SQ8Crystal5Destroyed_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, PlayerGroupLoopCurrent())) {
      continue;
    }
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];

    if ((lr_player.quests.storyQuests[8].state == 6)) {
      lr_player.quests.storyQuests[8].state = 7;
      BankValueSetFromInt(lr_player.banks.dragonBank, "SQ8", lr_player.hand, lr_player.quests.storyQuests[8].state);
      ObjectiveSetName(lr_player.quests.storyQuests[8].objective, StringExternal("Param/Value/0CD41769"));
      PingDestroy(lr_player.quests.storyQuests[8].ping);
      PingCreate(lr_player.playerGroupSingle, "PingSimple", UnitGetPosition(UnitFromId(2501)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[8].ping = PingLastCreated();
      PingSetScale(lr_player.quests.storyQuests[8].ping, 0.5);
    }
  }
  PlayerGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ8Crystal5Destroyed_Init () {
  gt_SQ8Crystal5Destroyed = TriggerCreate("gt_SQ8Crystal5Destroyed_Func");
  TriggerAddEventUnitDied(gt_SQ8Crystal5Destroyed, UnitRefFromUnit(UnitFromId(1884)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: SQ8 - Crystal 6 Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_SQ8Crystal6Destroyed_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, PlayerGroupLoopCurrent())) {
      continue;
    }
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];

    if ((lr_player.quests.storyQuests[8].state == 7)) {
      lr_player.quests.storyQuests[8].state = 8;
      BankValueSetFromInt(lr_player.banks.dragonBank, "SQ8", lr_player.hand, lr_player.quests.storyQuests[8].state);
      ObjectiveSetState(lr_player.quests.storyQuests[8].objective, c_objectiveStateCompleted);
      ObjectiveDestroy(lr_player.quests.storyQuests[8].objective);
      if ((UnitLevel(lr_player.dragon) != 100)) {
        gf_AddExperience(lr_player.dragon, 25000.0);
      }
      UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/2725B5FA"));
      PingDestroy(lr_player.quests.storyQuests[8].ping);
      gf_SQ9Setup(lr_player);
    }
  }
  PlayerGroupLoopEnd();

  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SQ8Crystal6Destroyed_Init () {
  gt_SQ8Crystal6Destroyed = TriggerCreate("gt_SQ8Crystal6Destroyed_Func");
  TriggerAddEventUnitDied(gt_SQ8Crystal6Destroyed, UnitRefFromUnit(UnitFromId(2501)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Load Side Quests
//--------------------------------------------------------------------------------------------------
bool gt_LoadSideQuests_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  // TODO: Find out how to make this function not a nightmare.
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];

    if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Mana0-0")) {
      lr_player.quests.manaQuests[0].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Mana0-0", lr_player.hand);
      if ((lr_player.quests.manaQuests[0].progress == 0)) {
        TextTagCreate(StringExternal("Param/Value/2F009883"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
        lr_player.quests.manaQuests[0].textTag = TextTagLastCreated();
        TextTagSetTime(lr_player.quests.manaQuests[0].textTag, c_textTagTimeDuration, 524287.0);
      }
      else {
        if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Mana1-0")) {
          lr_player.quests.manaQuests[1].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Mana1-0", lr_player.hand);
          if ((lr_player.quests.manaQuests[1].progress == 0)) {
            TextTagCreate(StringExternal("Param/Value/DE485F61"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
            lr_player.quests.manaQuests[1].textTag = TextTagLastCreated();
            TextTagSetTime(lr_player.quests.manaQuests[1].textTag, c_textTagTimeDuration, 524287.0);
          }
          else {
            if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Mana2-0")) {
              lr_player.quests.manaQuests[2].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Mana2-0", lr_player.hand);
              if ((lr_player.quests.manaQuests[2].progress == 0)) {
                TextTagCreate(StringExternal("Param/Value/D715BDE5"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
                lr_player.quests.manaQuests[2].textTag = TextTagLastCreated();
                TextTagSetTime(lr_player.quests.manaQuests[2].textTag, c_textTagTimeDuration, 524287.0);
              }
              else {
                if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Mana3-0")) {
                  lr_player.quests.manaQuests[3].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Mana3-0", lr_player.hand);
                  if ((lr_player.quests.manaQuests[3].progress == 0)) {
                    TextTagCreate(StringExternal("Param/Value/3B996203"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
                    lr_player.quests.manaQuests[3].textTag = TextTagLastCreated();
                    TextTagSetTime(lr_player.quests.manaQuests[3].textTag, c_textTagTimeDuration, 524287.0);
                  }
                  else {
                    if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Mana4-0")) {
                      lr_player.quests.manaQuests[4].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Mana4-0", lr_player.hand);
                      if ((lr_player.quests.manaQuests[4].progress == 0)) {
                        TextTagCreate(StringExternal("Param/Value/788F4111"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
                        lr_player.quests.manaQuests[4].textTag = TextTagLastCreated();
                        TextTagSetTime(lr_player.quests.manaQuests[4].textTag, c_textTagTimeDuration, 524287.0);
                      }
                      else {
                        if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Mana5-0")) {
                          lr_player.quests.manaQuests[5].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Mana5-0", lr_player.hand);
                          if ((lr_player.quests.manaQuests[5].progress == 0)) {
                            TextTagCreate(StringExternal("Param/Value/0169568B"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
                            lr_player.quests.manaQuests[5].textTag = TextTagLastCreated();
                            TextTagSetTime(lr_player.quests.manaQuests[5].textTag, c_textTagTimeDuration, 524287.0);
                          }
                        }
                        else {
                          lr_player.quests.manaQuests[5].progress = 0;
                          TextTagCreate(StringExternal("Param/Value/FC0B8386"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
                          lr_player.quests.manaQuests[5].textTag = TextTagLastCreated();
                          TextTagSetTime(lr_player.quests.manaQuests[5].textTag, c_textTagTimeDuration, 524287.0);
                        }
                      }
                    }
                    else {
                      lr_player.quests.manaQuests[4].progress = 0;
                      TextTagCreate(StringExternal("Param/Value/D0E0AB0B"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
                      lr_player.quests.manaQuests[4].textTag = TextTagLastCreated();
                      TextTagSetTime(lr_player.quests.manaQuests[4].textTag, c_textTagTimeDuration, 524287.0);
                    }
                  }
                }
                else {
                  lr_player.quests.manaQuests[3].progress = 0;
                  TextTagCreate(StringExternal("Param/Value/81A56668"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
                  lr_player.quests.manaQuests[3].textTag = TextTagLastCreated();
                  TextTagSetTime(lr_player.quests.manaQuests[3].textTag, c_textTagTimeDuration, 524287.0);
                }
              }
            }
            else {
              lr_player.quests.manaQuests[2].progress = 0;
              TextTagCreate(StringExternal("Param/Value/81AF9223"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
              lr_player.quests.manaQuests[2].textTag = TextTagLastCreated();
              TextTagSetTime(lr_player.quests.manaQuests[2].textTag, c_textTagTimeDuration, 524287.0);
            }
          }
        }
        else {
          lr_player.quests.manaQuests[1].progress = 0;
          TextTagCreate(StringExternal("Param/Value/59C640A8"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
          lr_player.quests.manaQuests[1].progress = TextTagLastCreated();
          TextTagSetTime(lr_player.quests.manaQuests[1].textTag, c_textTagTimeDuration, 524287.0);
        }
      }
    }
    else {
      lr_player.quests.manaQuests[0].progress = 0;
      TextTagCreate(StringExternal("Param/Value/D3156BC0"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
      lr_player.quests.manaQuests[0].textTag = TextTagLastCreated();
      TextTagSetTime(lr_player.quests.manaQuests[0].textTag, c_textTagTimeDuration, 524287.0);
    }
    if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Malin0-0")) {
      lr_player.quests.malinQuests[0].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Malin0-0", lr_player.hand);
      if ((lr_player.quests.malinQuests[0].progress == 0)) {
        TextTagCreate(StringExternal("Param/Value/08DE1272"), 72, UnitGetPosition(UnitFromId(2516)), 4.0, true, false, lr_player.playerGroupSingle);
        lr_player.quests.malinQuests[0].progress = TextTagLastCreated();
        TextTagSetTime(lr_player.quests.malinQuests[0].textTag, c_textTagTimeDuration, 524287.0);
      }
    }
    else {
      lr_player.quests.malinQuests[0].progress = 0;
      TextTagCreate(StringExternal("Param/Value/7DE06E8C"), 72, UnitGetPosition(UnitFromId(2516)), 4.0, true, false, lr_player.playerGroupSingle);
      lr_player.quests.malinQuests[0].textTag = TextTagLastCreated();
      TextTagSetTime(lr_player.quests.malinQuests[0].textTag, c_textTagTimeDuration, 524287.0);
    }
    if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Base0-0")) {
      lr_player.quests.baseQuests[0].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Base0-0", lr_player.hand);
      if ((lr_player.quests.baseQuests[0].progress == 0)) {
        TextTagCreate(StringExternal("Param/Value/1B093517"), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, lr_player.playerGroupSingle);
        lr_player.quests.baseQuests[0].textTag = TextTagLastCreated();
        TextTagSetTime(lr_player.quests.baseQuests[0].textTag, c_textTagTimeDuration, 524287.0);
      }
      else {
        if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Base1-0")) {
          lr_player.quests.baseQuests[1].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Base1-0", lr_player.hand);
          if ((lr_player.quests.baseQuests[1].progress == 0)) {
            TextTagCreate(StringExternal("Param/Value/F6A8D66B"), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, lr_player.playerGroupSingle);
            lr_player.quests.baseQuests[1].textTag = TextTagLastCreated();
            TextTagSetTime(lr_player.quests.baseQuests[1].textTag, c_textTagTimeDuration, 524287.0);
          }
        }
        else {
          lr_player.quests.baseQuests[1].progress = 0;
          TextTagCreate(StringExternal("Param/Value/C9B57383"), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, lr_player.playerGroupSingle);
          lr_player.quests.baseQuests[1].textTag = TextTagLastCreated();
          TextTagSetTime(lr_player.quests.baseQuests[1].textTag, c_textTagTimeDuration, 524287.0);
        }
      }
    }
    else {
      lr_player.quests.baseQuests[0].progress = 0;
      TextTagCreate(StringExternal("Param/Value/75E6820C"), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, lr_player.playerGroupSingle);
      lr_player.quests.baseQuests[0].textTag = TextTagLastCreated();
      TextTagSetTime(lr_player.quests.baseQuests[0].textTag, c_textTagTimeDuration, 524287.0);
    }
    if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Oleum0-0")) {
      lr_player.quests.oleumQuests[0].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Oleum0-0", lr_player.hand);
      if ((lr_player.quests.oleumQuests[0].progress == 0)) {
        TextTagCreate(StringExternal("Param/Value/8DFA2561"), 72, UnitGetPosition(UnitFromId(4381)), 4.0, true, false, lr_player.playerGroupSingle);
        lr_player.quests.oleumQuests[0].textTag = TextTagLastCreated();
        TextTagSetTime(lr_player.quests.oleumQuests[0].textTag, c_textTagTimeDuration, 524287.0);
      }
    }
    else {
      lr_player.quests.oleumQuests[0].progress = 0;
      TextTagCreate(StringExternal("Param/Value/BEF311D1"), 72, UnitGetPosition(UnitFromId(4381)), 4.0, true, false, lr_player.playerGroupSingle);
      lr_player.quests.oleumQuests[0].textTag = TextTagLastCreated();
      TextTagSetTime(lr_player.quests.oleumQuests[0].textTag, c_textTagTimeDuration, 524287.0);
    }
    if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Seryn0-0")) {
      lr_player.quests.serynQuests[0].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Seryn0-0", lr_player.hand);
      if ((lr_player.quests.serynQuests[0].progress == 0)) {
        TextTagCreate(StringExternal("Param/Value/60C15502"), 72, UnitGetPosition(UnitFromId(2671)), 4.0, true, false, lr_player.playerGroupSingle);
        lr_player.quests.serynQuests[0].textTag = TextTagLastCreated();
        TextTagSetTime(lr_player.quests.serynQuests[0].textTag, c_textTagTimeDuration, 524287.0);
      }
    }
    else {
      lr_player.quests.serynQuests[0].progress = 0;
      TextTagCreate(StringExternal("Param/Value/F977CC2E"), 72, UnitGetPosition(UnitFromId(2671)), 4.0, true, false, lr_player.playerGroupSingle);
      lr_player.quests.serynQuests[0].textTag = TextTagLastCreated();
      TextTagSetTime(lr_player.quests.serynQuests[0].textTag, c_textTagTimeDuration, 524287.0);
    }
    if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Detsefni0-0")) {
      lr_player.quests.detsefniQuests[0].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Detsefni0-0", lr_player.hand);
      if ((lr_player.quests.detsefniQuests[0].progress == 0)) {
        TextTagCreate(StringExternal("Param/Value/7EE2688E"), 72, UnitGetPosition(UnitFromId(4922)), 4.0, true, false, lr_player.playerGroupSingle);
        lr_player.quests.detsefniQuests[0].textTag = TextTagLastCreated();
        TextTagSetTime(lr_player.quests.detsefniQuests[0].textTag, c_textTagTimeDuration, 524287.0);
      }
    }
    else {
      lr_player.quests.detsefniQuests[0].progress = 0;
      TextTagCreate(StringExternal("Param/Value/756E3A5A"), 72, UnitGetPosition(UnitFromId(4922)), 4.0, true, false, lr_player.playerGroupSingle);
      lr_player.quests.detsefniQuests[0].textTag = TextTagLastCreated();
      TextTagSetTime(lr_player.quests.detsefniQuests[0].textTag, c_textTagTimeDuration, 524287.0);
    }
    if (BankSectionExists(lr_player.banks.dragonBank, "SQ-SergeantLister0-0")) {
      lr_player.quests.sergeantListerQuests[0].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-SergeantLister0-0", lr_player.hand);
      if ((lr_player.quests.sergeantListerQuests[0].progress == 0)) {
        TextTagCreate(StringExternal("Param/Value/03D95F58"), 72, UnitGetPosition(UnitFromId(4923)), 4.0, true, false, lr_player.playerGroupSingle);
        lr_player.quests.sergeantListerQuests[0].textTag = TextTagLastCreated();
        TextTagSetTime(lr_player.quests.sergeantListerQuests[0].textTag, c_textTagTimeDuration, 524287.0);
      }
    }
    else {
      lr_player.quests.sergeantListerQuests[0].progress = 0;
      TextTagCreate(StringExternal("Param/Value/97B825DC"), 72, UnitGetPosition(UnitFromId(4923)), 4.0, true, false, lr_player.playerGroupSingle);
      lr_player.quests.sergeantListerQuests[0].textTag = TextTagLastCreated();
      TextTagSetTime(lr_player.quests.sergeantListerQuests[0].textTag, c_textTagTimeDuration, 524287.0);
    }
    if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Greed0-0")) {
      lr_player.quests.greedQuests[0].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Greed0-0", lr_player.hand);
      if ((lr_player.quests.greedQuests[0].progress == 0)) {
        TextTagCreate(StringExternal("Param/Value/D473002B"), 72, UnitGetPosition(UnitFromId(4924)), 4.0, true, false, lr_player.playerGroupSingle);
        lr_player.quests.greedQuests[0].textTag = TextTagLastCreated();
        TextTagSetTime(lr_player.quests.greedQuests[0].textTag, c_textTagTimeDuration, 524287.0);
      }
    }
    else {
      lr_player.quests.greedQuests[0].progress = 0;
      TextTagCreate(StringExternal("Param/Value/FFE6E959"), 72, UnitGetPosition(UnitFromId(4924)), 4.0, true, false, lr_player.playerGroupSingle);
      lr_player.quests.greedQuests[0].textTag = TextTagLastCreated();
      TextTagSetTime(lr_player.quests.greedQuests[0].textTag, c_textTagTimeDuration, 524287.0);
    }
    if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Madeleine0-0")) {
      lr_player.quests.madelineQuests[0].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Madeleine0-0", lr_player.hand);
      if ((lr_player.quests.madelineQuests[0].progress == 0)) {
        TextTagCreate(StringExternal("Param/Value/5625DC8F"), 72, UnitGetPosition(UnitFromId(4945)), 4.0, true, false, lr_player.playerGroupSingle);
        lr_player.quests.madelineQuests[0].textTag = TextTagLastCreated();
        TextTagSetTime(lr_player.quests.madelineQuests[0].textTag, c_textTagTimeDuration, 524287.0);
      }
    }
    else {
      lr_player.quests.madelineQuests[0].progress = 0;
      TextTagCreate(StringExternal("Param/Value/4DD46BB6"), 72, UnitGetPosition(UnitFromId(4945)), 4.0, true, false, lr_player.playerGroupSingle);
      lr_player.quests.madelineQuests[0].textTag = TextTagLastCreated();
      TextTagSetTime(lr_player.quests.madelineQuests[0].textTag, c_textTagTimeDuration, 524287.0);
    }
    if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Altoss0-0")) {
      lr_player.quests.altossQuests[0].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Altoss0-0", lr_player.hand);
      if ((lr_player.quests.altossQuests[0].progress == 0)) {
        TextTagCreate(StringExternal("Param/Value/5707150A"), 72, UnitGetPosition(UnitFromId(4946)), 4.0, true, false, lr_player.playerGroupSingle);
        lr_player.quests.altossQuests[0].textTag = TextTagLastCreated();
        TextTagSetTime(lr_player.quests.altossQuests[0].textTag, c_textTagTimeDuration, 524287.0);
      }
    }
    else {
      lr_player.quests.altossQuests[0].progress = 0;
      TextTagCreate(StringExternal("Param/Value/72459D54"), 72, UnitGetPosition(UnitFromId(4946)), 4.0, true, false, lr_player.playerGroupSingle);
      lr_player.quests.altossQuests[0].textTag = TextTagLastCreated();
      TextTagSetTime(lr_player.quests.altossQuests[0].textTag, c_textTagTimeDuration, 524287.0);
    }
    if (BankSectionExists(lr_player.banks.dragonBank, "SQ-Amp0-0")) {
      lr_player.quests.ampQuests[0].progress = BankValueGetAsInt(lr_player.banks.dragonBank, "SQ-Amp0-0", lr_player.hand);
      if ((lr_player.quests.ampQuests[0].progress == 0)) {
        TextTagCreate(StringExternal("Param/Value/64903B57"), 72, UnitGetPosition(UnitFromId(444)), 4.0, true, false, lr_player.playerGroupSingle);
        lr_player.quests.ampQuests[0].textTag = TextTagLastCreated();
        TextTagSetTime(lr_player.quests.ampQuests[0].textTag, c_textTagTimeDuration, 524287.0);
      }
    }
    else {
      lr_player.quests.ampQuests[0].progress = 0;
      TextTagCreate(StringExternal("Param/Value/9FAC43FA"), 72, UnitGetPosition(UnitFromId(444)), 4.0, true, false, lr_player.playerGroupSingle);
      lr_player.quests.ampQuests[0].textTag = TextTagLastCreated();
      TextTagSetTime(lr_player.quests.ampQuests[0].textTag, c_textTagTimeDuration, 524287.0);
    }
  }
  PlayerGroupLoopEnd();

  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LoadSideQuests_Init () {
  gt_LoadSideQuests = TriggerCreate("gt_LoadSideQuests_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 0 - Talk to Mana
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest0TalktoMana_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  
  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.manaQuests[0].progress == 0) {
    gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/10839ED6"), StringExternal("Param/Value/378E78B5"), StringExternal("Param/Value/4059B14F"), StringExternal("Param/Value/F9A00D5C"));
  }
  else if (lr_player.quests.manaQuests[0].progress == 1) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/C939D953"));
  }
  else if (lr_player.quests.manaQuests[0].progress == 2) {
    gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/731375C0"), StringExternal("Param/Value/E1F95815"));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest0TalktoMana_Init () {
  gt_ManaQuest0TalktoMana = TriggerCreate("gt_ManaQuest0TalktoMana_Func");
  TriggerAddEventUnitSelected(gt_ManaQuest0TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_ManaQuest0TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_ManaQuest0TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest0QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];
  unit lv_tempArmor;

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.manaQuests[0].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[1].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[2].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[3].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[4].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[5].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.manaQuests[0].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/8E3307EA"), StringExternal("Param/Value/9D6BEEE8"), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.manaQuests[0].objective = ObjectiveLastCreated();
  UnitInventoryCreate(lr_player.dragon, "BasicArmor");
  lv_tempArmor = UnitInventoryLastCreated();
  UnitInventoryCreate(lr_player.dragon, "BasicArmor");
  lr_player.quests.manaQuest0Armour = UnitInventoryLastCreated();
  UnitRemove(lv_tempArmor);
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.manaQuests[0].textTag, StringToText(""));
  UISetFrameVisible(lr_player.playerGroupSingle, c_syncFrameTypeInventoryPanel, false);
  Wait(0.1, c_timeGame);
  UISetFrameVisible(lr_player.playerGroupSingle, c_syncFrameTypeInventoryPanel, true);
  Wait(0.1, c_timeGame);
  UISetFrameVisible(lr_player.playerGroupSingle, c_syncFrameTypeInventoryPanel, false);
  Wait(0.1, c_timeGame);
  UISetFrameVisible(lr_player.playerGroupSingle, c_syncFrameTypeInventoryPanel, true);
  Wait(0.1, c_timeGame);
  UISetFrameVisible(lr_player.playerGroupSingle, c_syncFrameTypeInventoryPanel, false);
  Wait(0.1, c_timeGame);
  UISetFrameVisible(lr_player.playerGroupSingle, c_syncFrameTypeInventoryPanel, true);
  Wait(0.1, c_timeGame);
  UISetFrameVisible(lr_player.playerGroupSingle, c_syncFrameTypeInventoryPanel, false);
  Wait(0.1, c_timeGame);
  UISetFrameVisible(lr_player.playerGroupSingle, c_syncFrameTypeInventoryPanel, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest0QuestAccept_Init () {
  gt_ManaQuest0QuestAccept = TriggerCreate("gt_ManaQuest0QuestAccept_Func");
  TriggerAddEventDialogControl(gt_ManaQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 0 - Equip Armor P1
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest0EquipArmorP1_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[UnitGetOwner(EventUnitInventoryItem()) - 1];

  if (testConds) {
    if (lr_player.quests.manaQuests[0].progress != 1) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if ((UnitInventoryContainer(lr_player.quests.manaQuest0Armour) == 2)) {
    lr_player.quests.manaQuests[0].progress = 2;
    ObjectiveSetState(lr_player.quests.manaQuests[0].objective, c_objectiveStateCompleted);
    lr_player.quests.manaQuest0Armour = null;
    TextTagSetText(lr_player.quests.manaQuests[0].textTag, StringExternal("Param/Value/E213BE40"));
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest0EquipArmorP1_Init () {
  gt_ManaQuest0EquipArmorP1 = TriggerCreate("gt_ManaQuest0EquipArmorP1_Func");
  TriggerAddEventUnitInventoryChange(gt_ManaQuest0EquipArmorP1, UnitRefFromVariable("gv_players[0].dragon"), c_unitInventoryChangeMoves, UnitRefFromVariable("gv_manaQuest0Armor[0]"));
  TriggerAddEventUnitInventoryChange(gt_ManaQuest0EquipArmorP1, UnitRefFromVariable("gv_players[1].dragon"), c_unitInventoryChangeMoves, UnitRefFromVariable("gv_manaQuest0Armor[1]"));
  TriggerAddEventUnitInventoryChange(gt_ManaQuest0EquipArmorP1, UnitRefFromVariable("gv_players[2].dragon"), c_unitInventoryChangeMoves, UnitRefFromVariable("gv_manaQuest0Armor[2]"));
  TriggerAddEventUnitInventoryChange(gt_ManaQuest0EquipArmorP1, UnitRefFromVariable("gv_players[3].dragon"), c_unitInventoryChangeMoves, UnitRefFromVariable("gv_manaQuest0Armor[3]"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest0RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.manaQuests[0].progress != 2) {
      return false;
    }
    if (lr_player.quests.manaQuests[1].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[2].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[3].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[4].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[5].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.manaQuests[0].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Mana0-0", lr_player.hand, lr_player.quests.manaQuests[0].progress);
  ObjectiveDestroy(lr_player.quests.manaQuests[0].objective);
  lr_player.quests.manaQuests[0].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  TextTagDestroy(lr_player.quests.manaQuests[0].textTag);
  TextTagCreate(StringExternal("Param/Value/0B6F6B5B"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
  lr_player.quests.manaQuests[1].textTag = TextTagLastCreated();
  TextTagSetTime(lr_player.quests.manaQuests[1].textTag, c_textTagTimeDuration, 524287.0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest0RewardAccept_Init () {
  gt_ManaQuest0RewardAccept = TriggerCreate("gt_ManaQuest0RewardAccept_Func");
  TriggerAddEventDialogControl(gt_ManaQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 1 - Talk to Mana
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest1TalktoMana_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.manaQuests[1].progress == 0) {
    gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/EF1ACC9A"), StringExternal("Param/Value/7789F4B3"), StringExternal("Param/Value/F9855B12"), StringExternal("Param/Value/89553942"));
  }
  else if (lr_player.quests.manaQuests[1].progress == 1) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/18BD2755"));
  }
  else if (lr_player.quests.manaQuests[1].progress == 2) {
    gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/F3FB8101"), StringExternal("Param/Value/FA4DE787"));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest1TalktoMana_Init () {
  gt_ManaQuest1TalktoMana = TriggerCreate("gt_ManaQuest1TalktoMana_Func");
  TriggerAddEventUnitSelected(gt_ManaQuest1TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_ManaQuest1TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_ManaQuest1TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 1 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest1QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.manaQuests[0].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[1].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[2].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[3].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[4].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[5].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.manaQuests[1].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/699B9328"), StringExternal("Param/Value/2B14BCD9"), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.manaQuests[1].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.manaQuests[1].textTag, StringToText(""));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest1QuestAccept_Init () {
  gt_ManaQuest1QuestAccept = TriggerCreate("gt_ManaQuest1QuestAccept_Func");
  TriggerAddEventDialogControl(gt_ManaQuest1QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 1 - Kill Sheep
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest1KillSheep_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) != 15) {
      return false;
    }
    if (UnitGetType(EventUnit()) != "SmallSheep") {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitGroupAlliance(libNtve_gf_KillingPlayer(), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(UnitGroupLoopCurrent()))) {
      continue;
    }
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];

    if ((lr_player.quests.manaQuests[1].progress == 1)) {
      lr_player.quests.manaQuests[1].progress = 2;
      ObjectiveSetState(lr_player.quests.manaQuests[1].objective, c_objectiveStateCompleted);
      TextTagSetText(lr_player.quests.manaQuests[1].textTag, StringExternal("Param/Value/F3003B53"));
    }
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest1KillSheep_Init () {
  gt_ManaQuest1KillSheep = TriggerCreate("gt_ManaQuest1KillSheep_Func");
  TriggerAddEventUnitDied(gt_ManaQuest1KillSheep, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 1 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest1RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.manaQuests[0].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[1].progress != 2) {
      return false;
    }
    if (lr_player.quests.manaQuests[2].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[3].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[4].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[5].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.manaQuests[1].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Mana1-0", lr_player.hand, lr_player.quests.manaQuests[1].progress);
  ObjectiveDestroy(lr_player.quests.manaQuests[1].objective);
  lr_player.quests.manaQuests[1].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/48B1F90D"));
  gf_AddExperience(lr_player.dragon, 25);
  TextTagDestroy(lr_player.quests.manaQuests[1].textTag);
  TextTagCreate(StringExternal("Param/Value/37757B36"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
  lr_player.quests.manaQuests[2].textTag = TextTagLastCreated();
  TextTagSetTime(lr_player.quests.manaQuests[2].textTag, c_textTagTimeDuration, 524287.0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest1RewardAccept_Init () {
  gt_ManaQuest1RewardAccept = TriggerCreate("gt_ManaQuest1RewardAccept_Func");
  TriggerAddEventDialogControl(gt_ManaQuest1RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 2 - Talk to Mana
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest2TalktoMana_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.manaQuests[2].progress == 0) {
    if ((UnitGetPropertyFixed(lr_player.dragon, c_unitPropLife, c_unitPropCurrent) != UnitGetPropertyFixed(lr_player.dragon, c_unitPropLifeMax, c_unitPropCurrent))) {
      gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/6009600F"), StringExternal("Param/Value/62B0BB79"), StringExternal("Param/Value/AED7BDFF"), StringExternal("Param/Value/B4C73527"));
    }
    else {
      gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/D60B4BB7"), StringExternal("Param/Value/D5D2F79B"), StringExternal("Param/Value/A3E41EF2"), StringExternal("Param/Value/70EAE5E9"));
    }
  }
  else if (lr_player.quests.manaQuests[2].progress == 1) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/7E6C12C5"));
  }
  else if (lr_player.quests.manaQuests[2].progress == 2) {
    gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/DB969F41"), StringExternal("Param/Value/AF8ECD40"));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest2TalktoMana_Init () {
  gt_ManaQuest2TalktoMana = TriggerCreate("gt_ManaQuest2TalktoMana_Func");
  TriggerAddEventUnitSelected(gt_ManaQuest2TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_ManaQuest2TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_ManaQuest2TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 2 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest2QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.manaQuests[0].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[1].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[2].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[3].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[4].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[5].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.manaQuests[2].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/74393FE6"), StringExternal("Param/Value/AD08DCE8"), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.manaQuests[2].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.manaQuests[2].textTag, StringToText(""));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest2QuestAccept_Init () {
  gt_ManaQuest2QuestAccept = TriggerCreate("gt_ManaQuest2QuestAccept_Func");
  TriggerAddEventDialogControl(gt_ManaQuest2QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 2 - Enter Wasteland Water
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest2EnterWastelandWater_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (!UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic)) {
      return false;
    }
    if (lr_player.quests.manaQuests[2].progress != 1) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }

  lr_player.quests.manaQuests[2].progress = 2;
  ObjectiveSetState(lr_player.quests.manaQuests[2].objective, c_objectiveStateCompleted);
  TextTagSetText(lr_player.quests.manaQuests[2].textTag, StringExternal("Param/Value/4A7BBDF9"));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest2EnterWastelandWater_Init () {
  gt_ManaQuest2EnterWastelandWater = TriggerCreate("gt_ManaQuest2EnterWastelandWater_Func");
  TriggerAddEventUnitRegion(gt_ManaQuest2EnterWastelandWater, null, RegionFromId(42), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 2 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest2RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.manaQuests[0].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[1].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[2].progress != 2) {
      return false;
    }
    if (lr_player.quests.manaQuests[3].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[4].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[5].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.manaQuests[2].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Mana2-0", lr_player.hand, lr_player.quests.manaQuests[2].progress);
  ObjectiveDestroy(lr_player.quests.manaQuests[2].objective);
  lr_player.quests.manaQuests[2].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/E760FE26"));
  gf_AddExperience(lr_player.dragon, 25);
  TextTagDestroy(lr_player.quests.manaQuests[2].textTag);
  TextTagCreate(StringExternal("Param/Value/49BA605A"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
  lr_player.quests.manaQuests[3].textTag = TextTagLastCreated();
  TextTagSetTime(lr_player.quests.manaQuests[3].textTag, c_textTagTimeDuration, 524287.0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest2RewardAccept_Init () {
  gt_ManaQuest2RewardAccept = TriggerCreate("gt_ManaQuest2RewardAccept_Func");
  TriggerAddEventDialogControl(gt_ManaQuest2RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 3 - Talk to Mana
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest3TalktoMana_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.manaQuests[3].progress == 0) {
    gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/0F5230AE"), StringExternal("Param/Value/B8FA5D90"), StringExternal("Param/Value/16598A9B"), StringExternal("Param/Value/82067E73"));
  }
  else if (lr_player.quests.manaQuests[3].progress == 1) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/C4E513B5"));
  }
  else if (lr_player.quests.manaQuests[3].progress == 2) {
    gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/C943FD11"), StringExternal("Param/Value/E346759C"));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest3TalktoMana_Init () {
  gt_ManaQuest3TalktoMana = TriggerCreate("gt_ManaQuest3TalktoMana_Func");
  TriggerAddEventUnitSelected(gt_ManaQuest3TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_ManaQuest3TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_ManaQuest3TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 3 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest3QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.manaQuests[0].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[1].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[2].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[3].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[4].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[5].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.manaQuests[3].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/7D0D68C2"), StringExternal("Param/Value/729C207A"), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.manaQuests[3].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.manaQuests[3].textTag, StringToText(""));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest3QuestAccept_Init () {
  gt_ManaQuest3QuestAccept = TriggerCreate("gt_ManaQuest3QuestAccept_Func");
  TriggerAddEventDialogControl(gt_ManaQuest3QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 3 - Kill Srepti
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest3KillSrepti_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) != 15) {
      return false;
    }
    if (UnitGetType(EventUnit()) != "Srepti") {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitGroupAlliance(libNtve_gf_KillingPlayer(), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(UnitGroupLoopCurrent()))) {
      continue;
    }
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];

    if ((lr_player.quests.manaQuests[3].progress == 1)) {
      lr_player.quests.manaQuests[3].kills += 1;
      ObjectiveSetName(lr_player.quests.manaQuests[3].objective, (StringExternal("Param/Value/8FDF552C") + (IntToText((10 - lr_player.quests.manaQuests[3].kills)) + StringExternal("Param/Value/16FD1AF9"))));
      if ((lr_player.quests.manaQuests[3].kills == 10)) {
        lr_player.quests.manaQuests[3].progress = 2;
        ObjectiveSetState(lr_player.quests.manaQuests[3].objective, c_objectiveStateCompleted);
        TextTagSetText(lr_player.quests.manaQuests[3].textTag, StringExternal("Param/Value/57030FBB"));
      }
    }
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest3KillSrepti_Init () {
  gt_ManaQuest3KillSrepti = TriggerCreate("gt_ManaQuest3KillSrepti_Func");
  TriggerAddEventUnitDied(gt_ManaQuest3KillSrepti, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 3 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest3RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.manaQuests[0].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[1].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[2].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[3].progress != 2) {
      return false;
    }
    if (lr_player.quests.manaQuests[4].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[5].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.manaQuests[3].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Mana3-0", lr_player.hand, lr_player.quests.manaQuests[3].progress);
  ObjectiveDestroy(lr_player.quests.manaQuests[3].objective);
  lr_player.quests.manaQuests[3].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/598F5F66"));
  gf_AddExperience(lr_player.dragon, 150);
  TextTagDestroy(lr_player.quests.manaQuests[3].textTag);
  TextTagCreate(StringExternal("Param/Value/6C209170"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
  lr_player.quests.manaQuests[4].textTag = TextTagLastCreated();
  TextTagSetTime(lr_player.quests.manaQuests[4].textTag, c_textTagTimeDuration, 524287.0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest3RewardAccept_Init () {
  gt_ManaQuest3RewardAccept = TriggerCreate("gt_ManaQuest3RewardAccept_Func");
  TriggerAddEventDialogControl(gt_ManaQuest3RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 4 - Talk to Mana
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest4TalktoMana_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.manaQuests[4].progress == 0) {
    if ((UnitGetPropertyFixed(lr_player.dragon, c_unitPropLife, c_unitPropCurrent) != UnitGetPropertyFixed(lr_player.dragon, c_unitPropLifeMax, c_unitPropCurrent))) {
      gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/0F7B287F"), StringExternal("Param/Value/B567CAF8"), StringExternal("Param/Value/F6D87979"), StringExternal("Param/Value/35A32236"));
    }
    else {
      gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/9F8C7B1C"), StringExternal("Param/Value/DB6B526A"), StringExternal("Param/Value/1093F445"), StringExternal("Param/Value/E66C3F8D"));
    }
  }
  else if (lr_player.quests.manaQuests[4].progress == 1) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/B7DADC24"));
  }
  else if (lr_player.quests.manaQuests[4].progress == 2) {
    gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/FCF6A792"), StringExternal("Param/Value/2C96AEC8"));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest4TalktoMana_Init () {
  gt_ManaQuest4TalktoMana = TriggerCreate("gt_ManaQuest4TalktoMana_Func");
  TriggerAddEventUnitSelected(gt_ManaQuest4TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_ManaQuest4TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_ManaQuest4TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 4 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest4QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.manaQuests[0].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[1].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[2].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[3].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[4].progress != 0) {
      return false;
    }
    if (lr_player.quests.manaQuests[5].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.manaQuests[4].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/38F07793"), StringExternal("Param/Value/9D482A49"), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.manaQuests[4].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  PlayerModifyPropertyInt(lr_player.player, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(lr_player.player, c_playerPropMinerals) + 100));
  TextTagSetText(lr_player.quests.manaQuests[4].textTag, StringToText(""));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest4QuestAccept_Init () {
  gt_ManaQuest4QuestAccept = TriggerCreate("gt_ManaQuest4QuestAccept_Func");
  TriggerAddEventDialogControl(gt_ManaQuest4QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 4 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest4RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.manaQuests[0].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[1].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[2].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[3].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[4].progress != 2) {
      return false;
    }
    if (lr_player.quests.manaQuests[5].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.manaQuests[4].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Mana4-0", lr_player.hand, lr_player.quests.manaQuests[4].progress);
  ObjectiveDestroy(lr_player.quests.manaQuests[4].objective);
  lr_player.quests.manaQuests[4].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/15E97A53"));
  gf_AddExperience(lr_player.dragon, 100);
  TextTagDestroy(lr_player.quests.manaQuests[4].textTag);
  TextTagCreate(StringExternal("Param/Value/487305A4"), 72, UnitGetPosition(UnitFromId(3917)), 4.0, true, false, lr_player.playerGroupSingle);
  lr_player.quests.manaQuests[5].textTag = TextTagLastCreated();
  TextTagSetTime(lr_player.quests.manaQuests[5].textTag, c_textTagTimeDuration, 524287.0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest4RewardAccept_Init () {
  gt_ManaQuest4RewardAccept = TriggerCreate("gt_ManaQuest4RewardAccept_Func");
  TriggerAddEventDialogControl(gt_ManaQuest4RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 4 - Purchase Potion
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest4PurchasePotion_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (lr_player.quests.manaQuests[4].progress != 1) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.manaQuests[4].progress = 2;
  ObjectiveSetState(lr_player.quests.manaQuests[4].objective, c_objectiveStateCompleted);
  TextTagSetText(lr_player.quests.manaQuests[4].textTag, StringExternal("Param/Value/B2FAD667"));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest4PurchasePotion_Init () {
  gt_ManaQuest4PurchasePotion = TriggerCreate("gt_ManaQuest4PurchasePotion_Func");
  TriggerAddEventButtonPressed(gt_ManaQuest4PurchasePotion, c_playerAny, "SmallHealthPotion");
  TriggerAddEventButtonPressed(gt_ManaQuest4PurchasePotion, c_playerAny, "MediumHealthPotion");
  TriggerAddEventButtonPressed(gt_ManaQuest4PurchasePotion, c_playerAny, "LargeHealthPotion");
  TriggerAddEventButtonPressed(gt_ManaQuest4PurchasePotion, c_playerAny, "GrandHealthPotion");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 5 - Talk to Mana
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest5TalktoMana_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.manaQuests[5].progress == 0) {
    gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/7F2E977B"), StringExternal("Param/Value/4058E6DB"), StringExternal("Param/Value/67E874D2"), StringExternal("Param/Value/5BAD673C"));
  }
  else if (lr_player.quests.manaQuests[5].progress == 1) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/0368FA7A"));
  }
  else if (lr_player.quests.manaQuests[5].progress == 2) {
    gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/071F67CE"), StringExternal("Param/Value/49C2F097"));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(3917)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
  }
  else if (lr_player.quests.manaQuests[5].progress == 3) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/D4FB44DF"));
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest5TalktoMana_Init () {
  gt_ManaQuest5TalktoMana = TriggerCreate("gt_ManaQuest5TalktoMana_Func");
  TriggerAddEventUnitSelected(gt_ManaQuest5TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_ManaQuest5TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_ManaQuest5TalktoMana, UnitRefFromUnit(UnitFromId(3917)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 5 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest5QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.manaQuests[0].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[1].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[2].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[3].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[4].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[5].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.manaQuests[5].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/F4BCC69C"), StringExternal("Param/Value/440CAF25"), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.manaQuests[5].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.manaQuests[5].textTag, StringToText(""));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest5QuestAccept_Init () {
  gt_ManaQuest5QuestAccept = TriggerCreate("gt_ManaQuest5QuestAccept_Func");
  TriggerAddEventDialogControl(gt_ManaQuest5QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 5 - Kill Alpha Srepti
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest5KillAlphaSrepti_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) != 15) {
      return false;
    }
    if (UnitGetType(EventUnit()) != "AlphaSrepti") {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitGroupAlliance(libNtve_gf_KillingPlayer(), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(UnitGroupLoopCurrent()))) {
      continue;
    }
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];
    
    if (lr_player.quests.manaQuests[5].progress == 1) {
      lr_player.quests.manaQuests[5].progress = 2;
      ObjectiveSetState(lr_player.quests.manaQuests[5].objective, c_objectiveStateCompleted);
      TextTagSetText(lr_player.quests.manaQuests[5].textTag, StringExternal("Param/Value/F19542C7"));
    }
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest5KillAlphaSrepti_Init () {
  gt_ManaQuest5KillAlphaSrepti = TriggerCreate("gt_ManaQuest5KillAlphaSrepti_Func");
  TriggerAddEventUnitDied(gt_ManaQuest5KillAlphaSrepti, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Mana Quest 5 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_ManaQuest5RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(3917)), 3.0))) {
      return false;
    }
    if (lr_player.quests.manaQuests[0].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[1].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[2].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[3].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[4].progress != 3) {
      return false;
    }
    if (lr_player.quests.manaQuests[5].progress != 2) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.manaQuests[5].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Mana5-0", lr_player.hand, lr_player.quests.manaQuests[5].progress);
  ObjectiveDestroy(lr_player.quests.manaQuests[5].objective);
  lr_player.quests.manaQuests[5].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  UnitInventoryCreate(lr_player.dragon, "MediumHealingOrb");
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/BCB36106"));
  gf_AddExperience(lr_player.dragon, 1000);
  TextTagDestroy(lr_player.quests.manaQuests[5].textTag);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ManaQuest5RewardAccept_Init () {
  gt_ManaQuest5RewardAccept = TriggerCreate("gt_ManaQuest5RewardAccept_Func");
  TriggerAddEventDialogControl(gt_ManaQuest5RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 0 - Talk to Base
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest0TalktoBase_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.baseQuests[0].progress == 0) {
    gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/D3E7E515"), StringExternal("Param/Value/4DE4DAA9"), StringExternal("Param/Value/CE6F05F8"), StringExternal("Param/Value/81DC4384"));
  }
  else if (lr_player.quests.baseQuests[0].progress == 1) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/B4E1E57D"));
  }
  else if (lr_player.quests.baseQuests[0].progress == 2) {
    gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/DE5135F3"), StringExternal("Param/Value/D1A86300"));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4233)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest0TalktoBase_Init () {
  gt_BaseQuest0TalktoBase = TriggerCreate("gt_BaseQuest0TalktoBase_Func");
  TriggerAddEventUnitSelected(gt_BaseQuest0TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_BaseQuest0TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_BaseQuest0TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest0QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0))) {
      return false;
    }
    if (lr_player.quests.baseQuests[0].progress != 0) {
      return false;
    }
    if (lr_player.quests.baseQuests[1].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.baseQuests[0].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/FAE38376"), StringExternal("Param/Value/354CA705"), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.baseQuests[0].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.baseQuests[0].textTag, StringToText(""));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest0QuestAccept_Init () {
  gt_BaseQuest0QuestAccept = TriggerCreate("gt_BaseQuest0QuestAccept_Func");
  TriggerAddEventDialogControl(gt_BaseQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 0 - Set Respawn Point at Wasteland
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest0SetRespawnPointatWasteland_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero)) {
      return false;
    }
    if (lr_player.quests.baseQuests[0].progress != 1) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.baseQuests[0].progress = 2;
  ObjectiveSetState(lr_player.quests.baseQuests[0].objective, c_objectiveStateCompleted);
  TextTagSetText(lr_player.quests.baseQuests[0].textTag, StringExternal("Param/Value/EB78C493"));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest0SetRespawnPointatWasteland_Init () {
  gt_BaseQuest0SetRespawnPointatWasteland = TriggerCreate("gt_BaseQuest0SetRespawnPointatWasteland_Func");
  TriggerAddEventUnitRegion(gt_BaseQuest0SetRespawnPointatWasteland, null, RegionFromId(124), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest0RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0))) {
      return false;
    }
    if (lr_player.quests.baseQuests[0].progress != 2) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.baseQuests[0].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Base0-0", lr_player.hand, lr_player.quests.baseQuests[0].progress);
  ObjectiveDestroy(lr_player.quests.baseQuests[0].objective);
  lr_player.quests.baseQuests[0].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  gf_AddExperience(lr_player.dragon, 25);
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/8D20327C"));
  TextTagDestroy(lr_player.quests.baseQuests[0].textTag);
  TextTagCreate(StringExternal("Param/Value/B2162E35"), 72, UnitGetPosition(UnitFromId(4233)), 4.0, true, false, lr_player.playerGroupSingle);
  lr_player.quests.baseQuests[1].textTag = TextTagLastCreated();
  TextTagSetTime(lr_player.quests.baseQuests[1].textTag, c_textTagTimeDuration, 524287.0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest0RewardAccept_Init () {
  gt_BaseQuest0RewardAccept = TriggerCreate("gt_BaseQuest0RewardAccept_Func");
  TriggerAddEventDialogControl(gt_BaseQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 1 - Talk to Base
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest1TalktoBase_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.baseQuests[1].progress == 0) {
    gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/9E26A307"), StringExternal("Param/Value/0E7A1C61"), StringExternal("Param/Value/A11FAE9B"), StringExternal("Param/Value/497348F3"));
  }
  else if (lr_player.quests.baseQuests[1].progress == 1) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/FBB0E580"));
  }
  else if (lr_player.quests.baseQuests[1].progress == 2) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/3F0CE577"));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4233)), c_animNameDefault, "Angry", c_animFlagPlayForever, c_animTimeDefault);
  }
  else if (lr_player.quests.baseQuests[1].progress == 3) {
    gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/670F1B94"), StringExternal("Param/Value/65AC0532"));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4233)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
  }
  else if (lr_player.quests.baseQuests[1].progress == 4) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/9F536067"));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4233)), c_animNameDefault, "Dance", c_animFlagPlayForever, c_animTimeDefault);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest1TalktoBase_Init () {
  gt_BaseQuest1TalktoBase = TriggerCreate("gt_BaseQuest1TalktoBase_Func");
  TriggerAddEventUnitSelected(gt_BaseQuest1TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_BaseQuest1TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_BaseQuest1TalktoBase, UnitRefFromUnit(UnitFromId(4233)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 1 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest1QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0))) {
      return false;
    }
    if (lr_player.quests.baseQuests[0].progress != 3) {
      return false;
    }
    if (lr_player.quests.baseQuests[1].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.baseQuests[1].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/E253F21A"), StringExternal("Param/Value/AADFE44D"), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.baseQuests[1].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.baseQuests[1].textTag, StringToText(""));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest1QuestAccept_Init () {
  gt_BaseQuest1QuestAccept = TriggerCreate("gt_BaseQuest1QuestAccept_Func");
  TriggerAddEventDialogControl(gt_BaseQuest1QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 1 - Activate Ballan Waypoint
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest1ActivateBallanWaypoint_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (!UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero)) {
      return false;
    }
    if (lr_player.quests.baseQuests[1].progress != 1) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.baseQuests[1].progress = 2;
  ObjectiveSetName(lr_player.quests.baseQuests[1].objective, StringExternal("Param/Value/4D7B649C"));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest1ActivateBallanWaypoint_Init () {
  gt_BaseQuest1ActivateBallanWaypoint = TriggerCreate("gt_BaseQuest1ActivateBallanWaypoint_Func");
  TriggerAddEventUnitRegion(gt_BaseQuest1ActivateBallanWaypoint, null, RegionFromId(125), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 2 - Use Ballan Waypoint to Wasteland
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest2UseBallanWaypointtoWasteland_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionFromId(125))) {
      return false;
    }
    if (lr_player.quests.baseQuests[1].progress != 2) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if ((EventDialogControl() == gv_wastelandDialogButton)) {
    gf_WaypointTeleport(lr_player, RegionFromId(124));
    lr_player.quests.baseQuests[1].progress = 3;
    ObjectiveSetState(lr_player.quests.baseQuests[1].objective, c_objectiveStateCompleted);
    TextTagSetText(lr_player.quests.baseQuests[1].textTag, StringExternal("Param/Value/D05FC8E4"));
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest2UseBallanWaypointtoWasteland_Init () {
  gt_BaseQuest2UseBallanWaypointtoWasteland = TriggerCreate("gt_BaseQuest2UseBallanWaypointtoWasteland_Func");
  TriggerAddEventDialogControl(gt_BaseQuest2UseBallanWaypointtoWasteland, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Base Quest 1 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_BaseQuest1RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4233)), 3.0))) {
      return false;
    }
    if (lr_player.quests.baseQuests[0].progress != 3) {
      return false;
    }
    if (lr_player.quests.baseQuests[1].progress != 3) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.baseQuests[1].progress = 4;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Base1-0", lr_player.hand, lr_player.quests.baseQuests[1].progress);
  ObjectiveDestroy(lr_player.quests.baseQuests[1].objective);
  lr_player.quests.baseQuests[1].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  gf_AddExperience(lr_player.dragon, 100);
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/AC1DE9E4"));
  TextTagDestroy(lr_player.quests.baseQuests[1].textTag);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BaseQuest1RewardAccept_Init () {
  gt_BaseQuest1RewardAccept = TriggerCreate("gt_BaseQuest1RewardAccept_Func");
  TriggerAddEventDialogControl(gt_BaseQuest1RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Detsefni Quest 0 - Talk to Detsefni
//--------------------------------------------------------------------------------------------------
bool gt_DetsefniQuest0TalktoDetsefni_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4922)), 3.0))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.detsefniQuests[0].progress == 0) {
    gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/77465159"), StringExternal("Param/Value/99429556"), StringExternal("Param/Value/A9B2BE9C"), StringExternal("Param/Value/707ED4E0"));
  }
  else if (lr_player.quests.detsefniQuests[0].progress == 1) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/6BED864A"));
  }
  else if (lr_player.quests.detsefniQuests[0].progress == 2) {
    gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/22072B2B"), StringExternal("Param/Value/DE876B14"));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4922)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DetsefniQuest0TalktoDetsefni_Init () {
  gt_DetsefniQuest0TalktoDetsefni = TriggerCreate("gt_DetsefniQuest0TalktoDetsefni_Func");
  TriggerAddEventUnitSelected(gt_DetsefniQuest0TalktoDetsefni, UnitRefFromUnit(UnitFromId(4922)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_DetsefniQuest0TalktoDetsefni, UnitRefFromUnit(UnitFromId(4922)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_DetsefniQuest0TalktoDetsefni, UnitRefFromUnit(UnitFromId(4922)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Detsefni Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_DetsefniQuest0QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4922)), 3.0))) {
      return false;
    }
    if (lr_player.quests.detsefniQuests[0].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.detsefniQuests[0].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/BE01F8B9"), StringToText(""), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.detsefniQuests[0].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.detsefniQuests[0].textTag, StringToText(""));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DetsefniQuest0QuestAccept_Init () {
  gt_DetsefniQuest0QuestAccept = TriggerCreate("gt_DetsefniQuest0QuestAccept_Func");
  TriggerAddEventDialogControl(gt_DetsefniQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Detsefni Quest 0 - Kill 25 Sreptis
//--------------------------------------------------------------------------------------------------
bool gt_DetsefniQuest0Kill25Sreptis_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) != 15) {
      return false;
    }
    if (UnitGetType(EventUnit()) != "Srepti") {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitGroupAlliance(libNtve_gf_KillingPlayer(), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(UnitGroupLoopCurrent()))) {
      continue;
    }
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];
    
    if ((lr_player.quests.detsefniQuests[0].progress == 1)) {
      lr_player.quests.detsefniQuests[0].kills += 1;
      ObjectiveSetName(lr_player.quests.detsefniQuests[0].objective, (StringExternal("Param/Value/2AAE008D") + (IntToText((25 - lr_player.quests.detsefniQuests[0].kills)) + StringExternal("Param/Value/996516FD"))));
      if ((lr_player.quests.detsefniQuests[0].kills == 25)) {
        lr_player.quests.detsefniQuests[0].progress = 2;
        ObjectiveSetState(lr_player.quests.detsefniQuests[0].objective, c_objectiveStateCompleted);
        TextTagSetText(lr_player.quests.detsefniQuests[0].textTag, StringExternal("Param/Value/C7D0B265"));
      }
    }
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DetsefniQuest0Kill25Sreptis_Init () {
  gt_DetsefniQuest0Kill25Sreptis = TriggerCreate("gt_DetsefniQuest0Kill25Sreptis_Func");
  TriggerAddEventUnitDied(gt_DetsefniQuest0Kill25Sreptis, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Detsefni Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_DetsefniQuest0RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4922)), 3.0))) {
      return false;
    }
    if (lr_player.quests.detsefniQuests[0].progress != 2) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.detsefniQuests[0].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Detsefni0-0", lr_player.hand, lr_player.quests.detsefniQuests[0].progress);
  ObjectiveDestroy(lr_player.quests.detsefniQuests[0].objective);
  lr_player.quests.detsefniQuests[0].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  gf_AddExperience(lr_player.dragon, 500.0);
  PlayerModifyPropertyInt(lr_player.player, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(lr_player.player, c_playerPropMinerals) + 5000));
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/DACEB55D"));
  TextTagDestroy(lr_player.quests.detsefniQuests[0].textTag);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DetsefniQuest0RewardAccept_Init () {
  gt_DetsefniQuest0RewardAccept = TriggerCreate("gt_DetsefniQuest0RewardAccept_Func");
  TriggerAddEventDialogControl(gt_DetsefniQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sergeant Lister Quest 0 - Talk to Sergeant Lister
//--------------------------------------------------------------------------------------------------
bool gt_SergeantListerQuest0TalktoSergeantLister_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitSelect(lr_player.dragon, lr_player.player, true);
  if (libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4923)), 3.0))) {
    if (lr_player.quests.sergeantListerQuests[0].progress == 0) {
      gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/21BDD31D"), StringExternal("Param/Value/870AA9F6"), StringExternal("Param/Value/ABDC9981"), StringExternal("Param/Value/CED2A4D9"));
    }
    else if (lr_player.quests.sergeantListerQuests[0].progress == 1) {
      gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/9027D913"));
    }
    else if (lr_player.quests.sergeantListerQuests[0].progress == 2) {
      gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/F0A0DDC8"), StringExternal("Param/Value/C3DEB7CE"));
      libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4923)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SergeantListerQuest0TalktoSergeantLister_Init () {
  gt_SergeantListerQuest0TalktoSergeantLister = TriggerCreate("gt_SergeantListerQuest0TalktoSergeantLister_Func");
  TriggerAddEventUnitSelected(gt_SergeantListerQuest0TalktoSergeantLister, UnitRefFromUnit(UnitFromId(4923)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_SergeantListerQuest0TalktoSergeantLister, UnitRefFromUnit(UnitFromId(4923)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_SergeantListerQuest0TalktoSergeantLister, UnitRefFromUnit(UnitFromId(4923)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sergeant Listeri Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_SergeantListeriQuest0QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4923)), 3.0))) {
      return false;
    }
    if (lr_player.quests.sergeantListerQuests[0].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.sergeantListerQuests[0].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/FFDAB444"), StringToText(""), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.sergeantListerQuests[0].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.sergeantListerQuests[0].textTag, StringToText(""));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SergeantListeriQuest0QuestAccept_Init () {
  gt_SergeantListeriQuest0QuestAccept = TriggerCreate("gt_SergeantListeriQuest0QuestAccept_Func");
  TriggerAddEventDialogControl(gt_SergeantListeriQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sergeant Lister Quest 0 - Kill 10 Creton Warriors
//--------------------------------------------------------------------------------------------------
bool gt_SergeantListerQuest0Kill10CretonWarriors_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) != 15) {
      return false;
    }
    if (UnitGetType(EventUnit()) != "CretonWarrior") {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(UnitGroupLoopCurrent()))) {
      continue;
    }
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];
    
    if ((lr_player.quests.sergeantListerQuests[0].progress == 1)) {
      lr_player.quests.sergeantListerQuests[0].kills += 1;
      ObjectiveSetName(lr_player.quests.sergeantListerQuests[0].objective, (StringExternal("Param/Value/D42CEA13") + (IntToText((10 - lr_player.quests.sergeantListerQuests[0].kills)) + StringExternal("Param/Value/61137D94"))));
      if ((lr_player.quests.sergeantListerQuests[0].kills == 10)) {
        lr_player.quests.sergeantListerQuests[0].progress = 2;
        ObjectiveSetState(lr_player.quests.sergeantListerQuests[0].objective, c_objectiveStateCompleted);
        TextTagSetText(lr_player.quests.sergeantListerQuests[0].textTag, StringExternal("Param/Value/D2C09EC1"));
      }
    }
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SergeantListerQuest0Kill10CretonWarriors_Init () {
  gt_SergeantListerQuest0Kill10CretonWarriors = TriggerCreate("gt_SergeantListerQuest0Kill10CretonWarriors_Func");
  TriggerAddEventUnitDied(gt_SergeantListerQuest0Kill10CretonWarriors, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sergeant Lister Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_SergeantListerQuest0RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4923)), 3.0))) {
      return false;
    }
    if (lr_player.quests.sergeantListerQuests[0].progress != 2) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.sergeantListerQuests[0].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-SergeantLister0-0", lr_player.hand, lr_player.quests.sergeantListerQuests[0].progress);
  ObjectiveDestroy(lr_player.quests.sergeantListerQuests[0].objective);
  lr_player.quests.sergeantListerQuests[0].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  gf_AddExperience(lr_player.dragon, 750.0);
  PlayerModifyPropertyInt(lr_player.player, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(lr_player.player, c_playerPropMinerals) + 5000));
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/E523125A"));
  TextTagDestroy(lr_player.quests.sergeantListerQuests[0].textTag);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SergeantListerQuest0RewardAccept_Init () {
  gt_SergeantListerQuest0RewardAccept = TriggerCreate("gt_SergeantListerQuest0RewardAccept_Func");
  TriggerAddEventDialogControl(gt_SergeantListerQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Greed Quest 0 - Talk to Greed
//--------------------------------------------------------------------------------------------------
bool gt_GreedQuest0TalktoGreed_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitSelect(lr_player.dragon, lr_player.player, true);
  if (libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4924)), 3.0))) {
    if (lr_player.quests.greedQuests[0].progress == 0) {
      gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/67477194"), StringExternal("Param/Value/156DA52C"), StringExternal("Param/Value/301CAD94"), StringExternal("Param/Value/3F89894F"));
    }
    else if (lr_player.quests.greedQuests[0].progress == 1) {
      gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/A1694ED4"));
    }
    else if (lr_player.quests.greedQuests[0].progress == 2) {
      gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/7897B78A"), StringExternal("Param/Value/2B4A19AF"));
      libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4924)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GreedQuest0TalktoGreed_Init () {
  gt_GreedQuest0TalktoGreed = TriggerCreate("gt_GreedQuest0TalktoGreed_Func");
  TriggerAddEventUnitSelected(gt_GreedQuest0TalktoGreed, UnitRefFromUnit(UnitFromId(4924)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Greed  Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_GreedQuest0QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4924)), 3.0))) {
      return false;
    }
    if (lr_player.quests.greedQuests[0].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.greedQuests[0].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/8FAD68D6"), StringExternal("Param/Value/9168B955"), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.greedQuests[0].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.greedQuests[0].textTag, StringToText(""));
  MinimapPing(lr_player.playerGroupSingle, UnitGetPosition(UnitFromId(4937)), 15.0, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lr_player.player, false)));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GreedQuest0QuestAccept_Init () {
  gt_GreedQuest0QuestAccept = TriggerCreate("gt_GreedQuest0QuestAccept_Func");
  TriggerAddEventDialogControl(gt_GreedQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Greed Quest 0 - Find Mister Scruffers
//--------------------------------------------------------------------------------------------------
bool gt_GreedQuest0FindMisterScruffers_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (!UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero)) {
      return false;
    }
    if (lr_player.quests.greedQuests[0].progress != 1) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.greedQuests[0].progress = 2;
  ObjectiveSetState(lr_player.quests.greedQuests[0].objective, c_objectiveStateCompleted);
  TextTagSetText(lr_player.quests.greedQuests[0].textTag, StringExternal("Param/Value/1B0CFA23"));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GreedQuest0FindMisterScruffers_Init () {
  gt_GreedQuest0FindMisterScruffers = TriggerCreate("gt_GreedQuest0FindMisterScruffers_Func");
  TriggerAddEventUnitRegion(gt_GreedQuest0FindMisterScruffers, null, RegionCircle(UnitGetPosition(UnitFromId(4937)), 3.0), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Greed Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_GreedQuest0RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4924)), 3.0))) {
      return false;
    }
    if (lr_player.quests.greedQuests[0].progress != 2) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.greedQuests[0].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Greed0-0", lr_player.hand, lr_player.quests.greedQuests[0].progress);
  ObjectiveDestroy(lr_player.quests.greedQuests[0].objective);
  lr_player.quests.greedQuests[0].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  gf_AddExperience(lr_player.dragon, 1500.0);
  PlayerModifyPropertyInt(lr_player.player, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(lr_player.player, c_playerPropMinerals) + 10000));
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/10B63590"));
  TextTagDestroy(lr_player.quests.greedQuests[0].textTag);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GreedQuest0RewardAccept_Init () {
  gt_GreedQuest0RewardAccept = TriggerCreate("gt_GreedQuest0RewardAccept_Func");
  TriggerAddEventDialogControl(gt_GreedQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Madeleine Quest 0 - Talk to Madeleine
//--------------------------------------------------------------------------------------------------
bool gt_MadeleineQuest0TalktoMadeleine_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitSelect(lr_player.dragon, lr_player.player, true);
  if (libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4945)), 3.0))) {
    if (lr_player.quests.madelineQuests[0].progress == 0) {
      gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/EBE16247"), StringExternal("Param/Value/724DC8F1"), StringExternal("Param/Value/C5689B89"), StringExternal("Param/Value/89D4B089"));
    }
    else if (lr_player.quests.madelineQuests[0].progress == 1) {
      gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/584E83EC"));
    }
    else if (lr_player.quests.madelineQuests[0].progress == 2) {
      gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/AEEC4072"), StringExternal("Param/Value/36BF1515"));
      libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4945)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MadeleineQuest0TalktoMadeleine_Init () {
  gt_MadeleineQuest0TalktoMadeleine = TriggerCreate("gt_MadeleineQuest0TalktoMadeleine_Func");
  TriggerAddEventUnitSelected(gt_MadeleineQuest0TalktoMadeleine, UnitRefFromUnit(UnitFromId(4945)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Madeleine Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_MadeleineQuest0QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4945)), 3.0))) {
      return false;
    }
    if (lr_player.quests.madelineQuests[0].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.madelineQuests[0].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/A4E28FF5"), StringExternal("Param/Value/9F56823C"), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.madelineQuests[0].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.madelineQuests[0].textTag, StringToText(""));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MadeleineQuest0QuestAccept_Init () {
  gt_MadeleineQuest0QuestAccept = TriggerCreate("gt_MadeleineQuest0QuestAccept_Func");
  TriggerAddEventDialogControl(gt_MadeleineQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Madeleine Quest 0 - Kill 30 Karramarros
//--------------------------------------------------------------------------------------------------
bool gt_MadeleineQuest0Kill30Karramarros_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) != 15) {
      return false;
    }
    if (UnitGetType(EventUnit()) != "Karramarro") {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitGroupAlliance(libNtve_gf_KillingPlayer(), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(UnitGroupLoopCurrent()))) {
      continue;
    }
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];
    
    if ((lr_player.quests.madelineQuests[0].progress == 1)) {
      lr_player.quests.madelineQuests[0].kills += 1;
      ObjectiveSetName(lr_player.quests.madelineQuests[0].objective, (StringExternal("Param/Value/FBCDD588") + (IntToText((30 - lr_player.quests.madelineQuests[0].kills)) + StringExternal("Param/Value/C04FAF36"))));
      if ((lr_player.quests.madelineQuests[0].kills == 30)) {
        lr_player.quests.madelineQuests[0].progress = 2;
        ObjectiveSetState(lr_player.quests.madelineQuests[0].objective, c_objectiveStateCompleted);
        TextTagSetText(lr_player.quests.madelineQuests[0].textTag, StringExternal("Param/Value/AF200266"));
      }
    }
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MadeleineQuest0Kill30Karramarros_Init () {
  gt_MadeleineQuest0Kill30Karramarros = TriggerCreate("gt_MadeleineQuest0Kill30Karramarros_Func");
  TriggerAddEventUnitDied(gt_MadeleineQuest0Kill30Karramarros, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Madeleine Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_MadeleineQuest0RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4945)), 3.0))) {
      return false;
    }
    if (lr_player.quests.madelineQuests[0].progress != 2) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.madelineQuests[0].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Madeleine0-0", lr_player.hand, lr_player.quests.madelineQuests[0].progress);
  ObjectiveDestroy(lr_player.quests.madelineQuests[0].objective);
  lr_player.quests.madelineQuests[0].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  gf_AddExperience(lr_player.dragon, 1500.0);
  PlayerModifyPropertyInt(lr_player.player, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(lr_player.player, c_playerPropMinerals) + 7500));
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/F3203442"));
  TextTagDestroy(lr_player.quests.madelineQuests[0].textTag);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MadeleineQuest0RewardAccept_Init () {
  gt_MadeleineQuest0RewardAccept = TriggerCreate("gt_MadeleineQuest0RewardAccept_Func");
  TriggerAddEventDialogControl(gt_MadeleineQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Malin Quest 0 - Talk to Malin
//--------------------------------------------------------------------------------------------------
bool gt_MalinQuest0TalktoMalin_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(2516)), 3.0))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.malinQuests[0].progress == 0) {
    gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/BE16FE16"), StringExternal("Param/Value/C5D45F44"), StringExternal("Param/Value/7EDB808B"), StringExternal("Param/Value/95014774"));
  }
  else if (lr_player.quests.malinQuests[0].progress == 1) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/AA5D2DAB"));
  }
  else if (lr_player.quests.malinQuests[0].progress == 2) {
    gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/38B53DC8"), StringExternal("Param/Value/B4F7F0B0"));
  }
  else if (lr_player.quests.malinQuests[0].progress == 1) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/09B716BE"));
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MalinQuest0TalktoMalin_Init () {
  gt_MalinQuest0TalktoMalin = TriggerCreate("gt_MalinQuest0TalktoMalin_Func");
  TriggerAddEventUnitSelected(gt_MalinQuest0TalktoMalin, UnitRefFromUnit(UnitFromId(2516)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_MalinQuest0TalktoMalin, UnitRefFromUnit(UnitFromId(2516)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_MalinQuest0TalktoMalin, UnitRefFromUnit(UnitFromId(2516)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Malin Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_MalinQuest0QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(2516)), 3.0))) {
      return false;
    }
    if (lr_player.quests.malinQuests[0].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.malinQuests[0].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/2C399FC9"), StringExternal("Param/Value/2FDE90B5"), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.malinQuests[0].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.malinQuests[0].textTag, StringToText(""));
  if ((gv_robus == UnitFromId(632))) {
    libNtve_gf_UnitCreateFacingPoint(1, "Robus", 0, 15, PointFromId(4140), UnitGetPosition(UnitFromId(2516)));
    gv_robus = UnitLastCreated();
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MalinQuest0QuestAccept_Init () {
  gt_MalinQuest0QuestAccept = TriggerCreate("gt_MalinQuest0QuestAccept_Func");
  TriggerAddEventDialogControl(gt_MalinQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Malin Quest 0 - Kill Robus
//--------------------------------------------------------------------------------------------------
bool gt_MalinQuest0KillRobus_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) != 15) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_robus = UnitFromId(632);
  UnitGroupLoopBegin(UnitGroupAlliance(libNtve_gf_KillingPlayer(), c_unitAllianceAlly, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(UnitGroupLoopCurrent()))) {
      continue;
    }
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];
    
    if ((lr_player.quests.malinQuests[0].progress == 1)) {
      lr_player.quests.malinQuests[0].progress = 2;
      ObjectiveSetState(lr_player.quests.malinQuests[0].objective, c_objectiveStateCompleted);
      TextTagSetText(lr_player.quests.malinQuests[0].textTag, StringExternal("Param/Value/2BF560CD"));
    }
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MalinQuest0KillRobus_Init () {
  gt_MalinQuest0KillRobus = TriggerCreate("gt_MalinQuest0KillRobus_Func");
  TriggerAddEventUnitDied(gt_MalinQuest0KillRobus, UnitRefFromVariable("gv_robus"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Malin Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_MalinQuest0RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(2516)), 3.0))) {
      return false;
    }
    if (lr_player.quests.malinQuests[0].progress != 2) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.malinQuests[0].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Malin0-0", lr_player.hand, lr_player.quests.malinQuests[0].progress);
  ObjectiveDestroy(lr_player.quests.malinQuests[0].objective);
  lr_player.quests.malinQuests[0].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/DAC0C4F2"));
  UnitInventoryCreate(lr_player.dragon, "CarrionNeedles");
  gf_AddExperience(lr_player.dragon, 2000);
  TextTagDestroy(lr_player.quests.malinQuests[0].textTag);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MalinQuest0RewardAccept_Init () {
  gt_MalinQuest0RewardAccept = TriggerCreate("gt_MalinQuest0RewardAccept_Func");
  TriggerAddEventDialogControl(gt_MalinQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Amp Quest 0 - Talk to Amp
//--------------------------------------------------------------------------------------------------
bool gt_AmpQuest0TalktoAmp_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitSelect(lr_player.dragon, lr_player.player, true);
  if (libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(444)), 3.0))) {
    if (lr_player.quests.ampQuests[0].progress == 0) {
      gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/B3EC85D5"), StringExternal("Param/Value/9595576E"), StringExternal("Param/Value/F9E6F4B2"), StringExternal("Param/Value/769AE758"));
    }
    else if (lr_player.quests.ampQuests[0].progress == 1) {
      gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), (StringExternal("Param/Value/90233918") + (IntToText(((PlayerGroupCount(gv_humanPlayers) * 25) - gv_unitKills[3])) + StringExternal("Param/Value/5C36486F"))));
    }
    else if (lr_player.quests.ampQuests[0].progress == 2) {
      gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/73D38BE2"), StringExternal("Param/Value/7540A50F"));
      libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(444)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AmpQuest0TalktoAmp_Init () {
  gt_AmpQuest0TalktoAmp = TriggerCreate("gt_AmpQuest0TalktoAmp_Func");
  TriggerAddEventUnitSelected(gt_AmpQuest0TalktoAmp, UnitRefFromUnit(UnitFromId(444)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Amp Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_AmpQuest0QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(444)), 3.0))) {
      return false;
    }
    if (lr_player.quests.ampQuests[0].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.ampQuests[0].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/F5DB17C5"), StringExternal("Param/Value/F2B500F3"), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.ampQuests[0].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.ampQuests[0].textTag, StringToText(""));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AmpQuest0QuestAccept_Init () {
  gt_AmpQuest0QuestAccept = TriggerCreate("gt_AmpQuest0QuestAccept_Func");
  TriggerAddEventDialogControl(gt_AmpQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Amp Quest 0 - Kill an Elite Creton Warrior
//--------------------------------------------------------------------------------------------------
bool gt_AmpQuest0KillanEliteCretonWarrior_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) != 15) {
      return false;
    }
    if (UnitGetType(EventUnit()) != "EliteCretonWarrior") {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitGroupAlliance(libNtve_gf_KillingPlayer(), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(UnitGroupLoopCurrent()))) {
      continue;
    }
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];
    
    if ((lr_player.quests.ampQuests[0].progress == 1)) {
      lr_player.quests.ampQuests[0].progress = 2;
      ObjectiveSetState(lr_player.quests.ampQuests[0].objective, c_objectiveStateCompleted);
      TextTagSetText(lr_player.quests.ampQuests[0].textTag, StringExternal("Param/Value/2C21F4B5"));
    }
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AmpQuest0KillanEliteCretonWarrior_Init () {
  gt_AmpQuest0KillanEliteCretonWarrior = TriggerCreate("gt_AmpQuest0KillanEliteCretonWarrior_Func");
  TriggerAddEventUnitDied(gt_AmpQuest0KillanEliteCretonWarrior, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Amp Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_AmpQuest0RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(444)), 3.0))) {
      return false;
    }
    if (lr_player.quests.ampQuests[0].progress != 2) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.ampQuests[0].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Amp0-0", lr_player.hand, lr_player.quests.ampQuests[0].progress);
  ObjectiveDestroy(lr_player.quests.ampQuests[0].objective);
  lr_player.quests.ampQuests[0].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  gf_AddExperience(lr_player.dragon, 2000.0);
  PlayerModifyPropertyInt(lr_player.player, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(lr_player.player, c_playerPropMinerals) + 8000));
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/4C1BFB18"));
  TextTagDestroy(lr_player.quests.ampQuests[0].textTag);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AmpQuest0RewardAccept_Init () {
  gt_AmpQuest0RewardAccept = TriggerCreate("gt_AmpQuest0RewardAccept_Func");
  TriggerAddEventDialogControl(gt_AmpQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Altoss Quest 0 - Talk to Altoss
//--------------------------------------------------------------------------------------------------
bool gt_AltossQuest0TalktoAltoss_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitSelect(lr_player.dragon, lr_player.player, true);
  if (libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4946)), 3.0))) {
    if (lr_player.quests.altossQuests[0].progress == 0) {
      gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/88FA96CE"), StringExternal("Param/Value/8996F279"), StringExternal("Param/Value/D41137B8"), StringExternal("Param/Value/53399252"));
    }
    else if (lr_player.quests.altossQuests[0].progress == 1) {
      gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/ECF4A654"));
    }
    else if (lr_player.quests.altossQuests[0].progress == 2) {
      gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/053D639D"), StringExternal("Param/Value/5B4290DE"));
      libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(4946)), c_animNameDefault, "Jump", 0, c_animTimeDefault);
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AltossQuest0TalktoAltoss_Init () {
  gt_AltossQuest0TalktoAltoss = TriggerCreate("gt_AltossQuest0TalktoAltoss_Func");
  TriggerAddEventUnitSelected(gt_AltossQuest0TalktoAltoss, UnitRefFromUnit(UnitFromId(4946)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Altoss Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_AltossQuest0QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4946)), 3.0))) {
      return false;
    }
    if (lr_player.quests.altossQuests[0].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.altossQuests[0].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/C8693973"), StringToText(""), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.altossQuests[0].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.altossQuests[0].textTag, StringToText(""));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AltossQuest0QuestAccept_Init () {
  gt_AltossQuest0QuestAccept = TriggerCreate("gt_AltossQuest0QuestAccept_Func");
  TriggerAddEventDialogControl(gt_AltossQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Altoss Quest 0 - Kill 15 Odvratans
//--------------------------------------------------------------------------------------------------
bool gt_AltossQuest0Kill15Odvratans_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) != 15) {
      return false;
    }
    if (UnitGetType(EventUnit()) != "Odvratan") {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(UnitGroupLoopCurrent()))) {
      continue;
    }
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];
    
    if (lr_player.quests.altossQuests[0].progress == 1) {
      lr_player.quests.altossQuests[0].kills += 1;
      ObjectiveSetName(lr_player.quests.altossQuests[0].objective, (StringExternal("Param/Value/A082B51B") + (IntToText((15 - lr_player.quests.altossQuests[0].kills)) + StringExternal("Param/Value/21D0C555"))));
      if ((lr_player.quests.altossQuests[0].kills == 15)) {
        lr_player.quests.altossQuests[0].progress = 2;
        ObjectiveSetState(lr_player.quests.altossQuests[0].objective, c_objectiveStateCompleted);
        TextTagSetText(lr_player.quests.altossQuests[0].textTag, StringExternal("Param/Value/733E3133"));
      }
    }
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AltossQuest0Kill15Odvratans_Init () {
  gt_AltossQuest0Kill15Odvratans = TriggerCreate("gt_AltossQuest0Kill15Odvratans_Func");
  TriggerAddEventUnitDied(gt_AltossQuest0Kill15Odvratans, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Altoss Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_AltossQuest0RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4946)), 3.0))) {
      return false;
    }
    if (lr_player.quests.altossQuests[0].progress != 2) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.altossQuests[0].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Altoss0-0", lr_player.hand, lr_player.quests.altossQuests[0].progress);
  ObjectiveDestroy(lr_player.quests.altossQuests[0].objective);
  lr_player.quests.altossQuests[0].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  gf_AddExperience(lr_player.dragon, 3500.0);
  PlayerModifyPropertyInt(lr_player.player, c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(lr_player.player, c_playerPropMinerals) + 17500));
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/15B40177"));
  TextTagDestroy(lr_player.quests.altossQuests[0].textTag);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AltossQuest0RewardAccept_Init () {
  gt_AltossQuest0RewardAccept = TriggerCreate("gt_AltossQuest0RewardAccept_Func");
  TriggerAddEventDialogControl(gt_AltossQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Illisus Locust Spawn
//--------------------------------------------------------------------------------------------------
bool gt_IllisusLocustSpawn_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((UnitGroupCount(UnitGroup("Karramarro", 15, RegionFromId(239), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 5))) {
      return false;
    }
    if (!(libNtve_gf_UnitInRegion(gv_players[0].dragon, RegionFromId(239)) || libNtve_gf_UnitInRegion(gv_players[1].dragon, RegionFromId(239)) || libNtve_gf_UnitInRegion(gv_players[2].dragon, RegionFromId(239)) || libNtve_gf_UnitInRegion(gv_players[3].dragon, RegionFromId(239)))) {
      return false;
    }
    if (!((UnitGetType(gv_illisus) == "Illisus"))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitCreate(1, "Karramarro", 0, 15, UnitGetPosition(gv_illisus), libNtve_gf_RandomAngle());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_IllisusLocustSpawn_Init () {
  gt_IllisusLocustSpawn = TriggerCreate("gt_IllisusLocustSpawn_Func");
  TriggerAddEventTimePeriodic(gt_IllisusLocustSpawn, 2.5, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Oleum Quest 0 - Talk to Oleum
//--------------------------------------------------------------------------------------------------
bool gt_OleumQuest0TalktoOleum_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4381)), 3.0))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.oleumQuests[0].progress == 0) {
    gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/0AA64FA6"), StringExternal("Param/Value/3E211E4A"), StringExternal("Param/Value/CAA545D2"), StringExternal("Param/Value/1630D13E"));
  }
  else if (lr_player.quests.oleumQuests[0].progress == 1) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/3411017D"));
  }
  else if (lr_player.quests.oleumQuests[0].progress == 2) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/779D797B"));
  }
  else if (lr_player.quests.oleumQuests[0].progress == 3) {
    gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/DB3EEE78"), StringExternal("Param/Value/61359ACF"));
  }
  else if (lr_player.quests.oleumQuests[0].progress == 4) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/7CEBCED8"));
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OleumQuest0TalktoOleum_Init () {
  gt_OleumQuest0TalktoOleum = TriggerCreate("gt_OleumQuest0TalktoOleum_Func");
  TriggerAddEventUnitSelected(gt_OleumQuest0TalktoOleum, UnitRefFromUnit(UnitFromId(4381)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_OleumQuest0TalktoOleum, UnitRefFromUnit(UnitFromId(4381)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_OleumQuest0TalktoOleum, UnitRefFromUnit(UnitFromId(4381)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Oleum Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_OleumQuest0QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4381)), 3.0))) {
      return false;
    }
    if (lr_player.quests.oleumQuests[0].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.oleumQuests[0].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/1DBB83B2"), StringExternal("Param/Value/8803AD2E"), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.oleumQuests[0].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.oleumQuests[0].textTag, StringToText(""));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OleumQuest0QuestAccept_Init () {
  gt_OleumQuest0QuestAccept = TriggerCreate("gt_OleumQuest0QuestAccept_Func");
  TriggerAddEventDialogControl(gt_OleumQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Oleum Quest 0 - Find Crew 137
//--------------------------------------------------------------------------------------------------
bool gt_OleumQuest0FindCrew137_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (!UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero)) {
      return false;
    }
    if (lr_player.quests.oleumQuests[0].progress != 1) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.oleumQuests[0].progress = 2;
  ObjectiveSetName(lr_player.quests.oleumQuests[0].objective, StringExternal("Param/Value/517FDC8E"));
  if ((gv_illisus == UnitFromId(632))) {
    libNtve_gf_UnitCreateFacingPoint(1, "Illisus", 0, 15, RegionGetCenter(RegionFromId(231)), UnitGetPosition(UnitFromId(4381)));
    gv_illisus = UnitLastCreated();
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OleumQuest0FindCrew137_Init () {
  gt_OleumQuest0FindCrew137 = TriggerCreate("gt_OleumQuest0FindCrew137_Func");
  TriggerAddEventUnitRegion(gt_OleumQuest0FindCrew137, null, RegionFromId(231), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Oleum Quest 0 - Kill Illisus
//--------------------------------------------------------------------------------------------------
bool gt_OleumQuest0KillIllisus_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) != 15) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_illisus = UnitFromId(632);
  UnitGroupLoopBegin(UnitGroupAlliance(libNtve_gf_KillingPlayer(), c_unitAllianceAlly, null, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(UnitGroupLoopCurrent()))) {
      continue;
    }
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];
    
    if ((lr_player.quests.oleumQuests[0].progress == 2)) {
      lr_player.quests.oleumQuests[0].progress = 3;
      ObjectiveSetState(lr_player.quests.oleumQuests[0].objective, c_objectiveStateCompleted);
      TextTagSetText(lr_player.quests.oleumQuests[0].textTag, StringExternal("Param/Value/9D2545A5"));
    }
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OleumQuest0KillIllisus_Init () {
  gt_OleumQuest0KillIllisus = TriggerCreate("gt_OleumQuest0KillIllisus_Func");
  TriggerAddEventUnitDied(gt_OleumQuest0KillIllisus, UnitRefFromVariable("gv_illisus"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Oleum Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_OleumQuest0RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(4381)), 3.0))) {
      return false;
    }
    if (lr_player.quests.oleumQuests[0].progress != 3) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.oleumQuests[0].progress = 4;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Oleum0-0", lr_player.hand, lr_player.quests.oleumQuests[0].progress);
  ObjectiveDestroy(lr_player.quests.oleumQuests[0].objective);
  lr_player.quests.oleumQuests[0].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  gf_AddExperience(lr_player.dragon, 2000.0);
  UnitInventoryCreate(lr_player.dragon, "MinerArmor");
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/5DEC9FB0"));
  TextTagDestroy(lr_player.quests.oleumQuests[0].textTag);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OleumQuest0RewardAccept_Init () {
  gt_OleumQuest0RewardAccept = TriggerCreate("gt_OleumQuest0RewardAccept_Func");
  TriggerAddEventDialogControl(gt_OleumQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Seryn Quest 0 - Talk to Seryn
//--------------------------------------------------------------------------------------------------
bool gt_SerynQuest0TalktoSeryn_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }

  lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(2671)), 3.0))) {
      return false;
    }
    if (lr_player.quests.talking) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.serynQuests[0].progress == 0) {
    gf_OpenQuestDialog(lr_player, StringExternal("Param/Value/CE4C241E"), StringExternal("Param/Value/30903FF0"), StringExternal("Param/Value/A2DA0541"), StringExternal("Param/Value/87EFAAF6"));
  }
  else if (lr_player.quests.serynQuests[0].progress == 1) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/69F3DB8A"));
  }
  else if (lr_player.quests.serynQuests[0].progress == 2) {
    gf_OpenRewardDialog(lr_player, StringExternal("Param/Value/B25D8810"), StringExternal("Param/Value/FCCCCCE3"));
  }
  else if (lr_player.quests.serynQuests[0].progress == 3) {
    gf_OpenTalkDialog(lr_player, UnitTypeGetName(UnitGetType(EventUnit())), StringExternal("Param/Value/6D032057"));
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SerynQuest0TalktoSeryn_Init () {
  gt_SerynQuest0TalktoSeryn = TriggerCreate("gt_SerynQuest0TalktoSeryn_Func");
  TriggerAddEventUnitSelected(gt_SerynQuest0TalktoSeryn, UnitRefFromUnit(UnitFromId(2671)), c_playerAny, true);
  TriggerAddEventUnitClick(gt_SerynQuest0TalktoSeryn, UnitRefFromUnit(UnitFromId(2671)), c_playerAny);
  TriggerAddEventUnitHighlight(gt_SerynQuest0TalktoSeryn, UnitRefFromUnit(UnitFromId(2671)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Seryn Quest 0 - Quest Accept
//--------------------------------------------------------------------------------------------------
bool gt_SerynQuest0QuestAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.questDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(2671)), 3.0))) {
      return false;
    }
    if (lr_player.quests.serynQuests[0].progress != 0) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.serynQuests[0].progress = 1;
  ObjectiveCreateForPlayers(StringExternal("Param/Value/0AEE9B5F"), StringExternal("Param/Value/A5AA44D2"), c_objectiveStateActive, false, lr_player.playerGroupSingle);
  lr_player.quests.serynQuests[0].objective = ObjectiveLastCreated();
  gf_CloseQuestDialog(lr_player);
  TextTagSetText(lr_player.quests.serynQuests[0].textTag, StringToText(""));
  if ((gv_shadowSeryn == UnitFromId(632))) {
    libNtve_gf_UnitCreateFacingPoint(1, "ShadowSeryn", 0, 15, RegionRandomPoint(RegionFromId(274)), UnitGetPosition(UnitFromId(2671)));
    gv_shadowSeryn = UnitLastCreated();
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SerynQuest0QuestAccept_Init () {
  gt_SerynQuest0QuestAccept = TriggerCreate("gt_SerynQuest0QuestAccept_Func");
  TriggerAddEventDialogControl(gt_SerynQuest0QuestAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Seryn Quest 0 - Kill Seryn's Shadow
//--------------------------------------------------------------------------------------------------
bool gt_SerynQuest0KillSerynsShadow_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) != 15) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_shadowSeryn = UnitFromId(632);
  UnitGroupLoopBegin(UnitGroupAlliance(libNtve_gf_KillingPlayer(), c_unitAllianceAlly, null, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(UnitGroupLoopCurrent()))) {
      continue;
    }
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];
    
    if ((lr_player.quests.serynQuests[0].progress == 1)) {
      lr_player.quests.serynQuests[0].progress = 2;
      ObjectiveSetState(lr_player.quests.serynQuests[0].objective, c_objectiveStateCompleted);
      TextTagSetText(lr_player.quests.serynQuests[0].textTag, StringExternal("Param/Value/FE6219AA"));
    }
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SerynQuest0KillSerynsShadow_Init () {
  gt_SerynQuest0KillSerynsShadow = TriggerCreate("gt_SerynQuest0KillSerynsShadow_Func");
  TriggerAddEventUnitDied(gt_SerynQuest0KillSerynsShadow, UnitRefFromVariable("gv_shadowSeryn"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Seryn Quest 0 - Reward Accept
//--------------------------------------------------------------------------------------------------
bool gt_SerynQuest0RewardAccept_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (EventDialogControl() != lr_player.quests.rewardDialog.accept) {
      return false;
    }
    if (!libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(UnitFromId(2671)), 3.0))) {
      return false;
    }
    if (lr_player.quests.serynQuests[0].progress != 2) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.quests.serynQuests[0].progress = 3;
  BankValueSetFromInt(lr_player.banks.dragonBank, "SQ-Seryn0-0", lr_player.hand, lr_player.quests.serynQuests[0].progress);
  ObjectiveDestroy(lr_player.quests.serynQuests[0].objective);
  lr_player.quests.serynQuests[0].objective = c_invalidObjectiveId;
  gf_CloseRewardDialog(lr_player);
  gf_AddExperience(lr_player.dragon, 3250.0);
  UnitInventoryCreate(lr_player.dragon, "16M04N19E01R01");
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/002A804B"));
  TextTagDestroy(lr_player.quests.serynQuests[0].textTag);
  libNtve_gf_AttachModelToUnit(UnitFromId(2671), "ArtifactActivated", "Ref_Origin");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SerynQuest0RewardAccept_Init () {
  gt_SerynQuest0RewardAccept = TriggerCreate("gt_SerynQuest0RewardAccept_Func");
  TriggerAddEventDialogControl(gt_SerynQuest0RewardAccept, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Chaos Unit Types
//--------------------------------------------------------------------------------------------------
bool gt_ChaosUnitTypes_Func (bool testConds, bool runActions) {
  int i;

  if (!runActions) {
    return true;
  }
     for(i = 0; i<=18; i += 1){
    gv_enemyUnitTypes[i] = "Impetus";
  }
  //gv_enemyUnitTypes[0] = "Impetus";
  //gv_enemyUnitTypes[1] = "Impetus";
  //gv_enemyUnitTypes[2] = "Impetus";
  //gv_enemyUnitTypes[3] = "Impetus";
  //gv_enemyUnitTypes[4] = "Impetus";
  //gv_enemyUnitTypes[5] = "Impetus";
  //gv_enemyUnitTypes[6] = "Impetus";
  //gv_enemyUnitTypes[7] = "Impetus";
  //gv_enemyUnitTypes[8] = "Impetus";
  //gv_enemyUnitTypes[9] = "Impetus";
  //gv_enemyUnitTypes[10] = "Impetus";
  //gv_enemyUnitTypes[11] = "Impetus";
  //gv_enemyUnitTypes[12] = "Impetus";
  //gv_enemyUnitTypes[13] = "Impetus";
  //gv_enemyUnitTypes[14] = "Impetus";
  //gv_enemyUnitTypes[15] = "Impetus";
  //gv_enemyUnitTypes[16] = "Impetus";
  //gv_enemyUnitTypes[17] = "Impetus";
  //gv_enemyUnitTypes[18] = "Impetus";
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ChaosUnitTypes_Init () {
  int i = 0;
  gt_ChaosUnitTypes = TriggerCreate("gt_ChaosUnitTypes_Func");
  
}
//--------------------------------------------------------------------------------------------------
// Trigger: Syrital's Hatch
//--------------------------------------------------------------------------------------------------
bool gt_SyritalsHatch_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((UnitGetType(EventUnit()) == "SyritalsTalons"))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_syritalsHatchActive = true;
  if (gv_syritalsHatchActive && gv_guardiansHatchActive && gv_sremagsisHatchActive && gv_machinaDePlagamsHatchActive && gv_zauberersHatchActive) {
    SoundPlay(SoundLink("THorner03Tychus00046", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6138A008"));
    TriggerEnable(gt_Chaos, true);
    TriggerExecute(gt_ChaosUnitTypes, false, false);
    UnitRemove(gv_zauberersCrystal);
  }
  else {
    SoundPlay(SoundLink("Hatchery_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyritalsHatch_Init () {
  gt_SyritalsHatch = TriggerCreate("gt_SyritalsHatch_Func");
  TriggerAddEventUnitRegion(gt_SyritalsHatch, null, RegionFromId(287), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Guardian's Hatch
//--------------------------------------------------------------------------------------------------
bool gt_GuardiansHatch_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetType(EventUnit()) == "TolicsFireOrb") || (UnitGetType(EventUnit()) == "KorlicsFrozenBlade") || (UnitGetType(EventUnit()) == "MadawcsElectricArmor")))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_guardiansHatchActive = true;
  if (gv_syritalsHatchActive && gv_guardiansHatchActive && gv_sremagsisHatchActive && gv_machinaDePlagamsHatchActive && gv_zauberersHatchActive) {
    SoundPlay(SoundLink("THorner03Tychus00046", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2872F80B"));
    TriggerEnable(gt_Chaos, true);
    TriggerExecute(gt_ChaosUnitTypes, false, false);
    UnitRemove(gv_zauberersCrystal);
  }
  else {
    SoundPlay(SoundLink("Hatchery_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GuardiansHatch_Init () {
  gt_GuardiansHatch = TriggerCreate("gt_GuardiansHatch_Func");
  TriggerAddEventUnitRegion(gt_GuardiansHatch, null, RegionFromId(286), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi's Hatch
//--------------------------------------------------------------------------------------------------
bool gt_SremagsisHatch_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetType(EventUnit()) == "SremagsisTentacles")))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_sremagsisHatchActive = true;
  if (gv_syritalsHatchActive && gv_guardiansHatchActive && gv_sremagsisHatchActive && gv_machinaDePlagamsHatchActive && gv_zauberersHatchActive) {
    SoundPlay(SoundLink("THorner03Tychus00046", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F92D1A24"));
    TriggerEnable(gt_Chaos, true);
    TriggerExecute(gt_ChaosUnitTypes, false, false);
    UnitRemove(gv_zauberersCrystal);
  }
  else {
    SoundPlay(SoundLink("Hatchery_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SremagsisHatch_Init () {
  gt_SremagsisHatch = TriggerCreate("gt_SremagsisHatch_Func");
  TriggerAddEventUnitRegion(gt_SremagsisHatch, null, RegionFromId(285), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam's Hatch
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamsHatch_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetType(EventUnit()) == "PlagamArmor")))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_machinaDePlagamsHatchActive = true;
  if (gv_syritalsHatchActive && gv_guardiansHatchActive && gv_sremagsisHatchActive && gv_machinaDePlagamsHatchActive && gv_zauberersHatchActive) {
    SoundPlay(SoundLink("THorner03Tychus00046", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/76349601"));
    TriggerEnable(gt_Chaos, true);
    TriggerExecute(gt_ChaosUnitTypes, false, false);
    UnitRemove(gv_zauberersCrystal);
  }
  else {
    SoundPlay(SoundLink("Hatchery_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamsHatch_Init () {
  gt_MachinaDePlagamsHatch = TriggerCreate("gt_MachinaDePlagamsHatch_Func");
  TriggerAddEventUnitRegion(gt_MachinaDePlagamsHatch, null, RegionFromId(284), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Zauberer's Hatch
//--------------------------------------------------------------------------------------------------
bool gt_ZauberersHatch_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetType(EventUnit()) == "FluxCapacitor") || (UnitGetType(EventUnit()) == "OblivionArmor") || (UnitGetType(EventUnit()) == "OblivionClaws") || (UnitGetType(EventUnit()) == "OblivionSpines")))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_zauberersHatchActive = true;
  if (gv_syritalsHatchActive && gv_guardiansHatchActive && gv_sremagsisHatchActive && gv_machinaDePlagamsHatchActive && gv_zauberersHatchActive) {
    SoundPlay(SoundLink("THorner03Tychus00046", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/53604CFB"));
    TriggerEnable(gt_Chaos, true);
    TriggerExecute(gt_ChaosUnitTypes, false, false);
    UnitRemove(gv_zauberersCrystal);
  }
  else {
    SoundPlay(SoundLink("Hatchery_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ZauberersHatch_Init () {
  gt_ZauberersHatch = TriggerCreate("gt_ZauberersHatch_Func");
  TriggerAddEventUnitRegion(gt_ZauberersHatch, null, RegionFromId(283), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Arena Text 1
//--------------------------------------------------------------------------------------------------
bool gt_SpawnArenaText1_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/D73DB820"), 24, PointFromId(840), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnArenaText1_Init () {
  gt_SpawnArenaText1 = TriggerCreate("gt_SpawnArenaText1_Func");
  TriggerAddEventUnitRangePoint(gt_SpawnArenaText1, null, PointFromId(840), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Arena Text 2
//--------------------------------------------------------------------------------------------------
bool gt_SpawnArenaText2_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/3F0C33B9"), 24, PointFromId(841), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnArenaText2_Init () {
  gt_SpawnArenaText2 = TriggerCreate("gt_SpawnArenaText2_Func");
  TriggerAddEventUnitRangePoint(gt_SpawnArenaText2, null, PointFromId(841), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Leaves Arena 1
//--------------------------------------------------------------------------------------------------
bool gt_HeroLeavesArena1_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((!gv_matchGoingOn && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitGroupRemove(gv_contestant1Group, gv_contestant1);
  gv_contestant1 = UnitFromId(632);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroLeavesArena1_Init () {
  gt_HeroLeavesArena1 = TriggerCreate("gt_HeroLeavesArena1_Func");
  TriggerAddEventUnitRegion(gt_HeroLeavesArena1, UnitRefFromVariable("gv_contestant1"), RegionFromId(80), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Leaves Arena 2
//--------------------------------------------------------------------------------------------------
bool gt_HeroLeavesArena2_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((!gv_matchGoingOn && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitGroupRemove(gv_contestant2Group, gv_contestant2);
  gv_contestant2 = UnitFromId(630);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroLeavesArena2_Init () {
  gt_HeroLeavesArena2 = TriggerCreate("gt_HeroLeavesArena2_Func");
  TriggerAddEventUnitRegion(gt_HeroLeavesArena2, UnitRefFromVariable("gv_contestant2"), RegionFromId(81), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Enters Arena 1
//--------------------------------------------------------------------------------------------------
bool gt_HeroEntersArena1_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGroupCount(gv_contestant1Group, c_unitCountAlive) == 0) && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) && UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_contestant1 = EventUnit();
  UnitGroupAdd(gv_contestant1Group, gv_contestant1);
  if (!gv_matchGoingOn) {
    if ((UnitGroupCount(gv_contestant2Group, c_unitCountAlive) == 1)) {
      gv_players[(UnitGetOwner(gv_contestant1) - 1)].respawnPoint = PointFromId(799);
      gv_players[(UnitGetOwner(gv_contestant2) - 1)].respawnPoint = PointFromId(799);
      libNtve_gf_PauseUnit(gv_contestant1, true);
      libNtve_gf_PauseUnit(gv_contestant2, true);
      gv_matchGoingOn = true;
      TextTagDestroy(gv_arenaWaitingTextTag);
      UnitSetPosition(gv_contestant1, RegionGetCenter(RegionFromId(78)), false);
      UnitSetPosition(gv_contestant2, RegionGetCenter(RegionFromId(79)), false);
      CameraLockInput(UnitGetOwner(gv_contestant1), true);
      CameraLockInput(UnitGetOwner(gv_contestant2), true);
      CameraPan(UnitGetOwner(gv_contestant1), RegionGetCenter(RegionFromId(78)), 0.0, -1, 10, false);
      CameraPan(UnitGetOwner(gv_contestant2), RegionGetCenter(RegionFromId(79)), 0.0, -1, 10, false);
      UnitIssueOrder(gv_contestant1, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
      UnitIssueOrder(gv_contestant2, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
      UnitIssueOrder(gv_contestant1, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
      UnitIssueOrder(gv_contestant2, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
      UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(UnitGetOwner(gv_contestant1)) + (StringExternal("Param/Value/FD8424B6") + PlayerName(UnitGetOwner(gv_contestant2)))));
      Wait(4.0, c_timeReal);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00020", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00020", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/CBDB183B"));
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/E65F377F"));
      Wait(1.0, c_timeReal);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00019", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00019", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/D680D068"));
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/7DAB2D45"));
      Wait(1.0, c_timeReal);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00018", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00018", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/A40C6F3E"));
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/92A1F572"));
      Wait(1.0, c_timeReal);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00017", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00017", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/E057B9BE"));
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/1601047B"));
      Wait(1.0, c_timeReal);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00016", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00016", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/C30FACB4"));
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/C71179B0"));
      Wait(1.0, c_timeReal);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00012", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00012", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/E44FA671"));
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/4156CCA3"));
      libNtve_gf_SetAlliance(UnitGetOwner(gv_contestant1), UnitGetOwner(gv_contestant2), libNtve_ge_AllianceSetting_Enemy);
      libNtve_gf_PauseUnit(gv_contestant1, false);
      libNtve_gf_PauseUnit(gv_contestant2, false);
      CameraLockInput(UnitGetOwner(gv_contestant1), false);
      CameraLockInput(UnitGetOwner(gv_contestant2), false);
      VisRevealerCreate(1, RegionFromId(77));
      VisRevealerCreate(2, RegionFromId(77));
      VisRevealerCreate(3, RegionFromId(77));
      VisRevealerCreate(4, RegionFromId(77));
      PlayerGroupAdd(gv_playersintheArena, UnitGetOwner(gv_contestant1));
      PlayerGroupAdd(gv_playersintheArena, UnitGetOwner(gv_contestant2));
    }
    else {
      TextTagCreate(StringExternal("Param/Value/C3ABD438"), 24, PointFromId(842), 1.0, true, true, PlayerGroupAll());
      gv_arenaWaitingTextTag = TextTagLastCreated();
      TextTagSetTime(gv_arenaWaitingTextTag, c_textTagTimeDuration, 5.0);
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroEntersArena1_Init () {
  gt_HeroEntersArena1 = TriggerCreate("gt_HeroEntersArena1_Func");
  TriggerAddEventUnitRegion(gt_HeroEntersArena1, UnitRefFromVariable("gv_players[0].dragon"), RegionFromId(80), true);
  TriggerAddEventUnitRegion(gt_HeroEntersArena1, UnitRefFromVariable("gv_players[1].dragon"), RegionFromId(80), true);
  TriggerAddEventUnitRegion(gt_HeroEntersArena1, UnitRefFromVariable("gv_players[2].dragon"), RegionFromId(80), true);
  TriggerAddEventUnitRegion(gt_HeroEntersArena1, UnitRefFromVariable("gv_players[3].dragon"), RegionFromId(80), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Enters Arena 2
//--------------------------------------------------------------------------------------------------
bool gt_HeroEntersArena2_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGroupCount(gv_contestant2Group, c_unitCountAlive) == 0) && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) && UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_contestant2 = EventUnit();
  UnitGroupAdd(gv_contestant2Group, gv_contestant2);
  if (!gv_matchGoingOn) {
    if ((UnitGroupCount(gv_contestant1Group, c_unitCountAlive) == 1)) {
      gv_players[(UnitGetOwner(gv_contestant1) - 1)].respawnPoint = PointFromId(799);
      gv_players[(UnitGetOwner(gv_contestant2) - 1)].respawnPoint = PointFromId(799);
      libNtve_gf_PauseUnit(gv_contestant1, true);
      libNtve_gf_PauseUnit(gv_contestant2, true);
      gv_matchGoingOn = true;
      TextTagDestroy(gv_arenaWaitingTextTag);
      UnitSetPosition(gv_contestant1, RegionGetCenter(RegionFromId(78)), false);
      UnitSetPosition(gv_contestant2, RegionGetCenter(RegionFromId(79)), false);
      CameraLockInput(UnitGetOwner(gv_contestant1), true);
      CameraLockInput(UnitGetOwner(gv_contestant2), true);
      CameraPan(UnitGetOwner(gv_contestant1), RegionGetCenter(RegionFromId(78)), 0.0, -1, 10, false);
      CameraPan(UnitGetOwner(gv_contestant2), RegionGetCenter(RegionFromId(79)), 0.0, -1, 10, false);
      UnitIssueOrder(gv_contestant1, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
      UnitIssueOrder(gv_contestant2, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
      UnitIssueOrder(gv_contestant1, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
      UnitIssueOrder(gv_contestant2, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
      UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(UnitGetOwner(gv_contestant1)) + (StringExternal("Param/Value/515280CE") + PlayerName(UnitGetOwner(gv_contestant2)))));
      Wait(4.0, c_timeReal);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00020", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00020", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/486C1EB8"));
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/F8E544B6"));
      Wait(1.0, c_timeReal);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00019", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00019", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/E5B6B20B"));
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/8DD508CD"));
      Wait(1.0, c_timeReal);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00018", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00018", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/4B31DF10"));
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/D11ADA5E"));
      Wait(1.0, c_timeReal);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00017", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00017", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/4DE1EE78"));
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/4F348A52"));
      Wait(1.0, c_timeReal);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00016", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00016", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/313BFA96"));
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/3B3F826B"));
      Wait(1.0, c_timeReal);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00012", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant1)), 100.0, 0.0);
      SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00012", -1), PlayerGroupSingle(UnitGetOwner(gv_contestant2)), 100.0, 0.0);
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, StringExternal("Param/Value/10A1BB94"));
      UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, StringExternal("Param/Value/1A107626"));
      libNtve_gf_SetAlliance(UnitGetOwner(gv_contestant1), UnitGetOwner(gv_contestant2), libNtve_ge_AllianceSetting_Enemy);
      libNtve_gf_PauseUnit(gv_contestant1, false);
      libNtve_gf_PauseUnit(gv_contestant2, false);
      CameraLockInput(UnitGetOwner(gv_contestant1), false);
      CameraLockInput(UnitGetOwner(gv_contestant2), false);
      VisRevealerCreate(1, RegionFromId(77));
      VisRevealerCreate(2, RegionFromId(77));
      VisRevealerCreate(3, RegionFromId(77));
      VisRevealerCreate(4, RegionFromId(77));
    }
    else {
      TextTagCreate(StringExternal("Param/Value/3F2866C3"), 24, PointFromId(842), 1.0, true, true, PlayerGroupAll());
      gv_arenaWaitingTextTag = TextTagLastCreated();
      TextTagSetTime(gv_arenaWaitingTextTag, c_textTagTimeDuration, 5.0);
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroEntersArena2_Init () {
  gt_HeroEntersArena2 = TriggerCreate("gt_HeroEntersArena2_Func");
  TriggerAddEventUnitRegion(gt_HeroEntersArena2, UnitRefFromVariable("gv_players[0].dragon"), RegionFromId(81), true);
  TriggerAddEventUnitRegion(gt_HeroEntersArena2, UnitRefFromVariable("gv_players[1].dragon"), RegionFromId(81), true);
  TriggerAddEventUnitRegion(gt_HeroEntersArena2, UnitRefFromVariable("gv_players[2].dragon"), RegionFromId(81), true);
  TriggerAddEventUnitRegion(gt_HeroEntersArena2, UnitRefFromVariable("gv_players[3].dragon"), RegionFromId(81), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Contestant 1 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Contestant1Dies_Func (bool testConds, bool runActions) {

  fixed lv_winningAmmount;


  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_players[(UnitGetOwner(gv_contestant2) - 1)].stats.arena.wins += 1;
  gv_players[(UnitGetOwner(gv_contestant1) - 1)].stats.arena.losses += 1;
  libNtve_gf_SetAlliance(UnitGetOwner(gv_contestant1), UnitGetOwner(gv_contestant2), libNtve_ge_AllianceSetting_AllyWithSharedVision);
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(UnitGetOwner(gv_contestant2)) + (StringExternal("Param/Value/E5ACB15C") + (IntToText(gv_players[(UnitGetOwner(gv_contestant2) - 1)].stats.level) + (StringExternal("Param/Value/A43FC730") + (PlayerName(UnitGetOwner(gv_contestant1)) + (StringExternal("Param/Value/54DD5501") + (IntToText(gv_players[(UnitGetOwner(gv_contestant1) - 1)].stats.level) + (StringExternal("Param/Value/F17C3378") + (FixedToText(UnitGetPropertyFixed(gv_contestant2, c_unitPropLife, c_unitPropCurrent), 2) + StringExternal("Param/Value/A494C013")))))))))));
  UnitSetPropertyFixed(gv_contestant2, c_unitPropLifePercent, 100.0);
  UnitSetPropertyFixed(gv_contestant2, c_unitPropEnergyPercent, 100.0);
  UnitSetPropertyFixed(gv_contestant2, c_unitPropShieldsPercent, 100.0);
  lv_winningAmmount = (100.0 + (UnitGetPropertyFixed(gv_contestant1, c_unitPropLevel, c_unitPropCurrent) - UnitGetPropertyFixed(gv_contestant2, c_unitPropLevel, c_unitPropCurrent)));
  UnitGroupRemove(gv_contestant1Group, gv_contestant1);
  gv_contestant1 = UnitFromId(630);
  UnitSetPosition(gv_contestant2, PointFromId(844), false);
  UnitIssueOrder(gv_contestant2, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
  UnitIssueOrder(gv_contestant2, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  CameraPan(UnitGetOwner(gv_contestant2), PointFromId(844), 0.0, -1, 10, false);
  PlayerModifyPropertyInt(UnitGetOwner(gv_contestant2), c_playerPropVespene, c_playerPropOperAdd, FixedToInt(lv_winningAmmount));
  UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant2)), c_messageAreaSubtitle, (StringExternal("Param/Value/F7D113B0") + (FixedToText(lv_winningAmmount, 0) + StringExternal("Param/Value/AE0C2D5D"))));
  PlayerGroupClear(gv_playersintheArena);
  UnitGroupRemove(gv_contestant2Group, gv_contestant2);
  gv_contestant2 = null;
  gv_matchGoingOn = false;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Contestant1Dies_Init () {
  gt_Contestant1Dies = TriggerCreate("gt_Contestant1Dies_Func");
  TriggerAddEventUnitDied(gt_Contestant1Dies, UnitRefFromVariable("gv_contestant1"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Contestant 2 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Contestant2Dies_Func (bool testConds, bool runActions) {

  fixed lv_winningAmmount;


  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_players[(UnitGetOwner(gv_contestant1) - 1)].stats.arena.wins += 1;
  gv_players[(UnitGetOwner(gv_contestant2) - 1)].stats.arena.losses += 1;
  libNtve_gf_SetAlliance(UnitGetOwner(gv_contestant1), UnitGetOwner(gv_contestant2), libNtve_ge_AllianceSetting_AllyWithSharedVision);
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(UnitGetOwner(gv_contestant1)) + (StringExternal("Param/Value/F48BA064") + (IntToText(gv_players[(UnitGetOwner(gv_contestant1) - 1)].stats.level) + (StringExternal("Param/Value/E1AF3427") + (PlayerName(UnitGetOwner(gv_contestant2)) + (StringExternal("Param/Value/D63E8112") + (IntToText(gv_players[(UnitGetOwner(gv_contestant2) - 1)].stats.level) + (StringExternal("Param/Value/EC586C99") + (FixedToText(UnitGetPropertyFixed(gv_contestant1, c_unitPropLife, c_unitPropCurrent), 2) + StringExternal("Param/Value/9B709EAA")))))))))));
  UnitSetPropertyFixed(gv_contestant1, c_unitPropLifePercent, 100.0);
  UnitSetPropertyFixed(gv_contestant1, c_unitPropEnergyPercent, 100.0);
  UnitSetPropertyFixed(gv_contestant1, c_unitPropShieldsPercent, 100.0);
  lv_winningAmmount = (100.0 + (UnitGetPropertyFixed(gv_contestant2, c_unitPropLevel, c_unitPropCurrent) - UnitGetPropertyFixed(gv_contestant1, c_unitPropLevel, c_unitPropCurrent)));
  UnitGroupRemove(gv_contestant2Group, gv_contestant2);
  gv_contestant2 = UnitFromId(632);
  UnitSetPosition(gv_contestant1, PointFromId(844), false);
  UnitIssueOrder(gv_contestant1, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
  UnitIssueOrder(gv_contestant1, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  CameraPan(UnitGetOwner(gv_contestant1), PointFromId(844), 0.0, -1, 10, false);
  PlayerModifyPropertyInt(UnitGetOwner(gv_contestant1), c_playerPropVespene, c_playerPropOperAdd, FixedToInt(lv_winningAmmount));
  UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gv_contestant1)), c_messageAreaSubtitle, (StringExternal("Param/Value/D7C69713") + (FixedToText(lv_winningAmmount, 0) + StringExternal("Param/Value/B81843D9"))));
  PlayerGroupClear(gv_playersintheArena);
  UnitGroupRemove(gv_contestant1Group, gv_contestant1);
  gv_contestant1 = null;
  gv_matchGoingOn = false;
  CameraPan(UnitGetOwner(gv_contestant1), PointFromId(844), 0.0, -1, 10, false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Contestant2Dies_Init () {
  gt_Contestant2Dies = TriggerCreate("gt_Contestant2Dies_Func");
  TriggerAddEventUnitDied(gt_Contestant2Dies, UnitRefFromVariable("gv_contestant2"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Open Inventory when click on stash
//--------------------------------------------------------------------------------------------------
bool gt_OpenInventorywhenclickonstash_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (testConds) {
    if (!UnitAbilityExists(EventUnit(), "StashInventory")) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash1", c_techCountCompleteOnly) > 0)) {
    UnitInventoryContainerOpen(lr_player.playerGroupSingle, EventUnit(), 1, true);
  }
  else {
    UnitInventoryContainerOpen(lr_player.playerGroupSingle, EventUnit(), 1, false);
  }
  if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash12", c_techCountCompleteOnly) > 0)) {
    UnitInventoryContainerOpen(lr_player.playerGroupSingle, EventUnit(), 2, true);
  }
  else {
    UnitInventoryContainerOpen(lr_player.playerGroupSingle, EventUnit(), 2, false);
  }
  if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash13", c_techCountCompleteOnly) > 0)) {
    UnitInventoryContainerOpen(lr_player.playerGroupSingle, EventUnit(), 3, true);
  }
  else {
    UnitInventoryContainerOpen(lr_player.playerGroupSingle, EventUnit(), 3, false);
  }
  if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash14", c_techCountCompleteOnly) > 0)) {
    UnitInventoryContainerOpen(lr_player.playerGroupSingle, EventUnit(), 4, true);
  }
  else {
    UnitInventoryContainerOpen(lr_player.playerGroupSingle, EventUnit(), 4, false);
  }
  if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash15", c_techCountCompleteOnly) > 0)) {
    UnitInventoryContainerOpen(lr_player.playerGroupSingle, EventUnit(), 5, true);
  }
  else {
    UnitInventoryContainerOpen(lr_player.playerGroupSingle, EventUnit(), 5, false);
  }
  if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash16", c_techCountCompleteOnly) > 0)) {
    UnitInventoryContainerOpen(lr_player.playerGroupSingle, EventUnit(), 6, true);
  }
  else {
    UnitInventoryContainerOpen(lr_player.playerGroupSingle, EventUnit(), 6, false);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OpenInventorywhenclickonstash_Init () {
  gt_OpenInventorywhenclickonstash = TriggerCreate("gt_OpenInventorywhenclickonstash_Func");
  TriggerAddEventUnitSelected(gt_OpenInventorywhenclickonstash, UnitRefFromVariable("gv_players[0].stash.stashUnit"), c_playerAny, true);
  TriggerAddEventUnitSelected(gt_OpenInventorywhenclickonstash, UnitRefFromVariable("gv_players[1].stash.stashUnit"), c_playerAny, true);
  TriggerAddEventUnitSelected(gt_OpenInventorywhenclickonstash, UnitRefFromVariable("gv_players[2].stash.stashUnit"), c_playerAny, true);
  TriggerAddEventUnitSelected(gt_OpenInventorywhenclickonstash, UnitRefFromVariable("gv_players[3].stash.stashUnit"), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Drop stuff not unlocked yet
//--------------------------------------------------------------------------------------------------
bool gt_Dropstuffnotunlockedyet_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash1", c_techCountCompleteOnly) == 0)) {
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 1)) {
        UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
        UnitInventoryRemove(UnitGroupLoopCurrent());
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/79C3CACF"));
      }
    }
    UnitGroupLoopEnd();
  }
  if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash12", c_techCountCompleteOnly) == 0)) {
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 2)) {
        UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
        UnitInventoryRemove(UnitGroupLoopCurrent());
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/8A5A42C4"));
      }
    }
    UnitGroupLoopEnd();
  }
  if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash13", c_techCountCompleteOnly) == 0)) {
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
        UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
        UnitInventoryRemove(UnitGroupLoopCurrent());
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/26EAADF9"));
      }
    }
    UnitGroupLoopEnd();
  }
  if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash14", c_techCountCompleteOnly) == 0)) {
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 4)) {
        UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
        UnitInventoryRemove(UnitGroupLoopCurrent());
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/BFCA3806"));
      }
    }
    UnitGroupLoopEnd();
  }
  if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash15", c_techCountCompleteOnly) == 0)) {
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 5)) {
        UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
        UnitInventoryRemove(UnitGroupLoopCurrent());
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/52EA9DC9"));
      }
    }
    UnitGroupLoopEnd();
  }
  if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Stash16", c_techCountCompleteOnly) == 0)) {
    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 6)) {
        UnitInventoryCreate(EventUnit(), UnitGetType(UnitGroupLoopCurrent()));
        UnitInventoryRemove(UnitGroupLoopCurrent());
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/CC44A819"));
      }
    }
    UnitGroupLoopEnd();
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Dropstuffnotunlockedyet_Init () {
  gt_Dropstuffnotunlockedyet = TriggerCreate("gt_Dropstuffnotunlockedyet_Func");
  TriggerAddEventUnitInventoryChange(gt_Dropstuffnotunlockedyet, UnitRefFromVariable("gv_players[0].stash.stashUnit"), c_unitInventoryChangeMoves, null);
  TriggerAddEventUnitInventoryChange(gt_Dropstuffnotunlockedyet, UnitRefFromVariable("gv_players[1].stash.stashUnit"), c_unitInventoryChangeMoves, null);
  TriggerAddEventUnitInventoryChange(gt_Dropstuffnotunlockedyet, UnitRefFromVariable("gv_players[2].stash.stashUnit"), c_unitInventoryChangeMoves, null);
  TriggerAddEventUnitInventoryChange(gt_Dropstuffnotunlockedyet, UnitRefFromVariable("gv_players[3].stash.stashUnit"), c_unitInventoryChangeMoves, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Potion Hotkey P1
//--------------------------------------------------------------------------------------------------
bool gt_PotionHotkeyP1_Func (bool testConds, bool runActions) {
  int lv_iPI;
  int lv_iP;
  unit lv_sHP;
  unit lv_mHP;
  unit lv_lHP;
  unit lv_gHP;


  if (!runActions) {
    return true;
  }
  lv_iPI = 0;
  lv_iP = 1;
  UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_iPI].dragon));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if ((UnitGetType(UnitGroupLoopCurrent()) == "SmallHealthPotion")) {
      lv_sHP = UnitGroupLoopCurrent();
    }
    else {
      if ((UnitGetType(UnitGroupLoopCurrent()) == "MediumHealthPotion")) {
        lv_mHP = UnitGroupLoopCurrent();
      }
      else {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "LargeHealthPotion")) {
          lv_lHP = UnitGroupLoopCurrent();
        }
        else {
          if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandHealthPotion")) {
            lv_gHP = UnitGroupLoopCurrent();
          }
        }
      }
    }
  }
  UnitGroupLoopEnd();
  if (((lv_sHP != null) || (lv_mHP != null) || (lv_lHP != null) || (lv_gHP != null))) {
    if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) != 0.0)) {
      if ((UnitGetCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName) <= 0.0)) {
        if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 0.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 100.0)) {
          if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0) && (lv_sHP != null)) {
            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
            UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
            TextTagCreate(StringExternal("Param/Value/BCDAA2DF"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
          }
          else {
            if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0) && (lv_mHP != null)) {
              UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
              UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
              TextTagCreate(StringExternal("Param/Value/AA4C7E34"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
              gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
              TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
              TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
              TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
              UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
            }
            else {
              if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0) && (lv_lHP != null)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
                TextTagCreate(StringExternal("Param/Value/6C6D61A4"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0) && (lv_gHP != null)) {
                  UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                  UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                  TextTagCreate(StringExternal("Param/Value/67A573EC"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                  TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                }
              }
            }
          }
        }
        else {
          if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 100.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 250.0)) {
            if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0) && (lv_mHP != null)) {
              UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
              UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
              TextTagCreate(StringExternal("Param/Value/35007132"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
              gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
              TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
              TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
              TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
              UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
            }
            else {
              if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0) && (lv_lHP != null)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
                TextTagCreate(StringExternal("Param/Value/56B61472"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0) && (lv_gHP != null)) {
                  UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                  UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                  TextTagCreate(StringExternal("Param/Value/8BE2918B"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                  if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0) && (lv_sHP != null)) {
                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                    UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
                    TextTagCreate(StringExternal("Param/Value/3D62AC12"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                  }
                  else {
                    TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  }
                }
              }
            }
          }
          else {
            if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 250.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 500.0)) {
              if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0) && (lv_lHP != null)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
                TextTagCreate(StringExternal("Param/Value/36717869"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0) && (lv_gHP != null)) {
                  UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                  UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                  TextTagCreate(StringExternal("Param/Value/B988CA39"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                  if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0) && (lv_mHP != null)) {
                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                    UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
                    TextTagCreate(StringExternal("Param/Value/04941F90"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                  }
                  else {
                    if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0) && (lv_sHP != null)) {
                      UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                      UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
                      TextTagCreate(StringExternal("Param/Value/EAF583BC"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                      gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                      TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                      TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                      TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                      UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                    }
                    else {
                      TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                      gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                      TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                      TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                      TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    }
                  }
                }
              }
            }
            else {
              if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 500.0)) {
                if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0) && (lv_gHP != null)) {
                  UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                  UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                  TextTagCreate(StringExternal("Param/Value/6D80E3E6"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                  if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0) && (lv_lHP != null)) {
                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                    UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
                    TextTagCreate(StringExternal("Param/Value/CF16A979"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                  }
                  else {
                    if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0) && (lv_mHP != null)) {
                      UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                      UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
                      TextTagCreate(StringExternal("Param/Value/3A0312A1"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                      gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                      TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                      TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                      TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                      UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                    }
                    else {
                      if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0) && (lv_sHP != null)) {
                        UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                        UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
                        TextTagCreate(StringExternal("Param/Value/0518148A"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                        UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                      }
                      else {
                        TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else {
        TextTagCreate(StringExternal("Param/Value/1F45E83A"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
        gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
        TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
        TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
        TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
      }
    }
    else {
      TextTagCreate(StringExternal("Param/Value/F6872929"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
      gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
      TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
      TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
      TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
    }
  }
  else {
    TextTagCreate(StringExternal("Param/Value/BCD98EBD"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PotionHotkeyP1_Init () {
  gt_PotionHotkeyP1 = TriggerCreate("gt_PotionHotkeyP1_Func");
  TriggerAddEventButtonPressed(gt_PotionHotkeyP1, 1, "UsePotion");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Potion Hotkey P2
//--------------------------------------------------------------------------------------------------
bool gt_PotionHotkeyP2_Func (bool testConds, bool runActions) {

  int lv_iPI;
  int lv_iP;
  unit lv_sHP;
  unit lv_mHP;
  unit lv_lHP;
  unit lv_gHP;


  if (!runActions) {
    return true;
  }
  lv_iPI = 1;
  lv_iP = 2;
  UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_iPI].dragon));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if ((UnitGetType(UnitGroupLoopCurrent()) == "SmallHealthPotion")) {
      lv_sHP = UnitGroupLoopCurrent();
    }
    else {
      if ((UnitGetType(UnitGroupLoopCurrent()) == "MediumHealthPotion")) {
        lv_mHP = UnitGroupLoopCurrent();
      }
      else {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "LargeHealthPotion")) {
          lv_lHP = UnitGroupLoopCurrent();
        }
        else {
          if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandHealthPotion")) {
            lv_gHP = UnitGroupLoopCurrent();
          }
        }
      }
    }
  }
  UnitGroupLoopEnd();
  if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) != 0.0)) {
    if ((UnitGetCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName) <= 0.0)) {
      if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 0.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 100.0)) {
        if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0)) {
          UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
          UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
          TextTagCreate(StringExternal("Param/Value/1D045780"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
          gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
          TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
          TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
          TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
          UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
        }
        else {
          if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0)) {
            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
            UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
            TextTagCreate(StringExternal("Param/Value/4647C1FD"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
          }
          else {
            if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0)) {
              UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
              UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
              TextTagCreate(StringExternal("Param/Value/8CCF9F59"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
              gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
              TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
              TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
              TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
              UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
            }
            else {
              if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                TextTagCreate(StringExternal("Param/Value/A3035116"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
              }
            }
          }
        }
      }
      else {
        if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 100.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 250.0)) {
          if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0)) {
            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
            UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
            TextTagCreate(StringExternal("Param/Value/ED6D1F51"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
          }
          else {
            if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0)) {
              UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
              UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
              TextTagCreate(StringExternal("Param/Value/8C1AE928"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
              gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
              TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
              TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
              TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
              UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
            }
            else {
              if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                TextTagCreate(StringExternal("Param/Value/BA9D3D10"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0)) {
                  UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                  UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
                  TextTagCreate(StringExternal("Param/Value/50714DAC"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                  TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                }
              }
            }
          }
        }
        else {
          if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 250.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 500.0)) {
            if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0)) {
              UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
              UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
              TextTagCreate(StringExternal("Param/Value/95D1F36E"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
              gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
              TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
              TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
              TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
              UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
            }
            else {
              if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                TextTagCreate(StringExternal("Param/Value/553CAB51"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0)) {
                  UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                  UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
                  TextTagCreate(StringExternal("Param/Value/187F076C"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                  if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0)) {
                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                    UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
                    TextTagCreate(StringExternal("Param/Value/6AE3D28C"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                  }
                  else {
                    TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  }
                }
              }
            }
          }
          else {
            if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 500.0)) {
              if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                TextTagCreate(StringExternal("Param/Value/DCC6C75B"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0)) {
                  UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                  UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
                  TextTagCreate(StringExternal("Param/Value/E6512FED"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                  if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0)) {
                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                    UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
                    TextTagCreate(StringExternal("Param/Value/BDA99B77"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                  }
                  else {
                    if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0)) {
                      UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                      UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
                      TextTagCreate(StringExternal("Param/Value/A108E2EB"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                      gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                      TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                      TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                      TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                      UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                    }
                    else {
                      TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                      gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                      TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                      TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                      TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
  
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else {
      TextTagCreate(StringExternal("Param/Value/3A4222B0"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
      gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
      TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
      TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
      TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
    }
  }
  else {
    TextTagCreate(StringExternal("Param/Value/5C863F6E"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PotionHotkeyP2_Init () {
  gt_PotionHotkeyP2 = TriggerCreate("gt_PotionHotkeyP2_Func");
  TriggerAddEventButtonPressed(gt_PotionHotkeyP2, 2, "UsePotion");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Potion Hotkey P3
//--------------------------------------------------------------------------------------------------
bool gt_PotionHotkeyP3_Func (bool testConds, bool runActions) {

  int lv_iPI;
  int lv_iP;
  unit lv_sHP;
  unit lv_mHP;
  unit lv_lHP;
  unit lv_gHP;


  if (!runActions) {
    return true;
  }
  lv_iPI = 2;
  lv_iP = 3;
  UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_iPI].dragon));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if ((UnitGetType(UnitGroupLoopCurrent()) == "SmallHealthPotion")) {
      lv_sHP = UnitGroupLoopCurrent();
    }
    else {
      if ((UnitGetType(UnitGroupLoopCurrent()) == "MediumHealthPotion")) {
        lv_mHP = UnitGroupLoopCurrent();
      }
      else {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "LargeHealthPotion")) {
          lv_lHP = UnitGroupLoopCurrent();
        }
        else {
          if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandHealthPotion")) {
            lv_gHP = UnitGroupLoopCurrent();
          }
        }
      }
    }
  }
  UnitGroupLoopEnd();
  if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) != 0.0)) {
    if ((UnitGetCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName) <= 0.0)) {
      if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 0.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 100.0)) {
        if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0)) {
          UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
          UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
          TextTagCreate(StringExternal("Param/Value/CFB458AE"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
          gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
          TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
          TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
          TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
          UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
        }
        else {
          if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0)) {
            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
            UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
            TextTagCreate(StringExternal("Param/Value/5B70970A"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
          }
          else {
            if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0)) {
              UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
              UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
              TextTagCreate(StringExternal("Param/Value/C322E4A6"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
              gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
              TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
              TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
              TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
              UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
            }
            else {
              if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                TextTagCreate(StringExternal("Param/Value/E0D6114B"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
              }
            }
          }
        }
      }
      else {
        if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 100.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 250.0)) {
          if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0)) {
            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
            UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
            TextTagCreate(StringExternal("Param/Value/BA82A05D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
          }
          else {
            if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0)) {
              UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
              UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
              TextTagCreate(StringExternal("Param/Value/6A25F76F"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
              gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
              TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
              TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
              TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
              UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
            }
            else {
              if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                TextTagCreate(StringExternal("Param/Value/56AABACD"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0)) {
                  UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                  UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
                  TextTagCreate(StringExternal("Param/Value/7DCB126A"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                  TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                }
              }
            }
          }
        }
        else {
          if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 250.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 500.0)) {
            if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0)) {
              UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
              UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
              TextTagCreate(StringExternal("Param/Value/5DE1E23C"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
              gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
              TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
              TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
              TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
              UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
            }
            else {
              if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                TextTagCreate(StringExternal("Param/Value/7CD8C421"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0)) {
                  UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                  UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
                  TextTagCreate(StringExternal("Param/Value/904ABFCA"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                  if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0)) {
                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                    UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
                    TextTagCreate(StringExternal("Param/Value/DD307554"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                  }
                  else {
                    TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  }
                }
              }
            }
          }
          else {
            if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 500.0)) {
              if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                TextTagCreate(StringExternal("Param/Value/4D82AEB8"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0)) {
                  UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                  UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
                  TextTagCreate(StringExternal("Param/Value/669315A2"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                  if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0)) {
                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                    UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
                    TextTagCreate(StringExternal("Param/Value/6AFDE531"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                  }
                  else {
                    if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0)) {
                      UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                      UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
                      TextTagCreate(StringExternal("Param/Value/D5C2D65F"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                      gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                      TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                      TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                      TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                      UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                    }
                    else {
                      TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                      gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                      TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                      TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                      TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else {
      TextTagCreate(StringExternal("Param/Value/43CA2959"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
      gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
      TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
      TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
      TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
    }
  }
  else {
    TextTagCreate(StringExternal("Param/Value/65DC86E2"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PotionHotkeyP3_Init () {
  gt_PotionHotkeyP3 = TriggerCreate("gt_PotionHotkeyP3_Func");
  TriggerAddEventButtonPressed(gt_PotionHotkeyP3, 3, "UsePotion");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Potion Hotkey P4
//--------------------------------------------------------------------------------------------------
bool gt_PotionHotkeyP4_Func (bool testConds, bool runActions) {

  int lv_iPI;
  int lv_iP;
  unit lv_sHP;
  unit lv_mHP;
  unit lv_lHP;
  unit lv_gHP;


  if (!runActions) {
    return true;
  }
  lv_iPI = 3;
  lv_iP = 4;
  UnitGroupLoopBegin(UnitInventoryGroup(gv_players[lv_iPI].dragon));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if ((UnitGetType(UnitGroupLoopCurrent()) == "SmallHealthPotion")) {
      lv_sHP = UnitGroupLoopCurrent();
    }
    else {
      if ((UnitGetType(UnitGroupLoopCurrent()) == "MediumHealthPotion")) {
        lv_mHP = UnitGroupLoopCurrent();
      }
      else {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "LargeHealthPotion")) {
          lv_lHP = UnitGroupLoopCurrent();
        }
        else {
          if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandHealthPotion")) {
            lv_gHP = UnitGroupLoopCurrent();
          }
        }
      }
    }
  }
  UnitGroupLoopEnd();
  if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) != 0.0)) {
    if ((UnitGetCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName) <= 0.0)) {
      if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 0.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 100.0)) {
        if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0)) {
          UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
          UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
          TextTagCreate(StringExternal("Param/Value/F02CB623"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
          gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
          TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
          TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
          TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
          UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
        }
        else {
          if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0)) {
            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
            UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
            TextTagCreate(StringExternal("Param/Value/905A669C"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
          }
          else {
            if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0)) {
              UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
              UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
              TextTagCreate(StringExternal("Param/Value/771E3B32"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
              gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
              TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
              TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
              TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
              UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
            }
            else {
              if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                TextTagCreate(StringExternal("Param/Value/C253BDD1"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
              }
            }
          }
        }
      }
      else {
        if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 100.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 250.0)) {
          if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0)) {
            UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
            UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
            TextTagCreate(StringExternal("Param/Value/715A967C"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
            gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
            TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
            TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
            TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
            UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
          }
          else {
            if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0)) {
              UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
              UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
              TextTagCreate(StringExternal("Param/Value/9B7978D5"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
              gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
              TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
              TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
              TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
              UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
            }
            else {
              if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                TextTagCreate(StringExternal("Param/Value/4E0BE1DE"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0)) {
                  UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                  UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
                  TextTagCreate(StringExternal("Param/Value/062C0495"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                  TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                }
              }
            }
          }
        }
        else {
          if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 250.0) && (gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) <= 500.0)) {
            if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0)) {
              UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
              UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
              TextTagCreate(StringExternal("Param/Value/5525CF51"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
              gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
              TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
              TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
              TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
              UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
            }
            else {
              if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                TextTagCreate(StringExternal("Param/Value/C0EE73E8"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0)) {
                  UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                  UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
                  TextTagCreate(StringExternal("Param/Value/639D49EF"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                  if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0)) {
                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                    UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
                    TextTagCreate(StringExternal("Param/Value/2A9B4BEB"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                  }
                  else {
                    TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  }
                }
              }
            }
          }
          else {
            if ((gf_CalculateHealthMissing(gv_players[lv_iPI].dragon) > 500.0)) {
              if ((UnitGetChargeUsed(lv_gHP, gv_stackNames[3]) < 4893.0)) {
                UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "GrandHealthPotion", gv_players[lv_iPI].dragon);
                UnitAddChargeUsed(lv_gHP, gv_stackNames[3], 1.0);
                TextTagCreate(StringExternal("Param/Value/A1267830"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
              }
              else {
                if ((UnitGetChargeUsed(lv_lHP, gv_stackNames[2]) < 4893.0)) {
                  UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "LargeHealthPotion", gv_players[lv_iPI].dragon);
                  UnitAddChargeUsed(lv_lHP, gv_stackNames[2], 1.0);
                  TextTagCreate(StringExternal("Param/Value/A28634A1"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                  gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                  TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                  TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                  TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                  UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                }
                else {
                  if ((UnitGetChargeUsed(lv_mHP, gv_stackNames[1]) < 4893.0)) {
                    UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "MediumHealthPotion", gv_players[lv_iPI].dragon);
                    UnitAddChargeUsed(lv_mHP, gv_stackNames[1], 1.0);
                    TextTagCreate(StringExternal("Param/Value/23E2C494"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                  }
                  else {
                    if ((UnitGetChargeUsed(lv_sHP, gv_stackNames[0]) < 4893.0)) {
                      UnitCreateEffectUnit(gv_players[lv_iPI].dragon, "SmallHealthPotion", gv_players[lv_iPI].dragon);
                      UnitAddChargeUsed(lv_sHP, gv_stackNames[0], 1.0);
                      TextTagCreate(StringExternal("Param/Value/B4D4EA55"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                      gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                      TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                      TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                      TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                      UnitAddCooldown(gv_players[lv_iPI].dragon, gv_potionCooldownName, 10.0);
                    }
                    else {
                      TextTagCreate(StringExternal("Param/Value/00B4574D"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
                      gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
                      TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
                      TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
                      TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else {
      TextTagCreate(StringExternal("Param/Value/68F72793"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
      gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
      TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
      TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
      TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
    }
  }
  else {
    TextTagCreate(StringExternal("Param/Value/6330997A"), 24, UnitGetPosition(gv_players[lv_iPI].dragon), 1.0, true, true, PlayerGroupSingle(lv_iP));
    gv_potionHotkeyTextTag[lv_iPI] = TextTagLastCreated();
    TextTagSetVelocity(gv_potionHotkeyTextTag[lv_iPI], 0.5, 75.0);
    TextTagSetColor(gv_potionHotkeyTextTag[lv_iPI], c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagSetTime(gv_potionHotkeyTextTag[lv_iPI], c_textTagTimeDuration, 2.0);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PotionHotkeyP4_Init () {
  gt_PotionHotkeyP4 = TriggerCreate("gt_PotionHotkeyP4_Func");
  TriggerAddEventButtonPressed(gt_PotionHotkeyP4, 4, "UsePotion");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Grand Orb of Anger Counter
//--------------------------------------------------------------------------------------------------
bool gt_GrandOrbofAngerCounter_Func (bool testConds, bool runActions) {

  int lv_numberofGrandOrbofAnger;


  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitInventoryGroup(gv_players[0].dragon));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 3) && (UnitGetType(UnitGroupLoopCurrent()) == "GrandOrbofAnger")) {
      lv_numberofGrandOrbofAnger += 1;
    }
  }
  UnitGroupLoopEnd();
  gv_grandOrbofAngerCount[0] = lv_numberofGrandOrbofAnger;
  lv_numberofGrandOrbofAnger = 0;
  UnitGroupLoopBegin(UnitInventoryGroup(gv_players[1].dragon));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandOrbofAnger") && (UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
      lv_numberofGrandOrbofAnger += 1;
    }
  }
  UnitGroupLoopEnd();
  gv_grandOrbofAngerCount[1] = lv_numberofGrandOrbofAnger;
  lv_numberofGrandOrbofAnger = 0;
  UnitGroupLoopBegin(UnitInventoryGroup(gv_players[2].dragon));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandOrbofAnger") && (UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
      lv_numberofGrandOrbofAnger += 1;
    }
  }
  UnitGroupLoopEnd();
  gv_grandOrbofAngerCount[2] = lv_numberofGrandOrbofAnger;
  lv_numberofGrandOrbofAnger = 0;
  UnitGroupLoopBegin(UnitInventoryGroup(gv_players[3].dragon));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if ((UnitGetType(UnitGroupLoopCurrent()) == "GrandOrbofAnger") && (UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
      lv_numberofGrandOrbofAnger += 1;
    }
  }
  UnitGroupLoopEnd();
  gv_grandOrbofAngerCount[3] = lv_numberofGrandOrbofAnger;
  lv_numberofGrandOrbofAnger = 0;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GrandOrbofAngerCounter_Init () {
  gt_GrandOrbofAngerCounter = TriggerCreate("gt_GrandOrbofAngerCounter_Func");
  TriggerAddEventTimePeriodic(gt_GrandOrbofAngerCounter, 10.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Grand Orb of Anger Effect P1
//--------------------------------------------------------------------------------------------------
bool gt_GrandOrbofAngerEffectP1_Func (bool testConds, bool runActions) {

  int lv_pI;


  if (!runActions) {
    return true;
  }
  if (!libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(3)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(126)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(127)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(128)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(129)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(130))) {
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(gv_players[lv_pI].dragon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[lv_pI].dragon), (gv_grandOrbofAngerCount[lv_pI] * 4.0)), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_players[lv_pI].dragon), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GrandOrbofAngerEffectP1_Init () {
  gt_GrandOrbofAngerEffectP1 = TriggerCreate("gt_GrandOrbofAngerEffectP1_Func");
  TriggerAddEventTimePeriodic(gt_GrandOrbofAngerEffectP1, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Grand Orb of Anger Effect P2
//--------------------------------------------------------------------------------------------------
bool gt_GrandOrbofAngerEffectP2_Func (bool testConds, bool runActions) {

  int lv_pI;

  lv_pI = 1;

  if (!runActions) {
    return true;
  }
  if (!libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(3)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(126)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(127)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(128)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(129)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(130))) {
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(gv_players[lv_pI].dragon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[lv_pI].dragon), (gv_grandOrbofAngerCount[lv_pI] * 4.0)), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_players[lv_pI].dragon), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GrandOrbofAngerEffectP2_Init () {
  gt_GrandOrbofAngerEffectP2 = TriggerCreate("gt_GrandOrbofAngerEffectP2_Func");
  TriggerAddEventTimePeriodic(gt_GrandOrbofAngerEffectP2, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Grand Orb of Anger Effect P3
//--------------------------------------------------------------------------------------------------
bool gt_GrandOrbofAngerEffectP3_Func (bool testConds, bool runActions) {

  int lv_pI;

  lv_pI = 2;

  if (!runActions) {
    return true;
  }
  if (!libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(3)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(126)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(127)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(128)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(129)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(130))) {
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(gv_players[lv_pI].dragon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[lv_pI].dragon), (gv_grandOrbofAngerCount[lv_pI] * 4.0)), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_players[lv_pI].dragon), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GrandOrbofAngerEffectP3_Init () {
  gt_GrandOrbofAngerEffectP3 = TriggerCreate("gt_GrandOrbofAngerEffectP3_Func");
  TriggerAddEventTimePeriodic(gt_GrandOrbofAngerEffectP3, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Grand Orb of Anger Effect P4
//--------------------------------------------------------------------------------------------------
bool gt_GrandOrbofAngerEffectP4_Func (bool testConds, bool runActions) {

  int lv_pI;

  lv_pI = 3;

  if (!runActions) {
    return true;
  }
  if (!libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(3)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(126)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(127)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(128)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(129)) && !libNtve_gf_UnitInRegion(gv_players[lv_pI].dragon, RegionFromId(130))) {
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(gv_players[lv_pI].dragon), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[lv_pI].dragon), (gv_grandOrbofAngerCount[lv_pI] * 4.0)), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_players[lv_pI].dragon), c_orderQueueAddToEnd);
    }
    UnitGroupLoopEnd();
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GrandOrbofAngerEffectP4_Init () {
  gt_GrandOrbofAngerEffectP4 = TriggerCreate("gt_GrandOrbofAngerEffectP4_Func");
  TriggerAddEventTimePeriodic(gt_GrandOrbofAngerEffectP4, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player 1 Buys Occulus of Warning
//--------------------------------------------------------------------------------------------------
bool gt_Player1BuysOcculusofWarning_Func (bool testConds, bool runActions) {
  int lv_player;

  lv_player = EventPlayer();

  if (testConds) {
    if (!((lv_player == 1))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaSubtitle, StringExternal("Param/Value/45B25FC6"));
  BankValueSetFromFlag(gv_players[0].banks.dragonBank, "OOW", PlayerHandle(1), true);
  gv_players[0].skills.warningOcculus = true;
  TriggerEnable(gt_OcculusPingPlayer1, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Player1BuysOcculusofWarning_Init () {
  gt_Player1BuysOcculusofWarning = TriggerCreate("gt_Player1BuysOcculusofWarning_Func");
  TriggerAddEventUnitAbility(gt_Player1BuysOcculusofWarning, null, AbilityCommand("ShardShop", 0), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player 2 Buys Occulus of Warning
//--------------------------------------------------------------------------------------------------
bool gt_Player2BuysOcculusofWarning_Func (bool testConds, bool runActions) {
  int lv_player;

  lv_player = EventPlayer();

  if (testConds) {
    if (!((lv_player == 2))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(PlayerGroupSingle(2), c_messageAreaSubtitle, StringExternal("Param/Value/52F50202"));
  BankValueSetFromFlag(gv_players[1].banks.dragonBank, "OOW", PlayerHandle(2), true);
  gv_players[1].skills.warningOcculus = true;
  TriggerEnable(gt_OcculusPingPlayer2, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Player2BuysOcculusofWarning_Init () {
  gt_Player2BuysOcculusofWarning = TriggerCreate("gt_Player2BuysOcculusofWarning_Func");
  TriggerAddEventUnitAbility(gt_Player2BuysOcculusofWarning, null, AbilityCommand("ShardShop", 0), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player 3 Buys Occulus of Warning
//--------------------------------------------------------------------------------------------------
bool gt_Player3BuysOcculusofWarning_Func (bool testConds, bool runActions) {
  int lv_player;

  lv_player = EventPlayer();

  if (testConds) {
    if (!((lv_player == 3))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(PlayerGroupSingle(3), c_messageAreaSubtitle, StringExternal("Param/Value/9996DFC0"));
  BankValueSetFromFlag(gv_players[2].banks.dragonBank, "OOW", PlayerHandle(3), true);
  gv_players[2].skills.warningOcculus = true;
  TriggerEnable(gt_OcculusPingPlayer3, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Player3BuysOcculusofWarning_Init () {
  gt_Player3BuysOcculusofWarning = TriggerCreate("gt_Player3BuysOcculusofWarning_Func");
  TriggerAddEventUnitAbility(gt_Player3BuysOcculusofWarning, null, AbilityCommand("ShardShop", 0), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player 4 Buys Occulus of Warning
//--------------------------------------------------------------------------------------------------
bool gt_Player4BuysOcculusofWarning_Func (bool testConds, bool runActions) {
  int lv_player;

  lv_player = EventPlayer();

  if (testConds) {
    if (!((lv_player == 4))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(PlayerGroupSingle(4), c_messageAreaSubtitle, StringExternal("Param/Value/21D5DB64"));
  BankValueSetFromFlag(gv_players[3].banks.dragonBank, "OOW", PlayerHandle(4), true);
  gv_players[3].skills.warningOcculus = true;
  TriggerEnable(gt_OcculusPingPlayer4, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Player4BuysOcculusofWarning_Init () {
  gt_Player4BuysOcculusofWarning = TriggerCreate("gt_Player4BuysOcculusofWarning_Func");
  TriggerAddEventUnitAbility(gt_Player4BuysOcculusofWarning, null, AbilityCommand("ShardShop", 0), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Occulus Ping Player 1
//--------------------------------------------------------------------------------------------------
bool gt_OcculusPingPlayer1_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitGroupAlliance(1, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[0].dragon), 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1000));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(1), "PingNumeric0", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
    PingSetScale(PingLastCreated(), 0.2);
    PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OcculusPingPlayer1_Init () {
  gt_OcculusPingPlayer1 = TriggerCreate("gt_OcculusPingPlayer1_Func");
  TriggerEnable(gt_OcculusPingPlayer1, false);
  TriggerAddEventTimePeriodic(gt_OcculusPingPlayer1, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Occulus Ping Player 2
//--------------------------------------------------------------------------------------------------
bool gt_OcculusPingPlayer2_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitGroupAlliance(2, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[1].dragon), 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1000));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(1), "PingNumeric0", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
    PingSetScale(PingLastCreated(), 0.2);
    PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OcculusPingPlayer2_Init () {
  gt_OcculusPingPlayer2 = TriggerCreate("gt_OcculusPingPlayer2_Func");
  TriggerEnable(gt_OcculusPingPlayer2, false);
  TriggerAddEventTimePeriodic(gt_OcculusPingPlayer2, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Occulus Ping Player 3
//--------------------------------------------------------------------------------------------------
bool gt_OcculusPingPlayer3_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitGroupAlliance(3, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[2].dragon), 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1000));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(1), "PingNumeric0", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
    PingSetScale(PingLastCreated(), 0.2);
    PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OcculusPingPlayer3_Init () {
  gt_OcculusPingPlayer3 = TriggerCreate("gt_OcculusPingPlayer3_Func");
  TriggerEnable(gt_OcculusPingPlayer3, false);
  TriggerAddEventTimePeriodic(gt_OcculusPingPlayer3, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Occulus Ping Player 4
//--------------------------------------------------------------------------------------------------
bool gt_OcculusPingPlayer4_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitGroupAlliance(4, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_players[3].dragon), 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1000));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(1), "PingNumeric0", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
    PingSetScale(PingLastCreated(), 0.2);
    PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OcculusPingPlayer4_Init () {
  gt_OcculusPingPlayer4 = TriggerCreate("gt_OcculusPingPlayer4_Func");
  TriggerEnable(gt_OcculusPingPlayer4, false);
  TriggerAddEventTimePeriodic(gt_OcculusPingPlayer4, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Buys Facet of Revenge
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuysFacetofRevenge_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/EFCF1DB3"));
  BankValueSetFromFlag(lr_player.banks.dragonBank, "FOR", lr_player.hand, true);
  lr_player.skills.revengeFacet = true;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerBuysFacetofRevenge_Init () {
  gt_PlayerBuysFacetofRevenge = TriggerCreate("gt_PlayerBuysFacetofRevenge_Func");
  TriggerAddEventUnitAbility(gt_PlayerBuysFacetofRevenge, null, AbilityCommand("ShardShop", 2), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Buys Crystal of Rebirth
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuysCrystalofRebirth_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/E513C8C7"));
  BankValueSetFromFlag(lr_player.banks.dragonBank, "COR", lr_player.hand, true);
  lr_player.skills.rebirthCrystal = true;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerBuysCrystalofRebirth_Init () {
  gt_PlayerBuysCrystalofRebirth = TriggerCreate("gt_PlayerBuysCrystalofRebirth_Func");
  TriggerAddEventUnitAbility(gt_PlayerBuysCrystalofRebirth, null, AbilityCommand("ShardShop", 1), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Buys Jewel of Return
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuysJewelofReturn_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/95AF4D43"));
  BankValueSetFromFlag(lr_player.banks.dragonBank, "JOR", lr_player.hand, true);
  lr_player.skills.returnJewel = true;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerBuysJewelofReturn_Init () {
  gt_PlayerBuysJewelofReturn = TriggerCreate("gt_PlayerBuysJewelofReturn_Func");
  TriggerAddEventUnitAbility(gt_PlayerBuysJewelofReturn, null, AbilityCommand("ShardShop", 3), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Buys Stone of Protection
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuysStoneofProtection_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/5C4BAF8F"));
  BankValueSetFromFlag(lr_player.banks.dragonBank, "SOR", lr_player.hand, true);
  lr_player.skills.protectionStone = true;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerBuysStoneofProtection_Init () {
  gt_PlayerBuysStoneofProtection = TriggerCreate("gt_PlayerBuysStoneofProtection_Func");
  TriggerAddEventUnitAbility(gt_PlayerBuysStoneofProtection, null, AbilityCommand("ShardShop", 5), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Buys Ring of Quickening
//--------------------------------------------------------------------------------------------------
bool gt_PlayerBuysRingofQuickening_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/8AC4E98E"));
  BankValueSetFromFlag(lr_player.banks.dragonBank, "ROQ", lr_player.hand, true);
  lr_player.skills.quickeningRing = true;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerBuysRingofQuickening_Init () {
  gt_PlayerBuysRingofQuickening = TriggerCreate("gt_PlayerBuysRingofQuickening_Func");
  TriggerAddEventUnitAbility(gt_PlayerBuysRingofQuickening, null, AbilityCommand("ShardShop", 4), c_unitAbilStageComplete, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tolic's Fire Orb Damage Response
//--------------------------------------------------------------------------------------------------
bool gt_TolicsFireOrbDamageResponse_Func (bool testConds, bool runActions) {

  int lv_numberTolicOrbs;
  int lv_randomNumber;
  int lv_thisTag;
  unit lv_playerUnit;
  unit lv_toDamage;

  lv_playerUnit = EventUnit();
  lv_toDamage = EventUnitDamageSourceUnit();

  lv_thisTag = c_textTagNone;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == UnitGetOwner(EventUnitDamageSourceUnit())) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  for (UnitGroupLoopBegin(UnitInventoryGroup(lv_playerUnit)); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if ((UnitGetType(UnitGroupLoopCurrent()) == "TolicsFireOrb") && (UnitInventoryContainer(UnitGroupLoopCurrent()) == 3)) {
      lv_numberTolicOrbs += 1;
    }
  }
  UnitGroupLoopEnd();
  if ((RandomFixed(0.0, 100.0) <= (lv_numberTolicOrbs * 20.0))) {
    if (UnitIsValid(lv_toDamage) && UnitIsAlive(lv_toDamage)) {
      UnitBehaviorAdd(lv_toDamage, "Burning", lv_playerUnit, 1);
      TextTagCreate(StringExternal("Param/Value/C8E11905"), 24, UnitGetPosition(lv_toDamage), 1.0, true, true, PlayerGroupSingle(UnitGetOwner(lv_playerUnit)));
      lv_thisTag = TextTagLastCreated();
      TextTagSetVelocity(lv_thisTag, 0.75, 270.0);
      TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 0.00, 0.00));
      TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
    }
  }
  lv_numberTolicOrbs = 0;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TolicsFireOrbDamageResponse_Init () {
  gt_TolicsFireOrbDamageResponse = TriggerCreate("gt_TolicsFireOrbDamageResponse_Func");
  TriggerAddEventUnitDamaged(gt_TolicsFireOrbDamageResponse, UnitRefFromVariable("gv_players[0].dragon"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
  TriggerAddEventUnitDamaged(gt_TolicsFireOrbDamageResponse, UnitRefFromVariable("gv_players[1].dragon"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
  TriggerAddEventUnitDamaged(gt_TolicsFireOrbDamageResponse, UnitRefFromVariable("gv_players[2].dragon"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
  TriggerAddEventUnitDamaged(gt_TolicsFireOrbDamageResponse, UnitRefFromVariable("gv_players[3].dragon"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Stack Charge Names
//--------------------------------------------------------------------------------------------------
bool gt_SetStackChargeNames_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_stackNames[0] = "Item/SmallHealthPotion";
  gv_stackTypes[0] = "SmallHealthPotion";
  gv_stackBankNames[0] = "SHP";
  gv_stackNames[1] = "Item/MediumHealthPotion";
  gv_stackTypes[1] = "MediumHealthPotion";
  gv_stackBankNames[1] = "MHP";
  gv_stackNames[2] = "Item/LargeHealthPotion";
  gv_stackTypes[2] = "LargeHealthPotion";
  gv_stackBankNames[2] = "LHP";
  gv_stackNames[3] = "Item/GrandHealthPotion";
  gv_stackTypes[3] = "GrandHealthPotion";
  gv_stackBankNames[3] = "GHP";
  gv_stackNames[4] = "Item/SmallAttackSpeedPotion";
  gv_stackTypes[4] = "SmallAttackSpeedPotion";
  gv_stackBankNames[4] = "SASP";
  gv_stackNames[5] = "Item/MediumAttackSpeedPotion";
  gv_stackTypes[5] = "MediumAttackSpeedPotion";
  gv_stackBankNames[5] = "MASP";
  gv_stackNames[6] = "Item/LargeAttackSpeedPotion";
  gv_stackTypes[6] = "LargeAttackSpeedPotion";
  gv_stackBankNames[6] = "LASP";
  gv_stackNames[7] = "Item/GrandAttackSpeedPotion";
  gv_stackTypes[7] = "GrandAttackSpeedPotion";
  gv_stackBankNames[7] = "GASP";
  gv_stackNames[8] = "Item/TownPortal";
  gv_stackTypes[8] = "TownPortal";
  gv_stackBankNames[8] = "TP";
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetStackChargeNames_Init () {
  gt_SetStackChargeNames = TriggerCreate("gt_SetStackChargeNames_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Save Stack Counts On Inventory Edit
//--------------------------------------------------------------------------------------------------
bool gt_SaveStackCountsOnInventoryEdit_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  if (testConds) {
    if (!gv_playersSetUp || UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (!runActions) {
    return true;
  }
  if (!lr_player.state.evolving) {
    gf_SaveStackCounts(lr_player);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SaveStackCountsOnInventoryEdit_Init () {
  gt_SaveStackCountsOnInventoryEdit = TriggerCreate("gt_SaveStackCountsOnInventoryEdit_Func");
  TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeLoses, null);
  TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeDrops, null);
  TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeSells, null);
  TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeGives, null);
  TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeExhausts, null);
  TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeGains, null);
  TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangePicksUp, null);
  TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeBuys, null);
  TriggerAddEventUnitInventoryChange(gt_SaveStackCountsOnInventoryEdit, null, c_unitInventoryChangeReceives, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Save Stack Counts Periodically
//--------------------------------------------------------------------------------------------------
bool gt_SaveStackCountsPeriodically_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (!gv_playersSetUp) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    if (!lr_player.state.evolving) {
      gf_SaveStackCounts(lr_player);
    }
  }
  PlayerGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SaveStackCountsPeriodically_Init () {
  gt_SaveStackCountsPeriodically = TriggerCreate("gt_SaveStackCountsPeriodically_Func");
  TriggerAddEventTimePeriodic(gt_SaveStackCountsPeriodically, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Town Portal
//--------------------------------------------------------------------------------------------------
bool gt_TownPortal_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem())) - 1];

  if (testConds) {
    if (!((UnitGetType(EventUnitInventoryItem()) == "TownPortal"))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.locationString == "Ballan") {
    UnitInventoryCreate(lr_player.dragon, "TownPortal");
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/A9B50B40"));
    return true;
  }
  if (lr_player.locationString == "Syrital's Lair") {
    UnitInventoryCreate(lr_player.dragon, "TownPortal");
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/610BC81D"));
    return true;
  }
  if (lr_player.locationString == "Underground Forest") {
    UnitInventoryCreate(lr_player.dragon, "TownPortal");
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/12E3CCA2"));
    return true;
  }
  if (lr_player.locationString == "Relamy Gorge") {
    UnitInventoryCreate(lr_player.dragon, "TownPortal");
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/42B004B8"));
    return true;
  }
  if (lr_player.locationString ==  "???") {
    UnitInventoryCreate(lr_player.dragon, "TownPortal");
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/EBFF7D03"));
    return true;
  }
  if (lr_player.locationString ==  "Infestation") {
    UnitInventoryCreate(lr_player.dragon, "TownPortal");
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/1F7CF99A"));
    return true;
  }
  //if (UnitGroupHasUnit(gv_unitsthatdidDamagetoSyrital, lr_player.dragon)) {
    //  UnitInventoryCreate(lr_player.dragon, "TownPortal");
     // UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/FD1FB43C"));
    //return true;
  //  }
  //if (UnitGroupHasUnit(gv_unitsthatdidDamagetoSremagsi, lr_player.dragon)) {
    //  UnitInventoryCreate(lr_player.dragon, "TownPortal");
    //  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/746AD6C2"));
    // return true;
   // 
 if (lr_player.locationString == "Machina De Plagam's Crater") {
    UnitInventoryCreate(lr_player.dragon, "TownPortal");
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/BD25568D"));
    return true;
  }
  //  if (UnitGroupHasUnit(gv_unitsthatdidDamagetoMachinaDePlagam, lr_player.dragon)) {
   //   UnitInventoryCreate(lr_player.dragon, "TownPortal");
   //   UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/BD25568D"));
   //   return true;
   // }
  if (PlayerGroupHasPlayer(gv_playersInBattleWithZauberer2ndForm, lr_player.player)) {
    UnitInventoryCreate(lr_player.dragon, "TownPortal");
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/D47362FB"));
    return true;
  }
  if (PlayerGroupHasPlayer(gv_playersInBattleWithZauberer1stForm, lr_player.player)) {
    UnitInventoryCreate(lr_player.dragon, "TownPortal");
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/7A32E589"));
    return true;
  }
   if (PlayerGroupHasPlayer(gv_playersinBattlewithGuardians, lr_player.player)) {
    UnitInventoryCreate(lr_player.dragon, "TownPortal");
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/3B59D3E0"));
    return true;
  }
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/4B9AC8CB"));
  libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, true);
  libNtve_gf_PauseUnit(lr_player.dragon, true);
  libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())));
  CameraPan(lr_player.player, PointFromId(2508), 0.0, -1, 10.0, false);
  UnitSetPosition(lr_player.dragon, PointFromId(2508), false);
  libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", PointFromId(2508));
  libNtve_gf_MakeUnitInvulnerable(lr_player.dragon, false);
  libNtve_gf_PauseUnit(lr_player.dragon, false);
  UnitBehaviorRemovePlayer(lr_player.dragon, "TimePenalty", lr_player.player, c_unitBehaviorCountAll);
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "BallansTheme", c_soundtrackCueAny, 0, false);
  lr_player.locationString = "Ballan";
  lr_player.locationText = StringToText(lr_player.locationString);
  libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TownPortal_Init () {
  gt_TownPortal = TriggerCreate("gt_TownPortal_Func");
  TriggerAddEventUnitInventoryChange(gt_TownPortal, null, c_unitInventoryChangeUses, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unit drops item
//--------------------------------------------------------------------------------------------------
bool gt_Unitdropsitem_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  UnitSetOwner(EventUnitInventoryItem(), 0, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Unitdropsitem_Init () {
  gt_Unitdropsitem = TriggerCreate("gt_Unitdropsitem_Func");
  TriggerAddEventUnitInventoryChange(gt_Unitdropsitem, null, c_unitInventoryChangeDrops, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unit gains item
//--------------------------------------------------------------------------------------------------
bool gt_Unitgainsitem_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (!runActions) {
    return true;
  }
  UnitSetOwner(EventUnitInventoryItem(), UnitGetOwner(EventUnit()), true);
  if (((UnitGetType(EventUnitInventoryItem()) == "HerosMight"))) {
    if (!gf_IsAdmin(lr_player.hand)) {
      UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/50B63FB2"));
      UnitInventoryRemove(EventUnitInventoryItem());
    }
  } else
  if ((UnitGetType(EventUnitInventoryItem()) == "ModArmor")) {
    if (!gf_IsAdmin(lr_player.hand)) {
      UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/00B671DA"));
      UnitInventoryRemove(EventUnitInventoryItem());
    }
  } else
  if (UnitGetType(EventUnitInventoryItem()) == "WingClaws") {
    if (lr_player.hand != "" && PlayerName(lr_player.player) == StringToText("Wingcrafter") && !gf_IsAdmin(lr_player.hand)) {
      UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/50B63FB2"));
      UnitInventoryRemove(EventUnitInventoryItem());
    }
  } else
  if (((UnitGetType(EventUnitInventoryItem()) == "DevilsFlamethrower"))) {
    if (lr_player.hand != "1-S2-1-2755172" && !gf_IsAdmin(lr_player.hand)) {
      UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/CD8DEF38"));
      UnitInventoryRemove(EventUnitInventoryItem());
    }
  } else
  if (((UnitGetType(EventUnitInventoryItem()) == "MadawcsElectricArmor") || (UnitGetType(EventUnitInventoryItem()) == "ModArmor") || (UnitGetType(EventUnitInventoryItem()) == "PlagamArmor"))) {
    UnitSetPropertyFixed(UnitInventoryUnit(EventUnitInventoryItem()), c_unitPropShieldsPercent, 0.0);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Unitgainsitem_Init () {
  gt_Unitgainsitem = TriggerCreate("gt_Unitgainsitem_Func");
  TriggerAddEventUnitInventoryChange(gt_Unitgainsitem, null, c_unitInventoryChangeGains, null);
  TriggerAddEventUnitInventoryChange(gt_Unitgainsitem, null, c_unitInventoryChangePicksUp, null);
  TriggerAddEventUnitInventoryChange(gt_Unitgainsitem, null, c_unitInventoryChangeBuys, null);
  TriggerAddEventUnitInventoryChange(gt_Unitgainsitem, null, c_unitInventoryChangeReceives, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Shield Check
//--------------------------------------------------------------------------------------------------
bool gt_ShieldCheck_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((UnitInventoryContainer(EventUnitInventoryItem()) == 2))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (((UnitGetType(EventUnitInventoryItem()) == "MadawcsElectricArmor") || (UnitGetType(EventUnitInventoryItem()) == "ModArmor") || (UnitGetType(EventUnitInventoryItem()) == "PlagamArmor"))) {
    UnitSetPropertyFixed(UnitInventoryUnit(EventUnitInventoryItem()), c_unitPropShieldsPercent, 0.0);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShieldCheck_Init () {
  gt_ShieldCheck = TriggerCreate("gt_ShieldCheck_Func");
  TriggerAddEventUnitInventoryChange(gt_ShieldCheck, null, c_unitInventoryChangeMoves, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Weapon Check
//--------------------------------------------------------------------------------------------------
bool gt_WeaponCheck_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!gv_playersSetUp) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gf_RemoveWeapons(UnitInventoryUnit(EventUnitInventoryItem()));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WeaponCheck_Init () {
  gt_WeaponCheck = TriggerCreate("gt_WeaponCheck_Func");
  TriggerAddEventUnitInventoryChange(gt_WeaponCheck, null, c_unitInventoryChangeGains, null);
  TriggerAddEventUnitInventoryChange(gt_WeaponCheck, null, c_unitInventoryChangePicksUp, null);
  TriggerAddEventUnitInventoryChange(gt_WeaponCheck, null, c_unitInventoryChangeLoses, null);
  TriggerAddEventUnitInventoryChange(gt_WeaponCheck, null, c_unitInventoryChangeMoves, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Selling System Redux
//--------------------------------------------------------------------------------------------------
bool gt_SellingSystemRedux_Func (bool testConds, bool runActions) {

  int lv_mySlot;
  int lv_myContainer;
  int lv_myIndex;


  if (!runActions) {
    return true;
  }
  lv_mySlot = UnitInventorySlot(EventUnitInventoryItem());
  lv_myContainer = UnitInventoryContainer(EventUnitInventoryItem());
  lv_myIndex = UnitInventoryIndex(EventUnitInventoryItem());
  if (((DistanceBetweenPoints(UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), UnitGetPosition(UnitFromId(240))) > 20.0) && (DistanceBetweenPoints(UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), UnitGetPosition(UnitFromId(1202))) > 20.0) && (DistanceBetweenPoints(UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), UnitGetPosition(UnitFromId(2777))) > 20.0) && (DistanceBetweenPoints(UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), UnitGetPosition(UnitFromId(660))) > 20.0))) {
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())), c_messageAreaSubtitle, StringExternal("Param/Value/DDDE08EE"));
    UnitInventoryCreate(gv_players[(UnitGetOwner(EventUnitInventoryItem()) - 1)].dragon, UnitGetType(EventUnitInventoryItem()));
    UnitInventoryMove(UnitInventoryLastCreated(), lv_myContainer, lv_mySlot);
  }
  else {
    PlayerModifyPropertyInt(UnitGetOwner(EventUnitInventoryItem()), c_playerPropMinerals, c_playerPropOperAdd, (UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostMinerals) / 10));
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())), c_messageAreaSubtitle, ((UnitTypeGetName(UnitGetType(EventUnitInventoryItem())) + StringExternal("Param/Value/5AC0AC57")) + IntToText((UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostMinerals) / 10))));
    TextTagCreate((StringExternal("Param/Value/E6C199C9") + IntToText((UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostMinerals) / 10))), 24, UnitGetPosition(gv_players[(UnitGetOwner(EventUnitInventoryItem()) - 1)].dragon), 1.0, true, true, PlayerGroupSingle(UnitGetOwner(EventUnitInventoryItem())));
    TextTagSetVelocity(TextTagLastCreated(), 0.75, 90.0);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SellingSystemRedux_Init () {
  gt_SellingSystemRedux = TriggerCreate("gt_SellingSystemRedux_Func");
  TriggerAddEventUnitInventoryChange(gt_SellingSystemRedux, null, c_unitInventoryChangeSells, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Armor Shop Text Tag
//--------------------------------------------------------------------------------------------------
bool gt_DisplayArmorShopTextTag_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/E57A2F8D"), 24, PointFromId(1216), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayArmorShopTextTag_Init () {
  gt_DisplayArmorShopTextTag = TriggerCreate("gt_DisplayArmorShopTextTag_Func");
  TriggerAddEventUnitRangePoint(gt_DisplayArmorShopTextTag, null, PointFromId(1216), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Weapon Shop and Credits Text Tags
//--------------------------------------------------------------------------------------------------
bool gt_DisplayWeaponShopTextTag_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/869F54FF"), 24, PointFromId(1215), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TextTagCreate(StringExternal("DOCSTR_ViewCredits"), 24, PointFromName("View Credits"), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayWeaponShopTextTag_Init () {
  gt_DisplayWeaponShopTextTag = TriggerCreate("gt_DisplayWeaponShopTextTag_Func");
  TriggerAddEventUnitRangePoint(gt_DisplayWeaponShopTextTag, null, PointFromId(1215), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Orb Shop Text Tag
//--------------------------------------------------------------------------------------------------
bool gt_DisplayOrbShopTextTag_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/E6685081"), 24, PointFromId(1203), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayOrbShopTextTag_Init () {
  gt_DisplayOrbShopTextTag = TriggerCreate("gt_DisplayOrbShopTextTag_Func");
  TriggerAddEventUnitRangePoint(gt_DisplayOrbShopTextTag, null, PointFromId(1203), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Shard Shop Text Tag
//--------------------------------------------------------------------------------------------------
bool gt_DisplayShardShopTextTag_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/CB97CC80"), 24, PointFromId(2778), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayShardShopTextTag_Init () {
  gt_DisplayShardShopTextTag = TriggerCreate("gt_DisplayShardShopTextTag_Func");
  TriggerAddEventUnitRangePoint(gt_DisplayShardShopTextTag, null, PointFromId(2778), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Stash Text Tag P1
//--------------------------------------------------------------------------------------------------
bool gt_DisplayStashTextTagP1_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 1))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/D3D7C9C1"), 24, PointFromId(4835), 1.0, true, true, PlayerGroupSingle(1));
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayStashTextTagP1_Init () {
  gt_DisplayStashTextTagP1 = TriggerCreate("gt_DisplayStashTextTagP1_Func");
  TriggerAddEventUnitRangePoint(gt_DisplayStashTextTagP1, null, PointFromId(4835), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Stash Text Tag P2
//--------------------------------------------------------------------------------------------------
bool gt_DisplayStashTextTagP2_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 2))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/673F3B18"), 24, PointFromId(4836), 1.0, true, true, PlayerGroupSingle(2));
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayStashTextTagP2_Init () {
  gt_DisplayStashTextTagP2 = TriggerCreate("gt_DisplayStashTextTagP2_Func");
  TriggerAddEventUnitRangePoint(gt_DisplayStashTextTagP2, null, PointFromId(4836), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Stash Text Tag P3
//--------------------------------------------------------------------------------------------------
bool gt_DisplayStashTextTagP3_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 3))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/FDEBF9A4"), 24, PointFromId(4837), 1.0, true, true, PlayerGroupSingle(3));
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayStashTextTagP3_Init () {
  gt_DisplayStashTextTagP3 = TriggerCreate("gt_DisplayStashTextTagP3_Func");
  TriggerAddEventUnitRangePoint(gt_DisplayStashTextTagP3, null, PointFromId(4837), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Display Stash Text Tag P4
//--------------------------------------------------------------------------------------------------
bool gt_DisplayStashTextTagP4_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_humanPlayers, 4))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/4DBA1D44"), 24, PointFromId(4838), 1.0, true, true, PlayerGroupSingle(4));
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DisplayStashTextTagP4_Init () {
  gt_DisplayStashTextTagP4 = TriggerCreate("gt_DisplayStashTextTagP4_Func");
  TriggerAddEventUnitRangePoint(gt_DisplayStashTextTagP4, null, PointFromId(4838), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Underground Forest Enter
//--------------------------------------------------------------------------------------------------
bool gt_UndergroundForestEnter_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
      return false;
    }
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  PlayerGroupAdd(gv_playersinUndergroundForest, UnitGetOwner(EventUnit()));
  PlayerSetToDLighting(UnitGetOwner(EventUnit()), "DesertWorldNight");
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "UndergroundForestTheme", c_soundtrackCueAny, 0, false);
  CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(273)), 0.0, -1, 10, false);
  UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(273)), false);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  //lr_player.locationText = "Underground Forest";
  lr_player.locationString = "Underground Forest";
  lr_player.locationText = StringToText(lr_player.locationString);
  libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UndergroundForestEnter_Init () {
  gt_UndergroundForestEnter = TriggerCreate("gt_UndergroundForestEnter_Func");
  TriggerAddEventUnitRegion(gt_UndergroundForestEnter, null, RegionFromId(30), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Underground Forest Exit
//--------------------------------------------------------------------------------------------------
bool gt_UndergroundForestExit_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  PlayerGroupRemove(gv_playersinUndergroundForest, UnitGetOwner(EventUnit()));
  CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(272)), 0.0, -1, 10, false);
  PlayerSetToDLighting(UnitGetOwner(EventUnit()), "Korhal");
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "CretonTheme", c_soundtrackCueAny, 0, false);
  UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(272)), false);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  //lr_player.locationText = "Creton";
  lr_player.locationString = "Creton";
  lr_player.locationText = StringToText(lr_player.locationString);  
  libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UndergroundForestExit_Init () {
  gt_UndergroundForestExit = TriggerCreate("gt_UndergroundForestExit_Func");
  TriggerAddEventUnitRegion(gt_UndergroundForestExit, null, RegionFromId(271), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Gorge Enter
//--------------------------------------------------------------------------------------------------
bool gt_RelamyGorgeEnter_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
      return false;
    }
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  PlayerGroupAdd(gv_playersinRelamyGorge, UnitGetOwner(EventUnit()));
  PlayerSetToDLighting(UnitGetOwner(EventUnit()), "IceWorldNight");
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "RelamyGorgeTheme", c_soundtrackCueAny, 0, false);
  CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(232)), 0.0, -1, 10, false);
  UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(232)), false);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  //lr_player.locationText = "Relamy Gorge";
  lr_player.locationString = "Relamy Gorge";
  lr_player.locationText = StringToText(lr_player.locationString);
  libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyGorgeEnter_Init () {
  gt_RelamyGorgeEnter = TriggerCreate("gt_RelamyGorgeEnter_Func");
  TriggerAddEventUnitRegion(gt_RelamyGorgeEnter, null, RegionFromId(240), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Gorge Exit
//--------------------------------------------------------------------------------------------------
bool gt_RelamyGorgeExit_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  PlayerGroupRemove(gv_playersinRelamyGorge, UnitGetOwner(EventUnit()));
  CameraPan(UnitGetOwner(EventUnit()), RegionGetCenter(RegionFromId(270)), 0.0, -1, 10, false);
  PlayerSetToDLighting(UnitGetOwner(EventUnit()), "Korhal");
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "RelamyCaveTheme", c_soundtrackCueAny, 0, false);
  UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(270)), false);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  //lr_player.locationText = "Relamy Pass";
  lr_player.locationString = "Relamy Pass";
  lr_player.locationText = StringToText(lr_player.locationString);
  libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyGorgeExit_Init () {
  gt_RelamyGorgeExit = TriggerCreate("gt_RelamyGorgeExit_Func");
  TriggerAddEventUnitRegion(gt_RelamyGorgeExit, null, RegionFromId(269), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Cave Enter
//--------------------------------------------------------------------------------------------------
bool gt_RelamyCaveEnter_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  bool firstTimeInRelamyCave;

  if (testConds) {
    if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
      return false;
    }
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  PlayerGroupAdd(gv_playersinRelamyCave, UnitGetOwner(EventUnit()));
  PlayerSetToDLighting(UnitGetOwner(EventUnit()), "Zerus");
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "RelamyTheme", c_soundtrackCueAny, 0, false);
  CameraPan(UnitGetOwner(EventUnit()), PointFromId(4072), 0.0, -1, 10, false);
  UnitSetPosition(EventUnit(), PointFromId(4072), false);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  //lr_player.locationText = "???";
  lr_player.locationString = "???";
  lr_player.locationText = StringToText(lr_player.locationString);
  libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) && firstTimeInRelamyCave) {
    UnitSetPropertyFixed(gv_robus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_robus, c_unitPropLifeMax, c_unitPropCurrent) * UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
    firstTimeInRelamyCave = false;
}
  UnitSetPropertyFixed(gv_robus, c_unitPropLifePercent, 100.0);
  if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
    UnitGroupLoopBegin(UnitGroup("Karramarro", 15, RegionFromId(264), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyCaveEnter_Init () {
  bool firstTimeInRelamyCave = true;
  gt_RelamyCaveEnter = TriggerCreate("gt_RelamyCaveEnter_Func");
  TriggerAddEventUnitRegion(gt_RelamyCaveEnter, null, RegionFromId(260), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Cave Exit
//--------------------------------------------------------------------------------------------------
bool gt_RelamyCaveExit_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  fixed lv_robusLifePercent;
  int multiplayerMultiplierHolder;
  int thisIsZero = 0;
  int multiplayerMultiplier;


  if (testConds) {
    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  PlayerGroupRemove(gv_playersinRelamyCave, lr_player.player);
  CameraPan(lr_player.player, PointFromId(4073), 0.0, -1, 10, false);
  PlayerSetToDLighting(lr_player.player, "Korhal");
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "RelamyCaveTheme", c_soundtrackCueAny, 0, false);
  UnitSetPosition(EventUnit(), PointFromId(4073), false);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  //lr_player.locationText = "Relamy Canyon";
  lr_player.locationString = "Relamy Canyon";
  lr_player.locationText = StringToText(lr_player.locationString);
  libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  lv_robusLifePercent = UnitGetPropertyFixed(gv_robus, c_unitPropLifePercent, c_unitPropCurrent);
  
  multiplayerMultiplier = UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
  if(multiplayerMultiplier == thisIsZero){
    multiplayerMultiplierHolder = 1;
    } else{
    multiplayerMultiplierHolder = UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
  }
  
  UnitSetPropertyFixed(gv_robus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_robus, c_unitPropLifeMax, c_unitPropCurrent))* multiplayerMultiplierHolder); //* UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
  UnitSetPropertyFixed(gv_robus, c_unitPropLifePercent, lv_robusLifePercent);
   
  
  //UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) +1));
  //UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(264), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyCaveExit_Init () {
  gt_RelamyCaveExit = TriggerCreate("gt_RelamyCaveExit_Func");
  TriggerAddEventUnitRegion(gt_RelamyCaveExit, null, RegionFromId(261), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Infestation Spawn Trigger
//--------------------------------------------------------------------------------------------------
bool gt_SetInfestationSpawnTrigger_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_players[0].infestationSpawnTrigger = gt_SpawnEnemiesVerbotenInfestationPlayer1;
  gv_players[1].infestationSpawnTrigger = gt_SpawnEnemiesVerbotenInfestationPlayer2;
  gv_players[2].infestationSpawnTrigger = gt_SpawnEnemiesVerbotenInfestationPlayer3;
  gv_players[3].infestationSpawnTrigger = gt_SpawnEnemiesVerbotenInfestationPlayer4;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetInfestationSpawnTrigger_Init () {
  gt_SetInfestationSpawnTrigger = TriggerCreate("gt_SetInfestationSpawnTrigger_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Verboten Infestation Enter
//--------------------------------------------------------------------------------------------------
bool gt_VerbotenInfestationEnter_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  TriggerExecute(lr_player.infestationSpawnTrigger, true, true);
  PlayerGroupAdd(gv_playersinInfestation, lr_player.player);
  lr_player.state.infestationSpawned = true;
  PlayerSetToDLighting(lr_player.player, "Char");
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "InfestationTheme", c_soundtrackCueAny, 0, false);
  CameraPan(lr_player.player, RegionGetCenter(RegionFromId(64)), 0.0, -1, 10, false);
  UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(64)), false);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  //lr_player.locationText = "Infestation";
  lr_player.locationString = "Infestation";
  lr_player.locationText = StringToText(lr_player.locationString);
  libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  lr_player.respawnPoint = RegionGetCenter(RegionFromId(64));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VerbotenInfestationEnter_Init () {
  gt_VerbotenInfestationEnter = TriggerCreate("gt_VerbotenInfestationEnter_Func");
  TriggerAddEventUnitRegion(gt_VerbotenInfestationEnter, null, RegionFromId(61), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Verboten Infestation Exit
//--------------------------------------------------------------------------------------------------
bool gt_VerbotenInfestationExit_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) && PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  PlayerGroupRemove(gv_playersinInfestation, lr_player.player);
  CameraPan(lr_player.player, RegionGetCenter(RegionFromId(62)), 0.0, -1, 10, false);
  PlayerSetToDLighting(lr_player.player, "Korhal");
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "VerbotenTheme", c_soundtrackCueAny, 0, false);
  UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(62)), false);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  //lr_player.locationText = "Verboten Forest";
  lr_player.locationString = "Verboten Forest";
  lr_player.locationText = StringToText(lr_player.locationString);
  libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  lr_player.respawnPoint = PointFromId(1);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VerbotenInfestationExit_Init () {
  gt_VerbotenInfestationExit = TriggerCreate("gt_VerbotenInfestationExit_Func");
  TriggerAddEventUnitRegion(gt_VerbotenInfestationExit, null, RegionFromId(63), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Blizzard Freeze Chance
//--------------------------------------------------------------------------------------------------
bool gt_BlizzardFreezeChance_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  if ((RandomFixed(0.0, 100.0) <= (0.5 * UnitAbilityGetLevel(EventUnitDamageSourceUnit(), "Blizzard")))) {
    UnitBehaviorAdd(EventUnit(), "Frozen", EventUnitDamageSourceUnit(), 1);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BlizzardFreezeChance_Init () {
  gt_BlizzardFreezeChance = TriggerCreate("gt_BlizzardFreezeChance_Func");
  TriggerAddEventUnitDamaged(gt_BlizzardFreezeChance, null, c_unitDamageTypeSpell, c_unitDamageNonFatal, "BlizzardDamage");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Fireball
//--------------------------------------------------------------------------------------------------
bool gt_LearnFireball_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.fireball = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "Fireball");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnFireball_Init () {
  gt_LearnFireball = TriggerCreate("gt_LearnFireball_Func");
  TriggerAddEventUnitAbility(gt_LearnFireball, null, AbilityCommand("LearnSkillsFire", 0), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Fireclaws
//--------------------------------------------------------------------------------------------------
bool gt_LearnFireclaws_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.fireClaw = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "FireClaws");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnFireclaws_Init () {
  gt_LearnFireclaws = TriggerCreate("gt_LearnFireclaws_Func");
  TriggerAddEventUnitAbility(gt_LearnFireclaws, null, AbilityCommand("LearnSkillsFire", 1), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Flameegg
//--------------------------------------------------------------------------------------------------
bool gt_LearnFlameegg_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.flameEgg = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "FlameEgg");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnFlameegg_Init () {
  gt_LearnFlameegg = TriggerCreate("gt_LearnFlameegg_Func");
  TriggerAddEventUnitAbility(gt_LearnFlameegg, null, AbilityCommand("LearnSkillsFire", 2), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Inferno
//--------------------------------------------------------------------------------------------------
bool gt_LearnInferno_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.inferno = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "Inferno");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnInferno_Init () {
  gt_LearnInferno = TriggerCreate("gt_LearnInferno_Func");
  TriggerAddEventUnitAbility(gt_LearnInferno, null, AbilityCommand("LearnSkillsFire", 3), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Nova
//--------------------------------------------------------------------------------------------------
bool gt_LearnNova_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.nova = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "Nova");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnNova_Init () {
  gt_LearnNova = TriggerCreate("gt_LearnNova_Func");
  TriggerAddEventUnitAbility(gt_LearnNova, null, AbilityCommand("LearnSkillsFire", 4), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Frostspike
//--------------------------------------------------------------------------------------------------
bool gt_LearnFrostspike_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.frostSpike = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "FrostSpike");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnFrostspike_Init () {
  gt_LearnFrostspike = TriggerCreate("gt_LearnFrostspike_Func");
  TriggerAddEventUnitAbility(gt_LearnFrostspike, null, AbilityCommand("LearnSkillsIce", 0), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Blizzard
//--------------------------------------------------------------------------------------------------
bool gt_LearnBlizzard_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.blizzard = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "Blizzard");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnBlizzard_Init () {
  gt_LearnBlizzard = TriggerCreate("gt_LearnBlizzard_Func");
  TriggerAddEventUnitAbility(gt_LearnBlizzard, null, AbilityCommand("LearnSkillsIce", 1), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Subzero
//--------------------------------------------------------------------------------------------------
bool gt_LearnSubzero_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.subzero = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "SubZero");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnSubzero_Init () {
  gt_LearnSubzero = TriggerCreate("gt_LearnSubzero_Func");
  TriggerAddEventUnitAbility(gt_LearnSubzero, null, AbilityCommand("LearnSkillsIce", 2), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Learn Frozenarmor
//--------------------------------------------------------------------------------------------------
bool gt_LearnFrozenarmor_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_players[(UnitGetOwner(EventUnit()) - 1)].skills.frozenArmour = UnitAbilityGetLevel(gv_players[(UnitGetOwner(EventUnit()) - 1)].dragon, "FrozenArmor");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LearnFrozenarmor_Init () {
  gt_LearnFrozenarmor = TriggerCreate("gt_LearnFrozenarmor_Func");
  TriggerAddEventUnitAbility(gt_LearnFrozenarmor, null, AbilityCommand("LearnSkillsIce", 3), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Check Player is not eveolved
//--------------------------------------------------------------------------------------------------
bool gt_CheckPlayerisnoteveolved_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_dragonEvolution;

  if (testConds) {
    if (!gv_playersSetUp) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    lv_dragonEvolution = gf_GetEvolution(lr_player);
    if (UnitLevel(lr_player.dragon) == (lv_dragonEvolution + 1) * gv_LevelsPerEvolution && lv_dragonEvolution != gv_DragonEvolutionCounts - 1) {
      // Evolve to the next evolution of the type.
      gf_EvolveTo(lr_player, gv_DragonTypes[lr_player.type].unitNames[lv_dragonEvolution + 1]);
    }
  }
  PlayerGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CheckPlayerisnoteveolved_Init () {
  gt_CheckPlayerisnoteveolved = TriggerCreate("gt_CheckPlayerisnoteveolved_Func");
  TriggerAddEventTimePeriodic(gt_CheckPlayerisnoteveolved, 10.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dummy Dies
//--------------------------------------------------------------------------------------------------
bool gt_DummyDies_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((UnitGetType(EventUnit()) == "DragonDummy"))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitRemove(EventUnit());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DummyDies_Init () {
  gt_DummyDies = TriggerCreate("gt_DummyDies_Func");
  TriggerAddEventUnitDied(gt_DummyDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Revive Dragon (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_ReviveDragonNormal_Func (bool testConds, bool runActions) {
  unit lv_revenge;
  string lv_TypeOfUnitThatKilledDragon;
  point lv_deadpoint;
  int lv_killingPlayer;
  playerData_r lr_player;

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  lv_TypeOfUnitThatKilledDragon = UnitGetType(libNtve_gf_KillingUnit());

  if (testConds) {
    if (
      !gv_playersSetUp || 
      lr_player.state.dying
    ) {
      return false;
    }
    // PlayerGroupHasPlayer doesn't like Player 16 existing.
    if (libNtve_gf_KillingPlayer() != 16 && PlayerGroupHasPlayer(gv_humanPlayers, libNtve_gf_KillingPlayer())) {
        return false;
    }
  }

  if (!runActions) {
    return true;
  }
  libNtve_gf_ShowHideBossBar(false, lr_player.player);
  libNtve_gf_ShowHideBossBar(false, (lr_player.player + 4));
  libNtve_gf_ShowHideBossBar(false, (lr_player.player + 8));
  lv_killingPlayer = libNtve_gf_KillingPlayer();
  lv_deadpoint = UnitGetPosition(EventUnit());
  lr_player.currency.gold = PlayerGetPropertyInt(lr_player.player, c_playerPropMinerals);
  if (lr_player.skills.revengeFacet && libNtve_gf_KillingPlayer() != 16) {
    libNtve_gf_UnitCreateFacingPoint(1, "DragonDummy", c_unitCreateIgnorePlacement, lr_player.player, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
    lv_revenge = UnitLastCreated();
    UnitBehaviorAdd(lv_revenge, "Intelligence", EventUnit(), 500);
    UnitAbilityChangeLevel(lv_revenge, "Nova", 20);
    UnitAbilityEnable(lv_revenge, "Nova", true);
    UnitIssueOrder(lv_revenge, Order(AbilityCommand("Nova", 0)), c_orderQueueReplace);
  }
  libNtve_gf_ShowHideBossBar(false, lr_player.player);
  SoundPlay(SoundLink("DragonDeath", -1), lr_player.playerGroupSingle, 100.0, 0.0);
  if(lv_TypeOfUnitThatKilledDragon == "MagicalDemonicSheep") {
    TimerStart(lr_player.dyingTimer.time, 5.0, false, c_timeReal);
    TimerWindowCreate(lr_player.dyingTimer.time, StringExternal("Slipping back..."), true, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CCBC876F"));
    lr_player.dyingTimer.window = TimerWindowLastCreated();
    TimerWindowShow(lr_player.dyingTimer.window, PlayerGroupAll(), false);
    TimerWindowShow(lr_player.dyingTimer.window, lr_player.playerGroupSingle, true);
    libNtve_gf_WaitForTimer(lr_player.dyingTimer.time, 0.0, false);
    TimerWindowDestroy(lr_player.dyingTimer.window);
  }
  else {
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, PlayerName(lr_player.player) + StringExternal("Param/Value/58B61D3F") + IntToText(lr_player.stats.level) + StringExternal("Param/Value/37C93D65") + UnitTypeGetName(UnitGetType(EventUnit())) + StringExternal("Param/Value/79A9A1A7") + UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())));
    if (lr_player.skills.quickeningRing) {
      TimerStart(lr_player.dyingTimer.time, 15.0, false, c_timeReal);
    }
    else {
      TimerStart(lr_player.dyingTimer.time, 30.0, false, c_timeReal);
    }
    TimerWindowCreate(lr_player.dyingTimer.time, StringExternal("Param/Value/976FC4D2"), true, false);
    lr_player.dyingTimer.window = TimerWindowLastCreated();
    TimerWindowShow(lr_player.dyingTimer.window, PlayerGroupAll(), false);
    TimerWindowShow(lr_player.dyingTimer.window, lr_player.playerGroupSingle, true);
    libNtve_gf_WaitForTimer(lr_player.dyingTimer.time, 0.0, false);
    TimerWindowDestroy(lr_player.dyingTimer.window);
  } 

  if (!lr_player.skills.rebirthCrystal) {
    PlayerModifyPropertyInt(lr_player.player, c_playerPropMinerals, c_playerPropOperSubtract, (lr_player.currency.gold / 20));
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, (StringExternal("Param/Value/084751AF") + (IntToText((lr_player.currency.gold / 20)) + StringExternal("Param/Value/D0C92283"))));
  }
  else {
    PlayerModifyPropertyInt(lr_player.player, c_playerPropMinerals, c_playerPropOperSubtract, (lr_player.currency.gold / 40));
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, (StringExternal("Param/Value/084751AF") + (IntToText((lr_player.currency.gold / 40)) + StringExternal("Param/Value/1B6BBEA5"))));
  }

  if (lr_player.skills.returnJewel && !UnitGroupHasUnit(gv_unitsthatdidDamagetoSyrital, lr_player.dragon) && !UnitGroupHasUnit(gv_unitsthatdidDamagetoSremagsi, lr_player.dragon) && !UnitGroupHasUnit(gv_unitsthatdidDamagetoMachinaDePlagam, lr_player.dragon) && !PlayerGroupHasPlayer(gv_playersinBattlewithGuardians, lr_player.player) && !PlayerGroupHasPlayer(gv_playersInBattleWithZauberer1stForm, lr_player.player) && !PlayerGroupHasPlayer(gv_playersInBattleWithZauberer2ndForm, lr_player.player) && !PlayerGroupHasPlayer(gv_playersInBioDome, lr_player.player) && !PlayerGroupHasPlayer(gv_playersintheArena, lr_player.player) && (lv_killingPlayer != 16)) {
    UnitSetPosition(lr_player.dragon, lv_deadpoint, false);
    UnitRevive(lr_player.dragon);
    libNtve_gf_ChangeUnitDamage(lr_player.dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(lr_player.dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetPropertyFixed(lr_player.dragon, c_unitPropLifePercent, 50.0);
    UnitSetPropertyFixed(lr_player.dragon, c_unitPropEnergyPercent, 0.0);
    UnitSetPropertyFixed(lr_player.dragon, c_unitPropShields, 0.0);
    UnitSetPosition(lr_player.dragon, lv_deadpoint, false);
  }
  else {
    UnitSetPosition(lr_player.dragon, lr_player.respawnPoint, false);
    UnitRevive(lr_player.dragon);
    libNtve_gf_ChangeUnitDamage(lr_player.dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(lr_player.dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetPropertyFixed(lr_player.dragon, c_unitPropLifePercent, 50.0);
    UnitSetPropertyFixed(lr_player.dragon, c_unitPropEnergyPercent, 0.0);
    UnitSetPropertyFixed(lr_player.dragon, c_unitPropShields, 0.0);
    UnitSetPosition(lr_player.dragon, lr_player.respawnPoint, false);
  }
  CameraPan(lr_player.player, UnitGetPosition(lr_player.dragon), 0.0, -1, 10, false);
  if (lr_player.skills.protectionStone) {
    UnitGroupLoopBegin(UnitGroupAlliance(lr_player.player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lr_player.dragon), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      UnitBehaviorAdd(UnitGroupLoopCurrent(), "Paused", lr_player.dragon, 1);
    }
    UnitGroupLoopEnd();
  }
  UnitBehaviorAddPlayer(lr_player.dragon, "AddAgility", lr_player.player, lr_player.stats.agility);
  UnitBehaviorAddPlayer(lr_player.dragon, "AddDexterity", lr_player.player, lr_player.stats.dexterity);
  UnitBehaviorAddPlayer(lr_player.dragon, "AddIntelligence", lr_player.player, lr_player.stats.intelligence);
  UnitBehaviorAddPlayer(lr_player.dragon, "AddStrength", lr_player.player, lr_player.stats.strength);
  UnitBehaviorAddPlayer(lr_player.dragon, "AddVitality", lr_player.player, lr_player.stats.vitality);
  UnitBehaviorAddPlayer(lr_player.dragon, "BlessingofDrache", lr_player.player, lr_player.stats.reborn.count);
  if (lr_player.skills.fireSkin) {
    UnitBehaviorAddPlayer(lr_player.dragon, "FireSkin", lr_player.player, 1);
  }
  if (lr_player.skills.allSeeingEye) {
    UnitBehaviorAddPlayer(lr_player.dragon, "AllSeeingEye", lr_player.player, 1);
  }
  gf_ReapplyBuffs(lr_player);
  BankValueSetFromUnit(lr_player.banks.dragonBank, "Dragon", lr_player.hand, lr_player.dragon);
  UnitIssueOrder(lr_player.dragon, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
  libNtve_gf_ChangeUnitDamage(lr_player.dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
  libNtve_gf_ChangeUnitDamage(lr_player.dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Full);
  libNtve_gf_UnitRemoveCooldown(lr_player.dragon, gv_aSPCooldownName);
  lr_player.state.preventSave = false;
  gf_StatCheck(lr_player);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReviveDragonNormal_Init () {
  gt_ReviveDragonNormal = TriggerCreate("gt_ReviveDragonNormal_Func");
  TriggerAddEventUnitDied(gt_ReviveDragonNormal, UnitRefFromVariable("gv_players[0].dragon"));
  TriggerAddEventUnitDied(gt_ReviveDragonNormal, UnitRefFromVariable("gv_players[1].dragon"));
  TriggerAddEventUnitDied(gt_ReviveDragonNormal, UnitRefFromVariable("gv_players[2].dragon"));
  TriggerAddEventUnitDied(gt_ReviveDragonNormal, UnitRefFromVariable("gv_players[3].dragon"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Revive Dragon (PvP)
//--------------------------------------------------------------------------------------------------
bool gt_ReviveDragonPvP_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (
      !gv_playersSetUp ||
      UnitGetOwner(libNtve_gf_KillingUnit()) == 16 || 
      !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(libNtve_gf_KillingUnit())) ||
      lr_player.state.dying
    ) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  libNtve_gf_ShowHideBossBar(false, lr_player.player);
  libNtve_gf_ShowHideBossBar(false, (lr_player.player + 4));
  libNtve_gf_ShowHideBossBar(false, (lr_player.player + 8));
  SoundPlay(SoundLink("DragonDeath", -1), lr_player.playerGroupSingle, 100.0, 0.0);
  UnitSetPosition(lr_player.dragon, PointFromId(2508), false);
  UnitRevive(lr_player.dragon);
  libNtve_gf_ChangeUnitDamage(lr_player.dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
  libNtve_gf_ChangeUnitDamage(lr_player.dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
  UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
  UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 0.0);
  UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 0.0);
  UnitSetPosition(lr_player.dragon, lr_player.respawnPoint, false);
  CameraPan(lr_player.player, UnitGetPosition(lr_player.dragon), 0.0, -1, 10, false);
  UnitBehaviorAddPlayer(lr_player.dragon, "AddAgility", lr_player.player, lr_player.stats.agility);
  UnitBehaviorAddPlayer(lr_player.dragon, "AddDexterity", lr_player.player, lr_player.stats.dexterity);
  UnitBehaviorAddPlayer(lr_player.dragon, "AddIntelligence", lr_player.player, lr_player.stats.intelligence);
  UnitBehaviorAddPlayer(lr_player.dragon, "AddStrength", lr_player.player, lr_player.stats.strength);
  UnitBehaviorAddPlayer(lr_player.dragon, "AddVitality", lr_player.player, lr_player.stats.vitality);
  UnitBehaviorAddPlayer(lr_player.dragon, "BlessingofDrache", lr_player.player, lr_player.stats.reborn.count);
  if (lr_player.skills.fireSkin) {
    UnitBehaviorAddPlayer(lr_player.dragon, "FireSkin", lr_player.player, 1);
  }
  if (lr_player.skills.allSeeingEye) {
    UnitBehaviorAddPlayer(lr_player.dragon, "AllSeeingEye", lr_player.player, 1);
  }
  gf_ReapplyBuffs(lr_player);
  BankValueSetFromUnit(lr_player.banks.dragonBank, "Dragon", lr_player.hand, lr_player.dragon);
  UnitIssueOrder(lr_player.dragon, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
  libNtve_gf_ChangeUnitDamage(lr_player.dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
  libNtve_gf_ChangeUnitDamage(lr_player.dragon, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Full);
  libNtve_gf_UnitRemoveCooldown(lr_player.dragon, gv_aSPCooldownName);
  lr_player.state.preventSave = false;
  gf_StatCheck(lr_player);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ReviveDragonPvP_Init () {
  gt_ReviveDragonPvP = TriggerCreate("gt_ReviveDragonPvP_Func");
  TriggerAddEventUnitDied(gt_ReviveDragonPvP, UnitRefFromVariable("gv_players[0].dragon"));
  TriggerAddEventUnitDied(gt_ReviveDragonPvP, UnitRefFromVariable("gv_players[1].dragon"));
  TriggerAddEventUnitDied(gt_ReviveDragonPvP, UnitRefFromVariable("gv_players[2].dragon"));
  TriggerAddEventUnitDied(gt_ReviveDragonPvP, UnitRefFromVariable("gv_players[3].dragon"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Up Attribute Dialog
//--------------------------------------------------------------------------------------------------
bool gt_SetUpAttributeDialog_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_playerIndex;
  if (!runActions) {
    return true;
  }

  for(lv_playerIndex = 0; lv_playerIndex < 4; lv_playerIndex += 1) {
    lr_player = gv_players[lv_playerIndex];
    DialogCreate(200, 65, c_anchorBottomRight, 425, 200, true);
    lr_player.stats.attributeDialog.state = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.attributeDialog.state, 200, 30, c_anchorTop, 25, 5, StringExternal("Param/Value/E8D04C14"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.attributeDialog.state, 200, 25, c_anchorBottom, 90, 15, lr_player.stats.attributeText, Color(22*100/255,128*100/255,0), false, 2.0);
    lr_player.stats.attributeDialog.textBox = DialogControlLastCreated();
    // This needs to be a PlayerGroupSingle call and use the index here as gf_InitializePlayers hasn't been run yet.
    DialogSetVisible(lr_player.stats.attributeDialog.state, PlayerGroupSingle(lv_playerIndex + 1), true);   
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetUpAttributeDialog_Init () {
  gt_SetUpAttributeDialog = TriggerCreate("gt_SetUpAttributeDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Level 0 Check
//--------------------------------------------------------------------------------------------------
bool gt_Level0Check_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit())) ) {
      return false;
    }
    if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent) < 0.0))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if ((UnitGetType(EventUnit()) == "MasterDragon")) {
    UnitSetPropertyFixed(EventUnit(), c_unitPropLevel, 99.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropXP, 499999.0);
  }
  if ((UnitGetType(EventUnit()) == "LegendaryDragon")) {
    UnitSetPropertyFixed(EventUnit(), c_unitPropLevel, 100.0);
    UnitSetPropertyFixed(EventUnit(), c_unitPropXP, 0.0);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Level0Check_Init () {
  gt_Level0Check = TriggerCreate("gt_Level0Check_Func");
  TriggerAddEventUnitGainExperience(gt_Level0Check, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Evolution Check
//--------------------------------------------------------------------------------------------------
bool gt_EvolutionCheck_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_dragonEvolution;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (!runActions) {
    return true;
  }

  lv_dragonEvolution = gf_GetEvolution(lr_player);
  if (UnitLevel(EventUnit()) == (lv_dragonEvolution + 1) * gv_LevelsPerEvolution && lv_dragonEvolution != gv_DragonEvolutionCounts - 1) {
    // Evolve to the next evolution of the type.
    gf_EvolveTo(lr_player, gv_DragonTypes[lr_player.type].unitNames[lv_dragonEvolution+1]);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EvolutionCheck_Init () {
  gt_EvolutionCheck = TriggerCreate("gt_EvolutionCheck_Func");
  TriggerAddEventUnitRegion(gt_EvolutionCheck, null, RegionFromId(258), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Agility+1
//--------------------------------------------------------------------------------------------------
bool gt_Agility1_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (lr_player.stats.addingAttribute || lr_player.stats.agility >= gv_MaxAgility) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }

  lr_player.stats.addingAttribute = true;
  if (lr_player.stats.attributePoints > 0) {
    SoundPlay(SoundLink("UI_ChallengeCountdown", -1), lr_player.playerGroupSingle, 100.0, 0.0);
    lr_player.stats.attributePoints = lr_player.stats.attributePoints - 1;
    BankValueSetFromInt(lr_player.banks.dragonBank, "AP", lr_player.hand, lr_player.stats.attributePoints);
    lr_player.stats.attributeText = IntToText(lr_player.stats.attributePoints);
    libNtve_gf_SetDialogItemText(lr_player.stats.attributeDialog.textBox, lr_player.stats.attributeText, lr_player.playerGroupSingle);
    UnitBehaviorAddPlayer(EventUnit(), "AddAgility", lr_player.player, 1);
    lr_player.stats.agility += 1;
    if (lr_player.stats.attributePoints == 0) {
      gf_HideStats(lr_player);
    }
  }
  else {
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaError, StringExternal("Param/Value/EAFC558B"));
  }
  if (lr_player.stats.agility == gv_MaxAgility) {
    UnitAbilityShow(EventUnit(), "Agility1", false);
  }
  while (lr_player.banks.accessing) {
    Wait(1.0, c_timeGame);
  }
  lr_player.banks.accessing = true;
  BankValueSetFromInt(lr_player.banks.dragonBank, "Ag", lr_player.hand, lr_player.stats.agility);
  lr_player.banks.accessing = false;
  lr_player.stats.addingAttribute = false;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Agility1_Init () {
  gt_Agility1 = TriggerCreate("gt_Agility1_Func");
  TriggerAddEventUnitAbility(gt_Agility1, null, AbilityCommand("Agility1", 0), c_abilEffectStageFinish, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dexterity+1
//--------------------------------------------------------------------------------------------------
bool gt_Dexterity1_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  
  if (testConds) {
    if (lr_player.stats.addingAttribute || lr_player.stats.dexterity >= gv_MaxDexterity) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }

  lr_player.stats.addingAttribute = true;
  if (lr_player.stats.attributePoints > 0) {
    SoundPlay(SoundLink("UI_ChallengeCountdown", -1), lr_player.playerGroupSingle, 100.0, 0.0);
    lr_player.stats.attributePoints = lr_player.stats.attributePoints - 1;
    BankValueSetFromInt(lr_player.banks.dragonBank, "AP", lr_player.hand, lr_player.stats.attributePoints);
    lr_player.stats.attributeText = IntToText(lr_player.stats.attributePoints);
    libNtve_gf_SetDialogItemText(lr_player.stats.attributeDialog.textBox, lr_player.stats.attributeText, lr_player.playerGroupSingle);
    UnitBehaviorAddPlayer(EventUnit(), "AddDexterity", lr_player.player, 1);
    lr_player.stats.dexterity = lr_player.stats.dexterity + 1;
    if (lr_player.stats.attributePoints == 0) {
      gf_HideStats(lr_player);
    }
  }
  else {
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaError, StringExternal("Param/Value/925025D3"));
  }
  if (lr_player.stats.dexterity == gv_MaxDexterity) {
    UnitAbilityShow(EventUnit(), "Dexterity1", false);
  }
  while (lr_player.banks.accessing) {
    Wait(1.0, c_timeGame);
  }
  lr_player.banks.accessing = true;
  BankValueSetFromInt(lr_player.banks.dragonBank, "De", lr_player.hand, lr_player.stats.dexterity);
  lr_player.banks.accessing = false;
  lr_player.stats.addingAttribute = false;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Dexterity1_Init () {
  gt_Dexterity1 = TriggerCreate("gt_Dexterity1_Func");
  TriggerAddEventUnitAbility(gt_Dexterity1, null, AbilityCommand("Dexterity1", 0), c_abilEffectStageFinish, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Intelligence+1
//--------------------------------------------------------------------------------------------------
bool gt_Intelligence1_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  
  if (testConds) {
    if (lr_player.stats.addingAttribute || lr_player.stats.intelligence >= gv_MaxIntelligence) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }

  lr_player.stats.addingAttribute = true;
  if (lr_player.stats.attributePoints > 0) {
    SoundPlay(SoundLink("UI_ChallengeCountdown", -1), lr_player.playerGroupSingle, 100.0, 0.0);
    lr_player.stats.attributePoints = lr_player.stats.attributePoints - 1;
    BankValueSetFromInt(lr_player.banks.dragonBank, "AP", lr_player.hand, lr_player.stats.attributePoints);
    lr_player.stats.attributeText = IntToText(lr_player.stats.attributePoints);
    libNtve_gf_SetDialogItemText(lr_player.stats.attributeDialog.textBox, lr_player.stats.attributeText, lr_player.playerGroupSingle);
    UnitBehaviorAddPlayer(EventUnit(), "AddIntelligence", lr_player.player, 1);
    lr_player.stats.intelligence = lr_player.stats.intelligence + 1;
    if (lr_player.stats.attributePoints == 0) {
      gf_HideStats(lr_player);
    }
  }
  else {
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaError, StringExternal("Param/Value/6DCD7D69"));
  }
  if (lr_player.stats.intelligence == gv_MaxIntelligence) {
    UnitAbilityShow(EventUnit(), "Intelligence1", false);
  }
  while (lr_player.banks.accessing) {
    Wait(1.0, c_timeGame);
  }
  lr_player.banks.accessing = true;
  BankValueSetFromInt(lr_player.banks.dragonBank, "Int", lr_player.hand, lr_player.stats.intelligence);
  lr_player.banks.accessing = false;
  lr_player.stats.addingAttribute = false;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Intelligence1_Init () {
  gt_Intelligence1 = TriggerCreate("gt_Intelligence1_Func");
  TriggerAddEventUnitAbility(gt_Intelligence1, null, AbilityCommand("Intelligence1", 0), c_abilEffectStageFinish, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Strength+1
//--------------------------------------------------------------------------------------------------
bool gt_Strength1_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  
  if (testConds) {
    if (lr_player.stats.addingAttribute || lr_player.stats.strength >= gv_MaxStrength) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }

  lr_player.stats.addingAttribute = true;
  if (lr_player.stats.attributePoints > 0) {
    SoundPlay(SoundLink("UI_ChallengeCountdown", -1), lr_player.playerGroupSingle, 100.0, 0.0);
    lr_player.stats.attributePoints = lr_player.stats.attributePoints - 1;
    BankValueSetFromInt(lr_player.banks.dragonBank, "AP", lr_player.hand, lr_player.stats.attributePoints);
    lr_player.stats.attributeText = IntToText(lr_player.stats.attributePoints);
    libNtve_gf_SetDialogItemText(lr_player.stats.attributeDialog.textBox, lr_player.stats.attributeText, lr_player.playerGroupSingle);
    UnitBehaviorAddPlayer(EventUnit(), "AddStrength", lr_player.player, 1);
    lr_player.stats.strength = lr_player.stats.strength + 1;
    if ((lr_player.stats.attributePoints == 0)) {
      gf_HideStats(lr_player);
    }
  }
  else {
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaError, StringExternal("Param/Value/E289DC4A"));
  }
  if (lr_player.stats.strength == gv_MaxStrength) {
    UnitAbilityShow(EventUnit(), "Strength1", false);
  }
  while (lr_player.banks.accessing) {
    Wait(1.0, c_timeGame);
  }
   
  lr_player.banks.accessing = true;
  BankValueSetFromInt(lr_player.banks.dragonBank, "Str", lr_player.hand, lr_player.stats.strength);
  lr_player.banks.accessing = false;
  lr_player.stats.addingAttribute = false;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Strength1_Init () {
  gt_Strength1 = TriggerCreate("gt_Strength1_Func");
  TriggerAddEventUnitAbility(gt_Strength1, null, AbilityCommand("Strength1", 0), c_abilEffectStageFinish, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Vitality+1
//--------------------------------------------------------------------------------------------------
bool gt_Vitality1_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  
  if (testConds) {
    if (lr_player.stats.addingAttribute || lr_player.stats.vitality >= gv_MaxVitality) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }

  lr_player.stats.addingAttribute = true;
  if (lr_player.stats.attributePoints > 0) {
    SoundPlay(SoundLink("UI_ChallengeCountdown", -1), lr_player.playerGroupSingle, 100.0, 0.0);
    lr_player.stats.attributePoints = lr_player.stats.attributePoints - 1;
    BankValueSetFromInt(lr_player.banks.dragonBank, "AP", lr_player.hand, lr_player.stats.attributePoints);
    lr_player.stats.attributeText = IntToText(lr_player.stats.attributePoints);
    libNtve_gf_SetDialogItemText(lr_player.stats.attributeDialog.textBox, lr_player.stats.attributeText, lr_player.playerGroupSingle);
    UnitBehaviorAddPlayer(EventUnit(), "AddVitality", lr_player.player, 1);
    lr_player.stats.vitality += 1;
    if (lr_player.stats.attributePoints == 0) {
      gf_HideStats(lr_player);
    }
  }
  else {
    UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaError, StringExternal("Param/Value/5188E700"));
  }
  if (lr_player.stats.vitality == gv_MaxVitality) {
    UnitAbilityShow(EventUnit(), "Vitality1", false);
  }
  while (lr_player.banks.accessing) {
    Wait(1.0, c_timeGame);
  }
  lr_player.banks.accessing = true;
  BankValueSetFromInt(lr_player.banks.dragonBank, "Vi", lr_player.hand, lr_player.stats.vitality);
  lr_player.banks.accessing = false;
  lr_player.stats.addingAttribute = false;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Vitality1_Init () {
  gt_Vitality1 = TriggerCreate("gt_Vitality1_Func");
  TriggerAddEventUnitAbility(gt_Vitality1, null, AbilityCommand("Vitality1", 0), c_abilEffectStageFinish, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Update Buffs
//--------------------------------------------------------------------------------------------------
bool gt_UpdateBuffs_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }

  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    gf_ReapplyBuffs(gv_players[PlayerGroupLoopCurrent()]);
  }
  PlayerGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UpdateBuffs_Init () {
  gt_UpdateBuffs = TriggerCreate("gt_UpdateBuffs_Func");
  TriggerAddEventTimePeriodic(gt_UpdateBuffs, 10.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Show Talents
//--------------------------------------------------------------------------------------------------
bool gt_ShowTalents_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (!runActions) {
    return true;
  }
  lib_talent_gf_ShowHideTalentTree(lr_player);
  gf_ReapplyBuffs(lr_player);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ShowTalents_Init () {
  gt_ShowTalents = TriggerCreate("gt_ShowTalents_Func");
  TriggerAddEventUnitAbility(gt_ShowTalents, null, AbilityCommand("Talents", 0), c_unitAbilStageExecute, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set isIdle On
//--------------------------------------------------------------------------------------------------
bool gt_SetisIdleOn_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  gv_players[UnitGetOwner(EventUnit()) - 1].state.isIdle = true;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetisIdleOn_Init () {
  gt_SetisIdleOn = TriggerCreate("gt_SetisIdleOn_Func");
  TriggerAddEventUnitBecomesIdle(gt_SetisIdleOn, UnitRefFromVariable("gv_players[0].dragon"), true);
  TriggerAddEventUnitBecomesIdle(gt_SetisIdleOn, UnitRefFromVariable("gv_players[1].dragon"), true);
  TriggerAddEventUnitBecomesIdle(gt_SetisIdleOn, UnitRefFromVariable("gv_players[2].dragon"), true);
  TriggerAddEventUnitBecomesIdle(gt_SetisIdleOn, UnitRefFromVariable("gv_players[3].dragon"), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set isIdle Off
//--------------------------------------------------------------------------------------------------
bool gt_SetisIdleOff_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_players[UnitGetOwner(EventUnit()) - 1].state.isIdle = false;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetisIdleOff_Init () {
  gt_SetisIdleOff = TriggerCreate("gt_SetisIdleOff_Func");
  TriggerAddEventUnitBecomesIdle(gt_SetisIdleOff, UnitRefFromVariable("gv_players[0].dragon"), false);
  TriggerAddEventUnitBecomesIdle(gt_SetisIdleOff, UnitRefFromVariable("gv_players[1].dragon"), false);
  TriggerAddEventUnitBecomesIdle(gt_SetisIdleOff, UnitRefFromVariable("gv_players[2].dragon"), false);
  TriggerAddEventUnitBecomesIdle(gt_SetisIdleOff, UnitRefFromVariable("gv_players[3].dragon"), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Defend Yourself
//--------------------------------------------------------------------------------------------------
bool gt_DefendYourself_Func (bool testConds, bool runActions) {
  if (testConds) {
    if (!gv_players[UnitGetOwner(EventUnit()) - 1].state.isIdle) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DefendYourself_Init () {
  gt_DefendYourself = TriggerCreate("gt_DefendYourself_Func");
  TriggerAddEventUnitAttacked2(gt_DefendYourself, UnitRefFromVariable("gv_players[0].dragon"), null);
  TriggerAddEventUnitAttacked2(gt_DefendYourself, UnitRefFromVariable("gv_players[1].dragon"), null);
  TriggerAddEventUnitAttacked2(gt_DefendYourself, UnitRefFromVariable("gv_players[2].dragon"), null);
  TriggerAddEventUnitAttacked2(gt_DefendYourself, UnitRefFromVariable("gv_players[3].dragon"), null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Frost Spike
//--------------------------------------------------------------------------------------------------
bool gt_FrostSpike_Func (bool testConds, bool runActions) {

  actor lv_actor;


  if (!runActions) {
    return true;
  }
  libNtve_gf_CreateModelAtPoint("SelendisInterceptorAttackImpact", UnitGetPosition(EventUnit()));
  libNtve_gf_AttachModelToUnit(EventUnit(), "SelendisInterceptorAttackImpact", "Ref_Center");
  SoundPlayAtPoint(SoundLink("Bilestrider_AttackImpact", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_FrostSpike_Init () {
  gt_FrostSpike = TriggerCreate("gt_FrostSpike_Func");
  TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel1");
  TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel10");
  TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel");
  TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel3");
  TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel4");
  TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel5");
  TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel6");
  TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel7");
  TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel8");
  TriggerAddEventUnitDamaged(gt_FrostSpike, null, c_unitDamageTypeAny, c_unitDamageEither, "FrostSpikeDamageLevel9");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Syrital - Talons Burning
//--------------------------------------------------------------------------------------------------
bool gt_SyritalTalonsBurning_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gf_RandomEffectonAttack(10.0, 1, "Burning2", EventUnit(), EventUnitDamageSourceUnit());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyritalTalonsBurning_Init () {
  gt_SyritalTalonsBurning = TriggerCreate("gt_SyritalTalonsBurning_Func");
  TriggerAddEventUnitDamaged(gt_SyritalTalonsBurning, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "Talons2");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Robus - Spawn Allies
//--------------------------------------------------------------------------------------------------
bool gt_RobusSpawnAllies_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnitDamageSourceUnit())) ) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if ((UnitGroupCount(UnitGroup("Karramarro", 15, RegionFromId(264), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0)) {
    gf_RandomlySpawnAllies((5.0 / UnitGroupCount(UnitGroup("Karramarro", 15, RegionFromId(264), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), 1, "Karramarro", EventUnit(), EventUnitDamageSourceUnit());
  }
  else {
    gf_RandomlySpawnAllies(10.0, 1, "Karramarro", EventUnit(), EventUnitDamageSourceUnit());
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RobusSpawnAllies_Init () {
  gt_RobusSpawnAllies = TriggerCreate("gt_RobusSpawnAllies_Func");
  TriggerAddEventUnitDamaged(gt_RobusSpawnAllies, UnitRefFromVariable("gv_robus"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Robus - Carrion Needles Poison
//--------------------------------------------------------------------------------------------------
bool gt_RobusCarrionNeedlesPoison_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gf_RandomEffectonAttack(10.0, 1, "Poisoned", EventUnit(), EventUnitDamageSourceUnit());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RobusCarrionNeedlesPoison_Init () {
  gt_RobusCarrionNeedlesPoison = TriggerCreate("gt_RobusCarrionNeedlesPoison_Func");
  TriggerAddEventUnitDamaged(gt_RobusCarrionNeedlesPoison, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "CarrionNeedles");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi - Tentacle Disorientation
//--------------------------------------------------------------------------------------------------
bool gt_SremagsiTentacleDisorientation_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gf_RandomEffectonAttack(10.0, 1, "Disorientated", EventUnit(), EventUnitDamageSourceUnit());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SremagsiTentacleDisorientation_Init () {
  gt_SremagsiTentacleDisorientation = TriggerCreate("gt_SremagsiTentacleDisorientation_Func");
  TriggerAddEventUnitDamaged(gt_SremagsiTentacleDisorientation, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "TenteclesDamage");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Carrion Needles Poison
//--------------------------------------------------------------------------------------------------
bool gt_HeroCarrionNeedlesPoison_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gf_RandomEffectonAttack(2.5, 1, "Poisoned", EventUnit(), EventUnitDamageSourceUnit());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroCarrionNeedlesPoison_Init () {
  gt_HeroCarrionNeedlesPoison = TriggerCreate("gt_HeroCarrionNeedlesPoison_Func");
  TriggerAddEventUnitDamaged(gt_HeroCarrionNeedlesPoison, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "CarrionNeedles");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Sremagsi's Tentacles Disorientated
//--------------------------------------------------------------------------------------------------
bool gt_HeroSremagsisTentaclesDisorientated_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gf_RandomEffectonAttack(2.5, 1, "Poisoned", EventUnit(), EventUnitDamageSourceUnit());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroSremagsisTentaclesDisorientated_Init () {
  gt_HeroSremagsisTentaclesDisorientated = TriggerCreate("gt_HeroSremagsisTentaclesDisorientated_Func");
  TriggerAddEventUnitDamaged(gt_HeroSremagsisTentaclesDisorientated, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "SremagsisTentacles");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Nosferatu's Logic
//--------------------------------------------------------------------------------------------------
bool gt_NosferatusLogic_Func (bool testConds, bool runActions) {
  int autoD08DB74B_val;

  int lv_randomNum;


  if (!runActions) {
    return true;
  }
  lv_randomNum = RandomInt(0, 3);
  autoD08DB74B_val = lv_randomNum;
  if (autoD08DB74B_val == 0) {
    UnitIssueOrder(gv_nosferatu, Order(AbilityCommand("Nova", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueAddToEnd);
  }
  else if (autoD08DB74B_val == 1) {
    UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand("Inferno", 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
    UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueAddToEnd);
  }
  else if (autoD08DB74B_val == 2) {
    UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand("GravitonPrison", 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueReplace);
    UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueAddToEnd);
  }
  else if (autoD08DB74B_val == 3) {
    UnitIssueOrder(gv_nosferatu, OrderTargetingPoint(AbilityCommand("HybridBlink", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
    UnitIssueOrder(gv_nosferatu, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_nosferatu), 15.0), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), c_orderQueueAddToEnd);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_NosferatusLogic_Init () {
  gt_NosferatusLogic = TriggerCreate("gt_NosferatusLogic_Func");
  TriggerEnable(gt_NosferatusLogic, false);
  TriggerAddEventTimePeriodic(gt_NosferatusLogic, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Nosferatu Dies
//--------------------------------------------------------------------------------------------------
bool gt_NosferatuDies_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  TriggerEnable(gt_NosferatusLogic, false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_NosferatuDies_Init () {
  gt_NosferatuDies = TriggerCreate("gt_NosferatuDies_Func");
  TriggerAddEventUnitDied(gt_NosferatuDies, UnitRefFromVariable("gv_nosferatu"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Nosferatu death count
//--------------------------------------------------------------------------------------------------
bool gt_Nosferatudeathcount_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) != 15) {
      return false;
    }
    if (libNtve_gf_KillingPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, libNtve_gf_KillingPlayer())) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if ((gv_nosferatusDeathCount >= 10000)) {
    gv_nosferatusDeathCount = 0;
    libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
    libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
    libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
    libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
    libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
    libNtve_gf_UnitCreateFacingPoint(1, "Nosferatu", 0, 15, UnitGetPosition(EventUnit()), UnitGetPosition(libNtve_gf_KillingUnit()));
    gv_nosferatu = UnitLastCreated();
    MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_nosferatu), 10.0, Color(25.10, 0.00, 0.00));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8234D839"));
    TriggerEnable(gt_NosferatusLogic, true);
  }
  else {
    gv_nosferatusDeathCount += 1;
  }
  gf_NosferatusRelic(gv_players[libNtve_gf_KillingPlayer() - 1], libNtve_gf_KillingUnit(), UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropLifeMax));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Nosferatudeathcount_Init () {
  gt_Nosferatudeathcount = TriggerCreate("gt_Nosferatudeathcount_Func");
  TriggerAddEventUnitDied(gt_Nosferatudeathcount, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Greed is Good
//--------------------------------------------------------------------------------------------------
bool gt_GreedisGood_Func (bool testConds, bool runActions) {

  fixed lv_killResouces;
  fixed lv_giGLevel;
  int lv_thisTag;

  lv_thisTag = c_textTagNone;

  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) == 15))) {
      return false;
    }
    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(libNtve_gf_KillingUnit()))) {
    lv_killResouces = UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent);
    lv_giGLevel = UnitBehaviorCount(libNtve_gf_KillingUnit(), "GreedIsGood");
    PlayerModifyPropertyInt(UnitGetOwner(libNtve_gf_KillingUnit()), c_playerPropMinerals, c_playerPropOperAdd, FixedToInt(((lv_giGLevel * 0.05) * lv_killResouces)));
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GreedisGood_Init () {
  gt_GreedisGood = TriggerCreate("gt_GreedisGood_Func");
  TriggerAddEventUnitDied(gt_GreedisGood, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Quick Learner
//--------------------------------------------------------------------------------------------------
bool gt_QuickLearner_Func (bool testConds, bool runActions) {

  fixed lv_killExperience;
  fixed lv_qLLevel;


  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) == 15))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lv_killExperience = UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent);
  lv_qLLevel = UnitBehaviorCount(libNtve_gf_KillingUnit(), "QuickLearner");
  gf_AddExperience(libNtve_gf_KillingUnit(), ((lv_qLLevel * 0.01) * UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent)));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_QuickLearner_Init () {
  gt_QuickLearner = TriggerCreate("gt_QuickLearner_Func");
  TriggerAddEventUnitDied(gt_QuickLearner, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero takes melee damage
//--------------------------------------------------------------------------------------------------
bool gt_Herotakesmeleedamage_Func (bool testConds, bool runActions) {

  fixed lv_randomNumber;
  int lv_thisTag;

  lv_thisTag = c_textTagNone;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lv_randomNumber = RandomFixed(0.0, 100.0);
  if (((lv_randomNumber < ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.reborn.dodge * 0.1) + (UnitBehaviorCount(EventUnit(), "Agility") * 0.1))))) {
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
    TextTagCreate(StringExternal("Param/Value/4906195F"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
    lv_thisTag = TextTagLastCreated();
    TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 50.20, 100.00));
    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
  }
  else {
    gf_Rage(EventUnit(), EventUnitDamageAmount());
    gf_RealmSwitch(EventUnit(), EventUnitDamageSourceUnit());
    if ((UnitBehaviorCount(EventUnit(), "SpikedScales") > 0)) {
      UnitDamage(EventUnitDamageSourceUnit(), EventUnitDamageEffect(), EventUnitDamageSourceUnit(), (-1.0 * (EventUnitDamageAmount() * (0.09 * UnitBehaviorCount(EventUnit(), "SpikedScales")))));
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Herotakesmeleedamage_Init () {
  gt_Herotakesmeleedamage = TriggerCreate("gt_Herotakesmeleedamage_Func");
  TriggerAddEventUnitDamaged(gt_Herotakesmeleedamage, null, c_unitDamageTypeMelee, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero takes ranged damage
//--------------------------------------------------------------------------------------------------
bool gt_Herotakesrangeddamage_Func (bool testConds, bool runActions) {

  fixed lv_randomNumber;
  int lv_thisTag;
  unit lv_target;
  unit lv_dummy;

  lv_thisTag = c_textTagNone;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lv_randomNumber = RandomFixed(0.0, 100.0);
  if (((lv_randomNumber >= 0.0) && (lv_randomNumber < ((gv_players[(UnitGetOwner(EventUnit()) - 1)].stats.reborn.dodge * 0.1) + (UnitBehaviorCount(EventUnit(), "Agility") * 0.1))))) {
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
    TextTagCreate(StringExternal("Param/Value/E743D0C8"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
    lv_thisTag = TextTagLastCreated();
    TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
    TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 50.20, 100.00));
    TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
  }
  else {
    gf_Rage(EventUnit(), EventUnitDamageAmount());
    gf_RealmSwitch(EventUnit(), EventUnitDamageSourceUnit());
    lv_randomNumber = RandomFixed(0.0, 100.0);
    if ((lv_randomNumber < (1.0 * UnitBehaviorCount(EventUnit(), "Retaliation")))) {
      libNtve_gf_UnitCreateFacingPoint(1, "DragonDummy", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitDamageSourceUnit()));
      lv_dummy = UnitLastCreated();
      UnitBehaviorAdd(lv_dummy, "Intelligence", lv_dummy, (UnitBehaviorCount(EventUnit(), "Intelligence") - 1));
      if ((UnitAbilityGetLevel(EventUnit(), "Nova") >= 1)) {
        UnitAbilityChangeLevel(lv_dummy, "Nova", FixedToInt(UnitAbilityGetLevel(EventUnit(), "Nova")));
      }
      else {
        UnitAbilityChangeLevel(lv_dummy, "Nova", 1);
      }
      UnitAbilityEnable(lv_dummy, "Nova", true);
      UnitIssueOrder(lv_dummy, Order(AbilityCommand("Nova", 0)), c_orderQueueReplace);
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Herotakesrangeddamage_Init () {
  gt_Herotakesrangeddamage = TriggerCreate("gt_Herotakesrangeddamage_Func");
  TriggerAddEventUnitDamaged(gt_Herotakesrangeddamage, null, c_unitDamageTypeRanged, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero takes spell damage
//--------------------------------------------------------------------------------------------------
bool gt_Herotakesspelldamage_Func (bool testConds, bool runActions) {

  fixed lv_randomNumber;
  int lv_thisTag;
  unit lv_target;
  unit lv_dummy;

  lv_thisTag = c_textTagNone;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gf_Rage(EventUnit(), EventUnitDamageAmount());
  gf_RealmSwitch(EventUnit(), EventUnitDamageSourceUnit());
  lv_randomNumber = RandomFixed(0.0, 100.0);
  if ((lv_randomNumber < (1.0 * UnitBehaviorCount(EventUnit(), "Retaliation")))) {
    libNtve_gf_UnitCreateFacingPoint(1, "DragonDummy", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitDamageSourceUnit()));
    lv_dummy = UnitLastCreated();
    UnitBehaviorAdd(lv_dummy, "Intelligence", lv_dummy, (UnitBehaviorCount(EventUnit(), "Intelligence") - 1));
    UnitAbilityChangeLevel(lv_dummy, "Nova", FixedToInt(UnitAbilityGetLevel(EventUnit(), "Nova")));
    UnitAbilityEnable(lv_dummy, "Nova", true);
    UnitIssueOrder(lv_dummy, Order(AbilityCommand("Nova", 0)), c_orderQueueReplace);
  }
  lv_randomNumber = RandomFixed(0.0, 100.0);
  if ((lv_randomNumber < (1.0 * UnitBehaviorCount(EventUnit(), "AbsorbMana")))) {
    UnitAbilityReset(EventUnit(), AbilityCommand("Fireball", 0), c_spendLocationAll);
    UnitAbilityReset(EventUnit(), AbilityCommand("FireClaws", 0), c_spendLocationAll);
    UnitAbilityReset(EventUnit(), AbilityCommand("FlameEgg", 0), c_spendLocationAll);
    UnitAbilityReset(EventUnit(), AbilityCommand("Nova", 0), c_spendLocationAll);
    UnitAbilityReset(EventUnit(), AbilityCommand("Inferno", 0), c_spendLocationAll);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Herotakesspelldamage_Init () {
  gt_Herotakesspelldamage = TriggerCreate("gt_Herotakesspelldamage_Func");
  TriggerAddEventUnitDamaged(gt_Herotakesspelldamage, null, c_unitDamageTypeSpell, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero takes splash damage
//--------------------------------------------------------------------------------------------------
bool gt_Herotakessplashdamage_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gf_Rage(EventUnit(), EventUnitDamageAmount());
  gf_RealmSwitch(EventUnit(), EventUnitDamageSourceUnit());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Herotakessplashdamage_Init () {
  gt_Herotakessplashdamage = TriggerCreate("gt_Herotakessplashdamage_Func");
  TriggerAddEventUnitDamaged(gt_Herotakessplashdamage, null, c_unitDamageTypeSplash, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Miss ranged
//--------------------------------------------------------------------------------------------------
bool gt_HeroMissranged_Func (bool testConds, bool runActions) {

  fixed lv_randomNumber;
  int lv_thisTag;
  unitgroup lv_surroundingUnits;

  lv_thisTag = c_textTagNone;
  lv_surroundingUnits = UnitGroupEmpty();

  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) == 15))) {
      return false;
    }
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnitDamageSourceUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lv_randomNumber = RandomFixed(0.0, 100.0);
  if ((lv_randomNumber > (75.0 + ((gv_players[(UnitGetOwner(EventUnitDamageSourceUnit()) - 1)].stats.reborn.miss * 0.1) + (UnitBehaviorCount(EventUnitDamageSourceUnit(), "Dexterity") * 0.05))))) {
    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) <= 0.0)) {
      UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
      TextTagCreate(StringExternal("Param/Value/9BDF1BE1"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
      lv_thisTag = TextTagLastCreated();
      TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
      TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
      TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
    }
  }
  else {
    lv_randomNumber = RandomFixed(0.0, 100.0);
    if (((lv_randomNumber < (0.2 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "Dexterity"))))) {
      UnitDamage(EventUnitDamageSourceUnit(), "CriticalStrike", EventUnit(), (EventUnitDamageAmount() * (0.004 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "Strength"))));
      libNtve_gf_CreateModelAtPoint("FrenzyStartImpact", UnitGetPosition(EventUnit()));
      TextTagCreate(StringExternal("Param/Value/0B6294CD"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
      lv_thisTag = TextTagLastCreated();
      TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
      TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
      TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroMissranged_Init () {
  gt_HeroMissranged = TriggerCreate("gt_HeroMissranged_Func");
  TriggerAddEventUnitDamaged(gt_HeroMissranged, null, c_unitDamageTypeRanged, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Miss melee
//--------------------------------------------------------------------------------------------------
bool gt_HeroMissmelee_Func (bool testConds, bool runActions) {

  fixed lv_randomNumber;
  int lv_thisTag;
  unitgroup lv_surroundingUnits;
  fixed lv_vTGainMax;
  fixed lv_pOGainMax;

  lv_thisTag = c_textTagNone;
  lv_surroundingUnits = UnitGroupEmpty();

  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) == 15))) {
      return false;
    }
    if (!PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(EventUnit())), UnitGetOwner(EventUnitDamageSourceUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lv_randomNumber = RandomFixed(0.0, 100.0);
  if ((lv_randomNumber > (75.0 + ((gv_players[(UnitGetOwner(EventUnitDamageSourceUnit()) - 1)].stats.reborn.miss * 0.1) + (UnitBehaviorCount(EventUnitDamageSourceUnit(), "Dexterity") * 0.05))))) {
    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) <= 0.0)) {
      UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
      TextTagCreate(StringExternal("Param/Value/6979B884"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
      lv_thisTag = TextTagLastCreated();
      TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
      TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
      TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
    }
  }
  else {
    if ((EventUnitDamageEffect() != "OnFire")) {
      lv_vTGainMax = (EventUnitDamageAmount() * (0.01 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "VampiricTendencies")));
      UnitSetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLife, c_unitPropCurrent) + lv_vTGainMax));
      if ((lv_vTGainMax > 0.0)) {
        TextTagCreate(FixedToText(lv_vTGainMax, 0), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, true, PlayerGroupAll());
        lv_thisTag = TextTagLastCreated();
        TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 100.00, 0.00));
        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
      }
      lv_pOGainMax = (EventUnitDamageAmount() * (0.01 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "PowerOverwhelming")));
      UnitSetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropEnergy, c_unitPropCurrent) + lv_pOGainMax));
      if ((lv_pOGainMax > 0.0)) {
        TextTagCreate(FixedToText(lv_pOGainMax, 0), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, true, PlayerGroupAll());
        lv_thisTag = TextTagLastCreated();
        TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 100.00, 100.00));
        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
      }
    }
    lv_randomNumber = RandomFixed(0.0, 100.0);
    if (((lv_randomNumber < (0.2 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "Dexterity"))))) {
      if ((EventUnitDamageEffect() != "CriticalStrike")) {
        if ((UnitBehaviorCount(EventUnitDamageSourceUnit(), "CriticalCrepitus") > 0)) {
          UnitDamage(EventUnitDamageSourceUnit(), "CriticalCrepitusDamage", EventUnit(), (EventUnitDamageAmount() * (0.004 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "Strength"))));
          libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, UnitGetPosition(EventUnit()));
          TextTagCreate(StringExternal("Param/Value/B416B1B4"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
          lv_thisTag = TextTagLastCreated();
          TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
          TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
          TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
          lv_surroundingUnits = UnitGroupAlliance(UnitGetOwner(EventUnitDamageSourceUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
          UnitGroupRemove(lv_surroundingUnits, EventUnit());
          UnitGroupLoopBegin(lv_surroundingUnits);
          for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
            UnitDamage(EventUnitDamageSourceUnit(), "CriticalCrepitusDamage", UnitGroupLoopCurrent(), ((0.05 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "CriticalCrepitus")) * (EventUnitDamageAmount() * (0.004 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "Strength")))));
            libNtve_gf_CreateModelAtPoint("FrenzyStartImpact", UnitGetPosition(UnitGroupLoopCurrent()));
            TextTagCreate(StringExternal("Param/Value/BB36AEC9"), 24, UnitGetPosition(UnitGroupLoopCurrent()), 1.0, true, true, PlayerGroupAll());
            lv_thisTag = TextTagLastCreated();
            TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
            TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
            TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
          }
          UnitGroupLoopEnd();
        }
        else {
          UnitDamage(EventUnitDamageSourceUnit(), "CriticalStrike", EventUnit(), (EventUnitDamageAmount() * (0.004 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "Strength"))));
          libNtve_gf_CreateModelAtPoint("FrenzyStartImpact", UnitGetPosition(EventUnit()));
          TextTagCreate(StringExternal("Param/Value/F3D40B26"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
          lv_thisTag = TextTagLastCreated();
          TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
          TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
          TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
        }
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroMissmelee_Init () {
  gt_HeroMissmelee = TriggerCreate("gt_HeroMissmelee_Func");
  TriggerAddEventUnitDamaged(gt_HeroMissmelee, null, c_unitDamageTypeMelee, c_unitDamageNonFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero Miss melee (1 Shot)
//--------------------------------------------------------------------------------------------------
bool gt_HeroMissmelee1Shot_Func (bool testConds, bool runActions) {

  fixed lv_randomNumber;
  int lv_thisTag;
  unitgroup lv_surroundingUnits;
  fixed lv_vTGainMax;
  fixed lv_pOGainMax;

  lv_thisTag = c_textTagNone;
  lv_surroundingUnits = UnitGroupEmpty();

  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) == 15))) {
      return false;
    }
    if (!PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(EventUnit())), UnitGetOwner(EventUnitDamageSourceUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if ((EventUnitDamageEffect() != "OnFire")) {
    lv_vTGainMax = (EventUnitDamageAmount() * (0.01 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "VampiricTendencies")));
    UnitSetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropLife, c_unitPropCurrent) + lv_vTGainMax));
    if ((lv_vTGainMax > 0.0)) {
      TextTagCreate(FixedToText(lv_vTGainMax, 0), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, true, PlayerGroupAll());
      lv_thisTag = TextTagLastCreated();
      TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
      TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 100.00, 0.00));
      TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
    }
    lv_pOGainMax = (EventUnitDamageAmount() * (0.01 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "PowerOverwhelming")));
    UnitSetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropEnergy, c_unitPropCurrent) + lv_pOGainMax));
    if ((lv_pOGainMax > 0.0)) {
      TextTagCreate(FixedToText(lv_pOGainMax, 0), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, true, PlayerGroupAll());
      lv_thisTag = TextTagLastCreated();
      TextTagSetVelocity(lv_thisTag, 0.5, libNtve_gf_RandomAngle());
      TextTagSetColor(lv_thisTag, c_textTagColorText, Color(0.00, 100.00, 100.00));
      TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 3.0);
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroMissmelee1Shot_Init () {
  gt_HeroMissmelee1Shot = TriggerCreate("gt_HeroMissmelee1Shot_Func");
  TriggerAddEventUnitDamaged(gt_HeroMissmelee1Shot, null, c_unitDamageTypeMelee, c_unitDamageFatal, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero gives ranged damage
//--------------------------------------------------------------------------------------------------
bool gt_Herogivesrangeddamage_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) != 0))) {
      return false;
    }
    if (!((UnitGetOwner(EventUnitDamageSourceUnit()) != 16))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(EventUnit())), UnitGetOwner(EventUnitDamageSourceUnit()))) {
    gf_StickyShot(EventUnitDamageSourceUnit(), EventUnit());
    gf_DualWield(EventUnitDamageSourceUnit(), EventUnit(), EventUnitDamageEffect(), EventUnitDamageAmount());
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Herogivesrangeddamage_Init () {
  gt_Herogivesrangeddamage = TriggerCreate("gt_Herogivesrangeddamage_Func");
  TriggerAddEventUnitDamaged(gt_Herogivesrangeddamage, null, c_unitDamageTypeRanged, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dark Dissulto
//--------------------------------------------------------------------------------------------------
bool gt_DarkDissulto_Func (bool testConds, bool runActions) {

  fixed lv_randomNumber;
  int lv_thisTag;
  unitgroup lv_surroundingUnits;
  actor lv_abilityActor;
  unit lv_target;
  unit lv_dummy;

  lv_thisTag = c_textTagNone;
  lv_surroundingUnits = UnitGroupEmpty();

  if (!runActions) {
    return true;
  }
  lv_randomNumber = RandomFixed(0.0, 100.0);
  if ((lv_randomNumber <= (2.5 * UnitBehaviorCount(EventUnitDamageSourceUnit(), "DarkDissulto")))) {
    if (((EventUnitDamageEffect() == "FireballDamage") || (EventUnitDamageEffect() == "FireballDamageLevel10") || (EventUnitDamageEffect() == "FireballDamage2") || (EventUnitDamageEffect() == "FireballDamageLevel3") || (EventUnitDamageEffect() == "FireballDamageLevel4") || (EventUnitDamageEffect() == "FireballDamageLevel5") || (EventUnitDamageEffect() == "FireballDamageLevel6") || (EventUnitDamageEffect() == "FireballDamageLevel7") || (EventUnitDamageEffect() == "FireballDamageLevel8") || (EventUnitDamageEffect() == "FireballDamageLevel9"))) {
      lv_surroundingUnits = UnitGroupAlliance(UnitGetOwner(EventUnitDamageSourceUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 9.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
      UnitGroupRemove(lv_surroundingUnits, EventUnit());
      if ((UnitGroupCount(lv_surroundingUnits, c_unitCountAlive) > 0)) {
        lv_target = UnitGroupClosestToPoint(lv_surroundingUnits, UnitGetPosition(EventUnit()));
        TextTagCreate(StringExternal("Param/Value/B80726D6"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
        lv_thisTag = TextTagLastCreated();
        TextTagSetVelocity(lv_thisTag, 0.75, 0.0);
        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
        TextTagCreate(StringExternal("Param/Value/33A50692"), 24, UnitGetPosition(lv_target), 1.0, true, true, PlayerGroupAll());
        lv_thisTag = TextTagLastCreated();
        TextTagSetVelocity(lv_thisTag, 0.75, 180.0);
        TextTagSetColor(lv_thisTag, c_textTagColorText, Color(50.20, 100.00, 100.00));
        TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
        libNtve_gf_UnitCreateFacingPoint(1, "DragonDummy", 0, UnitGetOwner(EventUnitDamageSourceUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(lv_target));
        lv_dummy = UnitLastCreated();
        UnitBehaviorAdd(lv_dummy, "DarkDissulto", lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), "DarkDissulto") - 1));
        UnitBehaviorAdd(lv_dummy, "Intelligence", lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), "Intelligence") - 1));
        UnitAbilityChangeLevel(lv_dummy, "Fireball", FixedToInt(UnitAbilityGetLevel(EventUnitDamageSourceUnit(), "Fireball")));
        UnitAbilityEnable(lv_dummy, "Fireball", true);
        UnitIssueOrder(lv_dummy, OrderTargetingUnit(AbilityCommand("Fireball", 0), lv_target), c_orderQueueReplace);
      }
    }
    else {
      if (((EventUnitDamageEffect() == "FlameEggLevel1") || (EventUnitDamageEffect() == "FlameEggLevel10Damage") || (EventUnitDamageEffect() == "FlameEggLevel2") || (EventUnitDamageEffect() == "FlameEggLevel3") || (EventUnitDamageEffect() == "FlameEggLevel4") || (EventUnitDamageEffect() == "FlameEggLevel5") || (EventUnitDamageEffect() == "FlameEggLevel6") || (EventUnitDamageEffect() == "FlameEggLevel7") || (EventUnitDamageEffect() == "FlameEggLevel8") || (EventUnitDamageEffect() == "FlameEggLevel9"))) {
        lv_surroundingUnits = UnitGroupAlliance(UnitGetOwner(EventUnitDamageSourceUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupRemove(lv_surroundingUnits, EventUnit());
        if ((UnitGroupCount(lv_surroundingUnits, c_unitCountAlive) > 0)) {
          lv_target = UnitGroupClosestToPoint(lv_surroundingUnits, UnitGetPosition(EventUnit()));
          TextTagCreate(StringExternal("Param/Value/3B61BACC"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
          lv_thisTag = TextTagLastCreated();
          TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
          TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
          TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
          TextTagCreate(StringExternal("Param/Value/29D50265"), 24, UnitGetPosition(lv_target), 1.0, true, true, PlayerGroupAll());
          lv_thisTag = TextTagLastCreated();
          TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
          TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
          TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
          libNtve_gf_UnitCreateFacingPoint(1, "DragonDummy", 0, UnitGetOwner(EventUnitDamageSourceUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(lv_target));
          lv_dummy = UnitLastCreated();
          UnitBehaviorAdd(lv_dummy, "DarkDissulto", lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), "DarkDissulto") - 1));
          UnitBehaviorAdd(lv_dummy, "Intelligence", lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), "Intelligence") - 1));
          UnitAbilityChangeLevel(lv_dummy, "FlameEgg", FixedToInt(UnitAbilityGetLevel(EventUnitDamageSourceUnit(), "FlameEgg")));
          UnitAbilityEnable(lv_dummy, "FlameEgg", true);
          UnitIssueOrder(lv_dummy, OrderTargetingPoint(AbilityCommand("FlameEgg", 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
        }
      }
      else {
        if (((EventUnitDamageEffect() == "FrostSpikeDamageLevel1") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel10") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel3") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel4") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel5") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel6") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel7") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel8") || (EventUnitDamageEffect() == "FrostSpikeDamageLevel9"))) {
          lv_surroundingUnits = UnitGroupAlliance(UnitGetOwner(EventUnitDamageSourceUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
          UnitGroupRemove(lv_surroundingUnits, EventUnit());
          if ((UnitGroupCount(lv_surroundingUnits, c_unitCountAlive) > 0)) {
            lv_target = UnitGroupClosestToPoint(lv_surroundingUnits, UnitGetPosition(EventUnit()));
            TextTagCreate(StringExternal("Param/Value/75BACF39"), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
            lv_thisTag = TextTagLastCreated();
            TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
            TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
            TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
            TextTagCreate(StringExternal("Param/Value/4970FF75"), 24, UnitGetPosition(lv_target), 1.0, true, true, PlayerGroupAll());
            lv_thisTag = TextTagLastCreated();
            TextTagSetVelocity(lv_thisTag, 0.75, 90.0);
            TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 50.20));
            TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
            libNtve_gf_UnitCreateFacingPoint(1, "DragonDummy", 0, UnitGetOwner(EventUnitDamageSourceUnit()), UnitGetPosition(EventUnit()), UnitGetPosition(lv_target));
            lv_dummy = UnitLastCreated();
            UnitBehaviorAdd(lv_dummy, "DarkDissulto", lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), "DarkDissulto") - 1));
            UnitBehaviorAdd(lv_dummy, "Intelligence", lv_dummy, (UnitBehaviorCount(EventUnitDamageSourceUnit(), "Intelligence") - 1));
            UnitAbilityChangeLevel(lv_dummy, "FrostSpike", FixedToInt(UnitAbilityGetLevel(EventUnitDamageSourceUnit(), "FrostSpike")));
            UnitAbilityEnable(lv_dummy, "FrostSpike", true);
            UnitIssueOrder(lv_dummy, OrderTargetingUnit(AbilityCommand("FrostSpike", 0), lv_target), c_orderQueueReplace);
          }
        }
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DarkDissulto_Init () {
  gt_DarkDissulto = TriggerCreate("gt_DarkDissulto_Func");
  TriggerAddEventUnitDamaged(gt_DarkDissulto, null, c_unitDamageTypeSpell, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy AI (Attacked)
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAIAttacked_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) == 15))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if ((EventUnitTarget() == UnitFromId(2511))) {
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(EventUnit())) + (PointGetX(UnitGetPosition(EventUnit())) - PointGetX(UnitGetPosition(EventUnitTarget())))), (PointGetY(UnitGetPosition(EventUnit())) + (PointGetY(UnitGetPosition(EventUnit())) - PointGetY(UnitGetPosition(EventUnitTarget())))))), c_orderQueueReplace);
  }
  else {
    if ((EventUnitTarget() == UnitFromId(1597))) {
      UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(EventUnit())) + (PointGetX(UnitGetPosition(EventUnit())) - PointGetX(UnitGetPosition(EventUnitTarget())))), (PointGetY(UnitGetPosition(EventUnit())) + (PointGetY(UnitGetPosition(EventUnit())) - PointGetY(UnitGetPosition(EventUnitTarget())))))), c_orderQueueReplace);
    }
    else {
      if ((EventUnitTarget() == UnitFromId(1976))) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(EventUnit())) + (PointGetX(UnitGetPosition(EventUnit())) - PointGetX(UnitGetPosition(EventUnitTarget())))), (PointGetY(UnitGetPosition(EventUnit())) + (PointGetY(UnitGetPosition(EventUnit())) - PointGetY(UnitGetPosition(EventUnitTarget())))))), c_orderQueueReplace);
      }
      else {
        UnitGroupLoopBegin(UnitGroupAlliance(15, c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), (FixedToInt(UnitGetPropertyFixed(EventUnitTarget(), c_unitPropLevel, c_unitPropCurrent)) / 10.0)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
          UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnitTarget()), c_orderQueueAddToEnd);
        }
        UnitGroupLoopEnd();
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyAIAttacked_Init () {
  gt_EnemyAIAttacked = TriggerCreate("gt_EnemyAIAttacked_Func");
  TriggerAddEventUnitAttacked(gt_EnemyAIAttacked, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy AI (Lava) 1
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAILava1_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) == 15))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueAddToFront);
  UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(255))), c_orderQueueAddToFront);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyAILava1_Init () {
  gt_EnemyAILava1 = TriggerCreate("gt_EnemyAILava1_Func");
  TriggerAddEventUnitRegion(gt_EnemyAILava1, null, RegionFromId(252), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy AI (Lava) 2
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAILava2_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) == 15))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueAddToFront);
  UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(256))), c_orderQueueAddToFront);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyAILava2_Init () {
  gt_EnemyAILava2 = TriggerCreate("gt_EnemyAILava2_Func");
  TriggerAddEventUnitRegion(gt_EnemyAILava2, null, RegionFromId(253), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy AI (Lava) 3
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAILava3_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) == 15))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueAddToFront);
  UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(257))), c_orderQueueAddToFront);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyAILava3_Init () {
  gt_EnemyAILava3 = TriggerCreate("gt_EnemyAILava3_Func");
  TriggerAddEventUnitRegion(gt_EnemyAILava3, null, RegionFromId(254), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy AI (Nest)
//--------------------------------------------------------------------------------------------------
bool gt_EnemyAINest_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) == 15))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueAddToFront);
  UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(259))), c_orderQueueAddToFront);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemyAINest_Init () {
  gt_EnemyAINest = TriggerCreate("gt_EnemyAINest_Func");
  TriggerAddEventUnitRegion(gt_EnemyAINest, null, RegionFromId(258), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Skill Response
//--------------------------------------------------------------------------------------------------
bool gt_EnemySkillResponse_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), EventUnit()), c_orderQueueAddToEnd);
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnemySkillResponse_Init () {
  gt_EnemySkillResponse = TriggerCreate("gt_EnemySkillResponse_Func");
  TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[0].dragon"), AbilityCommand("Nova", 0), c_unitAbilStageAll, false);
  TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[1].dragon"), AbilityCommand("Nova", 0), c_unitAbilStageAll, false);
  TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[2].dragon"), AbilityCommand("Nova", 0), c_unitAbilStageAll, false);
  TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[3].dragon"), AbilityCommand("Nova", 0), c_unitAbilStageAll, false);
  TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[0].dragon"), AbilityCommand("Inferno", 0), c_unitAbilStageAll, false);
  TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[1].dragon"), AbilityCommand("Inferno", 0), c_unitAbilStageAll, false);
  TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[2].dragon"), AbilityCommand("Inferno", 0), c_unitAbilStageAll, false);
  TriggerAddEventUnitAbility(gt_EnemySkillResponse, UnitRefFromVariable("gv_players[3].dragon"), AbilityCommand("Inferno", 0), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Zauberer's Favor
//--------------------------------------------------------------------------------------------------
bool gt_ZauberersFavor_Func (bool testConds, bool runActions) {
  string auto8B028ADB_val;

  int buffCount;
  int i;
  int j;
  
  string lv_deadUnit;
  int lv_unitIndex;

  lv_deadUnit = UnitGetType(EventUnit());

  
  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) == 15))) {
      return false;
     
    }
    if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 16))) {
       
return false;
    }
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(libNtve_gf_KillingUnit()))) {
    
 return false;
    }
  }

  if (!runActions) {
    return true;
  }
  i = 0;
  j = 0;
  auto8B028ADB_val = lv_deadUnit;
    
    
  if (auto8B028ADB_val == "SmallSheep") {
    lv_unitIndex = 0;
 
  }
  else if (auto8B028ADB_val == "Srepti") {
    lv_unitIndex = 1;
  }
  else if (auto8B028ADB_val == "Vogel") {
    lv_unitIndex = 2;
  }
  else if (auto8B028ADB_val == "CretonWarrior") {
    lv_unitIndex = 3;
  }
  else if (auto8B028ADB_val == "Karramarro") {
    lv_unitIndex = 4;
  }
  else if (auto8B028ADB_val == "CretonWatcher") {
    lv_unitIndex = 5;
  }
  else if (auto8B028ADB_val == "Alakdan") {
    lv_unitIndex = 6;
  }
  else if (auto8B028ADB_val == "Gagamba") {
    lv_unitIndex = 7;
  }
  else if (auto8B028ADB_val == "Odvratan") {
    lv_unitIndex = 8;
  }
  else if (auto8B028ADB_val == "Anguis") {
    lv_unitIndex = 9;
  }
  else if (auto8B028ADB_val == "Pervolo") {
    lv_unitIndex = 10;
  }
  else if (auto8B028ADB_val == "EliteCretonWarrior") {
    lv_unitIndex = 11;
  }
  else if (auto8B028ADB_val == "EliteCretonWatcher") {
    lv_unitIndex = 12;
  }
  else if (auto8B028ADB_val == "CretonWarMachine") {
    lv_unitIndex = 13;
  }
  else if (auto8B028ADB_val == "Impetus") {
    lv_unitIndex = 19;
  }
  else if (auto8B028ADB_val == "Mortuus") {
    lv_unitIndex = 20;
  }
  else {
  //UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("How did you call this?"));
  }
  if(gv_enemyDeathCounts[lv_unitIndex] <= 255){
     gv_enemyDeathCounts[lv_unitIndex] += 1;}
  UnitGroupLoopBegin(UnitGroup(UnitGetType(EventUnit()), 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
  
   for(i = UnitBehaviorCount(UnitGroupLoopCurrent(), "ZauberersFavor"); i <= gv_enemyDeathCounts[lv_unitIndex]; i +=1){
      UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "ZauberersFavor", 15, 1);
      //j += 1;
    }
  
     //Instead of removing all stacks and reappyling all stacks +1, see how many stacks each unit is short from what the buff is supposed to be at, and add that many.
     // UnitBehaviorRemovePlayer(UnitGroupLoopCurrent(), "ZauberersFavor", 15, c_unitBehaviorCountAll);
     // if(UnitBehaviorCount(UnitGroupLoopCurrent(), "ZauberersFavor") <= gv_enemyDeathCounts[lv_unitIndex]){
    //}
    //UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "ZauberersFavor", 15, 1);
  
  //DebugStuff UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(auto8B028ADB_val) +   StringToText(" is in slot ") + IntToText(lv_unitIndex) + StringToText(" which has this many stacks ") +  IntToText(gv_enemyDeathCounts[lv_unitIndex])+ StringToText(" and has called: ") + IntToText(j));
  }
  UnitGroupLoopEnd();
  
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ZauberersFavor_Init () {
  int i = 0;
  int j = 0;
  int positionInUnitTypeArray = 0;
  gt_ZauberersFavor = TriggerCreate("gt_ZauberersFavor_Func");
  TriggerAddEventUnitDied(gt_ZauberersFavor, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Count Unit Deaths
//--------------------------------------------------------------------------------------------------
bool gt_CountUnitDeaths_Func (bool testConds, bool runActions) {
  string auto5FB0BE3D_val;
  int i;

  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) == 15))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  
  auto5FB0BE3D_val = UnitGetType(EventUnit());
  for (i = 0; i<=20; i +=1){
    if (auto5FB0BE3D_val == gv_enemyUnitTypes[i]) {
    gv_unitKills[i] += 1;
    break;
    } 
  }
   //if (auto5FB0BE3D_val == gv_enemyUnitTypes[i]) {
   //   gv_unitKills[i] += 1;
   // }
  //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[1]) {
  //  gv_unitKills[1] += 1;
  //}
  //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[2]) {
   //   gv_unitKills[2] += 1;
   // }
   // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[3]) {
   //   gv_unitKills[3] += 1;
   // }
   // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[4]) {
   //   gv_unitKills[4] += 1;
   // }
  //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[5]) {
  //  gv_unitKills[5] += 1;
  //}
  //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[6]) {
  //  gv_unitKills[6] += 1;
   // }
   // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[7]) {
   //   gv_unitKills[7] += 1;
   // }
  //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[8]) {
  //  gv_unitKills[8] += 1;
   // }
  //else if (auto5FB0BE3D_val == gv_enemyUnitTypes[9]) {
  //  gv_unitKills[9] += 1;
   // }
   // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[10]) {
   //   gv_unitKills[10] += 1;
   // }
   // else if (auto5FB0BE3D_val == gv_enemyUnitTypes[11]) {
   //   gv_unitKills[11] += 1;
   // }
   // else {
   // }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CountUnitDeaths_Init () {
  int i = 0;
  gt_CountUnitDeaths = TriggerCreate("gt_CountUnitDeaths_Func");
  TriggerAddEventUnitDied(gt_CountUnitDeaths, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Elite Creton Warrior
//--------------------------------------------------------------------------------------------------
bool gt_EliteCretonWarrior_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetOwner(EventUnit()) == 15) && (UnitGetType(EventUnit()) == gv_enemyUnitTypes[3]) && (gv_unitKills[3] == (25 * PlayerGroupCount(gv_humanPlayers)))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_unitKills[3] = 0;
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1DFF29CC"));
  UnitCreate(1, "EliteCretonWarrior", 0, 15, RegionRandomPoint(RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0)), 270.0);
  libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
  UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Angry", 0, c_animTimeDefault);
  Wait(2.0, c_timeGame);
  UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), libNtve_gf_KillingUnit()), c_orderQueueReplace);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EliteCretonWarrior_Init () {
  gt_EliteCretonWarrior = TriggerCreate("gt_EliteCretonWarrior_Func");
  TriggerAddEventUnitDied(gt_EliteCretonWarrior, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Elite Creton Watcher
//--------------------------------------------------------------------------------------------------
bool gt_EliteCretonWatcher_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetOwner(EventUnit()) == 15) && (UnitGetType(EventUnit()) == gv_enemyUnitTypes[5]) && (gv_unitKills[5] == (25 * PlayerGroupCount(gv_humanPlayers)))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_unitKills[5] = 0;
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B3030916"));
  UnitCreate(1, "EliteCretonWatcher", 0, 15, RegionRandomPoint(RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0)), 270.0);
  libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
  UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Angry", 0, c_animTimeDefault);
  Wait(2.0, c_timeGame);
  UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), libNtve_gf_KillingUnit()), c_orderQueueReplace);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EliteCretonWatcher_Init () {
  gt_EliteCretonWatcher = TriggerCreate("gt_EliteCretonWatcher_Func");
  TriggerAddEventUnitDied(gt_EliteCretonWatcher, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Large Sheep
//--------------------------------------------------------------------------------------------------
bool gt_LargeSheep_Func (bool testConds, bool runActions) {

  if (testConds) {
    
    if (!(((UnitGetOwner(EventUnit()) == 15) && gv_enemyUnitTypes[0] == "SmallSheep" && (UnitGetType(EventUnit()) == gv_enemyUnitTypes[0]) && (gv_unitKills[0] == (25 * PlayerGroupCount(gv_humanPlayers)))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
   
  gv_unitKills[0] = 0;
  
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/DECEF3FA"));
  UnitCreate(1, "LargeSheep", 0, 15, RegionRandomPoint(RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0)), 270.0);
  libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
  UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Angry", 0, c_animTimeDefault);
  Wait(2.0, c_timeGame);
  UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), libNtve_gf_KillingUnit()), c_orderQueueReplace);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LargeSheep_Init () {
  gt_LargeSheep = TriggerCreate("gt_LargeSheep_Func");
  TriggerAddEventUnitDied(gt_LargeSheep, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Alpha Srepti
//--------------------------------------------------------------------------------------------------
bool gt_AlphaSrepti_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetOwner(EventUnit()) == 15) && (UnitGetType(EventUnit()) == gv_enemyUnitTypes[1]) && (gv_unitKills[1] == (25 * PlayerGroupCount(gv_humanPlayers)))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_unitKills[1] = 0;
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5E035CF9"));
  UnitCreate(1, "AlphaSrepti", 0, 15, RegionRandomPoint(RegionCircle(Point(PointGetX(UnitGetPosition(EventUnit())), PointGetY(UnitGetPosition(EventUnit()))), 10.0)), 270.0);
  libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
  UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Angry", 0, c_animTimeDefault);
  Wait(2.0, c_timeGame);
  UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), libNtve_gf_KillingUnit()), c_orderQueueReplace);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AlphaSrepti_Init () {
  gt_AlphaSrepti = TriggerCreate("gt_AlphaSrepti_Func");
  TriggerAddEventUnitDied(gt_AlphaSrepti, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Given Melee Damage Text Tag
//--------------------------------------------------------------------------------------------------
bool gt_GivenMeleeDamageTextTag_Func (bool testConds, bool runActions) {

  int lv_thisTag;

  lv_thisTag = c_textTagNone;

  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) == 15))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(FixedToText(EventUnitDamageAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
  lv_thisTag = TextTagLastCreated();
  TextTagSetVelocity(lv_thisTag, 0.75, 75.0);
  TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 100.00, 100.00));
  TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GivenMeleeDamageTextTag_Init () {
  gt_GivenMeleeDamageTextTag = TriggerCreate("gt_GivenMeleeDamageTextTag_Func");
  TriggerAddEventUnitDamaged(gt_GivenMeleeDamageTextTag, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Recieved Melee Damage Text Tag
//--------------------------------------------------------------------------------------------------
bool gt_RecievedMeleeDamageTextTag_Func (bool testConds, bool runActions) {

  int lv_thisTag;

  lv_thisTag = c_textTagNone;

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(FixedToText(EventUnitDamageAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, true, PlayerGroupAll());
  lv_thisTag = TextTagLastCreated();
  TextTagSetVelocity(lv_thisTag, 0.75, 105.0);
  TextTagSetColor(lv_thisTag, c_textTagColorText, Color(100.00, 0.00, 0.00));
  TextTagSetTime(lv_thisTag, c_textTagTimeDuration, 2.0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RecievedMeleeDamageTextTag_Init () {
  gt_RecievedMeleeDamageTextTag = TriggerCreate("gt_RecievedMeleeDamageTextTag_Func");
  TriggerAddEventUnitDamaged(gt_RecievedMeleeDamageTextTag, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Zauberer's Minions Unit Types
//--------------------------------------------------------------------------------------------------
bool gt_SetZauberersMinionsUnitTypes_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_zauberersMinionsUnitTypes[0] = "DemonicSheep";
  gv_zauberersMinionsUnitTypes[1] = "DemonicSrepti";
  gv_zauberersMinionsUnitTypes[2] = "CretonWarlord";
  gv_zauberersMinionsUnitTypes[3] = "Stercore";
  gv_zauberersMinionsUnitTypes[4] = "Impetus";
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetZauberersMinionsUnitTypes_Init () {
  gt_SetZauberersMinionsUnitTypes = TriggerCreate("gt_SetZauberersMinionsUnitTypes_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Zauberer's Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetZauberersRegions_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_zauberersRegions[0] = RegionFromId(203);
  gv_zauberersRegions[1] = RegionFromId(204);
  gv_zauberersRegions[2] = RegionFromId(205);
  gv_zauberersRegions[3] = RegionFromId(206);
  gv_zauberersRegions[4] = RegionFromId(207);
  gv_zauberersRegions[5] = RegionFromId(208);
  gv_zauberersRegions[6] = RegionFromId(209);
  gv_zauberersRegions[7] = RegionFromId(210);
  gv_zauberersRegions[8] = RegionFromId(213);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetZauberersRegions_Init () {
  gt_SetZauberersRegions = TriggerCreate("gt_SetZauberersRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zauberer's Minions
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZauberersMinions_Func (bool testConds, bool runActions) {
  fixed auto2FFAA3D0_ae;
  fixed auto2FFAA3D0_ai;
  fixed auto227D18B5_ae;
  fixed auto227D18B5_ai;

  fixed lv_numPlayers;
  int lv_randomSkill;


  if (testConds) {
    if (!(((gv_livingDragonsFightingZauberer1stForm >= 1) || (gv_livingDragonsFightingZauberer2ndForm >= 1)))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  auto2FFAA3D0_ae = gv_livingDragonsFightingZauberer1stForm;
  auto2FFAA3D0_ai = 1.0;
  lv_numPlayers = 1.0;
  for ( ; ( (auto2FFAA3D0_ai >= 0 && lv_numPlayers <= auto2FFAA3D0_ae) || (auto2FFAA3D0_ai <= 0 && lv_numPlayers >= auto2FFAA3D0_ae) ); lv_numPlayers += auto2FFAA3D0_ai ) {
    UnitCreate(1, gv_zauberersMinionsUnitTypes[RandomInt(0, 4)], c_unitCreateIgnorePlacement, 15, RegionRandomPoint(gv_zauberersRegions[RandomInt(0, 8)]), libNtve_gf_RandomAngle());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonInBattleWithZauberer1stForm, c_unitCountAlive)), c_orderQueueReplace);
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_zauberersMinions, UnitLastCreated());
  }
  auto227D18B5_ae = gv_livingDragonsFightingZauberer2ndForm;
  auto227D18B5_ai = 1.0;
  lv_numPlayers = 1.0;
  for ( ; ( (auto227D18B5_ai >= 0 && lv_numPlayers <= auto227D18B5_ae) || (auto227D18B5_ai <= 0 && lv_numPlayers >= auto227D18B5_ae) ); lv_numPlayers += auto227D18B5_ai ) {
    UnitCreate(1, gv_zauberersMinionsUnitTypes[RandomInt(0, 4)], c_unitCreateIgnorePlacement, 15, RegionRandomPoint(gv_zauberersRegions[RandomInt(0, 8)]), libNtve_gf_RandomAngle());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonInBattleWithZauberer2ndForm, c_unitCountAlive)), c_orderQueueReplace);
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_zauberersMinions, UnitLastCreated());
    UnitCreate(1, gv_zauberersMinionsUnitTypes[RandomInt(0, 4)], c_unitCreateIgnorePlacement, 15, RegionRandomPoint(gv_zauberersRegions[RandomInt(0, 8)]), libNtve_gf_RandomAngle());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonInBattleWithZauberer2ndForm, c_unitCountAlive)), c_orderQueueReplace);
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_zauberersMinions, UnitLastCreated());
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnZauberersMinions_Init () {
  gt_SpawnZauberersMinions = TriggerCreate("gt_SpawnZauberersMinions_Func");
  TriggerEnable(gt_SpawnZauberersMinions, false);
  TriggerAddEventTimePeriodic(gt_SpawnZauberersMinions, 20.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dragon Dies in Zauberer 1
//--------------------------------------------------------------------------------------------------
bool gt_DragonDiesinZauberer1_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (testConds) {
    if (!(((UnitGetOwner(EventUnit()) != 16) && PlayerGroupHasPlayer(gv_playersInBattleWithZauberer1stForm, UnitGetOwner(EventUnit())) && UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic)))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  PlayerGroupRemove(gv_playersInBattleWithZauberer1stForm, lr_player.player);
  CameraLockInput(lr_player.player, false);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryCombat, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryVoice, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategorySpell, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryUI, 100.0, 1.0);
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "BiodomeTheme", c_soundtrackCueAny, 0, false);
  VisRevealerDestroy(lr_player.zauberer1stFormRevealer);
  gv_livingDragonsFightingZauberer1stForm -= 1;
  libNtve_gf_ShowHideBossBar(false, lr_player.player);
  if ((gv_livingDragonsFightingZauberer1stForm <= 0)) {
    gv_livingDragonsFightingZauberer1stForm = 0;
    UnitRemove(gv_zauberer1stForm);
    TriggerEnable(gt_SpawnZauberersMinions, false);
    UnitCreate(1, "CrystalofVenadas", 0, 15, gv_zauberersCrystalLocation, 270.0);
    gv_zauberersCrystal = UnitLastCreated();
    UnitGroupLoopBegin(gv_zauberersMinions);
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_TeleporttoBioDome, true);
    TriggerEnable(gt_TeleporttoCreton, true);
  }
  lr_player.state.preventSave = false;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DragonDiesinZauberer1_Init () {
  gt_DragonDiesinZauberer1 = TriggerCreate("gt_DragonDiesinZauberer1_Func");
  TriggerAddEventUnitDied(gt_DragonDiesinZauberer1, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dragon Dies in Zauberer 2
//--------------------------------------------------------------------------------------------------
bool gt_DragonDiesinZauberer2_Func (bool testConds, bool runActions) {
  playerData_r lr_player;



  if (testConds) {
    if (!(((UnitGetOwner(EventUnit()) != 16) && PlayerGroupHasPlayer(gv_playersInBattleWithZauberer2ndForm, UnitGetOwner(EventUnit())) && UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic)))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];
  PlayerGroupRemove(gv_playersInBattleWithZauberer2ndForm, lr_player.player);
  CameraLockInput(lr_player.player, false);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryCombat, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryVoice, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategorySpell, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryUI, 100.0, 1.0);
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "BiodomeTheme", c_soundtrackCueAny, 0, false);
  VisRevealerDestroy(lr_player.zauberer1stFormRevealer);
  gv_livingDragonsFightingZauberer2ndForm -= 1;
  libNtve_gf_ShowHideBossBar(false, lr_player.player);
  if ((gv_livingDragonsFightingZauberer2ndForm <= 0)) {
    gv_livingDragonsFightingZauberer2ndForm = 0;
    UnitRemove(gv_zauberer2ndForm);
    TriggerEnable(gt_SpawnZauberersMinions, false);
    UnitCreate(1, "CrystalofVenadas", 0, 15, gv_zauberersCrystalLocation, 270.0);
    gv_zauberersCrystal = UnitLastCreated();
    UnitGroupLoopBegin(gv_zauberersMinions);
    for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
      UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_TeleporttoBioDome, true);
    TriggerEnable(gt_TeleporttoCreton, true);
    Wait(15.0, c_timeGame);
    UnitRemove(gv_MagicalDemonicSheep);
  }
  lr_player.state.preventSave = false;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DragonDiesinZauberer2_Init () {
  gt_DragonDiesinZauberer2 = TriggerCreate("gt_DragonDiesinZauberer2_Func");
  TriggerAddEventUnitDied(gt_DragonDiesinZauberer2, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zauberer 1st Form
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZauberer1stForm_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_i;
  int lv_spawnPoint;
  int lv_numPlayers;


  if (testConds) {
    if (gv_zaubererFirstFormAlreadyDead[(UnitGetOwner(libNtve_gf_KillingUnit()) - 1)]) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TriggerEnable(gt_TeleporttoBioDome, false);
  TriggerEnable(gt_TeleporttoCreton, false);
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    CameraPan(lr_player.player, RegionGetCenter(RegionFromId(214)), 0.0, -1, 10, false);
    CameraLockInput(lr_player.player, true);
    lr_player.state.inCinematic = true;
    VisRevealerCreate(lr_player.player, RegionFromId(214));
    lr_player.zauberer1stFormRevealer = VisRevealerLastCreated();
    libNtve_gf_PauseUnit(lr_player.dragon, true);
    UnitGroupAdd(gv_dragonInBattleWithZauberer1stForm, lr_player.dragon);
    PlayerGroupAdd(gv_playersInBattleWithZauberer1stForm, lr_player.player);
    gv_livingDragonsFightingZauberer1stForm += 1;
    if (lv_spawnPoint == 0) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(205)), false);
    }
    else if (lv_spawnPoint == 1) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(210)), false);
    }
    else if (lv_spawnPoint == 2) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(207)), false);
    }
    else if (lv_spawnPoint == 3) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(213)), false);
    }
    lv_spawnPoint += 1;
  }
  PlayerGroupLoopEnd();
  libNtve_gf_HideGameUI(false, gv_playersInBattleWithZauberer1stForm);
  // for (PlayerGroupLoopBegin(gv_playersInBattleWithZauberer1stForm); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    // lr_player = gv_players[PlayerGroupLoopCurrent() - 1]
    //lr_player.state.preventSave = true;
  // }
  //PlayerGroupLoopEnd();
  TransmissionSend(gv_playersInBattleWithZauberer1stForm, TransmissionSourceFromModel("TassadarPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/5CE524CE"), StringExternal("Param/Value/881CE2C2"), 5.0, c_transmissionDurationSet, true);
  Wait(1.0, c_timeReal);
  for (lv_i = 1; lv_i <= 30; lv_i += 1) {
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    Wait(0.1, c_timeReal);
  }
  libNtve_gf_UnitCreateFacingPoint(1, "Zauberer", 0, 15, RegionGetCenter(RegionFromId(203)), UnitGetPosition(libNtve_gf_KillingUnit()));
  gv_zauberer1stForm = UnitLastCreated();
  libNtve_gf_PauseUnit(gv_zauberer1stForm, true);
  for (PlayerGroupLoopBegin(gv_playersInBattleWithZauberer1stForm); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    libNtve_gf_DisplayBossBar(lr_player.player, "Assets\\Textures\\tassadarportrait_static.dds", StringExternal("Param/Value/60280CA1"), 100, lr_player.playerGroupSingle);
    libNtve_gf_SetBossBarBoss(lr_player.player, gv_zauberer1stForm, true);
    libNtve_gf_SetBossBarRace(lr_player.player, libNtve_ge_BossBarRace_Protoss, true);
    libNtve_gf_MoveBossBar(lr_player.player, c_anchorTop, 0, 125);
  }
  PlayerGroupLoopEnd();

  for ( UnitGroupLoopBegin(gv_dragonInBattleWithZauberer1stForm); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
  }
  UnitGroupLoopEnd();

  for (PlayerGroupLoopBegin(gv_playersInBattleWithZauberer1stForm); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    lr_player.state.inCinematic = false;
    CameraLockInput(lr_player.player, false);
  }
  PlayerGroupLoopEnd();
  
  libNtve_gf_PauseUnit(gv_zauberer1stForm, false);
  libNtve_gf_HideGameUI(true, gv_playersInBattleWithZauberer1stForm);
  SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategoryCombat, 10.0, 1.0);
  SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategoryVoice, 10.0, 1.0);
  SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategorySpell, 10.0, 1.0);
  SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategoryAmbient, 10.0, 1.0);
  SoundChannelSetVolume(gv_playersInBattleWithZauberer1stForm, c_soundCategoryUI, 10.0, 1.0);
  SoundtrackStop(gv_playersInBattleWithZauberer1stForm, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(gv_playersInBattleWithZauberer1stForm, c_soundtrackCategoryMusic, "ZauberersTheme", c_soundtrackCueAny, 0, false);
  TriggerEnable(gt_SpawnZauberersMinions, true);
  TriggerEnable(gt_Zauberer1stFormAI, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnZauberer1stForm_Init () {
  gt_SpawnZauberer1stForm = TriggerCreate("gt_SpawnZauberer1stForm_Func");
  TriggerAddEventUnitDied(gt_SpawnZauberer1stForm, UnitRefFromVariable("gv_zauberersCrystal"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Zauberer 1st Form Death
//--------------------------------------------------------------------------------------------------
bool gt_Zauberer1stFormDeath_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int i;

  int lv_spawnPoint;

  if (testConds) {
    if (!((UnitGetType(EventUnit()) == "Zauberer"))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TriggerEnable(gt_SpawnZauberersMinions, false);
  for ( UnitGroupLoopBegin(gv_zauberersMinions); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    UnitKill(UnitGroupLoopCurrent());
  }
  UnitGroupLoopEnd();

  for (UnitGroupLoopBegin(gv_dragonInBattleWithZauberer1stForm); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];
    PlayerModifyPropertyInt(lr_player.player, c_playerPropCustom, c_playerPropOperAdd, 20);
    if ((lr_player.quests.storyQuests[9].state == 1)) {
      lr_player.quests.storyQuests[9].state = 2;
      BankValueSetFromInt(lr_player.banks.dragonBank, "SQ9", lr_player.hand, lr_player.quests.storyQuests[9].state);
    }
  }
  UnitGroupLoopEnd();

  for(PlayerGroupLoopBegin(gv_playersInBattleWithZauberer1stForm); PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    gv_zaubererFirstFormAlreadyDead[PlayerGroupLoopCurrent() - 1] = true;
  }
  PlayerGroupLoopEnd();

  UnitGroupClear(gv_dragonInBattleWithZauberer1stForm);
  PlayerGroupClear(gv_playersInBattleWithZauberer1stForm);
  gv_livingDragonsFightingZauberer1stForm = 0;
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];;

     // lr_player.state.preventSave = true;
    libNtve_gf_ShowHideBossBar(false, lr_player.player);
    libNtve_gf_PauseUnit(lr_player.dragon, true);
    if (lv_spawnPoint == 0) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(205)), false);
    }
    else if (lv_spawnPoint == 1) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(210)), false);
    }
    else if (lv_spawnPoint == 2) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(207)), false);
    }
    else if (lv_spawnPoint == 3) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(213)), false);
    }
    lv_spawnPoint += 1;
  }
  PlayerGroupLoopEnd();

  libNtve_gf_HideGameUI(false, gv_playersInBioDome);
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];;
    lr_player.state.inCinematic = true;
    CameraPan(lr_player.player, RegionGetCenter(RegionFromId(214)), 5.0, -1, 10, false);
    CameraLockInput(lr_player.player, true);
  }
  PlayerGroupLoopEnd();

  TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel("TassadarPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/3E75D4E4"), StringExternal("Param/Value/4BAB0F7C"), 5.0, c_transmissionDurationSet, false);
  for (i = 0; i < 80; i += 1) {
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    Wait(0.1, c_timeReal);
  }
  Wait(1.0, c_timeReal);
  TriggerExecute(gt_SpawnZauberer2ndFormNormalWay, true, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Zauberer1stFormDeath_Init () {
  gt_Zauberer1stFormDeath = TriggerCreate("gt_Zauberer1stFormDeath_Func");
  TriggerAddEventUnitDied(gt_Zauberer1stFormDeath, UnitRefFromVariable("gv_zauberer1stForm"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Zauberer 1st Form AI
//--------------------------------------------------------------------------------------------------
bool gt_Zauberer1stFormAI_Func (bool testConds, bool runActions) {
  int lv_randomSkill;
  unit lv_target;

  if (testConds) {
    if (!UnitIsAlive(gv_zauberer1stForm) || libNtve_gf_UnitGroupIsDead(gv_dragonInBattleWithZauberer1stForm)) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lv_randomSkill = RandomInt(0, 2);
  lv_target = UnitGroupRandomUnit(gv_dragonInBattleWithZauberer1stForm, c_unitCountAlive);
  if (lv_randomSkill == 0) {
    UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand("ZaubererFireball", 0), lv_target), c_orderQueueReplace);
    UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
  }
  else if (lv_randomSkill == 1) {
    UnitIssueOrder(gv_zauberer1stForm, OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
    UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
  }
  else if (lv_randomSkill == 2) {
    UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand("HybridCPlasmaBlast", 0), lv_target), c_orderQueueReplace);
    UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
  }
  else {
    UnitIssueOrder(gv_zauberer1stForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Zauberer1stFormAI_Init () {
  gt_Zauberer1stFormAI = TriggerCreate("gt_Zauberer1stFormAI_Func");
  TriggerEnable(gt_Zauberer1stFormAI, false);
  TriggerAddEventTimePeriodic(gt_Zauberer1stFormAI, 10.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zauberer 2nd Form (Normal Way)
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZauberer2ndFormNormalWay_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_spawnPoint;


  if (!runActions) {
    return true;
  }
  PlayerGroupLoopBegin(gv_playersInBioDome);
  for ( ; !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    //lr_player.state.preventSave = true;
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    UnitGroupAdd(gv_dragonInBattleWithZauberer2ndForm, lr_player.dragon);
    PlayerGroupAdd(gv_playersInBattleWithZauberer2ndForm, lr_player.player);
    gv_livingDragonsFightingZauberer2ndForm += 1;
    UnitSetPropertyFixed(lr_player.dragon, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lr_player.dragon, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(lr_player.dragon, c_unitPropShieldsPercent, 100.0);
    if (lv_spawnPoint == 0) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(205)), false);
    }
    else if (lv_spawnPoint == 1) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(210)), false);
    }
    else if (lv_spawnPoint == 2) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(207)), false);
    }
    else if (lv_spawnPoint == 3) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(213)), false);
    }
    lv_spawnPoint += 1;
  }
  PlayerGroupLoopEnd();
  TransmissionSend(gv_playersInBattleWithZauberer2ndForm, TransmissionSourceFromModel("HybridProtossPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/56A8C6FF"), StringExternal("Param/Value/1B366F05"), 5.0, c_transmissionDurationSet, true);
  Wait(3.0, c_timeGame);
  UnitCreate(1, "Zauberer2", 0, 15, RegionGetCenter(RegionFromId(203)), libNtve_gf_RandomAngle());
  gv_zauberer2ndForm = UnitLastCreated();
  libNtve_gf_PauseUnit(gv_zauberer2ndForm, true);
  for (PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    libNtve_gf_DisplayBossBar(lr_player.player, "Assets\\Textures\\btn-unit-xelnaga-destroyer.dds", StringExternal("Param/Value/62B8B3DD"), 100, lr_player.playerGroupSingle);
    libNtve_gf_SetBossBarBoss(lr_player.player, gv_zauberer2ndForm, true);
    libNtve_gf_SetBossBarRace(lr_player.player, libNtve_ge_BossBarRace_Protoss, true);
    libNtve_gf_MoveBossBar(lr_player.player, c_anchorTop, 0, 125);
  }
  PlayerGroupLoopEnd();

  for (UnitGroupLoopBegin(gv_dragonInBattleWithZauberer2ndForm); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
  }
  UnitGroupLoopEnd();

  
  for (PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    CameraLockInput(lr_player.player, false);
    lr_player.state.inCinematic = false;
  }
  PlayerGroupLoopEnd();

  libNtve_gf_PauseUnit(gv_zauberer2ndForm, false);
  libNtve_gf_HideGameUI(true, gv_playersInBattleWithZauberer2ndForm);
  TriggerEnable(gt_SpawnZauberersMinions, true);
  TriggerEnable(gt_Zauberer2ndFormAI, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnZauberer2ndFormNormalWay_Init () {
  gt_SpawnZauberer2ndFormNormalWay = TriggerCreate("gt_SpawnZauberer2ndFormNormalWay_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zauberer 2nd Form (Special)
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZauberer2ndFormSpecial_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int i;

  int lv_spawnPoint;


  if (testConds) {
    if (!gv_zaubererFirstFormAlreadyDead[(UnitGetOwner(libNtve_gf_KillingUnit()) - 1)]) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TriggerEnable(gt_TeleporttoBioDome, false);
  TriggerEnable(gt_TeleporttoCreton, false);
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    //lr_player.state.preventSave = true;
    CameraPan(lr_player.player, RegionGetCenter(RegionFromId(214)), 5.0, -1, 10, false);
    CameraLockInput(lr_player.player, true);
    lr_player.state.inCinematic = true;
    VisRevealerCreate(lr_player.player, RegionFromId(214));
    lr_player.zauberer1stFormRevealer = VisRevealerLastCreated();
    libNtve_gf_PauseUnit(lr_player.dragon, true);
    UnitGroupAdd(gv_dragonInBattleWithZauberer2ndForm, lr_player.dragon);
    PlayerGroupAdd(gv_playersInBattleWithZauberer2ndForm, lr_player.player);
    gv_livingDragonsFightingZauberer2ndForm += 1;
    if (lv_spawnPoint == 0) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(205)), false);
    }
    else if (lv_spawnPoint == 1) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(210)), false);
    }
    else if (lv_spawnPoint == 2) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(207)), false);
    }
    else if (lv_spawnPoint == 3) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(213)), false);
    }
    lv_spawnPoint += 1;
  }
  PlayerGroupLoopEnd();

  libNtve_gf_HideGameUI(false, gv_playersInBattleWithZauberer2ndForm);
  TransmissionSend(gv_playersInBattleWithZauberer2ndForm, TransmissionSourceFromModel("HybridProtossPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/074636AE"), StringExternal("Param/Value/3C0A34BC"), 5.0, c_transmissionDurationSet, true);
  Wait(1.0, c_timeReal);
  for (i = 1; i <= 30; i += 1) {
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionRandomPoint(RegionFromId(214)));
    Wait(0.1, c_timeReal);
  }
  libNtve_gf_UnitCreateFacingPoint(1, "Zauberer2", 0, 15, RegionGetCenter(RegionFromId(203)), UnitGetPosition(libNtve_gf_KillingUnit()));
  gv_zauberer2ndForm = UnitLastCreated();
  libNtve_gf_PauseUnit(gv_zauberer2ndForm, true);
  for (PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    libNtve_gf_DisplayBossBar(lr_player.player, "Assets\\Textures\\tassadarportrait_static.dds", StringExternal("Param/Value/A4EF394E"), 100, lr_player.playerGroupSingle);
    libNtve_gf_SetBossBarBoss(lr_player.player, gv_zauberer2ndForm, true);
    libNtve_gf_SetBossBarRace(lr_player.player, libNtve_ge_BossBarRace_Protoss, true);
    libNtve_gf_MoveBossBar(lr_player.player, c_anchorTop, 0, 125);
  }
  PlayerGroupLoopEnd();

  for (UnitGroupLoopBegin(gv_dragonInBattleWithZauberer2ndForm); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
  }
  UnitGroupLoopEnd();

  for (PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    lr_player.state.inCinematic = false;
    CameraLockInput(lr_player.player, false);
  }
  libNtve_gf_PauseUnit(gv_zauberer2ndForm, false);
  libNtve_gf_HideGameUI(true, gv_playersInBattleWithZauberer2ndForm);
  SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategoryCombat, 10.0, 1.0);
  SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategoryVoice, 10.0, 1.0);
  SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategorySpell, 10.0, 1.0);
  SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategoryAmbient, 10.0, 1.0);
  SoundChannelSetVolume(gv_playersInBattleWithZauberer2ndForm, c_soundCategoryUI, 10.0, 1.0);
  SoundtrackStop(gv_playersInBattleWithZauberer2ndForm, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(gv_playersInBattleWithZauberer2ndForm, c_soundtrackCategoryMusic, "ZauberersTheme", c_soundtrackCueAny, 0, false);
  TriggerEnable(gt_SpawnZauberersMinions, true);
  TriggerEnable(gt_Zauberer2ndFormAI, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnZauberer2ndFormSpecial_Init () {
  gt_SpawnZauberer2ndFormSpecial = TriggerCreate("gt_SpawnZauberer2ndFormSpecial_Func");
  TriggerAddEventUnitDied(gt_SpawnZauberer2ndFormSpecial, UnitRefFromVariable("gv_zauberersCrystal"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Zauberer 2nd Form Death
//--------------------------------------------------------------------------------------------------
bool gt_Zauberer2ndFormDeath_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_spawnPoint;


  if (testConds) {
    if (!((UnitGetType(EventUnit()) == "Zauberer2"))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_zaubererDead = true;
  for (PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    lr_player.state.inCinematic = true;
    CameraPan(lr_player.player, RegionGetCenter(RegionFromId(214)), 5.0, -1, 10, false);
    CameraLockInput(lr_player.player, true);
  }
  PlayerGroupLoopEnd();

  TriggerEnable(gt_SpawnZauberersMinions, false);
  for (UnitGroupLoopBegin(gv_zauberersMinions); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    UnitKill(UnitGroupLoopCurrent());
  }
  UnitGroupLoopEnd();
  
  for (PlayerGroupLoopBegin(gv_playersInBattleWithZauberer2ndForm); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    PlayerGroupAdd(gv_playersWhoHaveDefeatedZauberer, lr_player.player);
    PlayerModifyPropertyInt(lr_player.player, c_playerPropCustom, c_playerPropOperAdd, 30);
    libNtve_gf_ShowHideBossBar(false, lr_player.player);
    libNtve_gf_PauseUnit(lr_player.dragon, true);
    if ((UnitLevel(lr_player.dragon) != 100)) {
      gf_AddExperience(lr_player.dragon, 23000.0);
    }
    if (lv_spawnPoint == 0) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(205)), false);
    }
    else if (lv_spawnPoint == 1) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(210)), false);
    }
    else if (lv_spawnPoint == 2) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(207)), false);
    }
    else if (lv_spawnPoint == 3) {
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(213)), false);
    }
    lv_spawnPoint += 1;
  }
  PlayerGroupLoopEnd();

  for (UnitGroupLoopBegin(gv_dragonInBattleWithZauberer2ndForm); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];
    if ((lr_player.quests.storyQuests[9].state == 2)) {
      lr_player.quests.storyQuests[9].state = 3;
      ObjectiveSetState(lr_player.quests.storyQuests[9].objective, c_objectiveStateCompleted);
      ObjectiveDestroy(lr_player.quests.storyQuests[9].objective);
      BankValueSetFromInt(lr_player.banks.dragonBank, "SQ9", lr_player.hand, lr_player.quests.storyQuests[9].state);
      PingDestroy(lr_player.quests.storyQuests[9].ping);
    }
  }
  UnitGroupLoopEnd();

  libNtve_gf_HideGameUI(false, gv_playersInBattleWithZauberer2ndForm);
  TransmissionSend(gv_playersInBattleWithZauberer2ndForm, TransmissionSourceFromModel("HybridProtossPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/8984FD5F"), StringExternal("Param/Value/C033FA05"), 5.0, c_transmissionDurationSet, true);
  for (UnitGroupLoopBegin(gv_dragonInBattleWithZauberer2ndForm); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    CameraLockInput(UnitGetOwner(UnitGroupLoopCurrent()), false);
  }
  UnitGroupLoopEnd();

  //UnitCreate(1, "gv_TimeWarpBot", 0, 15, gv_TimeWarpBotLocation, 270.0);
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle,StringExternal("Param/Value/506A51FE"));
  UnitCreate(1, "MagicalDemonicSheep", c_unitCreateIgnorePlacement, 15, RegionRandomPoint(RegionFromName("Boss Fight Warp Out Zone")), 270);
  gv_MagicalDemonicSheep = UnitLastCreated();
  libNtve_gf_HideGameUI(true, gv_playersInBattleWithZauberer2ndForm);
  //TimerStart(gv_zaubererTimer, 15.0, false, c_timeReal);
  //TimerWindowCreate(gv_zaubererTimer, StringExternal("Param/Value/7035D573"), true, false);
  // gv_zaubererTimerWindow = TimerWindowLastCreated();
  // TimerWindowShow(gv_zaubererTimerWindow, PlayerGroupAll(), false);
  // TimerWindowShow(gv_zaubererTimerWindow, gv_playersInBioDome, true);
  // libNtve_gf_WaitForTimer(gv_zaubererTimer, 0.0, false);
  // TimerWindowDestroy(gv_zaubererTimerWindow);
  libNtve_gf_AddPlayerGroupToPlayerGroup(gv_playersInBioDome, gv_playerswatchingendingcinematic);
  //TriggerExecute(gt_EndingCinematic, true, false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Zauberer2ndFormDeath_Init () {
  gt_Zauberer2ndFormDeath = TriggerCreate("gt_Zauberer2ndFormDeath_Func");
  TriggerAddEventUnitDied(gt_Zauberer2ndFormDeath, UnitRefFromVariable("gv_zauberer2ndForm"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Warp Out From Boss Arena(Ignore, look for Magical Demonic Sheep)
//--------------------------------------------------------------------------------------------------
bool gt_WarpOutFromBossArena_Func (bool testConds, bool runActions) {

  int lv_triggeringPlayerIndex;


  if (testConds) {
    if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
      return false;
    }
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lv_triggeringPlayerIndex = (UnitGetOwner(EventUnit()) - 1);
  TriggerExecute(gt_DragonDiesinZauberer2, false, true);
  
  
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WarpOutFromBossArena_Init () {
  gt_WarpOutFromBossArena = TriggerCreate("gt_WarpOutFromBossArena_Func");
   TriggerAddEventUnitDied(gt_WarpOutFromBossArena, UnitRefFromVariable("gv_TimeWarpBot"));
   
}
//--------------------------------------------------------------------------------------------------
// Trigger: Zauberer 2nd Form AI
//--------------------------------------------------------------------------------------------------
bool gt_Zauberer2ndFormAI_Func (bool testConds, bool runActions) {

  int lv_randomSkill;
  unit lv_target;


  if (testConds) {
    if (!UnitIsAlive(gv_zauberer2ndForm) || libNtve_gf_UnitGroupIsDead(gv_dragonInBattleWithZauberer2ndForm)) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lv_randomSkill = RandomInt(0, 4);
  lv_target = UnitGroupRandomUnit(gv_dragonInBattleWithZauberer2ndForm, c_unitCountAlive);
  if (lv_randomSkill == 0) {
    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("ZaubererFireball", 0), lv_target), c_orderQueueReplace);
    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
  }
  else if (lv_randomSkill == 1) {
    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("FireClaws", 0), lv_target), c_orderQueueReplace);
    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
  }
  else if (lv_randomSkill == 2) {
    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("Inferno", 0), lv_target), c_orderQueueReplace);
    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
  }
  else if (lv_randomSkill == 3) {
    UnitIssueOrder(gv_zauberer2ndForm, Order(AbilityCommand("Nova", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
  }
  else if (lv_randomSkill == 4) {
    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingPoint(AbilityCommand("FlameEgg", 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueAddToEnd);
  }
  else {
    UnitIssueOrder(gv_zauberer2ndForm, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Zauberer2ndFormAI_Init () {
  gt_Zauberer2ndFormAI = TriggerCreate("gt_Zauberer2ndFormAI_Func");
  TriggerEnable(gt_Zauberer2ndFormAI, false);
  TriggerAddEventTimePeriodic(gt_Zauberer2ndFormAI, 10.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam Set health
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamSethealth_Func (bool testConds, bool runActions) {

   int healthcap;
  if (!runActions) {
    return true;
  }
  healthcap = PlayerGroupCount(PlayerGroupActive());
  if (healthcap >3){
      healthcap = 3;
  }
  gv_machinaDePlagam = UnitFromId(1711);
  UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(healthcap)));
  UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropShieldsMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(PlayerGroupActive()))));
  UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropEnergyMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropEnergyMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(PlayerGroupActive()))));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamSethealth_Init () {
  int healthcap = 0;
  gt_MachinaDePlagamSethealth = TriggerCreate("gt_MachinaDePlagamSethealth_Func");
  TriggerAddEventTimeElapsed(gt_MachinaDePlagamSethealth, 5.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Machina De Plagam Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateMachinaDePlagamWarning_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagDestroy(gv_machinaDePlagamWarning[(UnitGetOwner(EventUnit()) - 1)]);
  TextTagCreate(StringExternal("Param/Value/81DA56B8"), 24, PointFromId(2664), 1.0, true, true, PlayerGroupSingle(UnitGetOwner(EventUnit())));
  gv_machinaDePlagamWarning[(UnitGetOwner(EventUnit()) - 1)] = TextTagLastCreated();
  TextTagSetTime(gv_machinaDePlagamWarning[(UnitGetOwner(EventUnit()) - 1)], c_textTagTimeDuration, 524288.0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateMachinaDePlagamWarning_Init () {
  gt_CreateMachinaDePlagamWarning = TriggerCreate("gt_CreateMachinaDePlagamWarning_Func");
  TriggerAddEventUnitRangePoint(gt_CreateMachinaDePlagamWarning, null, PointFromId(2664), 25.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Machina De Plagam Warning
//--------------------------------------------------------------------------------------------------
bool gt_DestroyMachinaDePlagamWarning_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagDestroy(gv_machinaDePlagamWarning[(UnitGetOwner(EventUnit()) - 1)]);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DestroyMachinaDePlagamWarning_Init () {
  gt_DestroyMachinaDePlagamWarning = TriggerCreate("gt_DestroyMachinaDePlagamWarning_Func");
  TriggerAddEventUnitRangePoint(gt_DestroyMachinaDePlagamWarning, null, PointFromId(2664), 25.0, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hero attacks Machina De Plagam
//--------------------------------------------------------------------------------------------------
bool gt_HeroattacksMachinaDePlagam_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGroupHasUnit(gv_unitsthatdidDamagetoMachinaDePlagam, EventUnitTarget()) || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnitTarget()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitGroupAdd(gv_unitsthatdidDamagetoMachinaDePlagam, EventUnitTarget());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HeroattacksMachinaDePlagam_Init () {
  gt_HeroattacksMachinaDePlagam = TriggerCreate("gt_HeroattacksMachinaDePlagam_Func");
  TriggerAddEventUnitAttacked2(gt_HeroattacksMachinaDePlagam, UnitRefFromVariable("gv_machinaDePlagam"), null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam Enter
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamEnter_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];


  if (!runActions) {
    return true;
  }

  if (!gv_machinaDePlagamisDead) {
    lr_player.state.fightWithPlagam = true;
    SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryCombat, 10.0, 1.0);
    SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryVoice, 10.0, 1.0);
    SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategorySpell, 10.0, 1.0);
    SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 10.0, 1.0);
    SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryUI, 10.0, 1.0);
    SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, false);
    SoundPlay(SoundLink("MachinaDePlagamTheme", -1), lr_player.playerGroupSingle, 100.0, 0.0);
    lr_player.plagamTheme = SoundLastPlayed();
    libNtve_gf_DisplayBossBar(lr_player.player, "Assets\\Textures\\colossusportrait_static.dds", StringExternal("Param/Value/72B4CF70"), 100, lr_player.playerGroupSingle);
    libNtve_gf_SetBossBarBoss(lr_player.player, gv_machinaDePlagam, true);
    libNtve_gf_SetBossBarRace(lr_player.player, libNtve_ge_BossBarRace_Protoss, true);
    libNtve_gf_MoveBossBar(lr_player.player, c_anchorTop, 0, 150);
    lr_player.locationString = "Machina De Plagam's Crater";
    lr_player.locationText = StringToText(lr_player.locationString);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamEnter_Init () {
  gt_MachinaDePlagamEnter = TriggerCreate("gt_MachinaDePlagamEnter_Func");
  TriggerAddEventUnitRegion(gt_MachinaDePlagamEnter, UnitRefFromVariable("gv_players[0].dragon"), RegionFromId(227), true);
  TriggerAddEventUnitRegion(gt_MachinaDePlagamEnter, UnitRefFromVariable("gv_players[1].dragon"), RegionFromId(227), true);
  TriggerAddEventUnitRegion(gt_MachinaDePlagamEnter, UnitRefFromVariable("gv_players[2].dragon"), RegionFromId(227), true);
  TriggerAddEventUnitRegion(gt_MachinaDePlagamEnter, UnitRefFromVariable("gv_players[3].dragon"), RegionFromId(227), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam Leave
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamLeave_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (!runActions) {
    return true;
  }
  lr_player.state.fightWithPlagam = false;
  UnitGroupRemove(gv_unitsthatdidDamagetoMachinaDePlagam, EventUnit());
  SoundStop(lr_player.plagamTheme, true);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryCombat, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryVoice, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategorySpell, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryUI, 100.0, 1.0);
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, false);
  libNtve_gf_ShowHideBossBar(false, lr_player.player);
  lr_player.locationString = "Creton Trench";
  lr_player.locationText = StringToText(lr_player.locationString);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamLeave_Init () {
  gt_MachinaDePlagamLeave = TriggerCreate("gt_MachinaDePlagamLeave_Func");
  TriggerAddEventUnitRegion(gt_MachinaDePlagamLeave, UnitRefFromVariable("gv_players[0].dragon"), RegionFromId(227), false);
  TriggerAddEventUnitRegion(gt_MachinaDePlagamLeave, UnitRefFromVariable("gv_players[1].dragon"), RegionFromId(227), false);
  TriggerAddEventUnitRegion(gt_MachinaDePlagamLeave, UnitRefFromVariable("gv_players[2].dragon"), RegionFromId(227), false);
  TriggerAddEventUnitRegion(gt_MachinaDePlagamLeave, UnitRefFromVariable("gv_players[3].dragon"), RegionFromId(227), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam Dragon Dies
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamDragonDies_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (!lr_player.state.fightWithPlagam) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.state.fightWithPlagam = false;
  SoundStop(lr_player.plagamTheme, true);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryCombat, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryVoice, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategorySpell, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryUI, 100.0, 1.0);
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, false);
  libNtve_gf_ShowHideBossBar(false, lr_player.player);
  UnitGroupRemove(gv_unitsthatdidDamagetoMachinaDePlagam, EventUnit());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamDragonDies_Init () {
  gt_MachinaDePlagamDragonDies = TriggerCreate("gt_MachinaDePlagamDragonDies_Func");
  TriggerAddEventUnitDied(gt_MachinaDePlagamDragonDies, UnitRefFromVariable("gv_players[0].dragon"));
  TriggerAddEventUnitDied(gt_MachinaDePlagamDragonDies, UnitRefFromVariable("gv_players[1].dragon"));
  TriggerAddEventUnitDied(gt_MachinaDePlagamDragonDies, UnitRefFromVariable("gv_players[2].dragon"));
  TriggerAddEventUnitDied(gt_MachinaDePlagamDragonDies, UnitRefFromVariable("gv_players[3].dragon"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam Dies
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamDies_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(EventUnit()));
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    if (lr_player.state.fightWithPlagam) {
      SoundStop(lr_player.plagamTheme, true);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryCombat, 100.0, 1.0);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryVoice, 100.0, 1.0);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategorySpell, 100.0, 1.0);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryUI, 100.0, 1.0);
      lr_player.state.fightWithPlagam = false;
      libNtve_gf_ShowHideBossBar(false, lr_player.player);
    }
  }
  PlayerGroupLoopEnd();

  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B1865E9F"));
  for (UnitGroupLoopBegin(gv_machinaDePlagamsBackup); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    UnitKill(UnitGroupLoopCurrent());
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(UnitGroupLoopCurrent()));
  }
  UnitGroupLoopEnd();

  gv_machinaDePlagamisDead = true;
  TriggerEnable(gt_MachinaDePlagamRespawn, true);
  for (UnitGroupLoopBegin(gv_unitsthatdidDamagetoMachinaDePlagam); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];
    gf_AddExperience(UnitGroupLoopCurrent(), 9000.0);
    PlayerModifyPropertyInt(lr_player.player, c_playerPropCustom, c_playerPropOperAdd, 15);
    if (lr_player.quests.storyQuests[7].state == 2) {
      lr_player.quests.storyQuests[7].state = 3;
      ObjectiveSetName(lr_player.quests.storyQuests[7].objective, StringExternal("Param/Value/BDB7145A"));
      SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), lr_player.playerGroupSingle, 100.0, 0.0);
      BankValueSetFromInt(lr_player.banks.dragonBank, "SQ7", lr_player.hand, lr_player.quests.storyQuests[7].state);
      TextTagCreate(StringExternal("Param/Value/836C72B8"), 72, UnitGetPosition(UnitFromId(2595)), 6.0, true, true, lr_player.playerGroupSingle);
      lr_player.quests.storyQuests[7].textTag = TextTagLastCreated();
      TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
      TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
      TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2595), 2.5);
      TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
      PingDestroy(lr_player.quests.storyQuests[7].ping);
      PingCreate(lr_player.playerGroupSingle, "PingObjective", UnitGetPosition(UnitFromId(2595)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[7].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
    }
  }
  UnitGroupLoopEnd();

  UnitGroupClear(gv_unitsthatdidDamagetoMachinaDePlagam);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamDies_Init () {
  gt_MachinaDePlagamDies = TriggerCreate("gt_MachinaDePlagamDies_Func");
  TriggerAddEventUnitDied(gt_MachinaDePlagamDies, UnitRefFromVariable("gv_machinaDePlagam"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam Respawn
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamRespawn_Func (bool testConds, bool runActions) {
  int healthcap;

  if (testConds) {
    if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(227), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(227), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(227), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(227), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!gv_machinaDePlagamisDead) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/22DAF5ED"));
  UnitCreate(1, "MachinaDePlagam", 0, 15, RegionGetCenter(RegionFromId(227)), 270.0);
  gv_machinaDePlagam = UnitLastCreated();
  gv_machinaDePlagamisDead = false;
   
  healthcap = PlayerGroupCount(PlayerGroupActive());
  if (healthcap >3){
      healthcap = 3;
  }
  UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(healthcap)));
  UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropShieldsMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(PlayerGroupActive()))));
  UnitSetPropertyFixed(gv_machinaDePlagam, c_unitPropEnergyMax, (UnitGetPropertyFixed(gv_machinaDePlagam, c_unitPropEnergyMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(PlayerGroupActive()))));
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamRespawn_Init () {
  int healthcap = 0;
  gt_MachinaDePlagamRespawn = TriggerCreate("gt_MachinaDePlagamRespawn_Func");
  TriggerEnable(gt_MachinaDePlagamRespawn, false);
  TriggerAddEventTimePeriodic(gt_MachinaDePlagamRespawn, 180.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Machina De Plagam Backup
//--------------------------------------------------------------------------------------------------
bool gt_MachinaDePlagamBackup_Func (bool testConds, bool runActions) {
  int lv_randomEnemy;
  int lv_i;

  if (testConds) {
    if (gv_machinaDePlagamisDead) {
      return false;
    }

    if (!gv_players[0].state.fightWithPlagam && !gv_players[1].state.fightWithPlagam && !gv_players[2].state.fightWithPlagam && !gv_players[3].state.fightWithPlagam) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (PlayerGroupCount(gv_humanPlayers) == 1) {
    lv_randomEnemy = RandomInt(0, 1);
  }
  else if (PlayerGroupCount(gv_humanPlayers) == 2) {
    lv_randomEnemy = RandomInt(0, 3);
  } else if (PlayerGroupCount(gv_humanPlayers) == 3) {
    lv_randomEnemy = RandomInt(0, 5);
  }
  else if (PlayerGroupCount(gv_humanPlayers) == 4) {
    lv_randomEnemy = RandomInt(0, 6);
  }
      
  
  if (lv_randomEnemy == 0) {
    UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
  }
  else if (lv_randomEnemy == 1) {
    UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
  }
  else if (lv_randomEnemy == 2) {
    UnitCreate(1, "EliteCretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
  }
  else if (lv_randomEnemy == 3) {
    UnitCreate(1, "EliteCretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
  }
  else if (lv_randomEnemy == 4) {
    UnitCreate(1, "CretonWarMachine", 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
  }
  else if (lv_randomEnemy == 5) {
    UnitCreate(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
  }
  else if (lv_randomEnemy == 6) {
    UnitCreate(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(227)), libNtve_gf_RandomAngle());
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_machinaDePlagamsBackup, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_unitsthatdidDamagetoMachinaDePlagam, c_unitCountAlive)), c_orderQueueReplace);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MachinaDePlagamBackup_Init () {
  gt_MachinaDePlagamBackup = TriggerCreate("gt_MachinaDePlagamBackup_Func");
  TriggerAddEventTimePeriodic(gt_MachinaDePlagamBackup, 5.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unit attacks Sremagsi
//--------------------------------------------------------------------------------------------------
bool gt_UnitattacksSremagsi_Func (bool testConds, bool runActions) {
  if (testConds) {
    if (!PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnitDamageSourceUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (!(RegionContainsPoint(RegionFromName("Sremagsi's Lair 1"), UnitGetPosition(EventUnitDamageSourceUnit())) || RegionContainsPoint(RegionFromName("Sremagsi's Lair 2"), UnitGetPosition(EventUnitDamageSourceUnit())) || RegionContainsPoint(RegionFromName("Sremagsi's Lair 3"), UnitGetPosition(EventUnitDamageSourceUnit())))) {
    UnitSetPosition(EventUnitDamageSourceUnit(), RegionRandomPoint(RegionFromName("Sremagsi Exploit Fix Region")), false);
    //CameraPan(UnitGetOwner(EventUnitTarget()), RegionGetCenter(RegionFromId(241)), 2.0, -1, 10.0, false);
  }
  if (UnitGroupHasUnit(gv_unitsthatdidDamagetoSremagsi, EventUnitDamageSourceUnit())) {
    return true;
  }
  UnitGroupAdd(gv_unitsthatdidDamagetoSremagsi, EventUnitDamageSourceUnit());
  
  VisRevealerCreate(15, RegionFromName("Sremagsi's Lair 1"));
  VisRevealerCreate(15, RegionFromName("Sremagsi's Lair 2"));
  VisRevealerCreate(15, RegionFromName("Sremagsi's Lair 3"));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnitattacksSremagsi_Init () {
  gt_UnitattacksSremagsi = TriggerCreate("gt_UnitattacksSremagsi_Func");
  TriggerAddEventUnitDamaged(gt_UnitattacksSremagsi, UnitRefFromVariable("gv_sremagsi"), c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi set health
//--------------------------------------------------------------------------------------------------
bool gt_Sremagsisethealth_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  UnitSetPropertyFixed(gv_sremagsi, c_unitPropLifeMax, (UnitGetPropertyFixed(UnitFromId(1151), c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
  UnitSetPropertyFixed(gv_sremagsi, c_unitPropLifePercent, 100.0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Sremagsisethealth_Init () {
  gt_Sremagsisethealth = TriggerCreate("gt_Sremagsisethealth_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi Lair Enter
//--------------------------------------------------------------------------------------------------
bool gt_SremagsiLairEnter_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) { 
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (!runActions) {
    return true;
  }
  if (!gv_sremagsiDead) {
    lr_player.state.fightWithSremagsi = true;
    SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
    SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "SremagsisTheme", c_soundtrackCueAny, 0, false);
    libNtve_gf_DisplayBossBar(lr_player.player, "Assets\\Textures\\btn-unit-zerg-leviathan.dds", StringExternal("Param/Value/6DD637A1"), 100, lr_player.playerGroupSingle);
    libNtve_gf_SetBossBarBoss(lr_player.player, gv_sremagsi, true);
    libNtve_gf_SetBossBarRace(lr_player.player, libNtve_ge_BossBarRace_Zerg, true);
    libNtve_gf_MoveBossBar(lr_player.player, c_anchorTop, 0, 150);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SremagsiLairEnter_Init () {
  gt_SremagsiLairEnter = TriggerCreate("gt_SremagsiLairEnter_Func");
  TriggerAddEventUnitRegion(gt_SremagsiLairEnter, UnitRefFromVariable("gv_players[0].dragon"), RegionFromId(212), true);
  TriggerAddEventUnitRegion(gt_SremagsiLairEnter, UnitRefFromVariable("gv_players[1].dragon"), RegionFromId(212), true);
  TriggerAddEventUnitRegion(gt_SremagsiLairEnter, UnitRefFromVariable("gv_players[2].dragon"), RegionFromId(212), true);
  TriggerAddEventUnitRegion(gt_SremagsiLairEnter, UnitRefFromVariable("gv_players[3].dragon"), RegionFromId(212), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi Lair Exit
//--------------------------------------------------------------------------------------------------
bool gt_SremagsiLairExit_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (!runActions) {
    return true;
  }
  lr_player.state.fightWithSremagsi = false;
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "InfestationTheme", c_soundtrackCueAny, 0, false);
  libNtve_gf_ShowHideBossBar(false, lr_player.player);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SremagsiLairExit_Init () {
  gt_SremagsiLairExit = TriggerCreate("gt_SremagsiLairExit_Func");
  TriggerAddEventUnitRegion(gt_SremagsiLairExit, UnitRefFromVariable("gv_players[0].dragon"), RegionFromId(211), true);
  TriggerAddEventUnitRegion(gt_SremagsiLairExit, UnitRefFromVariable("gv_players[1].dragon"), RegionFromId(211), true);
  TriggerAddEventUnitRegion(gt_SremagsiLairExit, UnitRefFromVariable("gv_players[2].dragon"), RegionFromId(211), true);
  TriggerAddEventUnitRegion(gt_SremagsiLairExit, UnitRefFromVariable("gv_players[3].dragon"), RegionFromId(211), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi Dragon Dies
//--------------------------------------------------------------------------------------------------
bool gt_SremagsiDragonDies_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (!lr_player.state.fightWithSremagsi) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.state.fightWithSremagsi = false;
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
  libNtve_gf_ShowHideBossBar(false, lr_player.player);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SremagsiDragonDies_Init () {
  gt_SremagsiDragonDies = TriggerCreate("gt_SremagsiDragonDies_Func");
  TriggerAddEventUnitDied(gt_SremagsiDragonDies, UnitRefFromVariable("gv_players[0].dragon"));
  TriggerAddEventUnitDied(gt_SremagsiDragonDies, UnitRefFromVariable("gv_players[1].dragon"));
  TriggerAddEventUnitDied(gt_SremagsiDragonDies, UnitRefFromVariable("gv_players[2].dragon"));
  TriggerAddEventUnitDied(gt_SremagsiDragonDies, UnitRefFromVariable("gv_players[3].dragon"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi Dies
//--------------------------------------------------------------------------------------------------
bool gt_SremagsiDies_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7BA0B288"));
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    if (lr_player.state.fightWithSremagsi) {
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryCombat, 100.0, 1.0);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryVoice, 100.0, 1.0);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategorySpell, 100.0, 1.0);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryUI, 100.0, 1.0);
      SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
      SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "InfestationTheme", c_soundtrackCueAny, 0, false);
      libNtve_gf_ShowHideBossBar(false, lr_player.player);
      lr_player.state.fightWithSremagsi = false;
    }
  }
  PlayerGroupLoopEnd();

  for (UnitGroupLoopBegin(gv_unitsthatdidDamagetoSremagsi); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];

    gf_AddExperience(UnitGroupLoopCurrent(), 5000.0);
    PlayerModifyPropertyInt(UnitGetOwner(UnitGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, 10);
    if (lr_player.quests.storyQuests[5].state == 2) {
      lr_player.quests.storyQuests[5].state = 3;
      BankValueSetFromInt(lr_player.banks.dragonBank, "SQ5", lr_player.hand, lr_player.quests.storyQuests[5].state);
      ObjectiveSetName(lr_player.quests.storyQuests[5].objective, StringExternal("Param/Value/A62D176F"));
      PingDestroy(lr_player.quests.storyQuests[5].ping);
      PingCreate(lr_player.playerGroupSingle, "PingObjective", RegionGetCenter(RegionFromId(224)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[5].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
      SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), lr_player.playerGroupSingle, 100.0, 0.0);
      TextTagCreate(StringExternal("Param/Value/F1D75D0F"), 72, UnitGetPosition(UnitFromId(1597)), 6.0, true, true, lr_player.playerGroupSingle);
      lr_player.quests.storyQuests[5].textTag = TextTagLastCreated();
      TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
      TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
      TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(1597), 5.0);
      TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
    }
  }
  UnitGroupLoopEnd();

  UnitGroupLoopBegin(UnitGroup("InfestedEgg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    UnitKill(UnitGroupLoopCurrent());
  }
  UnitGroupLoopEnd();

  UnitGroupLoopBegin(UnitGroup("InfestedEgg2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    UnitKill(UnitGroupLoopCurrent());
  }
  UnitGroupLoopEnd();

  UnitGroupLoopBegin(UnitGroup("Carcinode", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    UnitKill(UnitGroupLoopCurrent());
  }
  UnitGroupLoopEnd();

  UnitKill(UnitFromId(2640));
  gv_sremagsiDead = true;
  TriggerEnable(gt_SremagsiRespawn, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SremagsiDies_Init () {
  gt_SremagsiDies = TriggerCreate("gt_SremagsiDies_Func");
  TriggerAddEventUnitDied(gt_SremagsiDies, UnitRefFromVariable("gv_sremagsi"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Sremagsi Respawn
//--------------------------------------------------------------------------------------------------
bool gt_SremagsiRespawn_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(228), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(229), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(230), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(228), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(229), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(230), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(228), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(229), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(230), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(228), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(229), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(230), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!gv_sremagsiDead) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/ACB85EF4"));
  UnitCreate(1, "Sremagsi", 0, 15, PointFromId(2665), 270.0);
  gv_sremagsi = UnitLastCreated();
  gv_sremagsiDead = false;
  UnitSetPropertyFixed(gv_sremagsi, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_sremagsi, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
  UnitSetPropertyFixed(gv_sremagsi, c_unitPropLifePercent, 100.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SremagsiRespawn_Init () {
  gt_SremagsiRespawn = TriggerCreate("gt_SremagsiRespawn_Func");
  TriggerEnable(gt_SremagsiRespawn, false);
  TriggerAddEventTimePeriodic(gt_SremagsiRespawn, 180.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Count Players Greater than 25
//--------------------------------------------------------------------------------------------------
bool gt_CountPlayersGreaterthan25_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  if ((UnitGetPropertyFixed(gv_players[0].dragon, c_unitPropLevel, c_unitPropCurrent) >= 25.0)) {
    gv_numPlayersHigherThan25 += 1;
  }
  if ((UnitGetPropertyFixed(gv_players[1].dragon, c_unitPropLevel, c_unitPropCurrent) >= 25.0)) {
    gv_numPlayersHigherThan25 += 1;
  }
  if ((UnitGetPropertyFixed(gv_players[2].dragon, c_unitPropLevel, c_unitPropCurrent) >= 25.0)) {
    gv_numPlayersHigherThan25 += 1;
  }
  if ((UnitGetPropertyFixed(gv_players[3].dragon, c_unitPropLevel, c_unitPropCurrent) >= 25.0)) {
    gv_numPlayersHigherThan25 += 1;
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CountPlayersGreaterthan25_Init () {
  gt_CountPlayersGreaterthan25 = TriggerCreate("gt_CountPlayersGreaterthan25_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Guardian Spawn
//--------------------------------------------------------------------------------------------------
bool gt_GuardianSpawn_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_i;

  statueSpawned = false;
  if (!runActions) {
    return true;
  }
  UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    if (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic)) {
      lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent()) - 1];
      if (lr_player.quests.storyQuests[4].state == 2) {
        ObjectiveSetName(lr_player.quests.storyQuests[4].objective, StringExternal("Param/Value/7BD4D7A8"));
        SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), lr_player.playerGroupSingle, 100.0, 0.0);
        PingDestroy(lr_player.quests.storyQuests[4].ping);
        PingCreate(lr_player.playerGroupSingle, "PingBoss", RegionGetCenter(RegionFromId(17)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 524287.0);
        lr_player.quests.storyQuests[4].ping = PingLastCreated();
        PingSetScale(PingLastCreated(), 0.5);
      }
    }
  }
  UnitGroupLoopEnd();
  TriggerExecute(gt_CountPlayersGreaterthan25, false, true);
  for(PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    if (libNtve_gf_UnitInRegion(lr_player.dragon, RegionFromId(17))) {
      VisRevealerCreate(lr_player.player, RegionFromId(17));
      lr_player.guardianRevealer = VisRevealerLastCreated();
      libNtve_gf_PauseUnit(lr_player.dragon, true);
      UnitGroupAdd(gv_dragonsInBattleWithGuardians, lr_player.dragon);
      PlayerGroupAdd(gv_playersinBattlewithGuardians, lr_player.player);
      CameraLockInput(lr_player.player, true);
      CameraPan(lr_player.player, RegionGetCenter(RegionFromId(48)), 5.0, -1, 10, false);
      lr_player.state.fightWithGuardians = true;
      UnitSetPosition(lr_player.dragon, RegionGetCenter(RegionFromId(48)), false);
      gv_livingDragonsinGaurdian += 1;
    }
  }
  PlayerGroupLoopEnd();

  libNtve_gf_CreateModelAtPoint("TimeWarpLaunch", RegionGetCenter(RegionFromId(48)));
  Wait(1.7, c_timeReal);
  libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionGetCenter(RegionFromId(26)));
  libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionGetCenter(RegionFromId(45)));
  libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", RegionGetCenter(RegionFromId(46)));
  Wait(0.7, c_timeReal);

  for ( lv_i = 0; lv_i < 8; lv_i += 1) {
    UnitCreate(1, "MineralField", 0, 0, RegionGetCenter(RegionFromId(47)), 270.0);
    gv_mineralBlocks[lv_i] = UnitLastCreated();
  }

  libNtve_gf_UnitCreateFacingPoint(1, "Korlic", 0, 15, RegionGetCenter(RegionFromId(26)), UnitGetPosition(libNtve_gf_KillingUnit()));
  UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
  UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
  UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
  UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
  gv_korlic = UnitLastCreated();
  UnitGroupAdd(gv_guardians, gv_korlic);
  libNtve_gf_PauseUnit(gv_korlic, true);
  libNtve_gf_UnitCreateFacingPoint(1, "Madawc", 0, 15, RegionGetCenter(RegionFromId(45)), UnitGetPosition(libNtve_gf_KillingUnit()));
  UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
  UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
  UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
  UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
  gv_madawc = UnitLastCreated();
  UnitGroupAdd(gv_guardians, gv_madawc);
  libNtve_gf_PauseUnit(gv_madawc, true);
  libNtve_gf_UnitCreateFacingPoint(1, "Tolic", 0, 15, RegionGetCenter(RegionFromId(46)), UnitGetPosition(libNtve_gf_KillingUnit()));
  UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
  UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
  UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
  UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
  gv_tolic = UnitLastCreated();
  UnitGroupAdd(gv_guardians, gv_tolic);
  libNtve_gf_PauseUnit(gv_tolic, true);
  SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryCombat, 75.0, 1.0);
  SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryVoice, 10.0, 1.0);
  SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategorySpell, 75.0, 1.0);
  SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 10.0, 1.0);
  SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryUI, 10.0, 1.0);
  SoundtrackStop(gv_playersinBattlewithGuardians, c_soundtrackCategoryMusic, false);
  SoundPlay(SoundLink("GuardiansTheme", -1), gv_playersinBattlewithGuardians, 100.0, 0.0);
  gv_guardiansTheme = SoundLastPlayed();
  gv_numGaurdiansDead = 0;
  for (PlayerGroupLoopBegin(gv_playersinBattlewithGuardians); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    libNtve_gf_DisplayBossBar(lr_player.player , "Assets\\Textures\\zealotportrait_static.dds", StringExternal("Param/Value/0FC70240"), 100, lr_player.playerGroupSingle);
    libNtve_gf_SetBossBarBoss(lr_player.player , gv_tolic, true);
    libNtve_gf_SetBossBarRace(lr_player.player , libNtve_ge_BossBarRace_Protoss, true);
    libNtve_gf_MoveBossBar(lr_player.player , c_anchorTop, 0, 125);
    libNtve_gf_DisplayBossBar(lr_player.player, "Assets\\Textures\\darktemplarportrait_static.dds", StringExternal("Param/Value/AD8A41AB"), 100, lr_player.playerGroupSingle);
    libNtve_gf_SetBossBarBoss(lr_player.player, gv_korlic, true);
    libNtve_gf_SetBossBarRace(lr_player.player, libNtve_ge_BossBarRace_Protoss, true);
    libNtve_gf_MoveBossBar(lr_player.player, c_anchorTop, -500, 125);
    libNtve_gf_DisplayBossBar(lr_player.player, "Assets\\Textures\\hightemplarportrait_static.dds", StringExternal("Param/Value/931C43C1"), 100, lr_player.playerGroupSingle);
    libNtve_gf_SetBossBarBoss(lr_player.player, gv_madawc, true);
    libNtve_gf_SetBossBarRace(lr_player.player, libNtve_ge_BossBarRace_Protoss, true);
    libNtve_gf_MoveBossBar(lr_player.player, c_anchorTop, 500, 125);
  }
  PlayerGroupLoopEnd();

  for(PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    if (libNtve_gf_UnitInRegion(lr_player.dragon, RegionFromId(17))) {
      libNtve_gf_PauseUnit(lr_player.dragon, false);
      CameraLockInput(lr_player.player, false);
    }
  }
  PlayerGroupLoopEnd();

  libNtve_gf_PauseUnit(gv_korlic, false);
  UnitIssueOrder(gv_korlic, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(47))), c_orderQueueReplace);
  libNtve_gf_PauseUnit(gv_madawc, false);
  UnitIssueOrder(gv_madawc, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(47))), c_orderQueueReplace);
  libNtve_gf_PauseUnit(gv_tolic, false);
  UnitIssueOrder(gv_tolic, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(47))), c_orderQueueReplace);
  gv_guardiansDead = false;
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GuardianSpawn_Init () {
  gt_GuardianSpawn = TriggerCreate("gt_GuardianSpawn_Func");
  TriggerAddEventUnitDied(gt_GuardianSpawn, UnitRefFromVariable("gv_zauberersStatue"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Korlic Dies
//--------------------------------------------------------------------------------------------------
bool gt_KorlicDies_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  for (UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians); !UnitGroupLoopDone(); UnitGroupLoopStep()) {
    libNtve_gf_ShowHideBossBar(false, (UnitGetOwner(UnitGroupLoopCurrent()) + 4));
  }
  UnitGroupLoopEnd();
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D0262864"));
  libNtve_gf_CreateModelAtPoint("MothershipTeleportOut", UnitGetPosition(EventUnit()));
  gv_numGaurdiansDead += 1;
  if (gv_numGaurdiansDead == 3) {
    gf_AllGuardiansDead();
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_KorlicDies_Init () {
  gt_KorlicDies = TriggerCreate("gt_KorlicDies_Func");
  TriggerAddEventUnitDied(gt_KorlicDies, UnitRefFromVariable("gv_korlic"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tolic Dies
//--------------------------------------------------------------------------------------------------
bool gt_TolicDies_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  for (UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians); !UnitGroupLoopDone(); UnitGroupLoopStep()) {
    libNtve_gf_ShowHideBossBar(false, (UnitGetOwner(UnitGroupLoopCurrent()) + 0));
  }
  UnitGroupLoopEnd();
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/75DA4E32"));
  libNtve_gf_CreateModelAtPoint("MothershipTeleportOut", UnitGetPosition(EventUnit()));
  gv_numGaurdiansDead += 1;
  if (gv_numGaurdiansDead == 3) {
    gf_AllGuardiansDead();
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TolicDies_Init () {
  gt_TolicDies = TriggerCreate("gt_TolicDies_Func");
  TriggerAddEventUnitDied(gt_TolicDies, UnitRefFromVariable("gv_tolic"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Madawc Dies
//--------------------------------------------------------------------------------------------------
bool gt_MadawcDies_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  for (UnitGroupLoopBegin(gv_dragonsInBattleWithGuardians); !UnitGroupLoopDone(); UnitGroupLoopStep()) {
    libNtve_gf_ShowHideBossBar(false, (UnitGetOwner(UnitGroupLoopCurrent()) + 8));
  }
  UnitGroupLoopEnd();
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E1F8BA32"));
  libNtve_gf_CreateModelAtPoint("MothershipTeleportOut", UnitGetPosition(EventUnit()));
  gv_numGaurdiansDead += 1;
  if (gv_numGaurdiansDead == 3) {
  gf_AllGuardiansDead();
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MadawcDies_Init () {
  gt_MadawcDies = TriggerCreate("gt_MadawcDies_Func");
  TriggerAddEventUnitDied(gt_MadawcDies, UnitRefFromVariable("gv_madawc"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: No Dragons in Gaurdian
//--------------------------------------------------------------------------------------------------
bool gt_NoDragonsinGaurdian_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_i;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (!lr_player.state.fightWithGuardians || EventUnit() != lr_player.dragon) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  lr_player.state.fightWithGuardians = false;
  UnitGroupRemove(gv_dragonsInBattleWithGuardians, EventUnit());
  SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryCombat, 100.0, 1.0);
  SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryVoice, 100.0, 1.0);
  SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategorySpell, 100.0, 1.0);
  SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
  SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryAmbient, 100.0, 1.0);
  SoundChannelSetVolume(gv_playersinBattlewithGuardians, c_soundCategoryUI, 100.0, 1.0);
  libNtve_gf_ShowHideBossBar(false, (lr_player.player + 0));
  libNtve_gf_ShowHideBossBar(false, (lr_player.player + 4));
  libNtve_gf_ShowHideBossBar(false, (lr_player.player + 8));
  VisRevealerDestroy(lr_player.guardianRevealer);
  gv_livingDragonsinGaurdian -= 1;
  if (gv_livingDragonsinGaurdian <= 0) {
    gv_livingDragonsinGaurdian = 0;
    gv_numGaurdiansDead = 0;
    UnitRemove(gv_korlic);
    UnitRemove(gv_madawc);
    UnitRemove(gv_tolic);
    for (lv_i = 0; lv_i < 8; lv_i += 1) {
      UnitRemove(gv_mineralBlocks[lv_i]);
    }
    libNtve_gf_UnitCreateFacingPoint(1, "ZauberersStatue", 0, 0, RegionGetCenter(RegionFromId(48)), RegionGetCenter(RegionFromId(47)));
    gv_zauberersStatue = UnitLastCreated();
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_NoDragonsinGaurdian_Init () {
  gt_NoDragonsinGaurdian = TriggerCreate("gt_NoDragonsinGaurdian_Func");
  TriggerAddEventUnitDied(gt_NoDragonsinGaurdian, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Guardian Respawn
//--------------------------------------------------------------------------------------------------
bool gt_GuardianRespawn_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!gv_guardiansDead) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2292C61E"));
  libNtve_gf_UnitCreateFacingPoint(1, "ZauberersStatue", 0, 0, RegionGetCenter(RegionFromId(48)), RegionGetCenter(RegionFromId(47)));
  gv_zauberersStatue = UnitLastCreated();
  statueSpawned = true;
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_GuardianRespawn_Init () {
  gt_GuardianRespawn = TriggerCreate("gt_GuardianRespawn_Func");
  TriggerEnable(gt_GuardianRespawn, false);
  TriggerAddEventTimePeriodic(gt_GuardianRespawn, 180.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Unit attacks Syrital
//--------------------------------------------------------------------------------------------------
bool gt_UnitattacksSyrital_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGroupHasUnit(gv_unitsthatdidDamagetoSyrital, EventUnitDamageSourceUnit()) || UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UnitGroupAdd(gv_unitsthatdidDamagetoSyrital, EventUnitDamageSourceUnit());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_UnitattacksSyrital_Init () {
  gt_UnitattacksSyrital = TriggerCreate("gt_UnitattacksSyrital_Func");
  TriggerAddEventUnitDamaged(gt_UnitattacksSyrital, UnitRefFromVariable("gv_syrital"), c_unitDamageTypeAny, c_unitDamageEither, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Syrital Health
//--------------------------------------------------------------------------------------------------
bool gt_SetSyritalHealth_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  UnitSetPropertyFixed(gv_syrital, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_syrital, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetSyritalHealth_Init () {
  gt_SetSyritalHealth = TriggerCreate("gt_SetSyritalHealth_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Syrital Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateSyritalWarning_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/0959DEC6"), 24, PointFromId(302), 1.0, true, true, PlayerGroupAll());
  gv_syritalWarning = TextTagLastCreated();
  TextTagSetTime(gv_syritalWarning, c_textTagTimeDuration, 524288.0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateSyritalWarning_Init () {
  gt_CreateSyritalWarning = TriggerCreate("gt_CreateSyritalWarning_Func");
  TriggerAddEventUnitRangePoint(gt_CreateSyritalWarning, null, PointFromId(302), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Syrital Enter
//--------------------------------------------------------------------------------------------------
bool gt_SyritalEnter_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (lr_player.dragon != EventUnit()) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }

  if (!gv_syritalDead) {
    lr_player.state.fightWithSyrital = true;
    SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryCombat, 10.0, 1.0);
    SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryVoice, 10.0, 1.0);
    SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategorySpell, 10.0, 1.0);
    SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 10.0, 1.0);
    SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryUI, 10.0, 1.0);
    SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, false);
    SoundPlay(SoundLink("SyritalBattleTheme", -1), lr_player.playerGroupSingle, 100.0, 0.0);
    lr_player.syritalTheme = SoundLastPlayed();
    libNtve_gf_DisplayBossBar(lr_player.player, "Assets\\Textures\\btn-unit-zerg-queen.dds", StringExternal("Param/Value/9DDB595D"), 100, lr_player.playerGroupSingle);
    libNtve_gf_SetBossBarBoss(lr_player.player, gv_syrital, true);
    libNtve_gf_SetBossBarRace(lr_player.player, libNtve_ge_BossBarRace_Zerg, true);
    libNtve_gf_MoveBossBar(lr_player.player, c_anchorTop, 0, 150);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyritalEnter_Init () {
  gt_SyritalEnter = TriggerCreate("gt_SyritalEnter_Func");
  TriggerAddEventUnitRegion(gt_SyritalEnter, null, RegionFromId(5), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Syrital Leave
//--------------------------------------------------------------------------------------------------
bool gt_SyritalLeave_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (lr_player.dragon != EventUnit()) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }

  lr_player.state.fightWithSyrital = false;
  SoundStop(lr_player.syritalTheme, true);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryCombat, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryVoice, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategorySpell, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryUI, 100.0, 1.0);
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, false);
  libNtve_gf_ShowHideBossBar(false, lr_player.player);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyritalLeave_Init () {
  gt_SyritalLeave = TriggerCreate("gt_SyritalLeave_Func");
  TriggerAddEventUnitRegion(gt_SyritalLeave, null, RegionFromId(5), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Syrital Dragon Dies
//--------------------------------------------------------------------------------------------------
bool gt_SyritalDragonDies_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (lr_player.dragon != EventUnit()) {
      return false;
    }
    if (!lr_player.state.fightWithSyrital) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }

  lr_player.state.fightWithSyrital = false;
  SoundStop(lr_player.syritalTheme, true);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryCombat, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryVoice, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategorySpell, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
  SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryUI, 100.0, 1.0);
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, false);
  libNtve_gf_ShowHideBossBar(false, lr_player.player);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyritalDragonDies_Init () {
  gt_SyritalDragonDies = TriggerCreate("gt_SyritalDragonDies_Func");
  TriggerAddEventUnitDied(gt_SyritalDragonDies, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Syrital Dies
//--------------------------------------------------------------------------------------------------
bool gt_SyritalDies_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }

  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    SoundStop(lr_player.syritalTheme, true);

    if (lr_player.state.fightWithSyrital) {
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryCombat, 100.0, 1.0);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryVoice, 100.0, 1.0);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategorySpell, 100.0, 1.0);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryAmbient, 100.0, 1.0);
      SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryUI, 100.0, 1.0);
      lr_player.state.fightWithSyrital = false;
      libNtve_gf_ShowHideBossBar(false, lr_player.player);
    }
  }
  PlayerGroupLoopEnd();

  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D94B490A"));
  gv_syritalDead = true;
  TriggerEnable(gt_SyritalRespawn, true);
  for (UnitGroupLoopBegin(gv_unitsthatdidDamagetoSyrital); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    lr_player = gv_players[UnitGetOwner(UnitGroupLoopCurrent())];
    gf_AddExperience(UnitGroupLoopCurrent(), 500.0);
    PlayerModifyPropertyInt(lr_player.player, c_playerPropCustom, c_playerPropOperAdd, 1);
    if ((lr_player.quests.storyQuests[1].state == 1)) {
      lr_player.quests.storyQuests[1].state = 2;
      ObjectiveSetDescription(lr_player.quests.storyQuests[1].objective, StringExternal("Param/Value/31DF3212"));
      ObjectiveSetName(lr_player.quests.storyQuests[1].objective, StringExternal("Param/Value/05FD217C"));
      SoundPlay(SoundLink("Alert_UniObjectiveUpdate", -1), lr_player.playerGroupSingle, 100.0, 0.0);
      BankValueSetFromInt(lr_player.banks.dragonBank, "SQ1", lr_player.hand, lr_player.quests.storyQuests[1].state);
      TextTagCreate(StringExternal("Param/Value/3A58ACB6"), 72, UnitGetPosition(UnitFromId(2511)), 6.0, true, true, lr_player.playerGroupSingle);
      lr_player.quests.storyQuests[1].textTag = TextTagLastCreated();
      TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
      TextTagSetColor(TextTagLastCreated(), c_textTagColorEdge, Color(100.00, 100.00, 100.00));
      TextTagAttachToUnit(TextTagLastCreated(), UnitFromId(2511), 5.0);
      TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524287.0);
      PingDestroy(lr_player.quests.storyQuests[1].ping);
      PingCreate(lr_player.playerGroupSingle, "PingObjective", RegionGetCenter(RegionFromId(216)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0);
      lr_player.quests.storyQuests[1].ping = PingLastCreated();
      PingSetScale(PingLastCreated(), 0.5);
    }
  }
  UnitGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyritalDies_Init () {
  gt_SyritalDies = TriggerCreate("gt_SyritalDies_Func");
  TriggerAddEventUnitDied(gt_SyritalDies, UnitRefFromVariable("gv_syrital"));
}
//--------------------------------------------------------------------------------------------------
// Trigger: Syrital Respawn
//--------------------------------------------------------------------------------------------------
bool gt_SyritalRespawn_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((UnitGroupCount(UnitGroup(null, 1, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 2, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 3, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!((UnitGroupCount(UnitGroup(null, 4, RegionFromId(5), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0))) {
      return false;
    }
    if (!gv_syritalDead) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5743AE9F"));
  UnitCreate(1, "Syrital", 0, 15, RegionGetCenter(RegionFromId(5)), 270.0);
  gv_syrital = UnitLastCreated();
  UnitSetPropertyFixed(gv_syrital, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_syrital, c_unitPropLifeMax, c_unitPropCurrent) * IntToFixed(PlayerGroupCount(gv_humanPlayers))));
  UnitSetPropertyFixed(gv_syrital, c_unitPropLifePercent, 100.0);
  gv_syritalDead = false;
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SyritalRespawn_Init () {
  gt_SyritalRespawn = TriggerCreate("gt_SyritalRespawn_Func");
  TriggerEnable(gt_SyritalRespawn, false);
  TriggerAddEventTimePeriodic(gt_SyritalRespawn, 180.0, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemies_Func (bool testConds, bool runActions) {

  int lv_tempradon;
  

  if (!runActions) {
    return true;
  }
  
  UnitCreate(1, "Srepti", 0, 15, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[0], UnitLastCreated());
  UnitCreate(1, "Srepti", 0, 15, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[0], UnitLastCreated());
  UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[0], UnitLastCreated());
  UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[0], UnitLastCreated());
  UnitCreate(1, "Srepti", 0, 15, RegionRandomPoint(RegionFromId(2)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[1], UnitLastCreated());
  UnitCreate(1, "Srepti", 0, 15, RegionRandomPoint(RegionFromId(2)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[1], UnitLastCreated());
  UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(2)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[1], UnitLastCreated());
  UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(2)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[1], UnitLastCreated());
  UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[2], UnitLastCreated());
  UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[2], UnitLastCreated());
  UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(4)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[2], UnitLastCreated());
  UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(49)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[3], UnitLastCreated());
  UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(49)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[3], UnitLastCreated());
  UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(50)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[4], UnitLastCreated());
  UnitCreate(1, "SmallSheep", 0, 15, RegionRandomPoint(RegionFromId(50)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[4], UnitLastCreated());
  UnitCreate(1, "Vogel", 0, 15, RegionRandomPoint(RegionFromId(18)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyPassUnits[1], UnitLastCreated());
  UnitCreate(1, "Vogel", 0, 15, RegionRandomPoint(RegionFromId(19)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyPassUnits[2], UnitLastCreated());
  UnitCreate(1, "Vogel", 0, 15, RegionRandomPoint(RegionFromId(20)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyPassUnits[3], UnitLastCreated());
  UnitCreate(1, "Vogel", 0, 15, RegionRandomPoint(RegionFromId(268)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyGorgeUnits[0], UnitLastCreated());
  UnitCreate(1, "Vogel", 0, 15, RegionRandomPoint(RegionFromId(21)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyGorgeUnits[1], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(27)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyGorgeUnits[2], UnitLastCreated());
  UnitCreate(1, "Vogel", 0, 15, RegionRandomPoint(RegionFromId(28)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyGorgeUnits[3], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(29)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyGorgeUnits[4], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(265)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyGorgeUnits[5], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(266)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyGorgeUnits[6], UnitLastCreated());
  UnitCreate(1, "Srepti", 0, 15, RegionRandomPoint(RegionFromId(267)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyGorgeUnits[7], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(7)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[0], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(7)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[0], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(7)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[0], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(9)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[1], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(9)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[1], UnitLastCreated());
  UnitCreate(1, "Karramarro", 0, 15, RegionRandomPoint(RegionFromId(9)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[1], UnitLastCreated());
  UnitCreate(1, "Karramarro", 0, 15, RegionRandomPoint(RegionFromId(9)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[1], UnitLastCreated());
  UnitCreate(1, "Karramarro", 0, 15, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[2], UnitLastCreated());
  UnitCreate(1, "Karramarro", 0, 15, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[2], UnitLastCreated());
  UnitCreate(1, "Karramarro", 0, 15, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[2], UnitLastCreated());
  UnitCreate(1, "Karramarro", 0, 15, RegionRandomPoint(RegionFromId(10)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[2], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(11)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[3], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(11)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[3], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(11)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[3], UnitLastCreated());
  UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(12)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[0], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(12)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[0], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(12)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[0], UnitLastCreated());
  UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(13)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[1], UnitLastCreated());
  UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(13)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[1], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(13)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[1], UnitLastCreated());
  UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(14)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[2], UnitLastCreated());
  UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(14)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[2], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(14)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[2], UnitLastCreated());
  UnitCreate(1, "CretonWarrior", 0, 15, RegionRandomPoint(RegionFromId(14)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[2], UnitLastCreated());
  UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(15)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[3], UnitLastCreated());
  UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(15)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[3], UnitLastCreated());
  UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(15)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[3], UnitLastCreated());
  UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(16)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[4], UnitLastCreated());
  UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(16)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[4], UnitLastCreated());
  UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(16)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[4], UnitLastCreated());
  UnitCreate(1, "CretonWatcher", 0, 15, RegionRandomPoint(RegionFromId(16)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[4], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(51)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[0], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(51)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[0], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(51)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[0], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(51)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[0], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(52)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[1], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(52)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[1], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(52)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[1], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(53)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[2], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(53)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[2], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(53)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[2], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[3], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[3], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(54)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[3], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(55)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[4], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(55)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[4], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(56)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[5], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(57)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[6], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(57)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[6], UnitLastCreated());
  UnitCreate(1, "Alakdan", 0, 15, RegionRandomPoint(RegionFromId(57)), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[6], UnitLastCreated());
  UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[0]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_undergroundForestUnits[0], UnitLastCreated());
  UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[1]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_undergroundForestUnits[1], UnitLastCreated());
  UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[2]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_undergroundForestUnits[2], UnitLastCreated());
  UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[3]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_undergroundForestUnits[3], UnitLastCreated());
  UnitCreate(1, gv_undergroundForestUnitTypes[RandomInt(0, 1)], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[4]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_undergroundForestUnits[4], UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemies_Init () {
  gt_SpawnEnemies = TriggerCreate("gt_SpawnEnemies_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set up Bio Dome Wasteland Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetupBioDomeWastelandRegions_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_bioDomeWastelandRegions[0] = RegionFromName("BD Wasteland 1");
  gv_bioDomeWastelandRegions[1] = RegionFromName("BD Wasteland 2");
  gv_bioDomeWastelandRegions[2] = RegionFromName("BD Wasteland 3");
  gv_bioDomeWastelandRegions[3] = RegionFromName("BD Wasteland 4");
  gv_bioDomeWastelandRegions[4] = RegionFromName("BD Wasteland 5");
  gv_bioDomeWastelandRegions[5] = RegionFromName("BD Wasteland 6");
  gv_bioDomeWastelandRegions[6] = RegionFromName("BD Wasteland 7");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupBioDomeWastelandRegions_Init () {
  gt_SetupBioDomeWastelandRegions = TriggerCreate("gt_SetupBioDomeWastelandRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies Bio Dome Wasteland
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemiesBioDomeWasteland_Func (bool testConds, bool runActions) {

  int lv_locationNum;
  int i;
  int lv_numunitstospawn;


  if (!runActions) {
    return true;
  }
  for(i = 0; i< (7+PlayerGroupCount(gv_playersInBioDome)); i += 1) {
    lv_locationNum = RandomInt(0, 6);
    UnitCreate(1, gv_enemyUnitTypes[RandomInt(12, 13)], 0, 15, RegionRandomPoint(gv_bioDomeWastelandRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_bioDomeWastelandUnits[lv_locationNum], UnitLastCreated());
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemiesBioDomeWasteland_Init () {
  gt_SpawnEnemiesBioDomeWasteland = TriggerCreate("gt_SpawnEnemiesBioDomeWasteland_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Bio Dome Wasteland
//--------------------------------------------------------------------------------------------------
bool gt_RespawnBioDomeWasteland_Func (bool testConds, bool runActions) {

  int lv_randomRegion;


  if (testConds) {
    if (!(((UnitGroupHasUnit(gv_bioDomeWastelandUnits[0], EventUnit()) || UnitGroupHasUnit(gv_bioDomeWastelandUnits[1], EventUnit()) || UnitGroupHasUnit(gv_bioDomeWastelandUnits[2], EventUnit()) || UnitGroupHasUnit(gv_bioDomeWastelandUnits[3], EventUnit()) || UnitGroupHasUnit(gv_bioDomeWastelandUnits[4], EventUnit()) || UnitGroupHasUnit(gv_bioDomeWastelandUnits[5], EventUnit()) || UnitGroupHasUnit(gv_bioDomeWastelandUnits[6], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  Wait(10.0, c_timeReal);
  lv_randomRegion = RandomInt(0, 6);
  UnitRemove(EventUnit());
  // This version has them indefinitely respawn.
  UnitCreate(1, gv_enemyUnitTypes[RandomInt(12, 13)], 0, 15, RegionRandomPoint(gv_bioDomeWastelandRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_bioDomeWastelandUnits[lv_randomRegion], UnitLastCreated());
  // The following code has a few waves spawn before they fall off, might've been intended.
  //UnitCreate(1, gv_enemyUnitTypes[RandomInt(12, 13)], 0, 15, RegionRandomPoint(gv_bioDomeWastelandRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnBioDomeWasteland_Init () {
  gt_RespawnBioDomeWasteland = TriggerCreate("gt_RespawnBioDomeWasteland_Func");
  TriggerAddEventUnitDied(gt_RespawnBioDomeWasteland, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set up Creton Tranch Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetupCretonTranchRegions_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_cretonTrenchRegions[0] = RegionFromId(136);
  gv_cretonTrenchRegions[1] = RegionFromId(137);
  gv_cretonTrenchRegions[2] = RegionFromId(138);
  gv_cretonTrenchRegions[3] = RegionFromId(139);
  gv_cretonTrenchRegions[4] = RegionFromId(131);
  gv_cretonTrenchRegions[5] = RegionFromId(132);
  gv_cretonTrenchRegions[6] = RegionFromId(140);
  gv_cretonTrenchRegions[7] = RegionFromId(141);
  gv_cretonTrenchRegions[8] = RegionFromId(143);
  gv_cretonTrenchRegions[9] = RegionFromId(144);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupCretonTranchRegions_Init () {
  gt_SetupCretonTranchRegions = TriggerCreate("gt_SetupCretonTranchRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies Creton Trench
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemiesCretonTrench_Func (bool testConds, bool runActions) {

  int lv_unitTypeNum;
  int lv_locationNum;
  int lv_numunitstospawn;


  if (!runActions) {
    return true;
  }
  while ((lv_numunitstospawn <= 10)) {
    lv_unitTypeNum = 11;
    lv_locationNum = RandomInt(0, 9);
    UnitCreate(1, "CretonWarMachine", 0, 15, RegionRandomPoint(gv_cretonTrenchRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_cretonTrenchUnits[lv_locationNum], UnitLastCreated());
    lv_numunitstospawn += 1;
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemiesCretonTrench_Init () {
  gt_SpawnEnemiesCretonTrench = TriggerCreate("gt_SpawnEnemiesCretonTrench_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Creton Trench
//--------------------------------------------------------------------------------------------------
bool gt_RespawnCretonTrench_Func (bool testConds, bool runActions) {

  int lv_randomRegion;
  int lv_randomUnit;


  if (testConds) {
    if (!(((UnitGroupHasUnit(gv_cretonTrenchUnits[0], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[1], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[2], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[3], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[4], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[5], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[6], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[7], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[8], EventUnit()) || UnitGroupHasUnit(gv_cretonTrenchUnits[9], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  Wait(10.0, c_timeReal);
  lv_randomRegion = RandomInt(0, 9);
  lv_randomUnit = RandomInt(11, 11);
  UnitRemove(EventUnit());
  UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_cretonTrenchRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_cretonTrenchUnits[lv_randomRegion], UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnCretonTrench_Init () {
  gt_RespawnCretonTrench = TriggerCreate("gt_RespawnCretonTrench_Func");
  TriggerAddEventUnitDied(gt_RespawnCretonTrench, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set up Creton Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetupCretonRegions_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_cretonRegions[0] = RegionFromId(82);
  gv_cretonRegions[1] = RegionFromId(83);
  gv_cretonRegions[2] = RegionFromId(92);
  gv_cretonRegions[3] = RegionFromId(93);
  gv_cretonRegions[4] = RegionFromId(94);
  gv_cretonRegions[5] = RegionFromId(95);
  gv_cretonRegions[6] = RegionFromId(96);
  gv_cretonRegions[7] = RegionFromId(97);
  gv_cretonRegions[8] = RegionFromId(106);
  gv_cretonRegions[9] = RegionFromId(107);
  gv_cretonRegions[10] = RegionFromId(108);
  gv_cretonRegions[11] = RegionFromId(109);
  gv_cretonRegions[12] = RegionFromId(110);
  gv_cretonRegions[13] = RegionFromId(111);
  gv_cretonRegions[14] = RegionFromId(112);
  gv_cretonRegions[15] = RegionFromId(113);
  gv_cretonRegions[16] = RegionFromId(114);
  gv_cretonRegions[17] = RegionFromId(115);
  gv_cretonRegions[18] = RegionFromId(116);
  gv_cretonRegions[19] = RegionFromId(117);
  gv_cretonRegions[20] = RegionFromId(118);
  gv_cretonRegions[21] = RegionFromId(119);
  gv_cretonRegions[22] = RegionFromId(120);
  gv_cretonRegions[23] = RegionFromId(99);
  gv_cretonRegions[24] = RegionFromId(100);
  gv_cretonRegions[25] = RegionFromId(101);
  gv_cretonRegions[26] = RegionFromId(102);
  gv_cretonRegions[27] = RegionFromId(103);
  gv_cretonRegions[28] = RegionFromId(104);
  gv_cretonRegions[29] = RegionFromId(105);
  gv_cretonRegions[30] = RegionFromId(84);
  gv_cretonRegions[31] = RegionFromId(85);
  gv_cretonRegions[32] = RegionFromId(86);
  gv_cretonRegions[33] = RegionFromId(87);
  gv_cretonRegions[34] = RegionFromId(88);
  gv_cretonRegions[35] = RegionFromId(89);
  gv_cretonRegions[36] = RegionFromId(90);
  gv_cretonRegions[37] = RegionFromId(91);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupCretonRegions_Init () {
  gt_SetupCretonRegions = TriggerCreate("gt_SetupCretonRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies Creton
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemiesCreton_Func (bool testConds, bool runActions) {

  int lv_unitTypeNum;
  int lv_locationNum;
  int lv_numunitstospawn;


  if (testConds) {
    if (!((((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3) || (UnitGetOwner(EventUnit()) == 4)) && !gv_cretonSpawned))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gv_cretonSpawned = true;
  while ((lv_numunitstospawn <= (gv_ofHumanPlayers * 15))) {
    lv_unitTypeNum = RandomInt(9, 11);
    lv_locationNum = RandomInt(0, 37);
    UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_cretonRegions[lv_locationNum]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_cretonUnits[lv_locationNum], UnitLastCreated());
    lv_numunitstospawn += 1;
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemiesCreton_Init () {
  gt_SpawnEnemiesCreton = TriggerCreate("gt_SpawnEnemiesCreton_Func");
  TriggerAddEventUnitRegion(gt_SpawnEnemiesCreton, null, RegionFromId(98), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Creton
//--------------------------------------------------------------------------------------------------
bool gt_RespawnCreton_Func (bool testConds, bool runActions) {

  int lv_randomRegion;
  int lv_randomUnit;


  if (testConds) {
    if (!(((UnitGroupHasUnit(gv_cretonUnits[0], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[1], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[2], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[3], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[4], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[5], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[6], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[7], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[8], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[9], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[10], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[11], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[12], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[13], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[14], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[15], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[16], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[17], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[18], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[19], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[20], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[21], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[22], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[23], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[24], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[25], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[26], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[27], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[28], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[29], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[30], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[31], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[32], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[33], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[34], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[35], EventUnit()) || UnitGroupHasUnit(gv_cretonUnits[37], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  //Wait(10.0, c_timeReal);
  Wait(15.0, c_timeReal); // It feels like they respawn too quickly with a wait of 10.
  lv_randomRegion = RandomInt(0, 37);
  lv_randomUnit = RandomInt(9, 11);
  UnitRemove(EventUnit());
  UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_cretonRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_cretonUnits[lv_randomRegion], UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnCreton_Init () {
  gt_RespawnCreton = TriggerCreate("gt_RespawnCreton_Func");
  TriggerAddEventUnitDied(gt_RespawnCreton, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Verboten Infestation Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetVerbotenInfestationRegions_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_verbotenInfestationsRegions[0] = RegionFromId(65);
  gv_verbotenInfestationsRegions[1] = RegionFromId(66);
  gv_verbotenInfestationsRegions[2] = RegionFromId(67);
  gv_verbotenInfestationsRegions[3] = RegionFromId(68);
  gv_verbotenInfestationsRegions[4] = RegionFromId(69);
  gv_verbotenInfestationsRegions[5] = RegionFromId(70);
  gv_verbotenInfestationsRegions[6] = RegionFromId(71);
  gv_verbotenInfestationsRegions[7] = RegionFromId(72);
  gv_verbotenInfestationsRegions[8] = RegionFromId(73);
  gv_verbotenInfestationsRegions[9] = RegionFromId(74);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetVerbotenInfestationRegions_Init () {
  gt_SetVerbotenInfestationRegions = TriggerCreate("gt_SetVerbotenInfestationRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies Verboten Infestation Player 1
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemiesVerbotenInfestationPlayer1_Func (bool testConds, bool runActions) {

  int lv_unitTypeNum;
  int lv_locationNum;
  int maxAreaSpawns;

    lv_locationNum = 0;
    maxAreaSpawns = 0;

  if (testConds) {
    if (gv_verbotenInfestationSpawned[0]) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
    
  //Spawns enemies in areas 0 -> 9, spawns twice in each, and changes the enemy type every 2 regions
  for(maxAreaSpawns = 0; maxAreaSpawns <= 20; maxAreaSpawns +=1){
    if(maxAreaSpawns % 2 == 0){
    lv_unitTypeNum = RandomInt(16, 18);
  
      if(maxAreaSpawns != 0) {
        lv_locationNum += 1;
        lv_locationNum %= 10;
      }
    }
   UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  
  }
  maxAreaSpawns = 0;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
   // lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemiesVerbotenInfestationPlayer1_Init () {
  int maxAreaSpawns = 0;
  gt_SpawnEnemiesVerbotenInfestationPlayer1 = TriggerCreate("gt_SpawnEnemiesVerbotenInfestationPlayer1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies Verboten Infestation Player 2
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemiesVerbotenInfestationPlayer2_Func (bool testConds, bool runActions) {
 
  int lv_unitTypeNum;
  int lv_locationNum;
  int maxAreaSpawns;

    lv_locationNum = 0;
    maxAreaSpawns = 0;

  if (testConds) {
    if (gv_verbotenInfestationSpawned[1]) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  //Spawns enemies in areas 0 -> 9, spawns twice in each, and changes the enemy type every 2 regions
  for(maxAreaSpawns = 0; maxAreaSpawns <= 20; maxAreaSpawns +=1){
    if(maxAreaSpawns % 2 == 0){
    lv_unitTypeNum = RandomInt(16, 18);
  
      if(maxAreaSpawns != 0) {
        lv_locationNum += 1;
        lv_locationNum %= 10;
      }
    }
   UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  
  }
  maxAreaSpawns = 0;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
   // lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemiesVerbotenInfestationPlayer2_Init () {
  int maxAreaSpawns = 0;
  gt_SpawnEnemiesVerbotenInfestationPlayer2 = TriggerCreate("gt_SpawnEnemiesVerbotenInfestationPlayer2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies Verboten Infestation Player 3
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemiesVerbotenInfestationPlayer3_Func (bool testConds, bool runActions) {
 
  int lv_unitTypeNum;
  int lv_locationNum;
  int maxAreaSpawns;

    lv_locationNum = 0;
    maxAreaSpawns = 0;

  if (testConds) {
    if (gv_verbotenInfestationSpawned[2]) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  //Spawns enemies in areas 0 -> 9, spawns twice in each, and changes the enemy type every 2 regions
  for(maxAreaSpawns = 0; maxAreaSpawns <= 20; maxAreaSpawns +=1){
    if(maxAreaSpawns % 2 == 0){
    lv_unitTypeNum = RandomInt(16, 18);
  
      if(maxAreaSpawns != 0) {
        lv_locationNum += 1;
        lv_locationNum %= 10;
      }
    }
   UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  
  }
  maxAreaSpawns = 0;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
   // lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemiesVerbotenInfestationPlayer3_Init () {
  int maxAreaSpawns = 0;
  gt_SpawnEnemiesVerbotenInfestationPlayer3 = TriggerCreate("gt_SpawnEnemiesVerbotenInfestationPlayer3_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemies Verboten Infestation Player 4
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemiesVerbotenInfestationPlayer4_Func (bool testConds, bool runActions) {
 
  int lv_unitTypeNum;
  int lv_locationNum;
  int maxAreaSpawns;

    lv_locationNum = 0;
    maxAreaSpawns = 0;

  if (testConds) {
    if (gv_verbotenInfestationSpawned[3]) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  //Spawns enemies in areas 0 -> 9, spawns twice in each, and changes the enemy type every 2 regions
  for(maxAreaSpawns = 0; maxAreaSpawns <= 20; maxAreaSpawns +=1){
    if(maxAreaSpawns % 2 == 0){
    lv_unitTypeNum = RandomInt(16, 18);
  
      if(maxAreaSpawns != 0) {
        lv_locationNum += 1;
        lv_locationNum %= 10;
      }
    }
   UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  
  }
  maxAreaSpawns = 0;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
   // lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
  //UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  //lv_locationNum += 1;
  //lv_unitTypeNum = RandomInt(16, 18);
  //UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
   // UnitCreate(1, gv_enemyUnitTypes[lv_unitTypeNum], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_locationNum]), libNtve_gf_RandomAngle());
   // UnitGroupAdd(gv_verbotenInfestationUnits[lv_locationNum], UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemiesVerbotenInfestationPlayer4_Init () {
  int maxAreaSpawns = 0;
  gt_SpawnEnemiesVerbotenInfestationPlayer4 = TriggerCreate("gt_SpawnEnemiesVerbotenInfestationPlayer4_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Verboten Infestation
//--------------------------------------------------------------------------------------------------
bool gt_RespawnVerbotenInfestation_Func (bool testConds, bool runActions) {

  int lv_randomRegion;
  int lv_randomUnit;
  int lv_randomUnitAmount;


  if (testConds) {
    if (!(((UnitGroupHasUnit(gv_verbotenInfestationUnits[0], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[1], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[2], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[3], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[4], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[5], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[6], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[7], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[8], EventUnit()) || UnitGroupHasUnit(gv_verbotenInfestationUnits[9], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  Wait(10.0, c_timeReal);
  lv_randomRegion = RandomInt(0, 9);
  lv_randomUnit = RandomInt(16, 18);
  lv_randomUnitAmount = RandomInt(1,2);
  UnitRemove(EventUnit());
  UnitCreate(lv_randomUnitAmount, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_verbotenInfestationsRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenInfestationUnits[lv_randomRegion], UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnVerbotenInfestation_Init () {
  int lv_randomUnitAmount = 0;
  gt_RespawnVerbotenInfestation = TriggerCreate("gt_RespawnVerbotenInfestation_Func");
  TriggerAddEventUnitDied(gt_RespawnVerbotenInfestation, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Verboten Forest Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetVerbotenForestRegions_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_verbotenForestRegions[0] = RegionFromId(51);
  gv_verbotenForestRegions[1] = RegionFromId(52);
  gv_verbotenForestRegions[2] = RegionFromId(53);
  gv_verbotenForestRegions[3] = RegionFromId(54);
  gv_verbotenForestRegions[4] = RegionFromId(55);
  gv_verbotenForestRegions[5] = RegionFromId(56);
  gv_verbotenForestRegions[6] = RegionFromId(57);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetVerbotenForestRegions_Init () {
  gt_SetVerbotenForestRegions = TriggerCreate("gt_SetVerbotenForestRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Verboten Forest
//--------------------------------------------------------------------------------------------------
bool gt_RespawnVerbotenForest_Func (bool testConds, bool runActions) {

  int lv_randomRegion;
  int lv_randomUnit;


  if (testConds) {
    if (!(((UnitGroupHasUnit(gv_verbotenForestUnits[0], EventUnit()) || UnitGroupHasUnit(gv_verbotenForestUnits[1], EventUnit()) || UnitGroupHasUnit(gv_verbotenForestUnits[2], EventUnit()) || UnitGroupHasUnit(gv_verbotenForestUnits[3], EventUnit()) || UnitGroupHasUnit(gv_verbotenForestUnits[4], EventUnit()) || UnitGroupHasUnit(gv_verbotenForestUnits[5], EventUnit()) || UnitGroupHasUnit(gv_verbotenForestUnits[6], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  Wait(10.0, c_timeReal);
  UnitRemove(EventUnit());
  lv_randomRegion = RandomInt(0, 6);
  lv_randomUnit = RandomInt(6, 8);
  UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_verbotenForestRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_verbotenForestUnits[lv_randomRegion], UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnVerbotenForest_Init () {
  gt_RespawnVerbotenForest = TriggerCreate("gt_RespawnVerbotenForest_Func");
  TriggerAddEventUnitDied(gt_RespawnVerbotenForest, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Wasteland Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetWastelandRegions_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_wastelandRegions[0] = RegionFromId(1);
  gv_wastelandRegions[1] = RegionFromId(2);
  gv_wastelandRegions[2] = RegionFromId(4);
  gv_wastelandRegions[3] = RegionFromId(49);
  gv_wastelandRegions[4] = RegionFromId(50);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetWastelandRegions_Init () {
  gt_SetWastelandRegions = TriggerCreate("gt_SetWastelandRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Wasteland
//--------------------------------------------------------------------------------------------------
bool gt_RespawnWasteland_Func (bool testConds, bool runActions) {

  int lv_randomRegion;
  int lv_randomUnit;


  if (testConds) {
    if (!(((UnitGroupHasUnit(gv_wastelandUnitGroups[0], EventUnit()) || UnitGroupHasUnit(gv_wastelandUnitGroups[1], EventUnit()) || UnitGroupHasUnit(gv_wastelandUnitGroups[2], EventUnit()) || UnitGroupHasUnit(gv_wastelandUnitGroups[3], EventUnit()) || UnitGroupHasUnit(gv_wastelandUnitGroups[4], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  Wait(10.0, c_timeReal);
  lv_randomRegion = RandomInt(0, 4);
  lv_randomUnit = RandomInt(0, 1);
  UnitRemove(EventUnit());
  UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_wastelandRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_wastelandUnitGroups[lv_randomRegion], UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnWasteland_Init () {
  gt_RespawnWasteland = TriggerCreate("gt_RespawnWasteland_Func");
  TriggerAddEventUnitDied(gt_RespawnWasteland, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Relamy Pass Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetRelamyPassRegions_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_relamyPassRegions[0] = RegionFromId(8);
  gv_relamyPassRegions[1] = RegionFromId(18);
  gv_relamyPassRegions[2] = RegionFromId(19);
  gv_relamyPassRegions[3] = RegionFromId(20);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRelamyPassRegions_Init () {
  gt_SetRelamyPassRegions = TriggerCreate("gt_SetRelamyPassRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Relamy Pass
//--------------------------------------------------------------------------------------------------
bool gt_RespawnRelamyPass_Func (bool testConds, bool runActions) {

  int lv_randomRegion;
  int lv_randomUnit;


  if (testConds) {
    if (!(((UnitGroupHasUnit(gv_relamyPassUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyPassUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyPassUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyPassUnits[3], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  Wait(10.0, c_timeReal);
  UnitRemove(EventUnit());
  lv_randomRegion = RandomInt(0, 3);
  lv_randomUnit = RandomInt(1, 2);
  UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_relamyPassRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyPassUnits[lv_randomRegion], UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnRelamyPass_Init () {
  gt_RespawnRelamyPass = TriggerCreate("gt_RespawnRelamyPass_Func");
  TriggerAddEventUnitDied(gt_RespawnRelamyPass, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Relamy Gorge Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetRelamyGorgeRegions_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_relamyGorgeRegions[0] = RegionFromId(268);
  gv_relamyGorgeRegions[1] = RegionFromId(21);
  gv_relamyGorgeRegions[2] = RegionFromId(27);
  gv_relamyGorgeRegions[3] = RegionFromId(28);
  gv_relamyGorgeRegions[4] = RegionFromId(29);
  gv_relamyGorgeRegions[5] = RegionFromId(265);
  gv_relamyGorgeRegions[6] = RegionFromId(266);
  gv_relamyGorgeRegions[7] = RegionFromId(267);
  gv_relamyGorgeUnitTypes[0] = "Vogel";
  gv_relamyGorgeUnitTypes[1] = "Nepa";
  gv_relamyGorgeUnitTypes[2] = "CretonWarrior";
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRelamyGorgeRegions_Init () {
  gt_SetRelamyGorgeRegions = TriggerCreate("gt_SetRelamyGorgeRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Relamy Gorge
//--------------------------------------------------------------------------------------------------
bool gt_RespawnRelamyGorge_Func (bool testConds, bool runActions) {

  int lv_randomRegion;
  int lv_randomUnit;


  if (testConds) {
    if (!(((UnitGroupHasUnit(gv_relamyGorgeUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[3], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[4], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[5], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[6], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[7], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  Wait(10.0, c_timeReal);
  UnitRemove(EventUnit());
  lv_randomRegion = RandomInt(0, 7);
  lv_randomUnit = RandomInt(0, 2);
  UnitCreate(1, gv_relamyGorgeUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_relamyGorgeRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyGorgeUnits[lv_randomRegion], UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnRelamyGorge_Init () {
  gt_RespawnRelamyGorge = TriggerCreate("gt_RespawnRelamyGorge_Func");
  TriggerAddEventUnitDied(gt_RespawnRelamyGorge, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Relamy Canyon Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetRelamyCanyonRegions_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_relamyCanyonRegions[0] = RegionFromId(7);
  gv_relamyCanyonRegions[1] = RegionFromId(9);
  gv_relamyCanyonRegions[2] = RegionFromId(10);
  gv_relamyCanyonRegions[3] = RegionFromId(11);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRelamyCanyonRegions_Init () {
  gt_SetRelamyCanyonRegions = TriggerCreate("gt_SetRelamyCanyonRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Relamy Canyon
//--------------------------------------------------------------------------------------------------
bool gt_RespawnRelamyCanyon_Func (bool testConds, bool runActions) {

  int lv_randomRegion;
  int lv_randomUnit;


  if (testConds) {
    if (!(((UnitGroupHasUnit(gv_relamyCanyonUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyCanyonUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyCanyonUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyCanyonUnits[3], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  Wait(10.0, c_timeReal);
  UnitRemove(EventUnit());
  lv_randomRegion = RandomInt(0, 3);
  lv_randomUnit = RandomInt(3, 4);
  UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_relamyCanyonRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyCanyonUnits[lv_randomRegion], UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnRelamyCanyon_Init () {
  gt_RespawnRelamyCanyon = TriggerCreate("gt_RespawnRelamyCanyon_Func");
  TriggerAddEventUnitDied(gt_RespawnRelamyCanyon, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Relamy Hills Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetRelamyHillsRegions_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_relamyHillsRegions[0] = RegionFromId(12);
  gv_relamyHillsRegions[1] = RegionFromId(13);
  gv_relamyHillsRegions[2] = RegionFromId(14);
  gv_relamyHillsRegions[3] = RegionFromId(15);
  gv_relamyHillsRegions[4] = RegionFromId(16);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRelamyHillsRegions_Init () {
  gt_SetRelamyHillsRegions = TriggerCreate("gt_SetRelamyHillsRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Relamy Hills
//--------------------------------------------------------------------------------------------------
bool gt_RespawnRelamyHills_Func (bool testConds, bool runActions) {

  int lv_randomRegion;
  int lv_randomUnit;


  if (testConds) {
    if (!(((UnitGroupHasUnit(gv_relamyHillsUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[3], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[4], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  Wait(10.0, c_timeReal);
  UnitRemove(EventUnit());
  lv_randomRegion = RandomInt(0, 4);
  lv_randomUnit = RandomInt(3, 5);
  UnitCreate(1, gv_enemyUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_relamyHillsRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
  UnitGroupAdd(gv_relamyHillsUnits[lv_randomRegion], UnitLastCreated());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnRelamyHills_Init () {
  gt_RespawnRelamyHills = TriggerCreate("gt_RespawnRelamyHills_Func");
  TriggerAddEventUnitDied(gt_RespawnRelamyHills, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Underground Forest Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetUndergroundForestRegions_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  gv_undergroundForestRegions[0] = RegionFromId(275);
  gv_undergroundForestRegions[1] = RegionFromId(276);
  gv_undergroundForestRegions[2] = RegionFromId(277);
  gv_undergroundForestRegions[3] = RegionFromId(278);
  gv_undergroundForestRegions[4] = RegionFromId(279);
  gv_undergroundForestRegions[5] = RegionFromId(280);
  gv_undergroundForestRegions[6] = RegionFromId(281);
  gv_undergroundForestRegions[7] = RegionFromId(282);
  gv_undergroundForestUnitTypes[0] = "Veneno";
  gv_undergroundForestUnitTypes[1] = "Teredo";
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetUndergroundForestRegions_Init () {
  gt_SetUndergroundForestRegions = TriggerCreate("gt_SetUndergroundForestRegions_Func");
  TriggerAddEventMapInit(gt_SetUndergroundForestRegions);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Underground Forest
//--------------------------------------------------------------------------------------------------
bool gt_RespawnUndergroundForest_Func (bool testConds, bool runActions) {

  int lv_randomRegion;
  int lv_randomUnit;


  if (testConds) {
    if (!(((UnitGroupHasUnit(gv_undergroundForestUnits[0], EventUnit()) || UnitGroupHasUnit(gv_undergroundForestUnits[1], EventUnit()) || UnitGroupHasUnit(gv_undergroundForestUnits[2], EventUnit()) || UnitGroupHasUnit(gv_undergroundForestUnits[3], EventUnit()) || UnitGroupHasUnit(gv_undergroundForestUnits[4], EventUnit()) || UnitGroupHasUnit(gv_undergroundForestUnits[5], EventUnit()) || UnitGroupHasUnit(gv_undergroundForestUnits[6], EventUnit()) || UnitGroupHasUnit(gv_undergroundForestUnits[7], EventUnit())) && (UnitGetOwner(EventUnit()) == 15)))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  Wait(10.0, c_timeReal);
  UnitRemove(EventUnit());
  lv_randomRegion = RandomInt(0, 7);
  lv_randomUnit = RandomInt(0, 1);
  UnitGroupAdd(gv_undergroundForestUnits[lv_randomRegion], UnitLastCreated());
  UnitCreate(1, gv_undergroundForestUnitTypes[lv_randomUnit], 0, 15, RegionRandomPoint(gv_undergroundForestRegions[lv_randomRegion]), libNtve_gf_RandomAngle());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RespawnUndergroundForest_Init () {
  gt_RespawnUndergroundForest = TriggerCreate("gt_RespawnUndergroundForest_Func");
  TriggerAddEventUnitDied(gt_RespawnUndergroundForest, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Wasteland Wander Control
//--------------------------------------------------------------------------------------------------
bool gt_WastelandWanderControl_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetOwner(EventUnit()) == 15) && (UnitGroupHasUnit(gv_wastelandUnitGroups[0], EventUnit()) || UnitGroupHasUnit(gv_wastelandUnitGroups[1], EventUnit()) || UnitGroupHasUnit(gv_wastelandUnitGroups[2], EventUnit()) )))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (UnitGroupHasUnit(gv_wastelandUnitGroups[0], EventUnit())) {
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(1))), c_orderQueueReplace);
  }
  else {
    if (UnitGroupHasUnit(gv_wastelandUnitGroups[1], EventUnit())) {
      UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(2))), c_orderQueueReplace);
    }
    else {
      if (UnitGroupHasUnit(gv_wastelandUnitGroups[2], EventUnit())) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(4))), c_orderQueueReplace);
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WastelandWanderControl_Init () {
  gt_WastelandWanderControl = TriggerCreate("gt_WastelandWanderControl_Func");
  TriggerAddEventUnitRegion(gt_WastelandWanderControl, null, RegionFromId(32), true);
  TriggerAddEventUnitRegion(gt_WastelandWanderControl, null, RegionFromId(36), true);
  TriggerAddEventUnitRegion(gt_WastelandWanderControl, null, RegionFromId(37), true);
  TriggerAddEventUnitRegion(gt_WastelandWanderControl, null, RegionFromId(41), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Pass Wander Control
//--------------------------------------------------------------------------------------------------
bool gt_RelamyPassWanderControl_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!((UnitGetOwner(EventUnit()) == 15) && ((UnitGroupHasUnit(gv_relamyPassUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyPassUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyPassUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyPassUnits[3], EventUnit()))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (UnitGroupHasUnit(gv_relamyPassUnits[0], EventUnit())) {
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(8))), c_orderQueueReplace);
  }
  else {
    if (UnitGroupHasUnit(gv_relamyPassUnits[1], EventUnit())) {
      UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(18))), c_orderQueueReplace);
    }
    else {
      if (UnitGroupHasUnit(gv_relamyPassUnits[2], EventUnit())) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(19))), c_orderQueueReplace);
      }
      else {
        if (UnitGroupHasUnit(gv_relamyPassUnits[3], EventUnit())) {
          UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(20))), c_orderQueueReplace);
        }
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyPassWanderControl_Init () {
  gt_RelamyPassWanderControl = TriggerCreate("gt_RelamyPassWanderControl_Func");
  TriggerAddEventUnitRegion(gt_RelamyPassWanderControl, null, RegionFromId(31), true);
  TriggerAddEventUnitRegion(gt_RelamyPassWanderControl, null, RegionFromId(33), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Gorge Wander Control
//--------------------------------------------------------------------------------------------------
bool gt_RelamyGorgeWanderControl_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetOwner(EventUnit()) == 15) && (UnitGroupHasUnit(gv_relamyGorgeUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyGorgeUnits[3], EventUnit()))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (UnitGroupHasUnit(gv_relamyGorgeUnits[0], EventUnit())) {
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(21))), c_orderQueueReplace);
  }
  else {
    if (UnitGroupHasUnit(gv_relamyGorgeUnits[1], EventUnit())) {
      UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(27))), c_orderQueueReplace);
    }
    else {
      if (UnitGroupHasUnit(gv_relamyGorgeUnits[2], EventUnit())) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(28))), c_orderQueueReplace);
      }
      else {
        if (UnitGroupHasUnit(gv_relamyGorgeUnits[3], EventUnit())) {
          UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(29))), c_orderQueueReplace);
        }
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyGorgeWanderControl_Init () {
  gt_RelamyGorgeWanderControl = TriggerCreate("gt_RelamyGorgeWanderControl_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Canyon Wander Control
//--------------------------------------------------------------------------------------------------
bool gt_RelamyCanyonWanderControl_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetOwner(EventUnit()) == 15) && (UnitGroupHasUnit(gv_relamyCanyonUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyCanyonUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyCanyonUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyCanyonUnits[3], EventUnit()))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (UnitGroupHasUnit(gv_relamyCanyonUnits[0], EventUnit())) {
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(7))), c_orderQueueReplace);
  }
  else {
    if (UnitGroupHasUnit(gv_relamyCanyonUnits[1], EventUnit())) {
      UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(9))), c_orderQueueReplace);
    }
    else {
      if (UnitGroupHasUnit(gv_relamyCanyonUnits[2], EventUnit())) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(10))), c_orderQueueReplace);
      }
      else {
        if (UnitGroupHasUnit(gv_relamyCanyonUnits[3], EventUnit())) {
          UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(11))), c_orderQueueReplace);
        }
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyCanyonWanderControl_Init () {
  gt_RelamyCanyonWanderControl = TriggerCreate("gt_RelamyCanyonWanderControl_Func");
  TriggerAddEventUnitRegion(gt_RelamyCanyonWanderControl, null, RegionFromId(34), true);
  TriggerAddEventUnitRegion(gt_RelamyCanyonWanderControl, null, RegionFromId(40), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Hills Wander Control
//--------------------------------------------------------------------------------------------------
bool gt_RelamyHillsWanderControl_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!(((UnitGetOwner(EventUnit()) == 15) && (UnitGroupHasUnit(gv_relamyHillsUnits[0], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[1], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[2], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[3], EventUnit()) || UnitGroupHasUnit(gv_relamyHillsUnits[4], EventUnit()))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (UnitGroupHasUnit(gv_relamyHillsUnits[0], EventUnit())) {
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
  }
  else {
    if (UnitGroupHasUnit(gv_relamyHillsUnits[1], EventUnit())) {
      UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(13))), c_orderQueueReplace);
    }
    else {
      if (UnitGroupHasUnit(gv_relamyHillsUnits[2], EventUnit())) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(14))), c_orderQueueReplace);
      }
      else {
        if (UnitGroupHasUnit(gv_relamyHillsUnits[3], EventUnit())) {
          UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(15))), c_orderQueueReplace);
        }
        else {
          if (UnitGroupHasUnit(gv_relamyHillsUnits[4], EventUnit())) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(16))), c_orderQueueReplace);
          }
        }
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyHillsWanderControl_Init () {
  gt_RelamyHillsWanderControl = TriggerCreate("gt_RelamyHillsWanderControl_Func");
  TriggerAddEventUnitRegion(gt_RelamyHillsWanderControl, null, RegionFromId(35), true);
  TriggerAddEventUnitRegion(gt_RelamyHillsWanderControl, null, RegionFromId(47), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Waypoint Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateWaypointDialog_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  DialogCreate(260, 400, c_anchorCenter, 250, 0, true);
  gv_waypointDialog = DialogLastCreated();
  DialogSetTitle(gv_waypointDialog, StringExternal("Param/Value/0ECE1424"));
  libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 75, StringExternal("Param/Value/B7FA03F5"), StringExternal("Param/Value/BD18A03E"), "");
  gv_wastelandDialogButton = DialogControlLastCreated();
  libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 125, StringExternal("Param/Value/4DDEC3F1"), StringExternal("Param/Value/513D3FB6"), "");
  gv_ballanDialogButton = DialogControlLastCreated();
  libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 175, StringExternal("Param/Value/1785397A"), StringExternal("Param/Value/401F8A01"), "");
  gv_relamyDialogButton = DialogControlLastCreated();
  libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 225, StringExternal("Param/Value/52F3119C"), StringExternal("Param/Value/5978C91C"), "");
  gv_verbotenDialogButton = DialogControlLastCreated();
  libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 200, 50, c_anchorTop, 0, 275, StringExternal("Param/Value/66E7D47B"), StringExternal("Param/Value/4F3939B7"), "");
  gv_cretonDialogButton = DialogControlLastCreated();
  libNtve_gf_CreateDialogItemButton(gv_waypointDialog, 100, 50, c_anchorTop, 0, 325, StringExternal("Param/Value/9B2E411E"), StringExternal("Param/Value/1F3BFF86"), "");
  gv_closeWaypointDialogButton = DialogControlLastCreated();
  DialogControlSetVisible(gv_ballanDialogButton, PlayerGroupAll(), false);
  DialogControlSetVisible(gv_cretonDialogButton, PlayerGroupAll(), false);
  DialogControlSetVisible(gv_relamyDialogButton, PlayerGroupAll(), false);
  DialogControlSetVisible(gv_verbotenDialogButton, PlayerGroupAll(), false);
  DialogControlSetVisible(gv_wastelandDialogButton, PlayerGroupAll(), false);
  DialogSetVisible(gv_waypointDialog, PlayerGroupAll(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateWaypointDialog_Init () {
  gt_CreateWaypointDialog = TriggerCreate("gt_CreateWaypointDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Load Waypoints
//--------------------------------------------------------------------------------------------------
bool gt_LoadWaypoints_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    // TODO: Maybe do a loop here instead?
    lr_player.waypointUnlocked[0] = BankValueGetAsFlag(lr_player.banks.dragonBank, "WP0", lr_player.hand);
    lr_player.waypointUnlocked[1] = BankValueGetAsFlag(lr_player.banks.dragonBank, "WP1", lr_player.hand);
    lr_player.waypointUnlocked[2] = BankValueGetAsFlag(lr_player.banks.dragonBank, "WP2", lr_player.hand);
    lr_player.waypointUnlocked[3] = BankValueGetAsFlag(lr_player.banks.dragonBank, "WP3", lr_player.hand);
    lr_player.waypointUnlocked[4] = BankValueGetAsFlag(lr_player.banks.dragonBank, "WP4", lr_player.hand);
  }
  PlayerGroupLoopEnd();

  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LoadWaypoints_Init () {
  gt_LoadWaypoints = TriggerCreate("gt_LoadWaypoints_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Selects Waypoint
//--------------------------------------------------------------------------------------------------
bool gt_PlayerSelectsWaypoint_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (!runActions) {
    return true;
  }
  UnitSelect(EventUnit(), lr_player.player, false);
  if (libNtve_gf_UnitInRegion(lr_player.dragon, RegionCircle(UnitGetPosition(EventUnit()), 2.0))) {
    gf_ShowWaypointDialog(lr_player);
  }
  UnitSelect(lr_player.dragon, lr_player.player, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerSelectsWaypoint_Init () {
  gt_PlayerSelectsWaypoint = TriggerCreate("gt_PlayerSelectsWaypoint_Func");
  TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(1199)), c_playerAny, true);
  TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(1201)), c_playerAny, true);
  TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(607)), c_playerAny, true);
  TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(798)), c_playerAny, true);
  TriggerAddEventUnitSelected(gt_PlayerSelectsWaypoint, UnitRefFromUnit(UnitFromId(797)), c_playerAny, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Waypoint
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeavesWaypoint_Func (bool testConds, bool runActions) {
  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  gf_HideWaypointDialog(gv_players[UnitGetOwner(EventUnit()) - 1]);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerLeavesWaypoint_Init () {
  gt_PlayerLeavesWaypoint = TriggerCreate("gt_PlayerLeavesWaypoint_Func");
  TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(124), false);
  TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(125), false);
  TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(123), false);
  TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(121), false);
  TriggerAddEventUnitRegion(gt_PlayerLeavesWaypoint, null, RegionFromId(122), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Waypoint Dialog Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_WaypointDialogButtonClicked_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (!runActions) {
    return true;
  }
  if ((EventDialogControl() == gv_wastelandDialogButton)) {
    gf_WaypointTeleport(lr_player, RegionFromId(124));
  }
  if ((EventDialogControl() == gv_ballanDialogButton)) {
    gf_WaypointTeleport(lr_player, RegionFromId(125));
  }
  if ((EventDialogControl() == gv_relamyDialogButton)) {
    gf_WaypointTeleport(lr_player, RegionFromId(123));
  }
  if ((EventDialogControl() == gv_verbotenDialogButton)) {
    gf_WaypointTeleport(lr_player, RegionFromId(121));
  }
  if ((EventDialogControl() == gv_cretonDialogButton)) {
    gf_WaypointTeleport(lr_player, RegionFromId(122));
  }
  if ((EventDialogControl() == gv_closeWaypointDialogButton)) {
    gf_HideWaypointDialog(lr_player);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WaypointDialogButtonClicked_Init () {
  gt_WaypointDialogButtonClicked = TriggerCreate("gt_WaypointDialogButtonClicked_Func");
  TriggerAddEventDialogControl(gt_WaypointDialogButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dragon Enters Waypoint
//--------------------------------------------------------------------------------------------------
bool gt_DragonEntersWaypoint_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  if ((UnitGetOwner(EventUnit()) == 15)) {
  }
  else {
    if ((UnitGetOwner(EventUnit()) == 14)) {
    }
    else {
      if (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
        UnitBehaviorAddPlayer(EventUnit(), "WaypointProtection", UnitGetOwner(EventUnit()), 1);
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DragonEntersWaypoint_Init () {
  gt_DragonEntersWaypoint = TriggerCreate("gt_DragonEntersWaypoint_Func");
  TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(124), true);
  TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(125), true);
  TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(123), true);
  TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(121), true);
  TriggerAddEventUnitRegion(gt_DragonEntersWaypoint, null, RegionFromId(122), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dragon Leaves Waypoint
//--------------------------------------------------------------------------------------------------
bool gt_DragonLeavesWaypoint_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  if ((UnitGetOwner(EventUnit()) == 15)) {
  }
  else {
    if ((UnitGetOwner(EventUnit()) == 14)) {
    }
    else {
      if (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
        UnitBehaviorRemovePlayer(EventUnit(), "WaypointProtection", UnitGetOwner(EventUnit()), 1);
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DragonLeavesWaypoint_Init () {
  gt_DragonLeavesWaypoint = TriggerCreate("gt_DragonLeavesWaypoint_Func");
  TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(124), false);
  TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(125), false);
  TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(123), false);
  TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(121), false);
  TriggerAddEventUnitRegion(gt_DragonLeavesWaypoint, null, RegionFromId(122), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Zombie Unit Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BDZombieUnitSpawn_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_regionId;
  int lv_j;
  int lv_numKills;
  int lv_killsByEleven;

  if (!runActions) {
    return true;
  }
  TriggerEnable(gt_TeleporttoBioDome, false);
  TriggerEnable(gt_TeleporttoCreton, false);
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    lr_player.state.inCinematic = true;
    UnitSetPosition(lr_player.dragon, UnitGetPosition(EventUnit()), false);
    CameraPan(lr_player.player, UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
    CameraSave(lr_player.player);
    CameraApplyInfo(lr_player.player, CameraInfoFromId(2500), 2.0, -1, 10, true);
    CameraLockInput(lr_player.player, true);
    libNtve_gf_PauseUnit(lr_player.dragon, true);
    libNtve_gf_HideGameUI(false, lr_player.playerGroupSingle);
  }
  PlayerGroupLoopEnd();

  Wait(2.0, c_timeGame);
  TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel("TassadarPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/75E8294A"), StringExternal("Param/Value/059953E4"), 5.0, c_transmissionDurationSet, true);
  // TODO: Remove this TODO as it's complete.
  // TODO: Investigate if this is different in any way from a PlayerGroupLoop, replace if it isn't.
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    lv_numKills = libNtve_gf_UnitGetPropertyKills(lr_player.dragon, c_unitPropCurrent);
    if ((lv_numKills > 75)) {
      lv_numKills = 75;
    }
    lv_killsByEleven = (lv_numKills / 11);
    for(lv_regionId = 176; lv_regionId <= 186; lv_regionId += 1) {
      for(lv_j=0; lv_j < lv_killsByEleven; lv_j += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Mortuus", 0, 15, RegionRandomPoint(RegionFromId(lv_regionId)), UnitGetPosition(EventUnit()));
        libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
        UnitGroupAdd(gv_bDZombieUnits, UnitLastCreated());
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        Wait(0.1, c_timeGame);
      }
    }
  }
  PlayerGroupLoopEnd();

  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    CameraRestore(lr_player.player, 2.0, -1, 10);
    CameraLockInput(lr_player.player, false);
    libNtve_gf_PauseUnit(lr_player.dragon, false);
    libNtve_gf_HideGameUI(true, lr_player.playerGroupSingle);
    lr_player.state.inCinematic = false;
  }
  PlayerGroupLoopEnd();
  Wait(2.5, c_timeGame);
  for (UnitGroupLoopBegin(gv_bDZombieUnits); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
  }
  UnitGroupLoopEnd();
  TriggerEnable(gt_BDZombieUnitDeath, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDZombieUnitSpawn_Init () {
  gt_BDZombieUnitSpawn = TriggerCreate("gt_BDZombieUnitSpawn_Func");
  TriggerAddEventUnitDied(gt_BDZombieUnitSpawn, UnitRefFromUnit(UnitFromId(1884)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Zombie Unit Death
//--------------------------------------------------------------------------------------------------
bool gt_BDZombieUnitDeath_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!UnitGroupHasUnit(gv_bDZombieUnits, EventUnit())) {
      return false;
    }
    if (!((UnitGroupCount(gv_bDZombieUnits, c_unitCountAlive) == 0))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TriggerEnable(gt_TeleporttoBioDome, true);
  TriggerEnable(gt_TeleporttoCreton, true);
  UnitRemove(UnitFromId(1877));
  UnitRemove(UnitFromId(1878));
  UnitRemove(UnitFromId(1879));
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDZombieUnitDeath_Init () {
  gt_BDZombieUnitDeath = TriggerCreate("gt_BDZombieUnitDeath_Func");
  TriggerEnable(gt_BDZombieUnitDeath, false);
  TriggerAddEventUnitDied(gt_BDZombieUnitDeath, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Creton Unit Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BDCretonUnitSpawn_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_i;

  if (!runActions) {
    return true;
  }
  TriggerEnable(gt_TeleporttoBioDome, false);
  TriggerEnable(gt_TeleporttoCreton, false);
  PlayerGroupLoopBegin(gv_playersInBioDome);
  for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    lr_player.state.inCinematic = true;
    UnitSetPosition(lr_player.dragon, UnitGetPosition(EventUnit()), false);
    CameraPan(lr_player.player, UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
    CameraSave(lr_player.player);
    CameraApplyInfo(lr_player.player, CameraInfoFromId(2486), 2.0, -1, 10, true);
    CameraLockInput(lr_player.player, true);
    libNtve_gf_PauseUnit(lr_player.dragon, true);
    libNtve_gf_HideGameUI(false, lr_player.playerGroupSingle);
    for (lv_i = 169; lv_i < 176; lv_i += 1) {
      VisRevealerCreate(lr_player.player, RegionFromId(lv_i));
    }
  }
  PlayerGroupLoopEnd();

  Wait(2.0, c_timeGame);
  TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel("TassadarPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/8011068F"), StringExternal("Param/Value/86CE4109"), 4.0, c_transmissionDurationSet, true);
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(169)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(170)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(171)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(172)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(173)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(174)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Impetus", 0, 15, RegionRandomPoint(RegionFromId(175)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDCretonUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
  }
  PlayerGroupLoopEnd();

  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    CameraRestore(lr_player.player, 2.0, -1, 10);
    CameraLockInput(lr_player.player, false);
    libNtve_gf_PauseUnit(lr_player.dragon, false);
    libNtve_gf_HideGameUI(true, lr_player.playerGroupSingle);
    lr_player.state.inCinematic = false;
  }
  PlayerGroupLoopEnd();

  Wait(2.5, c_timeGame);
  for (UnitGroupLoopBegin(gv_bDCretonUnits); !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
  }
  UnitGroupLoopEnd();
  TriggerEnable(gt_BDCretonUnitDeath, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDCretonUnitSpawn_Init () {
  gt_BDCretonUnitSpawn = TriggerCreate("gt_BDCretonUnitSpawn_Func");
  TriggerAddEventUnitDied(gt_BDCretonUnitSpawn, UnitRefFromUnit(UnitFromId(1883)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Creton Unit Death
//--------------------------------------------------------------------------------------------------
bool gt_BDCretonUnitDeath_Func (bool testConds, bool runActions) {
  int lv_i;

  if (testConds) {
    if (!UnitGroupHasUnit(gv_bDCretonUnits, EventUnit())) {
      return false;
    }
    if (!((UnitGroupCount(gv_bDCretonUnits, c_unitCountAlive) == 0))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TriggerEnable(gt_TeleporttoBioDome, true);
  TriggerEnable(gt_TeleporttoCreton, true);
  for(lv_i = 1869; lv_i < 1877; lv_i += 1) {
    UnitRemove(UnitFromId(lv_i));
  }
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDCretonUnitDeath_Init () {
  gt_BDCretonUnitDeath = TriggerCreate("gt_BDCretonUnitDeath_Func");
  TriggerEnable(gt_BDCretonUnitDeath, false);
  TriggerAddEventUnitDied(gt_BDCretonUnitDeath, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Verboten Unit Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BDVerbotenUnitSpawn_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_i;

  if (!runActions) {
    return true;
  }
  TriggerEnable(gt_TeleporttoBioDome, false);
  TriggerEnable(gt_TeleporttoCreton, false);
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    lr_player.state.inCinematic = true;
    UnitSetPosition(lr_player.dragon, UnitGetPosition(EventUnit()), false);
    CameraPan(lr_player.player, UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
    CameraSave(lr_player.player);
    CameraLockInput(lr_player.player, true);
    libNtve_gf_PauseUnit(lr_player.dragon, true);
    libNtve_gf_HideGameUI(false, lr_player.playerGroupSingle);
    for(lv_i = 163; lv_i < 169; lv_i += 1) {
      VisRevealerCreate(lr_player.player, RegionFromId(lv_i));
    }
  }
  PlayerGroupLoopEnd();

  Wait(2.0, c_timeGame);
  TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel("TassadarPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/95602A96"), StringExternal("Param/Value/C228B6E1"), 4.0, c_transmissionDurationSet, true);
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    libNtve_gf_UnitCreateFacingPoint(1, "Stercore", 0, 15, RegionRandomPoint(RegionFromId(163)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Stercore", 0, 15, RegionRandomPoint(RegionFromId(164)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Stercore", 0, 15, RegionRandomPoint(RegionFromId(165)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Stercore", 0, 15, RegionRandomPoint(RegionFromId(166)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Stercore", 0, 15, RegionRandomPoint(RegionFromId(167)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "Stercore", 0, 15, RegionRandomPoint(RegionFromId(168)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDVerbotenUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
  }
  PlayerGroupLoopEnd();

  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    CameraRestore(lr_player.player, 2.0, -1, 10);
    CameraLockInput(lr_player.player, false);
    libNtve_gf_PauseUnit(lr_player.dragon, false);
    libNtve_gf_HideGameUI(true, lr_player.playerGroupSingle);
    lr_player.state.inCinematic = false;
  }
  PlayerGroupLoopEnd();

  Wait(1.0, c_timeGame);
  UnitGroupLoopBegin(gv_bDVerbotenUnits);
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
  }
  UnitGroupLoopEnd();
  TriggerEnable(gt_BDVerbotenUnitDeath, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDVerbotenUnitSpawn_Init () {
  gt_BDVerbotenUnitSpawn = TriggerCreate("gt_BDVerbotenUnitSpawn_Func");
  TriggerAddEventUnitDied(gt_BDVerbotenUnitSpawn, UnitRefFromUnit(UnitFromId(1882)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Verboten Unit Death 
//--------------------------------------------------------------------------------------------------
bool gt_BDVerbotenUnitDeath_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!UnitGroupHasUnit(gv_bDVerbotenUnits, EventUnit())) {
      return false;
    }
    if (!((UnitGroupCount(gv_bDVerbotenUnits, c_unitCountAlive) == 0))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TriggerEnable(gt_TeleporttoBioDome, true);
  TriggerEnable(gt_TeleporttoCreton, true);
  UnitRemove(UnitFromId(1867));
  UnitRemove(UnitFromId(1868));
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDVerbotenUnitDeath_Init () {
  gt_BDVerbotenUnitDeath = TriggerCreate("gt_BDVerbotenUnitDeath_Func");
  TriggerEnable(gt_BDVerbotenUnitDeath, false);
  TriggerAddEventUnitDied(gt_BDVerbotenUnitDeath, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Relamy Unit Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BDRelamyUnitSpawn_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  TriggerEnable(gt_TeleporttoBioDome, false);
  TriggerEnable(gt_TeleporttoCreton, false);
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    lr_player.state.inCinematic = true;
    UnitSetPosition(lr_player.dragon, UnitGetPosition(EventUnit()), false);
    CameraPan(lr_player.player, UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
    CameraSave(lr_player.player);
    CameraApplyInfo(lr_player.player, CameraInfoFromId(2455), 2.0, -1, 10, true);
    CameraLockInput(lr_player.player, true);
    libNtve_gf_PauseUnit(lr_player.dragon, true);
    libNtve_gf_HideGameUI(false, lr_player.playerGroupSingle);
    VisRevealerCreate(lr_player.player, RegionFromId(142));
    VisRevealerCreate(lr_player.player, RegionFromId(145));
    VisRevealerCreate(lr_player.player, RegionFromId(158));
    VisRevealerCreate(lr_player.player, RegionFromId(159));
    VisRevealerCreate(lr_player.player, RegionFromId(160));
    VisRevealerCreate(lr_player.player, RegionFromId(161));
    VisRevealerCreate(lr_player.player, RegionFromId(162));
  }
  PlayerGroupLoopEnd();

  Wait(2.0, c_timeGame);
  TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel("TassadarPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/9C04FD77"), StringExternal("Param/Value/13ABBF17"), 3.0, c_transmissionDurationSet, true);
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    libNtve_gf_UnitCreateFacingPoint(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(142)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(145)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(158)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(159)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(160)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(161)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "CretonWarlord", 0, 15, RegionRandomPoint(RegionFromId(162)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDRelamyUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
  }
  PlayerGroupLoopEnd();

  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    CameraRestore(lr_player.player, 2.0, -1, 10);
    CameraLockInput(lr_player.player, false);
    libNtve_gf_PauseUnit(lr_player.dragon, false);
    libNtve_gf_HideGameUI(true, lr_player.playerGroupSingle);
    lr_player.state.inCinematic = false;
  }
  PlayerGroupLoopEnd();

  Wait(1.0, c_timeGame);
  UnitGroupLoopBegin(gv_bDRelamyUnits);
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
  }
  UnitGroupLoopEnd();
  TriggerEnable(gt_BDRelamyUnitDeath, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDRelamyUnitSpawn_Init () {
  gt_BDRelamyUnitSpawn = TriggerCreate("gt_BDRelamyUnitSpawn_Func");
  TriggerAddEventUnitDied(gt_BDRelamyUnitSpawn, UnitRefFromUnit(UnitFromId(1881)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Relamy Unit Death
//--------------------------------------------------------------------------------------------------
bool gt_BDRelamyUnitDeath_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!UnitGroupHasUnit(gv_bDRelamyUnits, EventUnit())) {
      return false;
    }
    if (!((UnitGroupCount(gv_bDRelamyUnits, c_unitCountAlive) == 0))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TriggerEnable(gt_TeleporttoBioDome, true);
  TriggerEnable(gt_TeleporttoCreton, true);
  UnitRemove(UnitFromId(2456));
  UnitRemove(UnitFromId(1866));
  UnitRemove(UnitFromId(1865));
  UnitRemove(UnitFromId(1864));
  UnitRemove(UnitFromId(1863));
  UnitRemove(UnitFromId(2457));
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDRelamyUnitDeath_Init () {
  gt_BDRelamyUnitDeath = TriggerCreate("gt_BDRelamyUnitDeath_Func");
  TriggerEnable(gt_BDRelamyUnitDeath, false);
  TriggerAddEventUnitDied(gt_BDRelamyUnitDeath, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Wasteland Unit Spawn
//--------------------------------------------------------------------------------------------------
bool gt_BDWastelandUnitSpawn_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_i;

  if (!runActions) {
    return true;
  }
  TriggerEnable(gt_TeleporttoBioDome, false);
  TriggerEnable(gt_TeleporttoCreton, false);
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    lr_player.state.inCinematic = true;
    UnitSetPosition(lr_player.dragon, UnitGetPosition(EventUnit()), false);
    CameraPan(lr_player.player, UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
    CameraSave(lr_player.player);
    CameraApplyInfo(lr_player.player, CameraInfoFromId(1977), 2.0, -1, 10, true);
    CameraLockInput(lr_player.player, true);
    libNtve_gf_PauseUnit(lr_player.dragon, true);
    libNtve_gf_HideGameUI(false, lr_player.playerGroupSingle);
    for(lv_i = 151; lv_i < 158; lv_i += 1) {
      VisRevealerCreate(lr_player.player, RegionFromId(lv_i));
    }
  }
  PlayerGroupLoopEnd();

  Wait(2.0, c_timeGame);
  TransmissionSend(gv_playersInBioDome, TransmissionSourceFromModel("TassadarPortrait"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/7D37A0AD"), StringExternal("Param/Value/600FD038"), 4.0, c_transmissionDurationSet, true);
  // TODO: Investigate if this is different in any way from a PlayerGroupLoop, replace if it isn't.
  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    libNtve_gf_UnitCreateFacingPoint(1, "DemonicSheep", 0, 15, RegionRandomPoint(RegionFromId(151)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "DemonicSheep", 0, 15, RegionRandomPoint(RegionFromId(152)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "DemonicSheep", 0, 15, RegionRandomPoint(RegionFromId(153)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "DemonicSrepti", 0, 15, RegionRandomPoint(RegionFromId(154)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "DemonicSheep", 0, 15, RegionRandomPoint(RegionFromId(155)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "DemonicSheep", 0, 15, RegionRandomPoint(RegionFromId(155)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "DemonicSrepti", 0, 15, RegionRandomPoint(RegionFromId(156)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
    Wait(0.5, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "DemonicSheep", 0, 15, RegionRandomPoint(RegionFromId(157)), UnitGetPosition(EventUnit()));
    libNtve_gf_CreateModelAtPoint("WarpGateWarpCast", UnitGetPosition(UnitLastCreated()));
    UnitGroupAdd(gv_bDWastelandUnits, UnitLastCreated());
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
  }
  PlayerGroupLoopEnd();

  for (PlayerGroupLoopBegin(gv_playersInBioDome); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    CameraRestore(lr_player.player, 2.0, -1, 10);
    CameraLockInput(lr_player.player, false);
    libNtve_gf_PauseUnit(lr_player.dragon, false);
    libNtve_gf_HideGameUI(true, lr_player.playerGroupSingle);
    lr_player.state.inCinematic = false;
  }
  PlayerGroupLoopEnd();

  Wait(1.0, c_timeGame);
  UnitGroupLoopBegin(gv_bDWastelandUnits);
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(gv_dragonsInBioDome, c_unitCountAlive)), c_orderQueueReplace);
  }
  UnitGroupLoopEnd();
  TriggerEnable(gt_BDWastelandUnitDeath, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDWastelandUnitSpawn_Init () {
  gt_BDWastelandUnitSpawn = TriggerCreate("gt_BDWastelandUnitSpawn_Func");
  TriggerAddEventUnitDied(gt_BDWastelandUnitSpawn, UnitRefFromUnit(UnitFromId(1880)));
}
//--------------------------------------------------------------------------------------------------
// Trigger: BD Wasteland Unit Death
//--------------------------------------------------------------------------------------------------
bool gt_BDWastelandUnitDeath_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (!UnitGroupHasUnit(gv_bDWastelandUnits, EventUnit())) {
      return false;
    }
    if (!((UnitGroupCount(gv_bDWastelandUnits, c_unitCountAlive) == 0))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TriggerEnable(gt_TeleporttoBioDome, true);
  TriggerEnable(gt_TeleporttoCreton, true);
  UnitGroupLoopBegin(UnitGroup("MineralField", 0, RegionFromId(146), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    UnitRemove(UnitGroupLoopCurrent());
  }
  UnitGroupLoopEnd();
  TriggerExecute(gt_SpawnEnemiesBioDomeWasteland, true, false);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_BDWastelandUnitDeath_Init () {
  gt_BDWastelandUnitDeath = TriggerCreate("gt_BDWastelandUnitDeath_Func");
  TriggerEnable(gt_BDWastelandUnitDeath, false);
  TriggerAddEventUnitDied(gt_BDWastelandUnitDeath, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Teleport to Bio Dome
//--------------------------------------------------------------------------------------------------
bool gt_TeleporttoBioDome_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  
  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.quests.storyQuests[8].state >= 1) {
    SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
    SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "BiodomeTheme", c_soundtrackCueAny, 0, false);
    CameraPan(lr_player.player, RegionGetCenter(RegionFromName("Teleport to Bio Dome Spawn")), 0.0, -1, 10, false);
    UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromName("Teleport to Bio Dome Spawn")), false);
    lr_player.locationString = "Bio Dome";
    lr_player.locationText = StringToText(lr_player.locationString);
    libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    lr_player.respawnPoint = RegionGetCenter(RegionFromName("Teleport to Creton"));
    PlayerGroupAdd(gv_playersInBioDome, lr_player.player);
    UnitGroupAdd(gv_dragonsInBioDome, lr_player.dragon);
  }
  else {
    if (lr_player.quests.storyQuests[6].state == 1) {
      ObjectiveSetState(lr_player.quests.storyQuests[6].objective, c_objectiveStateFailed);
      ObjectiveDestroy(lr_player.quests.storyQuests[6].objective);
      lr_player.quests.storyQuests[6].state = 2;
      BankValueSetFromInt(lr_player.banks.dragonBank, "SQ6", lr_player.hand, lr_player.quests.storyQuests[6].state);
      PingDestroy(lr_player.quests.storyQuests[6].ping);
      gf_SQ7Setup(lr_player);
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TeleporttoBioDome_Init () {
  gt_TeleporttoBioDome = TriggerCreate("gt_TeleporttoBioDome_Func");
  TriggerAddEventUnitRegion(gt_TeleporttoBioDome, null, RegionFromName("Teleport to Bio Dome"), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Teleport to Creton
//--------------------------------------------------------------------------------------------------
bool gt_TeleporttoCreton_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  
  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
  SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "CretonTheme", c_soundtrackCueAny, 0, false);
  UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromId(190)), false);
  CameraPan(lr_player.player, RegionGetCenter(RegionFromId(190)), 0.0, -1, 10, false);
  lr_player.locationString = "Creton Trench";
  lr_player.locationText = StringToText(lr_player.locationString);
  libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
  UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
  lr_player.respawnPoint = RegionGetCenter(RegionFromId(190));
  PlayerGroupRemove(gv_playersInBioDome, lr_player.player);
  UnitGroupRemove(gv_dragonsInBioDome, lr_player.dragon);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TeleporttoCreton_Init () {
  gt_TeleporttoCreton = TriggerCreate("gt_TeleporttoCreton_Func");
  TriggerAddEventUnitRegion(gt_TeleporttoCreton, null, RegionFromId(188), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set RP to Wastelands
//--------------------------------------------------------------------------------------------------
bool gt_SetRPtoWastelands_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  
  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/7BE07EBD"));
  lr_player.respawnPoint = RegionGetCenter(RegionFromId(124));
  lr_player.waypointUnlocked[0] = true;
  BankValueSetFromFlag(lr_player.banks.dragonBank, "WP0", lr_player.hand, lr_player.waypointUnlocked[0]);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRPtoWastelands_Init () {
  gt_SetRPtoWastelands = TriggerCreate("gt_SetRPtoWastelands_Func");
  TriggerAddEventUnitRegion(gt_SetRPtoWastelands, null, RegionFromId(124), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set RP to Ballan
//--------------------------------------------------------------------------------------------------
bool gt_SetRPtoBallan_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  
  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/F2677025"));
  lr_player.respawnPoint = RegionGetCenter(RegionFromId(125));
  lr_player.waypointUnlocked[1] = true;
  BankValueSetFromFlag(lr_player.banks.dragonBank, "WP1", lr_player.hand, lr_player.waypointUnlocked[1]);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRPtoBallan_Init () {
  gt_SetRPtoBallan = TriggerCreate("gt_SetRPtoBallan_Func");
  TriggerAddEventUnitRegion(gt_SetRPtoBallan, null, RegionFromId(125), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set RP to Relamy
//--------------------------------------------------------------------------------------------------
bool gt_SetRPtoRelamy_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  
  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/9E82069B"));
  lr_player.respawnPoint = RegionGetCenter(RegionFromId(123));
  lr_player.waypointUnlocked[2] = true;
  BankValueSetFromFlag(lr_player.banks.dragonBank, "WP2", lr_player.hand, lr_player.waypointUnlocked[2]);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRPtoRelamy_Init () {
  gt_SetRPtoRelamy = TriggerCreate("gt_SetRPtoRelamy_Func");
  TriggerAddEventUnitRegion(gt_SetRPtoRelamy, null, RegionFromId(123), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set RP to Verboten Forest Waypoint
//--------------------------------------------------------------------------------------------------
bool gt_SetRPtoVerbotenForestWaypoint_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  
  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/58C10116"));
  lr_player.respawnPoint = RegionGetCenter(RegionFromId(121));
  lr_player.waypointUnlocked[3] = true;
  BankValueSetFromFlag(lr_player.banks.dragonBank, "WP3", lr_player.hand, lr_player.waypointUnlocked[3]);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRPtoVerbotenForestWaypoint_Init () {
  gt_SetRPtoVerbotenForestWaypoint = TriggerCreate("gt_SetRPtoVerbotenForestWaypoint_Func");
  TriggerAddEventUnitRegion(gt_SetRPtoVerbotenForestWaypoint, null, RegionFromId(121), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set RP to Creton
//--------------------------------------------------------------------------------------------------
bool gt_SetRPtoCreton_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  
  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (!UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Param/Value/21B16D01"));
  lr_player.respawnPoint = RegionGetCenter(RegionFromId(122));
  lr_player.waypointUnlocked[4] = true;
  BankValueSetFromFlag(lr_player.banks.dragonBank, "WP4", lr_player.hand, lr_player.waypointUnlocked[4]);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetRPtoCreton_Init () {
  gt_SetRPtoCreton = TriggerCreate("gt_SetRPtoCreton_Func");
  TriggerAddEventUnitRegion(gt_SetRPtoCreton, null, RegionFromId(122), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Dragons Nest Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateDragonsNestWarning_Func (bool testConds, bool runActions) {
  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/85D0040F"), 24, PointFromId(624), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateDragonsNestWarning_Init () {
  gt_CreateDragonsNestWarning = TriggerCreate("gt_CreateDragonsNestWarning_Func");
  TriggerAddEventUnitRangePoint(gt_CreateDragonsNestWarning, null, PointFromId(624), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Relamy Pass Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateRelamyPassWarning_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/904E3199"), 24, PointFromId(616), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateRelamyPassWarning_Init () {
  gt_CreateRelamyPassWarning = TriggerCreate("gt_CreateRelamyPassWarning_Func");
  TriggerAddEventUnitRangePoint(gt_CreateRelamyPassWarning, null, PointFromId(616), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Relamy Canyon Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateRelamyCanyonWarning_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/9E8D5C69"), 24, PointFromId(619), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateRelamyCanyonWarning_Init () {
  gt_CreateRelamyCanyonWarning = TriggerCreate("gt_CreateRelamyCanyonWarning_Func");
  TriggerAddEventUnitRangePoint(gt_CreateRelamyCanyonWarning, null, PointFromId(619), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Relamy Hills Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateRelamyHillsWarning_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/7A4BEC0C"), 24, PointFromId(620), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateRelamyHillsWarning_Init () {
  gt_CreateRelamyHillsWarning = TriggerCreate("gt_CreateRelamyHillsWarning_Func");
  TriggerAddEventUnitRangePoint(gt_CreateRelamyHillsWarning, null, PointFromId(620), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Relamy Gorge Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateRelamyGorgeWarning_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/C7072A64"), 24, PointFromId(709), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateRelamyGorgeWarning_Init () {
  gt_CreateRelamyGorgeWarning = TriggerCreate("gt_CreateRelamyGorgeWarning_Func");
  TriggerAddEventUnitRangePoint(gt_CreateRelamyGorgeWarning, null, PointFromId(709), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Lava Pass Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateLavaPassWarning_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/C17B2598"), 24, PointFromId(205), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateLavaPassWarning_Init () {
  gt_CreateLavaPassWarning = TriggerCreate("gt_CreateLavaPassWarning_Func");
  TriggerAddEventUnitRangePoint(gt_CreateLavaPassWarning, null, PointFromId(205), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Verboten Forest Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateVerbotenForestWarning_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/302FEAEA"), 24, PointFromId(837), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateVerbotenForestWarning_Init () {
  gt_CreateVerbotenForestWarning = TriggerCreate("gt_CreateVerbotenForestWarning_Func");
  TriggerAddEventUnitRangePoint(gt_CreateVerbotenForestWarning, null, PointFromId(837), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Verboten Infestation Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateVerbotenInfestationWarning_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/00FFE1AB"), 24, PointFromId(1095), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateVerbotenInfestationWarning_Init () {
  gt_CreateVerbotenInfestationWarning = TriggerCreate("gt_CreateVerbotenInfestationWarning_Func");
  TriggerAddEventUnitRangePoint(gt_CreateVerbotenInfestationWarning, null, PointFromId(1095), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Road To Ballan Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateRoadToBallanWarning_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/F802674B"), 24, PointFromId(239), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateRoadToBallanWarning_Init () {
  gt_CreateRoadToBallanWarning = TriggerCreate("gt_CreateRoadToBallanWarning_Func");
  TriggerAddEventUnitRangePoint(gt_CreateRoadToBallanWarning, null, PointFromId(239), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Creton Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateCretonWarning_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/26DDFA9D"), 24, PointFromId(1186), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateCretonWarning_Init () {
  gt_CreateCretonWarning = TriggerCreate("gt_CreateCretonWarning_Func");
  TriggerAddEventUnitRangePoint(gt_CreateCretonWarning, null, PointFromId(1186), 12.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Sragmasi Warning
//--------------------------------------------------------------------------------------------------
bool gt_CreateSragmasiWarning_Func (bool testConds, bool runActions) {
  if (testConds) {
    if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  TextTagCreate(StringExternal("Param/Value/4C8936F2"), 24, PointFromId(2502), 1.0, true, true, PlayerGroupAll());
  TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 524288.0);
  TriggerEnable(TriggerGetCurrent(), false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateSragmasiWarning_Init () {
  gt_CreateSragmasiWarning = TriggerCreate("gt_CreateSragmasiWarning_Func");
  TriggerAddEventUnitRangePoint(gt_CreateSragmasiWarning, null, PointFromId(2502), 30.0, true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Up Location Dialog
//--------------------------------------------------------------------------------------------------
bool gt_SetUpLocationDialog_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_playerIndex;
  if (!runActions) {
    return true;
  }
  for (lv_playerIndex = 0; lv_playerIndex < 4; lv_playerIndex += 1) {
    lr_player = gv_players[lv_playerIndex];
    DialogCreate(200, 100, c_anchorTop, 0, 40, true);
    lr_player.locationDialog.state = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(lr_player.locationDialog.state, 200, 50, c_anchorTop, 55, 25, StringExternal("Param/Value/A87E682D"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.locationDialog.state, 200, 50, c_anchorBottom, ((StringLength(lr_player.locationString) * 2) + 4), 0, lr_player.locationText, Color(28*100/255,167*100/255,234*100/255), true, 2.0);
    lr_player.locationDialog.textBox = DialogControlLastCreated();
    DialogSetVisible(lr_player.locationDialog.state, PlayerGroupSingle(lv_playerIndex+1), true);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetUpLocationDialog_Init () {
  gt_SetUpLocationDialog = TriggerCreate("gt_SetUpLocationDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Wasteland
//--------------------------------------------------------------------------------------------------
bool gt_LocationWasteland_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (EventUnit() != lr_player.dragon) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.locationString != "Wasteland") {
    UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", lr_player.player, c_unitBehaviorCountAll);
    SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
    SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "WastelandTheme", c_soundtrackCueAny, 0, false);
    lr_player.locationString = "Wasteland";
    lr_player.locationText = StringToText(lr_player.locationString);
    libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationWasteland_Init () {
  gt_LocationWasteland = TriggerCreate("gt_LocationWasteland_Func");
  TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(32), true);
  TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(36), true);
  TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(37), true);
  TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(41), true);
  TriggerAddEventUnitRegion(gt_LocationWasteland, null, RegionFromId(124), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Dragon's Nest
//--------------------------------------------------------------------------------------------------
bool gt_LocationDragonsNest_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (EventUnit() != lr_player.dragon) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.locationString != "Dragon's Nest") {
    UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", lr_player.player, c_unitBehaviorCountAll);
    lr_player.locationString = "Dragon's Nest";
    lr_player.locationText = StringToText(lr_player.locationString);
    libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationDragonsNest_Init () {
  gt_LocationDragonsNest = TriggerCreate("gt_LocationDragonsNest_Func");
  TriggerAddEventUnitRegion(gt_LocationDragonsNest, null, RegionFromId(3), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Syrital's Lair
//--------------------------------------------------------------------------------------------------
bool gt_LocationSyritalsLair_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (EventUnit() != lr_player.dragon) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.locationString != "Syrital's Lair") {
    UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", lr_player.player, c_unitBehaviorCountAll);
    lr_player.locationString = "Syrital's Lair";
    lr_player.locationText = StringToText(lr_player.locationString);
    libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationSyritalsLair_Init () {
  gt_LocationSyritalsLair = TriggerCreate("gt_LocationSyritalsLair_Func");
  TriggerAddEventUnitRegion(gt_LocationSyritalsLair, null, RegionFromId(6), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Relamy Pass
//--------------------------------------------------------------------------------------------------
bool gt_LocationRelamyPass_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (EventUnit() != lr_player.dragon) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.locationString != "Relamy Pass") {
    if (lr_player.locationString != "Relamy Gorge" && lr_player.locationString != "Relamy Canyon" && lr_player.locationString != "Relamy Hills") {
      UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", lr_player.player, c_unitBehaviorCountAll);
      SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
      SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "RelamyCaveTheme", c_soundtrackCueAny, 0, false);
    }
    lr_player.locationString = "Relamy Pass";
    lr_player.locationText = StringToText(lr_player.locationString);
    libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationRelamyPass_Init () {
  gt_LocationRelamyPass = TriggerCreate("gt_LocationRelamyPass_Func");
  TriggerAddEventUnitRegion(gt_LocationRelamyPass, null, RegionFromId(31), true);
  TriggerAddEventUnitRegion(gt_LocationRelamyPass, null, RegionFromId(33), true);
  TriggerAddEventUnitRegion(gt_LocationRelamyPass, null, RegionFromId(19), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Relamy Canyon
//--------------------------------------------------------------------------------------------------
bool gt_LocationRelamyCanyon_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (EventUnit() != lr_player.dragon) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.locationString != "Relamy Canyon") {
    if (lr_player.locationString != "Relamy Pass" && lr_player.locationString != "Relamy Canyon" && lr_player.locationString != "Relamy Hills") {
      UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", lr_player.player, c_unitBehaviorCountAll);
      SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
      SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "RelamyCaveTheme", c_soundtrackCueAny, 0, false);
    }
    lr_player.locationString = "Relamy Canyon";
    lr_player.locationText = StringToText(lr_player.locationString);
    libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationRelamyCanyon_Init () {
  gt_LocationRelamyCanyon = TriggerCreate("gt_LocationRelamyCanyon_Func");
  TriggerAddEventUnitRegion(gt_LocationRelamyCanyon, null, RegionFromId(34), true);
  TriggerAddEventUnitRegion(gt_LocationRelamyCanyon, null, RegionFromId(40), true);
  TriggerAddEventUnitRegion(gt_LocationRelamyCanyon, null, RegionFromId(59), true);
  TriggerAddEventUnitRegion(gt_LocationRelamyCanyon, null, RegionFromId(123), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Relamy Hills
//--------------------------------------------------------------------------------------------------
bool gt_LocationRelamyHills_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (EventUnit() != lr_player.dragon) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.locationString !=  "Relamy Hills") {
    if (lr_player.locationString != "Relamy Pass" && lr_player.locationString != "Relamy Gorge" && lr_player.locationString != "Relamy Canyon") {
      UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", lr_player.player, c_unitBehaviorCountAll);
      SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
      SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "RelamyCaveTheme", c_soundtrackCueAny, 0, false);
    }
    lr_player.locationString = "Relamy Hills";
    lr_player.locationText = StringToText(lr_player.locationString);
    libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationRelamyHills_Init () {
  gt_LocationRelamyHills = TriggerCreate("gt_LocationRelamyHills_Func");
  TriggerAddEventUnitRegion(gt_LocationRelamyHills, null, RegionFromId(35), true);
  TriggerAddEventUnitRegion(gt_LocationRelamyHills, null, RegionFromId(13), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Verboten Forest
//--------------------------------------------------------------------------------------------------
bool gt_LocationVerbotenForest_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (EventUnit() != lr_player.dragon) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.locationString != "Verboten Forest") {
    UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", lr_player.player, c_unitBehaviorCountAll);
    SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
    SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "VerbotenTheme", c_soundtrackCueAny, 0, false);
    lr_player.locationString = "Verboten Forest";
    lr_player.locationText = StringToText(lr_player.locationString);
    libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationVerbotenForest_Init () {
  gt_LocationVerbotenForest = TriggerCreate("gt_LocationVerbotenForest_Func");
  TriggerAddEventUnitRegion(gt_LocationVerbotenForest, null, RegionFromId(58), true);
  TriggerAddEventUnitRegion(gt_LocationVerbotenForest, null, RegionFromId(121), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Creton
//--------------------------------------------------------------------------------------------------
bool gt_LocationCreton_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (EventUnit() != lr_player.dragon) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.locationString != "Creton") {
    if (lr_player.locationString != "Creton Trench") {
      UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", lr_player.player, c_unitBehaviorCountAll);
      SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
      SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "CretonTheme", c_soundtrackCueAny, 0, false);
    }
    lr_player.locationString = "Creton";
    lr_player.locationText = StringToText(lr_player.locationString);
    libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationCreton_Init () {
  gt_LocationCreton = TriggerCreate("gt_LocationCreton_Func");
  TriggerAddEventUnitRegion(gt_LocationCreton, null, RegionFromId(98), true);
  TriggerAddEventUnitRegion(gt_LocationCreton, null, RegionFromId(135), true);
  TriggerAddEventUnitRegion(gt_LocationCreton, null, RegionFromId(122), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Creton Trench
//--------------------------------------------------------------------------------------------------
bool gt_LocationCretonTrench_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (EventUnit() != lr_player.dragon) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.locationString != "Creton Trench") {
    if (lr_player.locationString != "Creton") {
      UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", lr_player.player, c_unitBehaviorCountAll);
      SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
      SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "CretonTheme", c_soundtrackCueAny, 0, false);
    }
    lr_player.locationString = "Creton Trench";
    lr_player.locationText = StringToText(lr_player.locationString);
    libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationCretonTrench_Init () {
  gt_LocationCretonTrench = TriggerCreate("gt_LocationCretonTrench_Func");
  TriggerAddEventUnitRegion(gt_LocationCretonTrench, null, RegionFromId(134), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Road to Ballan
//--------------------------------------------------------------------------------------------------
bool gt_LocationRoadtoBallan_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (EventUnit() != lr_player.dragon) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.locationString != "Road to Ballan") {
    if (lr_player.locationString != "Ballan") {
      UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", lr_player.player, c_unitBehaviorCountAll);
      // TODO: Make sure this works.
      SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
      SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "BallansTheme", c_soundtrackCueAny, 0, false);
    }
    lr_player.locationString = "Road to Ballan";
    lr_player.locationText = StringToText(lr_player.locationString);
    libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationRoadtoBallan_Init () {
  gt_LocationRoadtoBallan = TriggerCreate("gt_LocationRoadtoBallan_Func");
  TriggerAddEventUnitRegion(gt_LocationRoadtoBallan, null, RegionFromId(38), true);
  TriggerAddEventUnitRegion(gt_LocationRoadtoBallan, null, RegionFromId(39), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Location Ballan
//--------------------------------------------------------------------------------------------------
bool gt_LocationBallan_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (UnitGetOwner(EventUnit()) == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    return false;
  }

  lr_player = gv_players[UnitGetOwner(EventUnit()) - 1];

  if (testConds) {
    if (EventUnit() != lr_player.dragon) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if (lr_player.locationString != "Ballan") {
    if (lr_player.locationString != "Road To Ballan") {
      UnitBehaviorRemovePlayer(EventUnit(), "TimePenalty", lr_player.player, c_unitBehaviorCountAll);
      SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
      SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "BallansTheme", c_soundtrackCueAny, 0, false);
    }
    lr_player.locationString = "Ballan";
    lr_player.locationText = StringToText(lr_player.locationString);
    libNtve_gf_SetDialogItemText(lr_player.locationDialog.textBox, lr_player.locationText, lr_player.playerGroupSingle);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LocationBallan_Init () {
  gt_LocationBallan = TriggerCreate("gt_LocationBallan_Func");
  TriggerAddEventUnitRegion(gt_LocationBallan, null, RegionFromId(76), true);
  TriggerAddEventUnitRegion(gt_LocationBallan, null, RegionFromId(125), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Wasteland Healing Water Enter
//--------------------------------------------------------------------------------------------------
bool gt_WastelandHealingWaterEnter_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  UnitBehaviorAdd(EventUnit(), "HealingWaters", EventUnit(), 1);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WastelandHealingWaterEnter_Init () {
  gt_WastelandHealingWaterEnter = TriggerCreate("gt_WastelandHealingWaterEnter_Func");
  TriggerAddEventUnitRegion(gt_WastelandHealingWaterEnter, null, RegionFromId(42), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Wasteland Healing Water Leave
//--------------------------------------------------------------------------------------------------
bool gt_WastelandHealingWaterLeave_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  UnitBehaviorRemove(EventUnit(), "HealingWaters", 1);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WastelandHealingWaterLeave_Init () {
  gt_WastelandHealingWaterLeave = TriggerCreate("gt_WastelandHealingWaterLeave_Func");
  TriggerAddEventUnitRegion(gt_WastelandHealingWaterLeave, null, RegionFromId(42), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Pass Healing Water Enter
//--------------------------------------------------------------------------------------------------
bool gt_RelamyPassHealingWaterEnter_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  UnitBehaviorAdd(EventUnit(), "HealingWaters", EventUnit(), 1);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyPassHealingWaterEnter_Init () {
  gt_RelamyPassHealingWaterEnter = TriggerCreate("gt_RelamyPassHealingWaterEnter_Func");
  TriggerAddEventUnitRegion(gt_RelamyPassHealingWaterEnter, null, RegionFromId(43), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Pass Healing Water Leave
//--------------------------------------------------------------------------------------------------
bool gt_RelamyPassHealingWaterLeave_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  UnitBehaviorRemove(EventUnit(), "HealingWaters", 1);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyPassHealingWaterLeave_Init () {
  gt_RelamyPassHealingWaterLeave = TriggerCreate("gt_RelamyPassHealingWaterLeave_Func");
  TriggerAddEventUnitRegion(gt_RelamyPassHealingWaterLeave, null, RegionFromId(43), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Canyon Healing Water Enter
//--------------------------------------------------------------------------------------------------
bool gt_RelamyCanyonHealingWaterEnter_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  UnitBehaviorAdd(EventUnit(), "HealingWaters", EventUnit(), 1);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyCanyonHealingWaterEnter_Init () {
  gt_RelamyCanyonHealingWaterEnter = TriggerCreate("gt_RelamyCanyonHealingWaterEnter_Func");
  TriggerAddEventUnitRegion(gt_RelamyCanyonHealingWaterEnter, null, RegionFromId(60), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Relamy Canyon Healing Water Leave
//--------------------------------------------------------------------------------------------------
bool gt_RelamyCanyonHealingWaterLeave_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  UnitBehaviorRemove(EventUnit(), "HealingWaters", 1);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RelamyCanyonHealingWaterLeave_Init () {
  gt_RelamyCanyonHealingWaterLeave = TriggerCreate("gt_RelamyCanyonHealingWaterLeave_Func");
  TriggerAddEventUnitRegion(gt_RelamyCanyonHealingWaterLeave, null, RegionFromId(60), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Verboten Forest Healing Water Enter
//--------------------------------------------------------------------------------------------------
bool gt_VerbotenForestHealingWaterEnter_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  UnitBehaviorAdd(EventUnit(), "HealingWaters", EventUnit(), 1);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VerbotenForestHealingWaterEnter_Init () {
  gt_VerbotenForestHealingWaterEnter = TriggerCreate("gt_VerbotenForestHealingWaterEnter_Func");
  TriggerAddEventUnitRegion(gt_VerbotenForestHealingWaterEnter, null, RegionFromId(133), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Verboten Forest Healing Water Leave
//--------------------------------------------------------------------------------------------------
bool gt_VerbotenForestHealingWaterLeave_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  UnitBehaviorRemove(EventUnit(), "HealingWaters", 1);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VerbotenForestHealingWaterLeave_Init () {
  gt_VerbotenForestHealingWaterLeave = TriggerCreate("gt_VerbotenForestHealingWaterLeave_Func");
  TriggerAddEventUnitRegion(gt_VerbotenForestHealingWaterLeave, null, RegionFromId(133), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Lava Enter
//--------------------------------------------------------------------------------------------------
bool gt_LavaEnter_Func (bool testConds, bool runActions) {

  if (testConds) {
    if (libNtve_gf_UnitIsInvulnerable(EventUnit())) {
      return false;
    }
  }

  if (!runActions) {
    return true;
  }
  if ((UnitGetOwner(EventUnit()) == 15)) {
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(EventUnit())) + RandomFixed(-10.0, 10.0)), (PointGetY(UnitGetPosition(EventUnit())) + RandomFixed(-10.0, 10.0)))), c_orderQueueReplace);
  }
  if ((UnitGetOwner(EventUnit()) == 1)) {
    if (gv_players[0].skills.fireSkin) {
    }
    else {
      UnitBehaviorAdd(EventUnit(), "InLava", EventUnit(), 1);
    }
  }
  else {
    if ((UnitGetOwner(EventUnit()) == 2)) {
      if (gv_players[1].skills.fireSkin) {
      }
      else {
        UnitBehaviorAdd(EventUnit(), "InLava", EventUnit(), 1);
      }
    }
    else {
      if ((UnitGetOwner(EventUnit()) == 3)) {
        if (gv_players[2].skills.fireSkin) {
        }
        else {
          UnitBehaviorAdd(EventUnit(), "InLava", EventUnit(), 1);
        }
      }
      else {
        if ((UnitGetOwner(EventUnit()) == 4)) {
          if (gv_players[3].skills.fireSkin) {
          }
          else {
            UnitBehaviorAdd(EventUnit(), "InLava", EventUnit(), 1);
          }
        }
        else {
          if ((UnitGetType(EventUnit()) == "Syrital")) {
          }
          else {
            UnitBehaviorAdd(EventUnit(), "InLava", EventUnit(), 1);
          }
        }
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LavaEnter_Init () {
  gt_LavaEnter = TriggerCreate("gt_LavaEnter_Func");
  TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(22), true);
  TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(23), true);
  TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(24), true);
  TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(25), true);
  TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(126), true);
  TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(127), true);
  TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(128), true);
  TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(129), true);
  TriggerAddEventUnitRegion(gt_LavaEnter, null, RegionFromId(130), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Lava Exit
//--------------------------------------------------------------------------------------------------
bool gt_LavaExit_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  UnitBehaviorRemove(EventUnit(), "InLava", 1);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LavaExit_Init () {
  gt_LavaExit = TriggerCreate("gt_LavaExit_Func");
  TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(22), false);
  TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(23), false);
  TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(24), false);
  TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(25), false);
  TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(126), false);
  TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(127), false);
  TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(128), false);
  TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(129), false);
  TriggerAddEventUnitRegion(gt_LavaExit, null, RegionFromId(130), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Chaos
//--------------------------------------------------------------------------------------------------
bool gt_Chaos_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  if(gv_mortuusKillCount == 0){
  gv_mortuusKillCountStacks = 0;
  }
  if(gv_mortuusKillCount <= 255){
  gv_mortuusKillCountStacks = gv_mortuusKillCount;
  }
  if ((UnitGetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropLevel, c_unitPropCurrent) == 100.0)) {
    if ((UnitGetType(EventUnit()) != "Mortuus")) {
      UnitCreate(1, "Mortuus", c_unitCreateIgnorePlacement, 15, UnitGetPosition(EventUnit()), libNtve_gf_RandomAngle());
      UnitBehaviorAdd(UnitLastCreated(), "ChaosMode", UnitLastCreated(), gv_mortuusKillCountStacks);
    }
    else {
      TextTagCreate(IntToText(gv_mortuusKillCount), 72, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
      TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
      TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
      TextTagSetColor(TextTagLastCreated(), c_textTagColorText, ColorWithAlpha(RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0)));
      gv_mortuusKillCount += 1;
      if ((gv_mortuusKillCount % 256 == 0)) {
        UnitCreate(1, "Nosferatu", 0, 15, UnitGetPosition(EventUnit()), 270.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4A9BE0A1"));
        //gv_mortuusKillCount = 0;
      }
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Chaos_Init () {
  gt_Chaos = TriggerCreate("gt_Chaos_Func");
  TriggerEnable(gt_Chaos, false);
  TriggerAddEventUnitDied(gt_Chaos, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaves_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_i;

  if (EventPlayer() == 16 || !PlayerGroupHasPlayer(gv_humanPlayers, EventPlayer())) {
    return false;
  }
  
  lr_player = gv_players[EventPlayer() - 1];

  if (!runActions) {
    return true;
  }
  PlayerGroupRemove(gv_humanPlayers, lr_player.player);
  UnitRemove(lr_player.dragon);
  for(lv_i = 1; lv_i < 5; lv_i += 1) {
    PlayerSetAlliance(lr_player.player, c_allianceIdSpend, lv_i, false);
    PlayerSetAlliance(lv_i, c_allianceIdSpend, lr_player.player, false);
    libNtve_gf_SetAlliance(lr_player.player, lv_i, libNtve_ge_AllianceSetting_Enemy);
  }
  PlayerModifyPropertyInt(lr_player.player, c_playerPropMinerals, c_playerPropOperSetTo, 0);
  PlayerModifyPropertyInt(lr_player.player, c_playerPropVespene, c_playerPropOperSetTo, 0);
  PlayerModifyPropertyInt(lr_player.player, c_playerPropTerrazine, c_playerPropOperSetTo, 0);
  PlayerModifyPropertyInt(lr_player.player, c_playerPropCustom, c_playerPropOperSetTo, 0);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaves_Init () {
  gt_PlayerLeaves = TriggerCreate("gt_PlayerLeaves_Func");
  TriggerAddEventPlayerLeft(gt_PlayerLeaves, c_playerAny, c_gameResultUndecided);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Open Talent Menu
//--------------------------------------------------------------------------------------------------
bool gt_OpenTalentMenu_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  lib_talent_gf_ShowHideTalentTree(gv_players[EventPlayer() - 1]);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OpenTalentMenu_Init () {
  gt_OpenTalentMenu = TriggerCreate("gt_OpenTalentMenu_Func");
  TriggerAddEventUnitAbility(gt_OpenTalentMenu, null, AbilityCommand("Talents", 0), c_unitAbilStageAll, false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Inventory Tip
//--------------------------------------------------------------------------------------------------
bool gt_InventoryTip_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/E9037991"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/60A9CAEA"), StringExternal("Param/Value/538D899A"), "Dragon Songs\\btn-ability-protoss-phaseshift-color.dds");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_InventoryTip_Init () {
  gt_InventoryTip = TriggerCreate("gt_InventoryTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Weapon Tip
//--------------------------------------------------------------------------------------------------
bool gt_WeaponTip_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/D6E95134"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/FA962EAC"), StringExternal("Param/Value/2A26AE67"), "Assets\\Textures\\btn-ability-protoss-phasemine-zeratul.dds");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_WeaponTip_Init () {
  gt_WeaponTip = TriggerCreate("gt_WeaponTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Dragon's Nest Tip
//--------------------------------------------------------------------------------------------------
bool gt_DragonsNestTip_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/AE58E1B5"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/B044177A"), StringExternal("Param/Value/66753AD2"), "Dragon Songs\\btn-ability-zerg-consume-red.dds");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DragonsNestTip_Init () {
  gt_DragonsNestTip = TriggerCreate("gt_DragonsNestTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reset Stats Tip
//--------------------------------------------------------------------------------------------------
bool gt_ResetStatsTip_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/41120C2F"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/DED3B997"), StringExternal("Param/Value/A3EAD122"), "Assets\\Textures\\btn-ability-terran-heal.dds");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ResetStatsTip_Init () {
  gt_ResetStatsTip = TriggerCreate("gt_ResetStatsTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reset Talents Tip
//--------------------------------------------------------------------------------------------------
bool gt_ResetTalentsTip_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/4C6B4127"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/569516A0"), StringExternal("Param/Value/8E5585ED"), "Assets\\Textures\\btn-research-zerg-regenerativebio-steel.dds");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ResetTalentsTip_Init () {
  gt_ResetTalentsTip = TriggerCreate("gt_ResetTalentsTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reset Quests Tip
//--------------------------------------------------------------------------------------------------
bool gt_ResetQuestsTip_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/DF29FD45"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/EBA3B130"), StringExternal("Param/Value/9B2FC085"), "Assets\\Textures\\ui_objectives_checkmark.dds");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ResetQuestsTip_Init () {
  gt_ResetQuestsTip = TriggerCreate("gt_ResetQuestsTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Healing Water Tip
//--------------------------------------------------------------------------------------------------
bool gt_HealingWaterTip_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/E3BD2BD0"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/A26AEC4D"), StringExternal("Param/Value/10D8A151"), "Assets\\Textures\\defaultwater37.dds");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HealingWaterTip_Init () {
  gt_HealingWaterTip = TriggerCreate("gt_HealingWaterTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Vespene Gas Tip
//--------------------------------------------------------------------------------------------------
bool gt_VespeneGasTip_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/5AE1DD5C"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/20CF433A"), StringExternal("Param/Value/45B8D629"), "Assets\\Textures\\wireframe-general-vespenegeyser.dds");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_VespeneGasTip_Init () {
  gt_VespeneGasTip = TriggerCreate("gt_VespeneGasTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Evolutions Tip
//--------------------------------------------------------------------------------------------------
bool gt_EvolutionsTip_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/EA2E6B2A"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/A6FEB956"), StringExternal("Param/Value/7A9A7981"), "Assets\\Textures\\hybridzergportrait_static.dds");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EvolutionsTip_Init () {
  gt_EvolutionsTip = TriggerCreate("gt_EvolutionsTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Armor Tip
//--------------------------------------------------------------------------------------------------
bool gt_ArmorTip_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/8683FADF"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/55A4A235"), StringExternal("Param/Value/180EC142"), "Assets\\Textures\\btn-upgrade-zerg-buildingarmor.dds");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ArmorTip_Init () {
  gt_ArmorTip = TriggerCreate("gt_ArmorTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Saving/Loading Tip
//--------------------------------------------------------------------------------------------------
bool gt_SavingLoadingTip_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/F902E69D"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/C9ED1F57"), StringExternal("Param/Value/3908211E"), "Assets\\Textures\\ui-editoricon-triggercategories_bank.dds");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SavingLoadingTip_Init () {
  gt_SavingLoadingTip = TriggerCreate("gt_SavingLoadingTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Music Credits Tip
//--------------------------------------------------------------------------------------------------
bool gt_MusicCreditsTip_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/9F4902CB"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/4A2C06AE"), StringExternal("Param/Value/3D31D0A2"), "Assets\\Textures\\ui-editoricon-data_types_soundtracks.dds");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MusicCreditsTip_Init () {
  gt_MusicCreditsTip = TriggerCreate("gt_MusicCreditsTip_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Awesome People Tip
//--------------------------------------------------------------------------------------------------
bool gt_AwesomePeopleTip_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/B3A3FC2B"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/84E73369"), StringExternal("Param/Value/5EE14777"), "Assets\\Textures\\btn-unit-protoss-archon.dds");
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_AwesomePeopleTip_Init () {
  gt_AwesomePeopleTip = TriggerCreate("gt_AwesomePeopleTip_Func");
  TriggerAddEventMapInit(gt_AwesomePeopleTip);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Stash Location Setup
//--------------------------------------------------------------------------------------------------
bool gt_StashLocationSetup_Func (bool testConds, bool runActions) {
  int lv_i;
  if (!runActions) {
    return true;
  }
  for(lv_i = 0; lv_i < 4; lv_i += 1) {
    gv_players[lv_i].stash.location = PointFromId(4835 + lv_i);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_StashLocationSetup_Init () {
  gt_StashLocationSetup = TriggerCreate("gt_StashLocationSetup_Func");
  TriggerAddEventMapInit(gt_StashLocationSetup);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Load Shards
//--------------------------------------------------------------------------------------------------
bool gt_LoadShards_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_playerIndex;

  if (!runActions) {
    return true;
  }
  for(lv_playerIndex = 0; lv_playerIndex < 4; lv_playerIndex += 1) {
    lr_player = gv_players[lv_playerIndex];
    if ((PlayerStatus(lr_player.player) == c_playerStatusActive)) {
      while (lr_player.banks.accessing) {
        Wait(1.0, c_timeGame);
      }
      lr_player.banks.accessing = true;
      lr_player.currency.shards = (BankValueGetAsInt(lr_player.banks.dragonBank, "Shards", lr_player.hand) / 1);
      PlayerModifyPropertyInt(lr_player.player, c_playerPropCustom, c_playerPropOperSetTo, lr_player.currency.shards);
      lr_player.banks.accessing = false;
    }
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LoadShards_Init () {
  gt_LoadShards = TriggerCreate("gt_LoadShards_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Time of day Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateTimeofdayDialog_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  DialogCreate(200, 75, c_anchorTop, 0, 0, true);
  gv_timeofDayDialog = DialogLastCreated();
  libNtve_gf_CreateDialogItemLabel(gv_timeofDayDialog, 75, 50, c_anchorLeft, 40, 20, StringExternal("Param/Value/0FFF5ADF"), ColorWithAlpha(0,0,0,0), false, 2.0);
  libNtve_gf_CreateDialogItemLabel(gv_timeofDayDialog, 75, 50, c_anchorLeft, 100, 20, StringExternal("Param/Value/DBCFC935"), Color(RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0), RandomFixed(0.0, 100.0)), false, 2.0);
  gv_timeofDayDialogLabel = DialogControlLastCreated();
  DialogSetVisible(gv_timeofDayDialog, PlayerGroupAll(), true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateTimeofdayDialog_Init () {
  gt_CreateTimeofdayDialog = TriggerCreate("gt_CreateTimeofdayDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Time of Day Tick
//--------------------------------------------------------------------------------------------------
bool gt_TimeofDayTick_Func (bool testConds, bool runActions) {
  int autoEF6FEC5D_val;

  if (!runActions) {
    return true;
  }
  gv_minutes += 1;
  if ((gv_minutes >= 60)) {
    for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
      UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
      for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "TimePenalty", PlayerGroupLoopCurrent(), 1);
      }
      UnitGroupLoopEnd();
    }
    PlayerGroupLoopEnd();
    gv_minutes = 0;
    autoEF6FEC5D_val = gv_hours;
    // TODO: THIS HAS TO BE ABLE TO BE DONE BETTER, THE HECK?
    if (autoEF6FEC5D_val == 0) {
      GameTimeOfDaySet("00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 1) {
      GameTimeOfDaySet("01:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 2) {
      GameTimeOfDaySet("02:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 3) {
      GameTimeOfDaySet("03:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 4) {
      GameTimeOfDaySet("04:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 5) {
      GameTimeOfDaySet("05:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 6) {
      GameTimeOfDaySet("06:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 7) {
      GameTimeOfDaySet("07:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 8) {
      GameTimeOfDaySet("08:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 9) {
      GameTimeOfDaySet("09:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 10) {
      GameTimeOfDaySet("10:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 11) {
      GameTimeOfDaySet("11:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 12) {
      GameTimeOfDaySet("12:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 13) {
      GameTimeOfDaySet("13:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 14) {
      GameTimeOfDaySet("14:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 15) {
      GameTimeOfDaySet("15:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 16) {
      GameTimeOfDaySet("16:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 17) {
      GameTimeOfDaySet("17:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 18) {
      GameTimeOfDaySet("18:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 19) {
      GameTimeOfDaySet("19:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 20) {
      GameTimeOfDaySet("20:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 21) {
      GameTimeOfDaySet("21:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 22) {
      GameTimeOfDaySet("22:00:00");
      gv_hours += 1;
    }
    else if (autoEF6FEC5D_val == 23) {
      GameTimeOfDaySet("23:00:00");
      gv_hours = 0;
      gv_days += 1;
    }
    else {
      GameTimeOfDaySet("00");
      gv_hours = 0;
    }
  }
  if ((gv_minutes < 10)) {
    gv_timeofDayDialogLabelText = (IntToText(gv_hours) + (StringExternal("Param/Value/A5CB9737") + IntToText(gv_minutes)));
  }
  else {
    gv_timeofDayDialogLabelText = (IntToText(gv_hours) + (StringExternal("Param/Value/74673B04") + IntToText(gv_minutes)));
  }
  libNtve_gf_SetDialogItemText(gv_timeofDayDialogLabel, gv_timeofDayDialogLabelText, PlayerGroupAll());
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TimeofDayTick_Init () {
  gt_TimeofDayTick = TriggerCreate("gt_TimeofDayTick_Func");
  TriggerAddEventTimePeriodic(gt_TimeofDayTick, 1.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Up Players
//--------------------------------------------------------------------------------------------------
bool gt_SetUpPlayers_Func (bool testConds, bool runActions) {
  gv_playersWhoHaveDefeatedZauberer = PlayerGroupEmpty();


  if (!runActions) {
    return true;
  }
  TriggerQueueEnter();
  gf_InitializeOne();
  gf_InitializePlayers();
  gf_InitializeTwo();
  TriggerQueueExit();
  Wait(1.0, c_timeGame);
  TriggerQueueEnter();
  gf_InitializeThree();
  TriggerExecute(gt_DragonIntroCinematic, false, true);
  TextTagCreate(StringExternal("Param/Value/6FCB7651"), 24, RegionGetCenter(RegionFromId(187)), 1.0, true, true, PlayerGroupAll());
  TextTagCreate(StringExternal("Param/Value/4ACD68FC"), 24, RegionGetCenter(RegionFromId(188)), 1.0, true, true, PlayerGroupAll());
  TriggerQueueExit();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetUpPlayers_Init () {
  gt_SetUpPlayers = TriggerCreate("gt_SetUpPlayers_Func");
  TriggerAddEventTimeElapsed(gt_SetUpPlayers, 0.01, c_timeGame);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set up Regions
//--------------------------------------------------------------------------------------------------
bool gt_SetupRegions_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  TriggerExecute(gt_SetWastelandRegions, true, false);
  TriggerExecute(gt_SetupCretonTranchRegions, true, false);
  TriggerExecute(gt_SetupCretonRegions, true, false);
  TriggerExecute(gt_SetVerbotenForestRegions, true, false);
  TriggerExecute(gt_SetVerbotenInfestationRegions, true, false);
  TriggerExecute(gt_SetWastelandRegions, true, false);
  TriggerExecute(gt_SetRelamyCanyonRegions, true, false);
  TriggerExecute(gt_SetRelamyGorgeRegions, true, false);
  TriggerExecute(gt_SetRelamyHillsRegions, true, false);
  TriggerExecute(gt_SetRelamyPassRegions, true, false);
  TriggerExecute(gt_SetupBioDomeWastelandRegions, true, false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupRegions_Init () {
  gt_SetupRegions = TriggerCreate("gt_SetupRegions_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set up Tips
//--------------------------------------------------------------------------------------------------
bool gt_SetupTips_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  TriggerExecute(gt_ArmorTip, true, false);
  TriggerExecute(gt_DragonsNestTip, true, false);
  TriggerExecute(gt_EvolutionsTip, true, false);
  TriggerExecute(gt_HealingWaterTip, true, false);
  TriggerExecute(gt_InventoryTip, true, false);
  TriggerExecute(gt_ResetQuestsTip, true, false);
  TriggerExecute(gt_ResetStatsTip, true, false);
  TriggerExecute(gt_ResetTalentsTip, true, false);
  TriggerExecute(gt_VespeneGasTip, true, false);
  TriggerExecute(gt_WeaponTip, true, false);
  TriggerExecute(gt_SavingLoadingTip, true, false);
  TriggerExecute(gt_MusicCreditsTip, true, false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetupTips_Init () {
  gt_SetupTips = TriggerCreate("gt_SetupTips_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Up Talent Tree
//--------------------------------------------------------------------------------------------------
bool gt_SetUpTalentTree_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    lib_talent_gf_CreateTalentTree(lr_player, gv_DragonTypes[lr_player.type].talentBuildTitle, gv_DragonTypes[lr_player.type].talentBuildColor, 3, "Defensive,General,Offensive", 3, 4, lib_talent_gv_POINTSPERTIER);

    lib_talent_gf_CreateTalentButton(lr_player, 0, 0, 0, lib_talent_ge_TalentPrerequisite_None, "HeartoftheDragon", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/D7FEAC29"), 10, "Assets\\Textures\\sm_hml_heartbeat_diff.dds", StringExternal("Param/Value/1C4A2F4D"), 10.0, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 0, 1, 0, lib_talent_ge_TalentPrerequisite_None, "IronScales", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/314749A3"), 10, "Assets\\Textures\\btn-upgrade-zerg-groundcarapace-level1.dds", StringExternal("Param/Value/7174AC2B"), 0.5, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 0, 2, 0, lib_talent_ge_TalentPrerequisite_None, "SpiritoftheDragon", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/9B6ADBAE"), 10, "Assets\\Textures\\btn-tips-crystal.dds", StringExternal("Param/Value/1A784046"), 10.0, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 0, 0, 1, lib_talent_ge_TalentPrerequisite_Up, "InternalRegeneration", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/7F798500"), 10, "Assets\\Textures\\btn-upgrade-zerg-enduringcorruption.dds", StringExternal("Param/Value/4C774E83"), 0.1, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 0, 1, 1, lib_talent_ge_TalentPrerequisite_Up, "ActiveArmor", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/AB2A4C29"), 10, "Assets\\Textures\\btn-ability-protoss-feedback-color.dds", StringExternal("Param/Value/00C54C9E"), 10.0, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 0, 2, 1, lib_talent_ge_TalentPrerequisite_Up, "MetabolicProcessing", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/4C468C11"), 10, "Assets\\Textures\\btn-tips-biosample.dds", StringExternal("Param/Value/4E41B165"), 0.1, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 0, 1, 2, lib_talent_ge_TalentPrerequisite_Up, "SpikedScales", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/9086A585"), 10, "Assets\\Textures\\btn-upgrade-zerg-groovedspines.dds", StringExternal("Param/Value/DA98CBA1"), 0.5, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 0, 2, 2, lib_talent_ge_TalentPrerequisite_Up, "AbsorbMana", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/AFB08C57"), 10, "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel3.dds", StringExternal("Param/Value/80AC0CB7"), 1.0, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 0, 1, 3, lib_talent_ge_TalentPrerequisite_Up, "Retaliation", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/F954CA1E"), 10, "Assets\\Textures\\btn-ability-protoss-gravitonbeam-color.dds", StringExternal("Param/Value/F53F5A37"), 1.0, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 0, 2, 3, lib_talent_ge_TalentPrerequisite_Up, "RealmSwitch", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/44A74CF3"), 10, "Dragon Songs\\btn-ability-protoss-blink-improved-color.dds", StringExternal("Param/Value/E2CCFAE5"), 0.5, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 1, 0, 0, lib_talent_ge_TalentPrerequisite_None, "EagleEyes", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/28BE5039"), 10, "Assets\\Textures\\zergdroneeyesemmisive.dds", StringExternal("Param/Value/85A14F42"), 0.2, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 1, 1, 0, lib_talent_ge_TalentPrerequisite_None, "GreedisGood", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/08D78300"), 10, "Dragon Songs\\btn-custom-treasure.dds", StringExternal("Param/Value/47238D0C"), 5.0, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 1, 2, 0, lib_talent_ge_TalentPrerequisite_None, "MuscleEnhancement", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/E1B1A405"), 10, "Assets\\Textures\\btn-ability-protoss-charge-color.dds", StringExternal("Param/Value/58E4D210"), 0.1, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 1, 0, 1, lib_talent_ge_TalentPrerequisite_Up, "Foresight", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/CD32BD07"), 10, "Assets\\Textures\\btn-tips-counter.dds", StringExternal("Param/Value/A462C35B"), 0.6, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 1, 1, 1, lib_talent_ge_TalentPrerequisite_Up, "QuickLearner", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/C9AA280D"), 10, "Dragon Songs\\btn-ability-zerg-domination-color.dds", StringExternal("Param/Value/21824BCC"), 0.5, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 2, 0, 0, lib_talent_ge_TalentPrerequisite_None, "StrengthoftheDragon", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/FDB7A558"), 10, "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-leve3.dds", StringExternal("Param/Value/36A2C19B"), 1.0, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 2, 1, 0, lib_talent_ge_TalentPrerequisite_None, "Headshot", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/D567090E"), 10, "Dragon Songs\\btn-ability-zerg-plague-color.dds", StringExternal("Param/Value/3E74CB2C"), 1.0, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 2, 2, 0, lib_talent_ge_TalentPrerequisite_None, "MindoftheDragon", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/8C4A7447"), 10, "Assets\\Textures\\btn-upgrade-zerg-pathogenglands.dds", StringExternal("Param/Value/AAA060AC"), 1.0, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 2, 0, 1, lib_talent_ge_TalentPrerequisite_Up, "Zeal", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/1300303A"), 10, "Assets\\Textures\\btn-upgrade-zerg-anabolicsynthesis.dds", StringExternal("Param/Value/73406C8B"), 1.0, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 2, 1, 1, lib_talent_ge_TalentPrerequisite_Up, "ElevatedAccuracy", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/AAC9DC9E"), 10, "Dragon Songs\\btn-ability-protoss-sightofadun.dds", StringExternal("Param/Value/DE4DF04F"), 5.0, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 2, 2, 1, lib_talent_ge_TalentPrerequisite_Up, "Rage", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/1C7BBA70"), 10, "Assets\\Textures\\btn-upgrade-zerg-peristalsis.dds", StringExternal("Param/Value/649D4370"), 0.25, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 2, 0, 2, lib_talent_ge_TalentPrerequisite_Up, "VampiricTendencies", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/92BC9977"), 10, "Assets\\Textures\\btn-ability-zerg-corruption-color.dds", StringExternal("Param/Value/FF85D4A6"), 0.1, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 2, 1, 2, lib_talent_ge_TalentPrerequisite_Up, "StickyShot", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/D8F2835B"), 10, "Assets\\Textures\\btn-ability-zerg-generatecreepstop-color.dds", StringExternal("Param/Value/D1B87C73"), 0.5, 5.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 2, 2, 2, lib_talent_ge_TalentPrerequisite_Up, "PowerOverwhelming", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/9961216D"), 10, "Dragon Songs\\btn-ability-terran-psidisruption-color.dds", StringExternal("Param/Value/52E05A55"), 0.1, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 2, 0, 3, lib_talent_ge_TalentPrerequisite_Up, "CriticalCrepitus", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/B83D31A3"), 10, "Assets\\Textures\\btn-ability-zerg-explode-color.dds", StringExternal("Param/Value/9572BF6F"), 5.0, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 2, 1, 3, lib_talent_ge_TalentPrerequisite_Up, "DuelWield", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/FA2CE968"), 10, "Assets\\Textures\\btn-ability-zerg-contaminate-color.dds", StringExternal("Param/Value/E3059D1E"), 0.5, 0.0, null, null);
    lib_talent_gf_CreateTalentButton(lr_player, 2, 2, 3, lib_talent_ge_TalentPrerequisite_Up, "DarkDissulto", lib_talent_ge_TalentType_Passive, StringExternal("Param/Value/645D301F"), 10, "Assets\\Textures\\btn-ability-zerg-generatecreep-color.dds", StringExternal("Param/Value/3E5A2871"), 2.5, 0.0, null, null);
    lib_talent_gf_GrantTalentPoints(lr_player.stats.level, lr_player);
    lib_talent_gf_LoadTalentBuild(1, gv_DragonTypes[lr_player.type].talentBuildName, lr_player);
  }
  PlayerGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetUpTalentTree_Init () {
  gt_SetUpTalentTree = TriggerCreate("gt_SetUpTalentTree_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Make Player 14 an Ally
//--------------------------------------------------------------------------------------------------
bool gt_MakePlayer14anAlly_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  libNtve_gf_SetAlliance(15, 14, libNtve_ge_AllianceSetting_Enemy);
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 14, libNtve_ge_AllianceSetting_Ally);
  }
  PlayerGroupLoopEnd();

  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_MakePlayer14anAlly_Init () {
  gt_MakePlayer14anAlly = TriggerCreate("gt_MakePlayer14anAlly_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Set Up Unit Types
//--------------------------------------------------------------------------------------------------
bool gt_SetUpUnitTypes_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  gv_enemyUnitTypes[0] = "SmallSheep";
  gv_enemyUnitTypes[1] = "Srepti";
  gv_enemyUnitTypes[2] = "Vogel";
  gv_enemyUnitTypes[3] = "CretonWarrior";
  gv_enemyUnitTypes[4] = "Karramarro";
  gv_enemyUnitTypes[5] = "CretonWatcher";
  gv_enemyUnitTypes[6] = "Alakdan";
  gv_enemyUnitTypes[7] = "Gagamba";
  gv_enemyUnitTypes[8] = "Odvratan";
  gv_enemyUnitTypes[9] = "EliteCretonWarrior";
  gv_enemyUnitTypes[10] = "EliteCretonWatcher";
  gv_enemyUnitTypes[11] = "CretonWarMachine";
  gv_enemyUnitTypes[12] = "DemonicSheep";
  gv_enemyUnitTypes[13] = "DemonicSrepti";
  gv_enemyUnitTypes[14] = "CretonWarlord";
  gv_enemyUnitTypes[15] = "Stercore";
  gv_enemyUnitTypes[16] = "Odvratan";
  gv_enemyUnitTypes[17] = "Anguis";
  gv_enemyUnitTypes[18] = "Pervolo";
  gv_enemyUnitTypes[19] = "Impetus";
  gv_enemyUnitTypes[20] = "Mortuus";
  gv_enemyUnitTypes[21] = "TimeWarpBot";
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SetUpUnitTypes_Init () {
  gt_SetUpUnitTypes = TriggerCreate("gt_SetUpUnitTypes_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hide Useless UI
//--------------------------------------------------------------------------------------------------
bool gt_HideUselessUI_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAlertPanel, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCreditsPanel, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeErrorDisplayPanel, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMercenaryPanel, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePlanetPanel, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePylonButton, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResearchPanel, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeRoomPanel, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechGlossaryPanel, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechTreePanel, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
  UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeVictoryPanel, false);
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    if (gf_IsAdmin(PlayerHandle(PlayerGroupLoopCurrent()))) {
      UISetFrameVisible(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_syncFrameTypeErrorDisplayPanel, true);
    }
  }
  PlayerGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_HideUselessUI_Init () {
  gt_HideUselessUI = TriggerCreate("gt_HideUselessUI_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Enter Dragon's Nest
//--------------------------------------------------------------------------------------------------
bool gt_EnterDragonsNest_Func (bool testConds, bool runActions) {

  if (!runActions) {
    return true;
  }
  if (PlayerGroupHasPlayer(gv_humanPlayers, UnitGetOwner(EventUnit()))) {
    UnitBehaviorAdd(EventUnit(), "DragonsNest", EventUnit(), 1);
    gv_dragonLocation[(UnitGetOwner(EventUnit()) - 1)] = RegionFromId(3);
  }
  if ((UnitGetOwner(EventUnit()) == 15)) {
    UnitBehaviorAdd(EventUnit(), "DragonsNestEnemy", EventUnit(), 1);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EnterDragonsNest_Init () {
  gt_EnterDragonsNest = TriggerCreate("gt_EnterDragonsNest_Func");
  TriggerAddEventUnitRegion(gt_EnterDragonsNest, null, RegionFromId(3), true);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Leave Dragon's Nest
//--------------------------------------------------------------------------------------------------
bool gt_LeaveDragonsNest_Func (bool testConds, bool runActions) {
  int lv_player;

  lv_player = EventPlayer();

  if (!runActions) {
    return true;
  }
  if (PlayerGroupHasPlayer(gv_humanPlayers, lv_player)) {
    UnitBehaviorRemove(EventUnit(), "DragonsNest", 1);
  }
  if ((UnitGetOwner(EventUnit()) == 15)) {
    UnitBehaviorRemove(EventUnit(), "DragonsNestEnemy", 1);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_LeaveDragonsNest_Init () {
  gt_LeaveDragonsNest = TriggerCreate("gt_LeaveDragonsNest_Func");
  TriggerAddEventUnitRegion(gt_LeaveDragonsNest, null, RegionFromId(3), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Check Stats
//--------------------------------------------------------------------------------------------------
bool gt_CheckStats_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    gf_StatCheck(gv_players[PlayerGroupLoopCurrent() - 1]);
  }
  PlayerGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CheckStats_Init () {
  gt_CheckStats = TriggerCreate("gt_CheckStats_Func");
  TriggerAddEventTimePeriodic(gt_CheckStats, 10.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_DragonIntroCinematic_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    if (!lr_player.state.seenIntro) {
      PlayerGroupAdd(gv_playerswatchingintrocinematic, lr_player.player);
    }
    else {
      libNtve_gf_PauseUnit(lr_player.dragon, false);
    }
  }
  PlayerGroupLoopEnd();

  libNtve_gf_HideGameUI(false, gv_playerswatchingintrocinematic);
  for (PlayerGroupLoopBegin(gv_playerswatchingintrocinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    CameraLockInput(lr_player.player, true);
    UISetSelectionTypeEnabled(lr_player.playerGroupSingle, c_localSelectionTypeUnknown, false);
    DialogSetVisible(lr_player.stats.attributeDialog.state, lr_player.playerGroupSingle, false);
    DialogSetVisible(lr_player.locationDialog.state, lr_player.playerGroupSingle, false);
    PlayerSetAlliance(lr_player.player, c_allianceIdVision, 1, false);
    PlayerSetAlliance(lr_player.player, c_allianceIdVision, 2, false);
    PlayerSetAlliance(lr_player.player, c_allianceIdVision, 3, false);
    PlayerSetAlliance(lr_player.player, c_allianceIdVision, 4, false);
    PlayerSetAlliance(lr_player.player, c_allianceIdVision, 13, true);
    PlayerSetAlliance(13, c_allianceIdVision, lr_player.player, true);
    CameraApplyInfo(lr_player.player, CameraInfoFromId(2544), 0.0, -1, 10.0, true);
    VisExploreArea(lr_player.player, RegionEntireMap(), true, false);
  }
  PlayerGroupLoopEnd();

  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/79955B8C"), 0.1, 99.0, SoundLink("30SecondSilence", -1));
  Wait(3.8, c_timeReal);
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/899DC0A4"), 0.1, 99.0, SoundLink("30SecondSilence", -1));
  Wait(3.9, c_timeReal);
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/23D9D53E"), 0.1, 99.0, SoundLink("30SecondSilence", -1));
  TriggerSkippableBegin(gv_playerswatchingintrocinematic, 0, gt_DragonIntroCinematicReturntoNormal, true, false);
  Wait(3.3, c_timeReal);
  for (PlayerGroupLoopBegin(gv_playerswatchingintrocinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2543), 0.0, -1, 10.0, true);
  }
  PlayerGroupLoopEnd();

  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/4A1EAB0C"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(3.0, c_timeReal);
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/2E645223"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(5.0, c_timeReal);
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/254CD7D6"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(5.0, c_timeReal);
  for (PlayerGroupLoopBegin(gv_playerswatchingintrocinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2542), 0.0, -1, 10.0, true);
  }
  PlayerGroupLoopEnd();

  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/69C20D42"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(7.5, c_timeReal);
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/6352165E"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(8.0, c_timeReal);
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/33664132"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(7.0, c_timeReal);
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/49A1771E"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(6.5, c_timeReal);
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/B9589CEA"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(7.0, c_timeReal);
  libNtve_gf_CreateModelAtPoint("ArtifactFullyCharged", RegionGetCenter(RegionFromId(220)));
  Wait(0.1, c_timeGame);
  UnitCreate(1, "Zauberer", 0, 13, RegionGetCenter(RegionFromId(220)), 330.0);
  gv_introCinematicZauberer = UnitLastCreated();
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/02BCF170"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(6.5, c_timeReal);
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/F0714A87"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  UnitIssueOrder(gv_introCinematicZauberer, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(219))), c_orderQueueReplace);
  while (!libNtve_gf_UnitInRegion(gv_introCinematicZauberer, RegionFromId(219))) {
    Wait(1.0, c_timeGame);
  }
  libNtve_gf_CreateModelAtPoint("TTychus05ArtifactActivated", RegionGetCenter(RegionFromId(218)));
  Wait(3.0, c_timeGame);
  libNtve_gf_CreateModelAtPoint("ProtossLargeUnitDeath", RegionGetCenter(RegionFromId(218)));
  UnitRemove(UnitFromId(2513));
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/C4709064"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  UnitIssueOrder(gv_introCinematicZauberer, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(221))), c_orderQueueReplace);
  while (!libNtve_gf_UnitInRegion(gv_introCinematicZauberer, RegionFromId(221))) {
    Wait(1.0, c_timeGame);
  }
  libNtve_gf_CreateModelAtPoint("ArtifactFullyCharged", RegionGetCenter(RegionFromId(221)));
  Wait(0.1, c_timeGame);
  UnitRemove(gv_introCinematicZauberer);
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/5E3A1B4B"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(8.0, c_timeReal);
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringExternal("Param/Value/FC90239D"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(5.0, c_timeReal);
  TriggerExecute(gt_DragonIntroCinematicReturntoNormal, true, false);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DragonIntroCinematic_Init () {
  gt_DragonIntroCinematic = TriggerCreate("gt_DragonIntroCinematic_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic - Return to Normal
//--------------------------------------------------------------------------------------------------
bool gt_DragonIntroCinematicReturntoNormal_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  
  if (!runActions) {
    return true;
  }
  UnitRemove(UnitFromId(2513));
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringToText(""), 0.05, 0.0, SoundLink("30SecondSilence", -1));
  for (PlayerGroupLoopBegin(gv_playerswatchingintrocinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    CameraApplyInfo(lr_player.player, CameraInfoDefault(), 0.0, -1, 10.0, false);
    CameraPan(lr_player.player, RegionGetCenter(RegionFromId(3)), 0.0, -1, 10.0, false);
  }
  PlayerGroupLoopEnd();

  for (PlayerGroupLoopBegin(gv_playerswatchingintrocinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    PlayerSetAlliance(lr_player.player, c_allianceIdVision, 1, true);
    PlayerSetAlliance(lr_player.player, c_allianceIdVision, 2, true);
    PlayerSetAlliance(lr_player.player, c_allianceIdVision, 3, true);
    PlayerSetAlliance(lr_player.player, c_allianceIdVision, 4, true);
    PlayerSetAlliance(lr_player.player, c_allianceIdVision, 13, false);
    PlayerSetAlliance(13, c_allianceIdVision, lr_player.player, false);
    CameraLockInput(lr_player.player, false);
    UISetSelectionTypeEnabled(lr_player.playerGroupSingle, c_localSelectionTypeUnknown, true);
    DialogSetVisible(lr_player.stats.attributeDialog.state, lr_player.playerGroupSingle, true);
    DialogSetVisible(lr_player.locationDialog.state, lr_player.playerGroupSingle, true);
  }
  PlayerGroupLoopEnd();

  libNtve_gf_HideGameUI(true, gv_playerswatchingintrocinematic);
  for (PlayerGroupLoopBegin(gv_playerswatchingintrocinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    VisExploreArea(lr_player.player, RegionEntireMap(), false, false);
    lr_player.state.seenIntro = true;
    BankValueSetFromFlag(lr_player.banks.dragonBank, "Intro", lr_player.hand, lr_player.state.seenIntro);
    UnitSelect(lr_player.dragon, lr_player.player, true);
    libNtve_gf_PauseUnit(lr_player.dragon, false);
    PlayerGroupRemove(gv_playerswatchingintrocinematic, lr_player.player);
  }
  PlayerGroupLoopEnd();

  UnitRemove(gv_introCinematicZauberer);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DragonIntroCinematicReturntoNormal_Init () {
  gt_DragonIntroCinematicReturntoNormal = TriggerCreate("gt_DragonIntroCinematicReturntoNormal_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Play Intro Theme
//--------------------------------------------------------------------------------------------------
bool gt_PlayIntroTheme_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }

  SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, false);
  SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
  SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, 0, true);
  SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
  SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 0.0);
  SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, 0.0);
  SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, 0.0);

  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryMusic, 0.0, 0.0);
    SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, gv_DragonTypes[lr_player.type].introTheme, c_soundtrackCueAny, 0, false);
    SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryMusic, 100.0, gv_DragonTypes[lr_player.type].introThemeDuration);
  }
  PlayerGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PlayIntroTheme_Init () {
  gt_PlayIntroTheme = TriggerCreate("gt_PlayIntroTheme_Func");
  TriggerAddEventTimeElapsed(gt_PlayIntroTheme, 0.1, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ending Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_EndingCinematic_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_i;

  if (!runActions) {
    return true;
  }
  libNtve_gf_HideGameUI(false, gv_playerswatchingendingcinematic);
  for (PlayerGroupLoopBegin(gv_playerswatchingendingcinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    //UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, PlayerName(lv_player));
    SoundtrackStop(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, true);
    SoundtrackPlay(lr_player.playerGroupSingle, c_soundtrackCategoryMusic, "EndingTheme", c_soundtrackCueAny, 0, false);
    SoundChannelSetVolume(lr_player.playerGroupSingle, c_soundCategoryMusic, 100.0, 0.0);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryAlert, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryAmbient, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryBuild, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryCombat, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryDeath, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryDialogue, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryDoodad, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryFlames, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryFoley, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryGather, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryMission, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryMovement, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryMovie, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryReady, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategorySAmbient, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategorySEmitters, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategorySPieces, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategorySpell, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryTV, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryUI, true);
    SoundChannelMute(lr_player.playerGroupSingle, c_soundCategoryVoice, true);
    CameraLockInput(lr_player.player, true);
    UISetSelectionTypeEnabled(lr_player.playerGroupSingle, c_localSelectionTypeUnknown, false);
    DialogSetVisible(lr_player.stats.attributeDialog.state, lr_player.playerGroupSingle, false);
    DialogSetVisible(lr_player.locationDialog.state, lr_player.playerGroupSingle, false);
    //lr_player.state.preventSave = true;
    for (lv_i = 1; lv_i < 5; lv_i += 1) {
      PlayerSetAlliance(lv_i, c_allianceIdVision, lr_player.player, false);
      PlayerSetAlliance(lr_player.player, c_allianceIdVision, lv_i, false);
    }
    CameraApplyInfo(lr_player.player, CameraInfoFromId(2779), 5.0, -1, 10.0, true);
    VisExploreArea(lr_player.player, RegionEntireMap(), true, false);
    VisRevealerCreate(lr_player.player, RegionEntireMap());
  }
  PlayerGroupLoopEnd();

  // TODO: Make this loopable.
  if (PlayerGroupHasPlayer(gv_playerswatchingendingcinematic, 1)) {
    if (gv_players[0].state.beatGame) {
      TriggerSkippableBegin(PlayerGroupSingle(1), 0, gt_EndingCinematicSaveExitSpecialP1, true, false);
      UIShowCinematicText(PlayerGroupSingle(1), StringExternal("Param/Value/4C1C5C7E"), 0.1, 5.8, SoundLink("30SecondSilence", -1));
    }
    else {
      UIShowCinematicText(PlayerGroupSingle(1), StringExternal("Param/Value/2FF83803"), 0.1, 4.8, SoundLink("30SecondSilence", -1));
    }
  }
  if (PlayerGroupHasPlayer(gv_playerswatchingendingcinematic, 2)) {
    if (gv_players[1].state.beatGame) {
      TriggerSkippableBegin(PlayerGroupSingle(2), 0, gt_EndingCinematicSaveExitSpecialP2, true, false);
      UIShowCinematicText(PlayerGroupSingle(2), StringExternal("Param/Value/4C1C5C7E"), 0.1, 5.8, SoundLink("30SecondSilence", -1));
    }
    else {
      UIShowCinematicText(PlayerGroupSingle(2), StringExternal("Param/Value/2FF83803"), 0.1, 4.8, SoundLink("30SecondSilence", -1));
    }
  }
  if (PlayerGroupHasPlayer(gv_playerswatchingendingcinematic, 3)) {
    if (gv_players[2].state.beatGame) {
      TriggerSkippableBegin(PlayerGroupSingle(3), 0, gt_EndingCinematicSaveExitSpecialP3, true, false);
      UIShowCinematicText(PlayerGroupSingle(3), StringExternal("Param/Value/4C1C5C7E"), 0.1, 5.8, SoundLink("30SecondSilence", -1));
    }
    else {
      UIShowCinematicText(PlayerGroupSingle(3), StringExternal("Param/Value/2FF83803"), 0.1, 4.8, SoundLink("30SecondSilence", -1));
    }
  }
  if (PlayerGroupHasPlayer(gv_playerswatchingendingcinematic, 4)) {
    if (gv_players[3].state.beatGame) {
      TriggerSkippableBegin(PlayerGroupSingle(4), 0, gt_EndingCinematicSaveExitSpecialP4, true, false);
      UIShowCinematicText(PlayerGroupSingle(4), StringExternal("Param/Value/4C1C5C7E"), 0.1, 5.8, SoundLink("30SecondSilence", -1));
    }
    else {
      UIShowCinematicText(PlayerGroupSingle(4), StringExternal("Param/Value/2FF83803"), 0.1, 4.8, SoundLink("30SecondSilence", -1));
    }
  }
  Wait(5.8, c_timeGame);
  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/259E7C04"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
  Wait(8, c_timeGame);
  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/C384B428"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
  Wait(8, c_timeGame);
  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/A8723B18"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
  Wait(8, c_timeGame);
  for (PlayerGroupLoopBegin(gv_playerswatchingendingcinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2544), 5.0, -1, 10.0, true);
  }
  PlayerGroupLoopEnd();

  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/3F968A1C"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
  Wait(8.0, c_timeGame);
  for (PlayerGroupLoopBegin(gv_playerswatchingendingcinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2780), 5.0, -1, 10.0, true);
  }
  PlayerGroupLoopEnd();

  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/9B251C63"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
  Wait(8.0, c_timeReal);
  for (PlayerGroupLoopBegin(gv_playerswatchingendingcinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2781), 5.0, -1, 10.0, true);
  }
  PlayerGroupLoopEnd();

  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/31B1C81A"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
  Wait(8.0, c_timeGame);
  for (PlayerGroupLoopBegin(gv_playerswatchingendingcinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(1710), 5.0, -1, 10.0, true);
  }
  PlayerGroupLoopEnd();

  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/C6C9A251"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
  Wait(8.0, c_timeGame);
  for (PlayerGroupLoopBegin(gv_playerswatchingendingcinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2782), 5.0, -1, 10.0, true);
  }
  PlayerGroupLoopEnd();

  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/F078F471"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
  Wait(8.0, c_timeGame);
  for (PlayerGroupLoopBegin(gv_playerswatchingendingcinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2783), 5.0, -1, 10.0, true);
  }
  PlayerGroupLoopEnd();

  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/D608B6EF"), 0.08, 99.0, SoundLink("30SecondSilence", -1));
  Wait(8.0, c_timeGame);
  for (PlayerGroupLoopBegin(gv_playerswatchingendingcinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2784), 5.0, -1, 10.0, true);
  }
  PlayerGroupLoopEnd();

  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/5B3E7D77"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(3.0, c_timeGame);
  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/42C6933B"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(3.0, c_timeGame);
  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/D541CFBE"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(3.0, c_timeGame);
  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/45BCF748"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(3.0, c_timeGame);
  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("Param/Value/CB5DCFB6"), 0.05, 99.0, SoundLink("30SecondSilence", -1));
  Wait(3.0, c_timeGame);
  for (PlayerGroupLoopBegin(gv_playerswatchingendingcinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2785), 5.0, -1, 10.0, true);
  }
  PlayerGroupLoopEnd();

  //if(UnitTUnitInRegion(RegionFromName("View Credits")) != "Null"){
  UIShowCinematicText(gv_playerswatchingendingcinematic, StringExternal("And thank you!"), 0.2, 99.0, SoundLink("30SecondSilence", -1));
  Wait(10.0, c_timeGame);
  TriggerExecute(gt_EndingCinematicSaveExitNormal, true, false);
  
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EndingCinematic_Init () {
  gt_EndingCinematic = TriggerCreate("gt_EndingCinematic_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ending Cinematic - Save/Exit (Normal)
//--------------------------------------------------------------------------------------------------
bool gt_EndingCinematicSaveExitNormal_Func (bool testConds, bool runActions) {
  playerData_r lr_player;

  if (!runActions) {
    return true;
  }
  UIShowCinematicText(gv_playerswatchingintrocinematic, StringToText(""), 0.05, 0.0, SoundLink("30SecondSilence", -1));
  for (PlayerGroupLoopBegin(gv_playerswatchingendingcinematic); !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    lr_player.state.isSavingExiting = true;
    gf_SaveStackCounts(lr_player);
    gf_SaveHero(lr_player);
    gf_SaveStash(lr_player);
    gf_SaveSkills(lr_player);
    gf_SaveHPC(lr_player);
    gf_SaveHRC(lr_player);
    BankValueSetFromFlag(lr_player.banks.dragonBank, "GB", lr_player.hand, true);
    BankSave(lr_player.banks.dragonBank);
    lib_talent_gf_SaveTalentBuild(1, gv_DragonTypes[lr_player.type].talentBuildName, lr_player);
    GameOver(lr_player.player, c_gameOverVictory, false, true);
  }
  PlayerGroupLoopEnd();

  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EndingCinematicSaveExitNormal_Init () {
  gt_EndingCinematicSaveExitNormal = TriggerCreate("gt_EndingCinematicSaveExitNormal_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ending Cinematic - Save/Exit (Special) P1
//--------------------------------------------------------------------------------------------------
bool gt_EndingCinematicSaveExitSpecialP1_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[0];

  if (!runActions) {
    return true;
  }

  lr_player.state.isSavingExiting = true;
  gf_SaveStackCounts(lr_player);
  gf_SaveHero(lr_player);
  gf_SaveStash(lr_player);
  gf_SaveSkills(lr_player);
  gf_SaveHPC(lr_player);
  gf_SaveHRC(lr_player);
  BankValueSetFromFlag(lr_player.banks.dragonBank, "GB", lr_player.hand, true);
  BankSave(lr_player.banks.dragonBank);
  lib_talent_gf_SaveTalentBuild(1, gv_DragonTypes[lr_player.type].talentBuildName, lr_player);
  GameOver(lr_player.player, c_gameOverVictory, false, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EndingCinematicSaveExitSpecialP1_Init () {
  gt_EndingCinematicSaveExitSpecialP1 = TriggerCreate("gt_EndingCinematicSaveExitSpecialP1_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ending Cinematic - Save/Exit (Special) P2
//--------------------------------------------------------------------------------------------------
bool gt_EndingCinematicSaveExitSpecialP2_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[1];

  if (!runActions) {
    return true;
  }

  lr_player.state.isSavingExiting = true;
  gf_SaveStackCounts(lr_player);
  gf_SaveHero(lr_player);
  gf_SaveStash(lr_player);
  gf_SaveSkills(lr_player);
  gf_SaveHPC(lr_player);
  gf_SaveHRC(lr_player);
  BankValueSetFromFlag(lr_player.banks.dragonBank, "GB", lr_player.hand, true);
  BankSave(lr_player.banks.dragonBank);
  lib_talent_gf_SaveTalentBuild(1, gv_DragonTypes[lr_player.type].talentBuildName, lr_player);
  GameOver(lr_player.player, c_gameOverVictory, false, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EndingCinematicSaveExitSpecialP2_Init () {
  gt_EndingCinematicSaveExitSpecialP2 = TriggerCreate("gt_EndingCinematicSaveExitSpecialP2_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ending Cinematic - Save/Exit (Special) P3
//--------------------------------------------------------------------------------------------------
bool gt_EndingCinematicSaveExitSpecialP3_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[2];

  if (!runActions) {
    return true;
  }

  lr_player.state.isSavingExiting = true;
  gf_SaveStackCounts(lr_player);
  gf_SaveHero(lr_player);
  gf_SaveStash(lr_player);
  gf_SaveSkills(lr_player);
  gf_SaveHPC(lr_player);
  gf_SaveHRC(lr_player);
  BankValueSetFromFlag(lr_player.banks.dragonBank, "GB", lr_player.hand, true);
  BankSave(lr_player.banks.dragonBank);
  lib_talent_gf_SaveTalentBuild(1, gv_DragonTypes[lr_player.type].talentBuildName, lr_player);
  GameOver(lr_player.player, c_gameOverVictory, false, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EndingCinematicSaveExitSpecialP3_Init () {
  gt_EndingCinematicSaveExitSpecialP3 = TriggerCreate("gt_EndingCinematicSaveExitSpecialP3_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Ending Cinematic - Save/Exit (Special) P4
//--------------------------------------------------------------------------------------------------
bool gt_EndingCinematicSaveExitSpecialP4_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[3];

  if (!runActions) {
    return true;
  }

  lr_player.state.isSavingExiting = true;
  gf_SaveStackCounts(lr_player);
  gf_SaveHero(lr_player);
  gf_SaveStash(lr_player);
  gf_SaveSkills(lr_player);
  gf_SaveHPC(lr_player);
  gf_SaveHRC(lr_player);
  BankValueSetFromFlag(lr_player.banks.dragonBank, "GB", lr_player.hand, true);
  BankSave(lr_player.banks.dragonBank);
  lib_talent_gf_SaveTalentBuild(1, gv_DragonTypes[lr_player.type].talentBuildName, lr_player);
  GameOver(lr_player.player, c_gameOverVictory, false, true);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_EndingCinematicSaveExitSpecialP4_Init () {
  gt_EndingCinematicSaveExitSpecialP4 = TriggerCreate("gt_EndingCinematicSaveExitSpecialP4_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Periodically Save
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicallySave_Func (bool testConds, bool runActions) {
  if (!runActions) {
    return true;
  }
  
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    if (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) {
      gf_Save(gv_players[PlayerGroupLoopCurrent() - 1]);
    }
  }
  PlayerGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_PeriodicallySave_Init () {
  gt_PeriodicallySave = TriggerCreate("gt_PeriodicallySave_Func");
  TriggerAddEventTimePeriodic(gt_PeriodicallySave, 1.0, c_timeReal);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Create Reborn Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateRebornDialog_Func (bool testConds, bool runActions) {
  playerData_r lr_player;
  int lv_dialogWidth;
  int lv_dialogHeight;
  int lv_labelWidth;
  int lv_labelHeight;
  int lv_pointWidth;
  int lv_pointHeight;
  int lv_buttonHeight;
  int lv_buttonWidth;
  int lv_xSkip;
  int lv_xSpace;

  lv_dialogWidth = 500;
  lv_dialogHeight = 410;
  lv_labelWidth = 250;
  lv_labelHeight = 30;
  lv_pointWidth = 130;
  lv_pointHeight = 30;
  lv_buttonHeight = 30;
  lv_buttonWidth = 30;
  lv_xSkip = 30;
  lv_xSpace = 30;

  if (!runActions) {
    return true;
  }
  for (PlayerGroupLoopBegin(gv_humanPlayers); !PlayerGroupLoopDone(); PlayerGroupLoopStep() ) {
    lr_player = gv_players[PlayerGroupLoopCurrent() - 1];
    DialogCreate(lv_dialogWidth, lv_dialogHeight, c_anchorTopRight, 0, 75, true);
    lr_player.stats.reborn.dialog.state = DialogLastCreated();
    DialogSetVisible(lr_player.stats.reborn.dialog.state, PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, (lv_dialogWidth / 1), lv_labelHeight, c_anchorTopLeft, 0, (lv_labelHeight * 1), (StringExternal("Param/Value/7D0AD6CC") + IntToText(lr_player.stats.reborn.points)), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", lr_player.playerGroupSingle);
    gv_rebornDialogRebornPointLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 1) + (lv_labelHeight / 3)), StringExternal("Param/Value/158C7C9C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lr_player.player, false)), true, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 2), StringExternal("Param/Value/13E7657A"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lr_player.player, false)), true, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 2) + (lv_labelHeight / 3)), StringExternal("Param/Value/158C7C9C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lr_player.player, false)), true, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 3), StringExternal("Param/Value/0C74DDDD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 3) + (lv_labelHeight / 3)), StringExternal("Param/Value/158C7C9C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lr_player.player, false)), true, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 4), StringExternal("Param/Value/754A8049"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 4) + (lv_labelHeight / 3)), StringExternal("Param/Value/158C7C9C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lr_player.player, false)), true, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 5), StringExternal("Param/Value/40D5A933"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 5) + (lv_labelHeight / 3)), StringExternal("Param/Value/158C7C9C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lr_player.player, false)), true, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 6), StringExternal("Param/Value/565F98A7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 6) + (lv_labelHeight / 3)), StringExternal("Param/Value/158C7C9C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lr_player.player, false)), true, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 7), StringExternal("Param/Value/85DF1CEC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 7) + (lv_labelHeight / 3)), StringExternal("Param/Value/158C7C9C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lr_player.player, false)), true, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 8), StringExternal("Param/Value/2C49892B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 8) + (lv_labelHeight / 3)), StringExternal("Param/Value/158C7C9C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lr_player.player, false)), true, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 9), StringExternal("Param/Value/E70F7CE6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 9) + (lv_labelHeight / 3)), StringExternal("Param/Value/158C7C9C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lr_player.player, false)), true, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 10), StringExternal("Param/Value/E2E4F016"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 10) + (lv_labelHeight / 3)), StringExternal("Param/Value/158C7C9C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lr_player.player, false)), true, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 11), StringExternal("Param/Value/FCBA9AC6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 11) + (lv_labelHeight / 3)), StringExternal("Param/Value/158C7C9C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lr_player.player, false)), true, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_labelWidth, lv_labelHeight, c_anchorTopLeft, lv_xSkip, (lv_labelHeight * 12), StringExternal("Param/Value/9A39BA08"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, (lv_dialogWidth - 60), lv_labelHeight, c_anchorTopLeft, lv_xSkip, ((lv_labelHeight * 12) + (lv_labelHeight / 3)), StringExternal("Param/Value/158C7C9C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lr_player.player, false)), true, 2.0);
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 3), (StringExternal("Param/Value/3F8C3E6C") + (IntToText(lr_player.stats.reborn.maxHP) + (StringExternal("Param/Value/3C40C931") + StringExternal("Param/Value/19C87255")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", lr_player.playerGroupSingle);
    lr_player.stats.reborn.dialog.pointLabel[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 4), (StringExternal("Param/Value/73FE3461") + (IntToText(lr_player.stats.reborn.maxMP) + (StringExternal("Param/Value/9649BE76") + StringExternal("Param/Value/161A3F27")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", lr_player.playerGroupSingle);
    lr_player.stats.reborn.dialog.pointLabel[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 5), (StringExternal("Param/Value/0154B2DE") + (IntToText(lr_player.stats.reborn.defense) + (StringExternal("Param/Value/4366ED00") + StringExternal("Param/Value/A5AD37C7")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", lr_player.playerGroupSingle);
    lr_player.stats.reborn.dialog.pointLabel[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 6), (StringExternal("Param/Value/2422077E") + (IntToText(lr_player.stats.reborn.movementSpeed) + (StringExternal("Param/Value/21416A9C") + StringExternal("Param/Value/B7CAA415")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", lr_player.playerGroupSingle);
    lr_player.stats.reborn.dialog.pointLabel[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 7), (StringExternal("Param/Value/A575EF6C") + (IntToText(lr_player.stats.reborn.attackSpeed) + (StringExternal("Param/Value/5C1A1A21") + StringExternal("Param/Value/DFF0F56F")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", lr_player.playerGroupSingle);
    lr_player.stats.reborn.dialog.pointLabel[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 8), (StringExternal("Param/Value/F60085E0") + (IntToText(lr_player.stats.reborn.dodge) + (StringExternal("Param/Value/3E12AE8D") + StringExternal("Param/Value/BA7E44FE")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", lr_player.playerGroupSingle);
    lr_player.stats.reborn.dialog.pointLabel[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 9), (StringExternal("Param/Value/6BCC1DD7") + (IntToText(lr_player.stats.reborn.miss) + (StringExternal("Param/Value/D945F4DA") + StringExternal("Param/Value/52F1E42D")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", lr_player.playerGroupSingle);
    lr_player.stats.reborn.dialog.pointLabel[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 10), (StringExternal("Param/Value/F133BEB5") + (IntToText(lr_player.stats.reborn.goldDrop) + (StringExternal("Param/Value/927D5541") + StringExternal("Param/Value/E55819A4")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", lr_player.playerGroupSingle);
    lr_player.stats.reborn.dialog.pointLabel[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 11), (StringExternal("Param/Value/A464F39D") + (IntToText(lr_player.stats.reborn.itemDrop) + (StringExternal("Param/Value/1627BE88") + StringExternal("Param/Value/FA36656D")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", lr_player.playerGroupSingle);
    lr_player.stats.reborn.dialog.pointLabel[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lr_player.stats.reborn.dialog.state, lv_pointWidth, lv_pointHeight, c_anchorTopLeft, ((lv_xSkip + 20) + lv_labelWidth), (lv_labelHeight * 12), (StringExternal("Param/Value/F179BF9B") + (IntToText(lr_player.stats.reborn.regen) + (StringExternal("Param/Value/53A204C7") + StringExternal("Param/Value/4FF47C38")))), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", lr_player.playerGroupSingle);
    lr_player.stats.reborn.dialog.pointLabel[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lr_player.stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 3) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/EF0BD040"), (""));
    lr_player.stats.reborn.dialog.pointButton[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lr_player.stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 4) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/79C912B8"), (""));
    lr_player.stats.reborn.dialog.pointButton[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lr_player.stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 5) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/F63238DB"), (""));
    lr_player.stats.reborn.dialog.pointButton[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lr_player.stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 6) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/21386B3C"), (""));
    lr_player.stats.reborn.dialog.pointButton[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lr_player.stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 7) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/E51B7529"), (""));
    lr_player.stats.reborn.dialog.pointButton[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lr_player.stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 8) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/A59B0230"), (""));
    lr_player.stats.reborn.dialog.pointButton[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lr_player.stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 9) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/C4C98683"), (""));
    lr_player.stats.reborn.dialog.pointButton[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lr_player.stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 10) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/75B2568C"), (""));
    lr_player.stats.reborn.dialog.pointButton[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lr_player.stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 11) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/F26350EA"), (""));
    lr_player.stats.reborn.dialog.pointButton[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lr_player.stats.reborn.dialog.state, lv_buttonWidth, lv_buttonHeight, c_anchorTopLeft, (((lv_xSkip + lv_labelWidth) + lv_xSpace) + (lv_pointWidth + 10)), ((lv_labelHeight * 12) - (lv_buttonHeight / 5)), StringToText(""), StringExternal("Param/Value/2894924B"), (""));
    lr_player.stats.reborn.dialog.pointButton[9] = DialogControlLastCreated();
  }
  PlayerGroupLoopEnd();
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CreateRebornDialog_Init () {
  gt_CreateRebornDialog = TriggerCreate("gt_CreateRebornDialog_Func");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Reborn Dialog Visibility
//--------------------------------------------------------------------------------------------------
bool gt_ToggleRebornDialogVisibility_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (!runActions) {
    return true;
  }
  if (DialogIsVisible(lr_player.stats.reborn.dialog.state, lr_player.player)) {
    DialogSetVisible(lr_player.stats.reborn.dialog.state, lr_player.playerGroupSingle, false);
  }
  else {
    DialogSetVisible(lr_player.stats.reborn.dialog.state, lr_player.playerGroupSingle, true);
  }
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_ToggleRebornDialogVisibility_Init () {
  gt_ToggleRebornDialogVisibility = TriggerCreate("gt_ToggleRebornDialogVisibility_Func");
  TriggerAddEventButtonPressed(gt_ToggleRebornDialogVisibility, c_playerAny, "RebornMenu");
}
//--------------------------------------------------------------------------------------------------
// Trigger: Reborn Stats
//--------------------------------------------------------------------------------------------------
bool gt_RebornStats_Func (bool testConds, bool runActions) {
  playerData_r lr_player = gv_players[EventPlayer() - 1];

  if (!runActions) {
    return true;
  }
  if (lr_player.stats.reborn.points <= 0) {
    return true;
  }
  
  if (EventDialogControl() == lr_player.stats.reborn.dialog.pointButton[0] && lr_player.stats.reborn.maxHP < gv_RebornSkillCap) {
    lr_player.stats.reborn.points -= 1;
    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/7D0AD6CC") + IntToText(lr_player.stats.reborn.points)), lr_player.playerGroupSingle);
    lr_player.stats.reborn.maxHP += 1;
    libNtve_gf_SetDialogItemText(lr_player.stats.reborn.dialog.pointLabel[0], (StringExternal("Param/Value/04B4A828") + (IntToText(lr_player.stats.reborn.maxHP) + StringExternal("Param/Value/AF8C6C06"))), lr_player.playerGroupSingle);
  }
  else if (EventDialogControl() == lr_player.stats.reborn.dialog.pointButton[1] && lr_player.stats.reborn.maxMP < gv_RebornSkillCap) {
    lr_player.stats.reborn.points -= 1;
    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/7D0AD6CC") + IntToText(lr_player.stats.reborn.points)), lr_player.playerGroupSingle);
    lr_player.stats.reborn.maxMP += 1;
    libNtve_gf_SetDialogItemText(lr_player.stats.reborn.dialog.pointLabel[1], (StringExternal("Param/Value/96A7A695") + (IntToText(lr_player.stats.reborn.maxMP) + StringExternal("Param/Value/DE089EDD"))), lr_player.playerGroupSingle);
  }
  else if (EventDialogControl() == lr_player.stats.reborn.dialog.pointButton[2] && lr_player.stats.reborn.defense < gv_RebornSkillCap) {
    lr_player.stats.reborn.points -= 1;
    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/7D0AD6CC") + IntToText(lr_player.stats.reborn.points)), lr_player.playerGroupSingle);
    lr_player.stats.reborn.defense += 1;
    libNtve_gf_SetDialogItemText(lr_player.stats.reborn.dialog.pointLabel[2], (StringExternal("Param/Value/C824D379") + (IntToText(lr_player.stats.reborn.defense) + StringExternal("Param/Value/F00A522E"))), lr_player.playerGroupSingle);
  }
  else if (EventDialogControl() == lr_player.stats.reborn.dialog.pointButton[3] && lr_player.stats.reborn.movementSpeed < gv_RebornSkillCap) {
    lr_player.stats.reborn.points -= 1;
    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/7D0AD6CC") + IntToText(lr_player.stats.reborn.points)), lr_player.playerGroupSingle);
    lr_player.stats.reborn.movementSpeed += 1;
    libNtve_gf_SetDialogItemText(lr_player.stats.reborn.dialog.pointLabel[3], (StringExternal("Param/Value/04CC0597") + (IntToText(lr_player.stats.reborn.movementSpeed) + StringExternal("Param/Value/D55AF90E"))), lr_player.playerGroupSingle);
  }
  else if (EventDialogControl() == lr_player.stats.reborn.dialog.pointButton[4] && lr_player.stats.reborn.attackSpeed < gv_RebornSkillCap) {
    lr_player.stats.reborn.points -= 1;
    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/7D0AD6CC") + IntToText(lr_player.stats.reborn.points)), lr_player.playerGroupSingle);
    lr_player.stats.reborn.attackSpeed += 1;
    libNtve_gf_SetDialogItemText(lr_player.stats.reborn.dialog.pointLabel[4], (StringExternal("Param/Value/298476B7") + (IntToText(lr_player.stats.reborn.attackSpeed) + StringExternal("Param/Value/75DB64C6"))), lr_player.playerGroupSingle);
  }
  else if (EventDialogControl() == lr_player.stats.reborn.dialog.pointButton[5] && lr_player.stats.reborn.dodge < gv_RebornSkillCap) {
    lr_player.stats.reborn.points -= 1;
    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/7D0AD6CC") + IntToText(lr_player.stats.reborn.points)), lr_player.playerGroupSingle);
    lr_player.stats.reborn.dodge += 1;
    libNtve_gf_SetDialogItemText(lr_player.stats.reborn.dialog.pointLabel[5], (StringExternal("Param/Value/DAA59A61") + (IntToText(lr_player.stats.reborn.dodge) + StringExternal("Param/Value/1DA52D0B"))), lr_player.playerGroupSingle);
  }
  else if (EventDialogControl() == lr_player.stats.reborn.dialog.pointButton[6] && lr_player.stats.reborn.miss < gv_RebornSkillCap) {
    lr_player.stats.reborn.points -= 1;
    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/7D0AD6CC") + IntToText(lr_player.stats.reborn.points)), lr_player.playerGroupSingle);
    lr_player.stats.reborn.miss += 1;
    libNtve_gf_SetDialogItemText(lr_player.stats.reborn.dialog.pointLabel[6], (StringExternal("Param/Value/42E6E47A") + (IntToText(lr_player.stats.reborn.miss) + StringExternal("Param/Value/D70A2D38"))), lr_player.playerGroupSingle);
  }
  else if (EventDialogControl() == lr_player.stats.reborn.dialog.pointButton[7] && lr_player.stats.reborn.goldDrop < gv_RebornSkillCap) {
    lr_player.stats.reborn.points -= 1;
    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/7D0AD6CC") + IntToText(lr_player.stats.reborn.points)), lr_player.playerGroupSingle);
    lr_player.stats.reborn.goldDrop += 1;
    libNtve_gf_SetDialogItemText(lr_player.stats.reborn.dialog.pointLabel[7], (StringExternal("Param/Value/1CE95B32") + (IntToText(lr_player.stats.reborn.goldDrop) + StringExternal("Param/Value/1A84F8DC"))), lr_player.playerGroupSingle);
  }
  else if (EventDialogControl() == lr_player.stats.reborn.dialog.pointButton[8] && lr_player.stats.reborn.itemDrop < gv_RebornSkillCap) {
    lr_player.stats.reborn.points -= 1;
    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/7D0AD6CC") + IntToText(lr_player.stats.reborn.points)), lr_player.playerGroupSingle);
    lr_player.stats.reborn.itemDrop += 1;
    libNtve_gf_SetDialogItemText(lr_player.stats.reborn.dialog.pointLabel[8], (StringExternal("Param/Value/8B65544B") + (IntToText(lr_player.stats.reborn.itemDrop) + StringExternal("Param/Value/54C69C21"))), lr_player.playerGroupSingle);
  }
  else if (EventDialogControl() == lr_player.stats.reborn.dialog.pointButton[9] && lr_player.stats.reborn.regen < gv_RebornSkillCap) {
    lr_player.stats.reborn.points -= 1;
    libNtve_gf_SetDialogItemText(gv_rebornDialogRebornPointLabel, (StringExternal("Param/Value/7D0AD6CC") + IntToText(lr_player.stats.reborn.points)), lr_player.playerGroupSingle);
    lr_player.stats.reborn.regen += 1;
    libNtve_gf_SetDialogItemText(lr_player.stats.reborn.dialog.pointLabel[9], (StringExternal("Param/Value/6C18F48D") + (IntToText(lr_player.stats.reborn.regen) + StringExternal("Param/Value/D00FC4C3"))), lr_player.playerGroupSingle);
  }
  gf_ApplyRebornStats(lr_player);
  return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RebornStats_Init () {
  gt_RebornStats = TriggerCreate("gt_RebornStats_Func");
  TriggerAddEventDialogControl(gt_RebornStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Region View Creditis Plays Ending
//--------------------------------------------------------------------------------------------------
bool gt_MakeEndingPlay_Func (bool testConds, bool runActions) {
  if (!(testConds)) {
    //UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Got here :/1"));  
    return false;
  }
  if (!runActions) {
    return true;
  }

  if (gv_zaubererDead) {
    //UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) &&
    // UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Got here2 :/"));  
    TriggerExecute(gt_EndingCinematic, true, false);
    return true;
  } else{
    // UIDisplayMessage(lr_player.playerGroupSingle, c_messageAreaSubtitle, StringExternal("Got here3 :/"));  
    return true;
  }
}
//--------------------------------------------------------------------------------------------------
void gt_MakeEndingPlay_Init () {
  gt_MakeEndingPlay = TriggerCreate("gt_MakeEndingPlay_Func");
  TriggerAddEventUnitRegion(gt_MakeEndingPlay, null, RegionFromName("View Credits"), false);
}
//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void FakeInitTriggers() {
  gt_CreateQuestDialog_Init();
  gt_CreateTalkDialog_Init();
  gt_CreateRewardDialog_Init();
  gt_QuestDecline_Init();
  gt_TalkDialogClosed_Init();
  gt_RunStoryQuestSetups_Init();
  gt_SQ0PlayerEntersSQ0Region1_Init();
  gt_SQ1PlayerTalkstoFelix_Init();
  gt_SQ2PlayerEntersSQ2Region1_Init();
  gt_SQ3PlayerTalkstoPetrose_Init();
  gt_SQ3PlayerEntersVerbotenForest_Init();
  gt_SQ4PlayerTalkstoRisdak_Init();
  gt_SQ5PlayerEntersInfestation_Init();
  gt_SQ5PlayerTalkstoPetrose_Init();
  gt_SQ6PlayerEntersTeleporttoBiodome_Init();
  gt_SQ7PlayerTalkstoLanae_Init();
  gt_SQ8BiodomeEntered_Init();
  gt_SQ8Crystal1Destroyed_Init();
  gt_SQ8Crystal2Destroyed_Init();
  gt_SQ8Crystal3Destroyed_Init();
  gt_SQ8Crystal4Destroyed_Init();
  gt_SQ8Crystal5Destroyed_Init();
  gt_SQ8Crystal6Destroyed_Init();
  gt_LoadSideQuests_Init();
  gt_ManaQuest0TalktoMana_Init();
  gt_ManaQuest0QuestAccept_Init();
  gt_ManaQuest0EquipArmorP1_Init();
  gt_ManaQuest0RewardAccept_Init();
  gt_ManaQuest1TalktoMana_Init();
  gt_ManaQuest1QuestAccept_Init();
  gt_ManaQuest1KillSheep_Init();
  gt_ManaQuest1RewardAccept_Init();
  gt_ManaQuest2TalktoMana_Init();
  gt_ManaQuest2QuestAccept_Init();
  gt_ManaQuest2EnterWastelandWater_Init();
  gt_ManaQuest2RewardAccept_Init();
  gt_ManaQuest3TalktoMana_Init();
  gt_ManaQuest3QuestAccept_Init();
  gt_ManaQuest3KillSrepti_Init();
  gt_ManaQuest3RewardAccept_Init();
  gt_ManaQuest4TalktoMana_Init();
  gt_ManaQuest4QuestAccept_Init();
  gt_ManaQuest4RewardAccept_Init();
  gt_ManaQuest4PurchasePotion_Init();
  gt_ManaQuest5TalktoMana_Init();
  gt_ManaQuest5QuestAccept_Init();
  gt_ManaQuest5KillAlphaSrepti_Init();
  gt_ManaQuest5RewardAccept_Init();
  gt_BaseQuest0TalktoBase_Init();
  gt_BaseQuest0QuestAccept_Init();
  gt_BaseQuest0SetRespawnPointatWasteland_Init();
  gt_BaseQuest0RewardAccept_Init();
  gt_BaseQuest1TalktoBase_Init();
  gt_BaseQuest1QuestAccept_Init();
  gt_BaseQuest1ActivateBallanWaypoint_Init();
  gt_BaseQuest2UseBallanWaypointtoWasteland_Init();
  gt_BaseQuest1RewardAccept_Init();
  gt_DetsefniQuest0TalktoDetsefni_Init();
  gt_DetsefniQuest0QuestAccept_Init();
  gt_DetsefniQuest0Kill25Sreptis_Init();
  gt_DetsefniQuest0RewardAccept_Init();
  gt_SergeantListerQuest0TalktoSergeantLister_Init();
  gt_SergeantListeriQuest0QuestAccept_Init();
  gt_SergeantListerQuest0Kill10CretonWarriors_Init();
  gt_SergeantListerQuest0RewardAccept_Init();
  gt_GreedQuest0TalktoGreed_Init();
  gt_GreedQuest0QuestAccept_Init();
  gt_GreedQuest0FindMisterScruffers_Init();
  gt_GreedQuest0RewardAccept_Init();
  gt_MadeleineQuest0TalktoMadeleine_Init();
  gt_MadeleineQuest0QuestAccept_Init();
  gt_MadeleineQuest0Kill30Karramarros_Init();
  gt_MadeleineQuest0RewardAccept_Init();
  gt_MalinQuest0TalktoMalin_Init();
  gt_MalinQuest0QuestAccept_Init();
  gt_MalinQuest0KillRobus_Init();
  gt_MalinQuest0RewardAccept_Init();
  gt_AmpQuest0TalktoAmp_Init();
  gt_AmpQuest0QuestAccept_Init();
  gt_AmpQuest0KillanEliteCretonWarrior_Init();
  gt_AmpQuest0RewardAccept_Init();
  gt_AltossQuest0TalktoAltoss_Init();
  gt_AltossQuest0QuestAccept_Init();
  gt_AltossQuest0Kill15Odvratans_Init();
  gt_AltossQuest0RewardAccept_Init();
  gt_IllisusLocustSpawn_Init();
  gt_OleumQuest0TalktoOleum_Init();
  gt_OleumQuest0QuestAccept_Init();
  gt_OleumQuest0FindCrew137_Init();
  gt_OleumQuest0KillIllisus_Init();
  gt_OleumQuest0RewardAccept_Init();
  gt_SerynQuest0TalktoSeryn_Init();
  gt_SerynQuest0QuestAccept_Init();
  gt_SerynQuest0KillSerynsShadow_Init();
  gt_SerynQuest0RewardAccept_Init();
  gt_ChaosUnitTypes_Init();
  gt_SyritalsHatch_Init();
  gt_GuardiansHatch_Init();
  gt_SremagsisHatch_Init();
  gt_MachinaDePlagamsHatch_Init();
  gt_ZauberersHatch_Init();
  gt_SpawnArenaText1_Init();
  gt_SpawnArenaText2_Init();
  gt_HeroLeavesArena1_Init();
  gt_HeroLeavesArena2_Init();
  gt_HeroEntersArena1_Init();
  gt_HeroEntersArena2_Init();
  gt_Contestant1Dies_Init();
  gt_Contestant2Dies_Init();
  gt_OpenInventorywhenclickonstash_Init();
  gt_Dropstuffnotunlockedyet_Init();
  gt_PotionHotkeyP1_Init();
  gt_PotionHotkeyP2_Init();
  gt_PotionHotkeyP3_Init();
  gt_PotionHotkeyP4_Init();
  gt_GrandOrbofAngerCounter_Init();
  gt_GrandOrbofAngerEffectP1_Init();
  gt_GrandOrbofAngerEffectP2_Init();
  gt_GrandOrbofAngerEffectP3_Init();
  gt_GrandOrbofAngerEffectP4_Init();
  gt_Player1BuysOcculusofWarning_Init();
  gt_Player2BuysOcculusofWarning_Init();
  gt_Player3BuysOcculusofWarning_Init();
  gt_Player4BuysOcculusofWarning_Init();
  gt_OcculusPingPlayer1_Init();
  gt_OcculusPingPlayer2_Init();
  gt_OcculusPingPlayer3_Init();
  gt_OcculusPingPlayer4_Init();
  gt_PlayerBuysFacetofRevenge_Init();
  gt_PlayerBuysCrystalofRebirth_Init();
  gt_PlayerBuysJewelofReturn_Init();
  gt_PlayerBuysStoneofProtection_Init();
  gt_PlayerBuysRingofQuickening_Init();
  gt_TolicsFireOrbDamageResponse_Init();
  gt_SetStackChargeNames_Init();
  gt_SaveStackCountsOnInventoryEdit_Init();
  gt_SaveStackCountsPeriodically_Init();
  gt_TownPortal_Init();
  gt_Unitdropsitem_Init();
  gt_Unitgainsitem_Init();
  gt_ShieldCheck_Init();
  gt_WeaponCheck_Init();
  gt_SellingSystemRedux_Init();
  gt_DisplayArmorShopTextTag_Init();
  gt_DisplayWeaponShopTextTag_Init();
  gt_DisplayOrbShopTextTag_Init();
  gt_DisplayShardShopTextTag_Init();
  gt_DisplayStashTextTagP1_Init();
  gt_DisplayStashTextTagP2_Init();
  gt_DisplayStashTextTagP3_Init();
  gt_DisplayStashTextTagP4_Init();
  gt_UndergroundForestEnter_Init();
  gt_UndergroundForestExit_Init();
  gt_RelamyGorgeEnter_Init();
  gt_RelamyGorgeExit_Init();
  gt_RelamyCaveEnter_Init();
  gt_RelamyCaveExit_Init();
  gt_SetInfestationSpawnTrigger_Init();
  gt_VerbotenInfestationEnter_Init();
  gt_VerbotenInfestationExit_Init();
  gt_BlizzardFreezeChance_Init();
  gt_LearnFireball_Init();
  gt_LearnFireclaws_Init();
  gt_LearnFlameegg_Init();
  gt_LearnInferno_Init();
  gt_LearnNova_Init();
  gt_LearnFrostspike_Init();
  gt_LearnBlizzard_Init();
  gt_LearnSubzero_Init();
  gt_LearnFrozenarmor_Init();
  gt_CheckPlayerisnoteveolved_Init();
  gt_DummyDies_Init();
  gt_ReviveDragonNormal_Init();
  gt_ReviveDragonPvP_Init();
  gt_SetUpAttributeDialog_Init();
  gt_Level0Check_Init();
  gt_LevelUp_Init();
  gt_EvolutionCheck_Init();
  gt_Agility1_Init();
  gt_Dexterity1_Init();
  gt_Intelligence1_Init();
  gt_Strength1_Init();
  gt_Vitality1_Init();
  gt_UpdateBuffs_Init();
  gt_ShowTalents_Init();
  gt_SetisIdleOn_Init();
  gt_SetisIdleOff_Init();
  gt_DefendYourself_Init();
  gt_FrostSpike_Init();
  gt_SyritalTalonsBurning_Init();
  gt_RobusSpawnAllies_Init();
  gt_RobusCarrionNeedlesPoison_Init();
  gt_SremagsiTentacleDisorientation_Init();
  gt_HeroCarrionNeedlesPoison_Init();
  gt_HeroSremagsisTentaclesDisorientated_Init();
  gt_NosferatusLogic_Init();
  gt_NosferatuDies_Init();
  gt_Nosferatudeathcount_Init();
  gt_GreedisGood_Init();
  gt_QuickLearner_Init();
  gt_Herotakesmeleedamage_Init();
  gt_Herotakesrangeddamage_Init();
  gt_Herotakesspelldamage_Init();
  gt_Herotakessplashdamage_Init();
  gt_HeroMissranged_Init();
  gt_HeroMissmelee_Init();
  gt_HeroMissmelee1Shot_Init();
  gt_Herogivesrangeddamage_Init();
  gt_DarkDissulto_Init();
  gt_EnemyAIAttacked_Init();
  gt_EnemyAILava1_Init();
  gt_EnemyAILava2_Init();
  gt_EnemyAILava3_Init();
  gt_EnemyAINest_Init();
  gt_EnemySkillResponse_Init();
  gt_ZauberersFavor_Init();
  gt_CountUnitDeaths_Init();
  gt_EliteCretonWarrior_Init();
  gt_EliteCretonWatcher_Init();
  gt_LargeSheep_Init();
  gt_AlphaSrepti_Init();
  gt_GivenMeleeDamageTextTag_Init();
  gt_RecievedMeleeDamageTextTag_Init();
  gt_SetZauberersMinionsUnitTypes_Init();
  gt_SetZauberersRegions_Init();
  gt_SpawnZauberersMinions_Init();
  gt_DragonDiesinZauberer1_Init();
  gt_DragonDiesinZauberer2_Init();
  gt_SpawnZauberer1stForm_Init();
  gt_Zauberer1stFormDeath_Init();
  gt_Zauberer1stFormAI_Init();
  gt_SpawnZauberer2ndFormNormalWay_Init();
  gt_SpawnZauberer2ndFormSpecial_Init();
  gt_Zauberer2ndFormDeath_Init();
  gt_WarpOutFromBossArena_Init();
  gt_Zauberer2ndFormAI_Init();
  gt_MachinaDePlagamSethealth_Init();
  gt_CreateMachinaDePlagamWarning_Init();
  gt_DestroyMachinaDePlagamWarning_Init();
  gt_HeroattacksMachinaDePlagam_Init();
  gt_MachinaDePlagamEnter_Init();
  gt_MachinaDePlagamLeave_Init();
  gt_MachinaDePlagamDragonDies_Init();
  gt_MachinaDePlagamDies_Init();
  gt_MachinaDePlagamRespawn_Init();
  gt_MachinaDePlagamBackup_Init();
  gt_UnitattacksSremagsi_Init();
  gt_Sremagsisethealth_Init();
  gt_SremagsiLairEnter_Init();
  gt_SremagsiLairExit_Init();
  gt_SremagsiDragonDies_Init();
  gt_SremagsiDies_Init();
  gt_SremagsiRespawn_Init();
  gt_CountPlayersGreaterthan25_Init();
  gt_GuardianSpawn_Init();
  gt_KorlicDies_Init();
  gt_TolicDies_Init();
  gt_MadawcDies_Init();
  gt_NoDragonsinGaurdian_Init();
  gt_GuardianRespawn_Init();
  gt_UnitattacksSyrital_Init();
  gt_SetSyritalHealth_Init();
  gt_CreateSyritalWarning_Init();
  gt_SyritalEnter_Init();
  gt_SyritalLeave_Init();
  gt_SyritalDragonDies_Init();
  gt_SyritalDies_Init();
  gt_SyritalRespawn_Init();
  gt_SpawnEnemies_Init();
  gt_SetupBioDomeWastelandRegions_Init();
  gt_SpawnEnemiesBioDomeWasteland_Init();
  gt_RespawnBioDomeWasteland_Init();
  gt_SetupCretonTranchRegions_Init();
  gt_SpawnEnemiesCretonTrench_Init();
  gt_RespawnCretonTrench_Init();
  gt_SetupCretonRegions_Init();
  gt_SpawnEnemiesCreton_Init();
  gt_RespawnCreton_Init();
  gt_SetVerbotenInfestationRegions_Init();
  gt_SpawnEnemiesVerbotenInfestationPlayer1_Init();
  gt_SpawnEnemiesVerbotenInfestationPlayer2_Init();
  gt_SpawnEnemiesVerbotenInfestationPlayer3_Init();
  gt_SpawnEnemiesVerbotenInfestationPlayer4_Init();
  gt_RespawnVerbotenInfestation_Init();
  gt_SetVerbotenForestRegions_Init();
  gt_RespawnVerbotenForest_Init();
  gt_SetWastelandRegions_Init();
  gt_RespawnWasteland_Init();
  gt_SetRelamyPassRegions_Init();
  gt_RespawnRelamyPass_Init();
  gt_SetRelamyGorgeRegions_Init();
  gt_RespawnRelamyGorge_Init();
  gt_SetRelamyCanyonRegions_Init();
  gt_RespawnRelamyCanyon_Init();
  gt_SetRelamyHillsRegions_Init();
  gt_RespawnRelamyHills_Init();
  gt_SetUndergroundForestRegions_Init();
  gt_RespawnUndergroundForest_Init();
  gt_WastelandWanderControl_Init();
  gt_RelamyPassWanderControl_Init();
  gt_RelamyGorgeWanderControl_Init();
  gt_RelamyCanyonWanderControl_Init();
  gt_RelamyHillsWanderControl_Init();
  gt_CreateWaypointDialog_Init();
  gt_LoadWaypoints_Init();
  gt_PlayerSelectsWaypoint_Init();
  gt_PlayerLeavesWaypoint_Init();
  gt_WaypointDialogButtonClicked_Init();
  gt_DragonEntersWaypoint_Init();
  gt_DragonLeavesWaypoint_Init();
  gt_BDZombieUnitSpawn_Init();
  gt_BDZombieUnitDeath_Init();
  gt_BDCretonUnitSpawn_Init();
  gt_BDCretonUnitDeath_Init();
  gt_BDVerbotenUnitSpawn_Init();
  gt_BDVerbotenUnitDeath_Init();
  gt_BDRelamyUnitSpawn_Init();
  gt_BDRelamyUnitDeath_Init();
  gt_BDWastelandUnitSpawn_Init();
  gt_BDWastelandUnitDeath_Init();
  gt_TeleporttoBioDome_Init();
  gt_TeleporttoCreton_Init();
  gt_SetRPtoWastelands_Init();
  gt_SetRPtoBallan_Init();
  gt_SetRPtoRelamy_Init();
  gt_SetRPtoVerbotenForestWaypoint_Init();
  gt_SetRPtoCreton_Init();
  gt_CreateDragonsNestWarning_Init();
  gt_CreateRelamyPassWarning_Init();
  gt_CreateRelamyCanyonWarning_Init();
  gt_CreateRelamyHillsWarning_Init();
  gt_CreateRelamyGorgeWarning_Init();
  gt_CreateLavaPassWarning_Init();
  gt_CreateVerbotenForestWarning_Init();
  gt_CreateVerbotenInfestationWarning_Init();
  gt_CreateRoadToBallanWarning_Init();
  gt_CreateCretonWarning_Init();
  gt_CreateSragmasiWarning_Init();
  gt_SetUpLocationDialog_Init();
  gt_LocationWasteland_Init();
  gt_LocationDragonsNest_Init();
  gt_LocationSyritalsLair_Init();
  gt_LocationRelamyPass_Init();
  gt_LocationRelamyCanyon_Init();
  gt_LocationRelamyHills_Init();
  gt_LocationVerbotenForest_Init();
  gt_LocationCreton_Init();
  gt_LocationCretonTrench_Init();
  gt_LocationRoadtoBallan_Init();
  gt_LocationBallan_Init();
  gt_WastelandHealingWaterEnter_Init();
  gt_WastelandHealingWaterLeave_Init();
  gt_RelamyPassHealingWaterEnter_Init();
  gt_RelamyPassHealingWaterLeave_Init();
  gt_RelamyCanyonHealingWaterEnter_Init();
  gt_RelamyCanyonHealingWaterLeave_Init();
  gt_VerbotenForestHealingWaterEnter_Init();
  gt_VerbotenForestHealingWaterLeave_Init();
  gt_LavaEnter_Init();
  gt_LavaExit_Init();
  gt_Chaos_Init();
  gt_ChaosHack_Init();
  gt_RevealMap_Init();
  gt_DevilsFlamethrower_Init();
  gt_WingClaws_Init();
  gt_TeleportInfestation_Init();
  gt_IslandofWoecheat_Init();
  gt_VTCount_Init();
  gt_Location_Init();
  gt_ResetQuest_Init();
  gt_TeleportBioDome_Init();
  gt_TeleporttoSpawn_Init();
  gt_DebugTeleZauberer_Init();
  gt_Invincibility_Init();
  gt_SuitUp_Init();
  gt_LevelDebug_Init();
  gt_GetHandle_Init();
  gt_NumberofUnitDeaths_Init();
  gt_Weapons_Init();
  gt_GetMoney_Init();
  gt_ViewEnding_Init();
  gt__50ShadesofGray_Init();
  gt_GetMoney2_Init();
  gt_GetMoney3_Init();
  gt_Fastest_Init();
  gt_MaxStats_Init();
  gt_DropAll_Init();
  gt_SpawnUnit_Init();
  gt_SpawnEnemyUnit_Init();
  gt_SpawnMassEnemyUnit_Init();
  gt_SpawnItem_Init();
  gt_MeleeBuffStacks_Init();
  gt_NumBuffs_Init();
  gt__999Talents_Init();
  gt_PlayerLeaves_Init();
  gt_OpenTalentMenu_Init();
  gt_ResetTalentBuild_Init();
  gt_InventoryTip_Init();
  gt_WeaponTip_Init();
  gt_DragonsNestTip_Init();
  gt_ResetStatsTip_Init();
  gt_ResetTalentsTip_Init();
  gt_ResetQuestsTip_Init();
  gt_HealingWaterTip_Init();
  gt_VespeneGasTip_Init();
  gt_EvolutionsTip_Init();
  gt_ArmorTip_Init();
  gt_SavingLoadingTip_Init();
  gt_MusicCreditsTip_Init();
  gt_AwesomePeopleTip_Init();
  gt_StashLocationSetup_Init();
  gt_LoadShards_Init();
  gt_CreateTimeofdayDialog_Init();
  gt_TimeofDayTick_Init();
  gt_SetUpPlayers_Init();
  gt_SetupRegions_Init();
  gt_SetupTips_Init();
  gt_SetUpTalentTree_Init();
  gt_MakePlayer14anAlly_Init();
  gt_SetUpUnitTypes_Init();
  gt_HideUselessUI_Init();
  gt_EnterDragonsNest_Init();
  gt_LeaveDragonsNest_Init();
  gt_CheckStats_Init();
  gt_ResetStats_Init();
  gt_BasicWeapons_Init();
  gt_DragonIntroCinematic_Init();
  gt_DragonIntroCinematicReturntoNormal_Init();
  gt_PlayIntroTheme_Init();
  gt_EndingCinematic_Init();
  gt_EndingCinematicSaveExitNormal_Init();
  gt_EndingCinematicSaveExitSpecialP1_Init();
  gt_EndingCinematicSaveExitSpecialP2_Init();
  gt_EndingCinematicSaveExitSpecialP3_Init();
  gt_EndingCinematicSaveExitSpecialP4_Init();
  gt_PeriodicallySave_Init();
  gt_Reborn_Init();
  gt_CreateRebornDialog_Init();
  gt_ToggleRebornDialogVisibility_Init();
  gt_RebornStats_Init();
  gt_MakeEndingPlay_Init();
}
// --------------------------------------
void gf_SetupPlayer(playerData_r lr_player) {
  // Load banks
  BankLoad("DragonRPGStashBank", lr_player.player);
  lr_player.banks.stashBank = BankLastCreated();
  BankWait(lr_player.banks.stashBank);
  BankLoad("DragonRPGCurrencyBank", lr_player.player);
  lr_player.banks.currencyBank = BankLastCreated();
  BankWait(lr_player.banks.currencyBank);
  BankLoad("DragonRPGRebornBank", lr_player.player);
  lr_player.banks.rebornBank = BankLastCreated();
  BankWait(lr_player.banks.rebornBank);
  CameraPan(lr_player.player, PointFromId(1), 0.0, -1, 0, false);
  gv_ofHumanPlayers = (gv_ofHumanPlayers + 1);
  BankLoad(gv_DragonTypes[lr_player.type].bankName, lr_player.player);
  lr_player.banks.dragonBank = BankLastCreated();
  BankWait(lr_player.banks.dragonBank);
  lr_player.verification.dragon = false;
  if (BankKeyExists(lr_player.banks.dragonBank, "Dragon", lr_player.hand)) {
    TipAlertPanelClear(lr_player.playerGroupSingle);
    TechTreeRequirementsEnable(lr_player.player, false);
    BankValueGetAsUnit(lr_player.banks.dragonBank, "Dragon", lr_player.hand, lr_player.player, PointFromId(1), 0.0);
    UnitSelect(BankLastRestoredUnit(), lr_player.player, true);
    lr_player.dragon = BankLastRestoredUnit();
    lr_player.stats.level = FixedToInt(UnitGetPropertyFixed(lr_player.dragon, c_unitPropLevel, c_unitPropCurrent));
    lr_player.stats.reborn.count = BankValueGetAsInt(lr_player.banks.dragonBank, "Reborn Count", lr_player.hand);
    lr_player.stats.attributePoints = BankValueGetAsInt(lr_player.banks.dragonBank, "AP", lr_player.hand);
    lr_player.stats.agility = BankValueGetAsInt(lr_player.banks.dragonBank, "Ag", lr_player.hand);
    lr_player.stats.dexterity = BankValueGetAsInt(lr_player.banks.dragonBank, "De", lr_player.hand);
    lr_player.stats.intelligence = BankValueGetAsInt(lr_player.banks.dragonBank, "Int", lr_player.hand);
    lr_player.stats.strength = BankValueGetAsInt(lr_player.banks.dragonBank, "Str", lr_player.hand);
    lr_player.stats.vitality = BankValueGetAsInt(lr_player.banks.dragonBank, "Vi", lr_player.hand);

    // TODO: Remove this after a few updates
    if (lr_player.stats.attributePoints == 0) {
      lr_player.stats.attributePoints = FixedToInt(BankValueGetAsFixed(lr_player.banks.dragonBank, "AP", lr_player.hand));
    }
    lr_player.skills.fireSkin = BankValueGetAsFlag(lr_player.banks.dragonBank, "FS", lr_player.hand);
    lr_player.skills.allSeeingEye = BankValueGetAsFlag(lr_player.banks.dragonBank, "ASE", lr_player.hand);
    lr_player.state.beatGame = BankValueGetAsFlag(lr_player.banks.dragonBank, "GB", lr_player.hand);
    lr_player.state.seenIntro = BankValueGetAsFlag(lr_player.banks.dragonBank, "Intro", lr_player.hand);
    lr_player.skills.warningOcculus = BankValueGetAsFlag(lr_player.banks.dragonBank, "OOW", lr_player.hand);
    lr_player.skills.revengeFacet = BankValueGetAsFlag(lr_player.banks.dragonBank, "FOR", lr_player.hand);
    lr_player.skills.rebirthCrystal = BankValueGetAsFlag(lr_player.banks.dragonBank, "COR", lr_player.hand);
    lr_player.skills.returnJewel = BankValueGetAsFlag(lr_player.banks.dragonBank, "JOR", lr_player.hand);
    lr_player.skills.protectionStone = BankValueGetAsFlag(lr_player.banks.dragonBank, "SOR", lr_player.hand);
    lr_player.skills.quickeningRing = BankValueGetAsFlag(lr_player.banks.dragonBank, "ROQ", lr_player.hand);
    if (lr_player.skills.warningOcculus) {
      if (lr_player.player == 1) {
        TriggerEnable(gt_OcculusPingPlayer1, true);
      } else if (lr_player.player == 2) {
        TriggerEnable(gt_OcculusPingPlayer2, true);
      } else if (lr_player.player == 3) {
        TriggerEnable(gt_OcculusPingPlayer3, true);
      } else if (lr_player.player == 4) {
        TriggerEnable(gt_OcculusPingPlayer4, true);
      }
    }
    if (lr_player.skills.fireSkin) {
      UnitBehaviorAddPlayer(lr_player.dragon, "FireSkin", lr_player.player, 1);
    }
    if (lr_player.skills.allSeeingEye) {
      UnitBehaviorAddPlayer(lr_player.dragon, "AllSeeingEye", lr_player.player, 1);
    }
    UnitBehaviorAddPlayer(lr_player.dragon, "AddAgility", lr_player.player, lr_player.stats.agility);
    UnitBehaviorAddPlayer(lr_player.dragon, "AddDexterity", lr_player.player, lr_player.stats.dexterity);
    UnitBehaviorAddPlayer(lr_player.dragon, "AddIntelligence", lr_player.player, lr_player.stats.intelligence);
    UnitBehaviorAddPlayer(lr_player.dragon, "AddStrength", lr_player.player, lr_player.stats.strength);
    UnitBehaviorAddPlayer(lr_player.dragon, "AddVitality", lr_player.player, lr_player.stats.vitality);
    UnitBehaviorAddPlayer(lr_player.dragon, "BlessingofDrache", lr_player.player, lr_player.stats.reborn.count);
    
    gf_ShowStats(lr_player);
    lr_player.stats.attributeText = IntToText(lr_player.stats.attributePoints);
    libNtve_gf_SetDialogItemText(lr_player.stats.attributeDialog.textBox, lr_player.stats.attributeText, lr_player.playerGroupSingle);
    UnitSetPropertyFixed(lr_player.dragon, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lr_player.dragon, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(lr_player.dragon, c_unitPropShieldsPercent, 100.0);
    BankValueSetFromUnit(lr_player.banks.dragonBank, "Dragon", lr_player.hand, lr_player.dragon);
    BankSectionRemove(lr_player.banks.dragonBank, "Minerals");
    BankSectionRemove(lr_player.banks.dragonBank, "Minerals2");
    BankSectionRemove(lr_player.banks.dragonBank, "Vespene");
    TechTreeRequirementsEnable(lr_player.player, true);
  } else {
    UnitCreate(1, gv_DragonTypes[lr_player.type].unitNames[0], 0, lr_player.player, PointFromId(1), 270.0);
    UnitSelect(UnitLastCreated(), lr_player.player, true);
    lr_player.dragon = UnitLastCreated();
    BankValueSetFromUnit(lr_player.banks.dragonBank, "Dragon", lr_player.hand, lr_player.dragon);
    lr_player.stats.level = FixedToInt(UnitGetPropertyFixed(lr_player.dragon, c_unitPropLevel, c_unitPropCurrent));
    lr_player.stats.agility = 0;
    BankValueSetFromInt(lr_player.banks.dragonBank, "Ag", lr_player.hand, lr_player.stats.agility);
    lr_player.stats.dexterity = 0;
    BankValueSetFromInt(lr_player.banks.dragonBank, "De", lr_player.hand, lr_player.stats.dexterity);
    lr_player.stats.intelligence = 0;
    BankValueSetFromInt(lr_player.banks.dragonBank, "Int", lr_player.hand, lr_player.stats.intelligence);
    lr_player.stats.strength = 0;
    BankValueSetFromInt(lr_player.banks.dragonBank, "Str", lr_player.hand, lr_player.stats.strength);
    lr_player.stats.vitality = 0;
    BankValueSetFromInt(lr_player.banks.dragonBank, "Vi", lr_player.hand, lr_player.stats.vitality);
    lr_player.stats.attributePoints = 5;
    BankValueSetFromInt(lr_player.banks.dragonBank, "AP", lr_player.hand, lr_player.stats.attributePoints);
    // DSN
    lr_player.verification.dragon = true;
    UnitInventoryCreate(lr_player.dragon, "BasicClaws");
    UnitInventoryCreate(lr_player.dragon, "BasicSpines");
  }
  PlayerGroupAdd(gv_humanPlayers, lr_player.player);
  UnitGroupAdd(gv_dragons, lr_player.dragon);
  UnitControlGroupAddUnit(lr_player.player, 1, lr_player.dragon);
  if ((UnitGetPropertyFixed(lr_player.dragon, c_unitPropLevel, c_unitPropCurrent) == 100.0) && lr_player.state.beatGame) {
    UnitXPGainEnable(lr_player.dragon, null, false);
    HelpPanelAddTip(lr_player.playerGroupSingle, libNtve_gf_FormatTipTitle(StringExternal("Param/Value/95517AFD"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/BC7D2081"), StringExternal("Param/Value/FC8D3D85"), "Dragon Songs\\btn-ability-zerg-consume-red.dds");
  }
}
// ------------------------------------------------------------
void gf_InitializePlayers () {
  int lv_playerIndex;
  int lv_otherPlayer;
  playerData_r lr_player;

  // Loops through all players to initialize each one.
  for (lv_playerIndex = 0; lv_playerIndex < 4; lv_playerIndex += 1) {
    lr_player = gv_players[lv_playerIndex];
    lr_player.player = lv_playerIndex + 1;
    lr_player.playerGroupSingle = PlayerGroupSingle(lr_player.player);
    if ((PlayerStatus(lr_player.player) == c_playerStatusActive) && (PlayerType(lr_player.player) == c_playerTypeUser)) {
      lr_player.hand = PlayerHandle(lr_player.player);

      if (GameAttributePlayerValue("1", lr_player.player) == "0001") {
        lr_player.type = ge_Type_FireDragon;
      } else if (GameAttributePlayerValue("1", lr_player.player) == "0002") {
        lr_player.type = ge_Type_IceDragon;
      }

      // Temporary until I handle setup of player.
      gf_SetupPlayer(lr_player);
      libNtve_gf_PauseUnit(lr_player.dragon, true);
      MeleeSetOption(lr_player.player, c_meleeOptionSplitResources, false);
      PlayerSetState(lr_player.player, c_playerStateDisplayGameResult, false);
      // Loop through all players to set ally values for other players.
      for (lv_otherPlayer = 1;lv_otherPlayer<5;lv_otherPlayer+=1) {
        // Only set ally value if player isn't other.
        if (lr_player.player != lv_otherPlayer) {
          PlayerSetAlliance(lr_player.player, c_allianceIdTrade, lv_otherPlayer, false);
        }
      }
      libNtve_gf_SetAlliance(lr_player.player, 15, libNtve_ge_AllianceSetting_Enemy);
      gf_StatCheck(lr_player);
      gf_LoadStackCounts(lr_player);
      gf_ReapplyBuffs(lr_player);
      gf_ChangeItemsOwner(lr_player);
      gf_LoadSkills(lr_player);
      gf_LoadStash(lr_player);
      UnitSelect(lr_player.dragon, lr_player.player, true);
      lr_player.stats.arena.wins = BankValueGetAsInt(lr_player.banks.dragonBank, "Wins", lr_player.hand);
      lr_player.stats.arena.losses = BankValueGetAsInt(lr_player.banks.dragonBank, "Losses", lr_player.hand);
    }
  }
}
// ---------------------------------------------------------------
void gf_OcculusPingPlayer(playerData_r lr_player) {
  UnitGroupLoopBegin(UnitGroupAlliance(lr_player.player, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lr_player.dragon), 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1000));
  for ( ; !UnitGroupLoopDone(); UnitGroupLoopStep() ) {
    libNtve_gf_CreatePingFacingAngle(lr_player.playerGroupSingle, "PingNumeric0", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 6.0, 270.0);
    PingSetScale(PingLastCreated(), 0.2);
    PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
  }
  UnitGroupLoopEnd();
}
// --------------------------------------------------------------
void initMapScript () {
  FakeInitLibs();
  FakeInitGlobals();
  aiDF9A5388_waves_init();
  ai665651A4_waves_init();
  FakeInitCustomAI();
  FakeInitTriggers();
}
